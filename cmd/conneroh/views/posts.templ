package views

import (
	"fmt"
	"github.com/conneroisu/conneroh.com/cmd/conneroh/layouts"
	"github.com/conneroisu/conneroh.com/internal/data/master"
	"time"
)

templ Posts(
	posts *[]master.FullPost,
	fullProjects *[]master.FullProject,
	fullTags *[]master.FullTag,
	fullPostsSlugMap *map[string]master.FullPost,
	fullProjectsSlugMap *map[string]master.FullProject,
	fullTagsSlugMap *map[string]master.FullTag,
) {
	<div
		class="container mx-auto px-4 py-8"
		x-data="{
			posts: [],
			searchQuery: '',
			selectedTag: '',
			tags: [],
			isLoading: true,
			
			init() {
				// Initialize posts from the rendered template data
				this.posts = Array.from(document.querySelectorAll('[data-post-id]')).map(post => ({
					id: post.getAttribute('data-post-id'),
					title: post.getAttribute('data-post-title'),
					description: post.getAttribute('data-post-description'),
					slug: post.getAttribute('data-post-slug'),
					date: post.getAttribute('data-post-date'),
					banner: post.getAttribute('data-post-banner'),
					tags: JSON.parse(post.getAttribute('data-post-tags') || '[]')
				}));
				
				// Extract all unique tags
				const allTags = new Set();
				this.posts.forEach(post => {
					post.tags.forEach(tag => allTags.add(tag.name));
				});
				this.tags = Array.from(allTags).sort();
				
				// Check URL for existing tags or search parameters
				const urlParams = new URLSearchParams(window.location.search);
				this.searchQuery = urlParams.get('q') || '';
				this.selectedTag = urlParams.get('tag') || '';
				
				// Hide loading screen after small delay for better transition
				setTimeout(() => this.isLoading = false, 300);
			},
			
			filteredPosts() {
				return this.posts.filter(post => {
					const matchesSearch = this.searchQuery === '' || 
						post.title.toLowerCase().includes(this.searchQuery.toLowerCase()) ||
						post.description.toLowerCase().includes(this.searchQuery.toLowerCase());
				
					const matchesTag = this.selectedTag === '' ||
						post.tags.some(tag => tag.name === this.selectedTag);
				
					return matchesSearch && matchesTag;
				});
			},
			
			updateURL() {
				// Update URL with current filters without page reload
				const params = new URLSearchParams();
				if (this.searchQuery) params.set('q', this.searchQuery);
				if (this.selectedTag) params.set('tag', this.selectedTag);

				const newURL = window.location.pathname + 
					(params.toString() ? '?' + params.toString() : '');

				window.history.replaceState({}, '', newURL);
			},
			
			clearFilters() {
				this.searchQuery = '';
				this.selectedTag = '';
				this.updateURL();
			}
		}"
	>
		<h1 class="text-3xl font-bold mb-6 text-gray-900 dark:text-white">Blog Posts</h1>
		<!-- Search and Filter Controls -->
		@layouts.Searcher(
			"searchQuery",
			"selectedTag",
			"Search posts...",
			"All Tags",
			"tags",
			"updateURL()",
			"updateURL()",
		)
		<!-- Results info -->
		@layouts.SearchResultInfo("posts", "filteredPosts()")
		<!-- Loading state -->
		<div x-show="isLoading" x-transition>
			@layouts.LoadingState()
		</div>
		<!-- Posts Grid -->
		<div
			class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
			x-show="!isLoading"
			x-transition:enter="transition ease-out duration-300"
			x-transition:enter-start="opacity-0 transform scale-95"
			x-transition:enter-end="opacity-100 transform scale-100"
		>
			<!-- Hidden data elements for Alpine to process -->
			if posts != nil {
				for _, post := range *posts {
					<div
						class="hidden"
						data-post-id={ fmt.Sprintf("%d", post.ID) }
						data-post-title={ post.Title }
						data-post-description={ post.Description }
						data-post-slug={ post.Slug }
						data-post-date={ formatDate(post.CreatedAt) }
						data-post-banner={ post.BannerUrl }
						data-post-tags={ formatTags(post.Tags) }
					></div>
				}
			}
			<!-- Template for displaying posts -->
			<template x-for="post in filteredPosts()" :key="post.id">
				<div
					class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1"
					x-transition:enter="transition ease-out duration-200"
					x-transition:enter-start="opacity-0 transform translate-y-4"
					x-transition:enter-end="opacity-100 transform translate-y-0"
				>
					<a
						hx-target="#bodiody"
						hx-swap="outerHTML"
						hx-trigger="click"
						:hx-replace-url="/post/{post.slug}"
						:hx-get="`/hateoas/morphs/post/${post.slug}`"
						class="block"
					>
						<div class="relative">
							<img
								:src="post.banner || '/dist/placeholder.jpg'"
								:alt="post.title"
								class="w-full h-48 object-cover object-center"
								loading="lazy"
							/>
							<div
								class="absolute bottom-0 right-0 bg-blue-500 text-white text-xs px-2 py-1 rounded-tl-md"
								x-text="post.date"
							></div>
						</div>
						<div class="p-6">
							<h2
								class="text-xl font-semibold text-gray-900 dark:text-white mb-3 line-clamp-2"
								x-text="post.title"
							></h2>
							<p
								class="text-gray-600 dark:text-gray-300 mb-4 line-clamp-3"
								x-text="post.description"
							></p>
							<div class="flex flex-wrap gap-2 mb-4">
								<template x-for="tag in post.tags" :key="tag.id">
									<span
										class="ctag"
										x-text="tag.name"
										@click.stop="selectedTag = tag.name; updateURL()"
									></span>
								</template>
							</div>
							<div class="flex justify-between items-center">
								<span class="text-blue-600 dark:text-blue-400 hover:underline text-sm font-medium flex items-center group">
									Read More
									<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1 transition-transform duration-200 transform group-hover:translate-x-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
									</svg>
								</span>
							</div>
						</div>
					</a>
				</div>
			</template>
		</div>
		<!-- Empty state -->
		@layouts.EmptySearchResults("filteredPosts()", "clearFilters()")
	</div>
}

// Individual Post component
templ Post(
	post *master.FullPost,
	fullPosts *[]master.FullPost,
	fullProjects *[]master.FullProject,
	fullTags *[]master.FullTag,
	fullPostSlugMap *map[string]master.FullPost,
	fullProjectSlugMap *map[string]master.FullProject,
	fullTagSlugMap *map[string]master.FullTag,
) {
	<article class="container mx-auto px-4 py-8 max-w-3xl">
		<div class="mb-8">
			<h1
				class="text-4xl font-bold text-gray-900 dark:text-white mb-4"
			>
				{ post.Title }
			</h1>
			<div
				class="flex items-center text-gray-500 dark:text-gray-400 mb-6"
			>
				<time
					datetime={ time.Unix(post.CreatedAt, 0).Format("2006-01-02") }
				>
					{ formatDate(post.CreatedAt) }
				</time>
				<span class="mx-2">â€¢</span>
				<span>{ readTime(post.Content) } min read</span>
			</div>
			<div class="flex flex-wrap gap-2 mb-8">
				for _, tag := range post.Tags {
					<a
						href={ templ.SafeURL(fmt.Sprintf("/tag/%s", tag.Slug)) }
						class="ctag"
					>
						{ tag.Slug }
					</a>
				}
			</div>
			if post.BannerUrl != "" {
				<img
					src={ post.BannerUrl }
					alt={ post.Title }
					class="w-full h-64 md:h-96 object-cover object-center rounded-lg shadow-md mb-8"
				/>
			}
		</div>
		<div
			class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden p-6 mb-8"
		>
			<h2
				class="text-2xl font-semibold text-gray-900 dark:text-white mb-4"
			>
				Content
			</h2>
			<div
				class="prose prose-lg prose-headings:mt-6 prose-headings:mb-4 prose-p:my-4 prose-ul:my-4 prose-li:my-2 prose-pre:my-6 max-w-none text-gray-700 dark:text-gray-300 leading-relaxed"
			>
				@templ.Raw(post.Content)
			</div>
		</div>
		if len(post.Projects) > 0 {
			<div class="mt-12 border-t border-gray-200 dark:border-gray-700 pt-8">
				<h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">
					Related Projects
				</h2>
				<div
					class="grid grid-cols-1 md:grid-cols-2 gap-4"
				>
					for _, project := range post.Projects {
						<a
							href={ templ.SafeURL(fmt.Sprintf("/project/%s", project.Slug)) }
							class="flex items-center p-4 bg-gray-50 dark:bg-gray-800 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
						>
							<div>
								<h3
									class="font-medium text-gray-900 dark:text-white"
								>
									{ project.Slug }
								</h3>
								<p
									class="text-gray-500 dark:text-gray-400 text-sm line-clamp-2"
								>
									{ project.Description }
								</p>
							</div>
						</a>
					}
				</div>
			</div>
		}
	</article>
}
