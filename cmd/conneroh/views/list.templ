package views

import (
	"fmt"
	"github.com/conneroisu/conneroh.com/cmd/conneroh/components"
	"github.com/conneroisu/conneroh.com/cmd/conneroh/layouts"
	"github.com/conneroisu/conneroh.com/internal/data/master"
)

type ListTarget = string

const (
	ListTargetPosts       ListTarget = "posts"
	ListTargetProjects    ListTarget = "projects"
	ListTargetTags        ListTarget = "tags"
	ListTargetEmployments ListTarget = "employments"
)

templ Search(
	target ListTarget,
) {
	<input
		class="form-control"
		type="search"
		name="search"
		placeholder={ fmt.Sprintf("Search %s...", target) }
		hx-post={ fmt.Sprintf("/search/%s", target) }
		hx-trigger="input changed delay:500ms, keyup[key=='Enter'], load"
		hx-target="#search-results"
		hx-indicator=".htmx-indicator"
	/>
}

templ List(
	target ListTarget,
	posts *[]master.FullPost,
	projects *[]master.FullProject,
	tags *[]master.FullTag,
	fullPostsSlugMap *map[string]master.FullPost,
	fullProjectsSlugMap *map[string]master.FullProject,
	fullTagsSlugMap *map[string]master.FullTag,
) {
	<div
		class="container mx-auto px-4 py-8"
	>
		<h1 class="text-3xl font-bold mb-6 text-gray-900 dark:text-white">Blog Posts</h1>
		@layouts.Searcher(
			"searchQuery",
			"selectedTag",
			"Search posts...",
			"All Tags",
			"tags",
			"updateURL()",
			"updateURL()",
		)
		<div
			id={ fmt.Sprintf("list-%s", target) }
			class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
		>
			switch target {
				case ListTargetPosts:
					for _, post := range *posts {
						@components.PostEmbed(&post)
					}
				case ListTargetProjects:
					for _, project := range *projects {
						@components.ProjectEmbed(&project)
					}
				case ListTargetTags:
					@tagsTempl(
						posts,
						projects,
						tags,
						fullPostsSlugMap,
						fullProjectsSlugMap,
						fullTagsSlugMap,
					)
			}
		</div>
	</div>
}

templ postsTempl(
	posts *[]master.FullPost,
	projects *[]master.FullProject,
	tags *[]master.FullTag,
	fullPostsSlugMap *map[string]master.FullPost,
	fullProjectsSlugMap *map[string]master.FullProject,
	fullTagsSlugMap *map[string]master.FullTag,
) {
	<div
		class="container mx-auto px-4 py-8"
	>
		<h1 class="text-3xl font-bold mb-6 text-gray-900 dark:text-white">Blog Posts</h1>
		@layouts.Searcher(
			"searchQuery",
			"selectedTag",
			"Search posts...",
			"All Tags",
			"tags",
			"updateURL()",
			"updateURL()",
		)
		<div
			class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
		>
			<!-- Hidden data elements for Alpine to process -->
			if posts != nil {
				for _, post := range *posts {
					@components.PostEmbed(&post)
				}
			}
		</div>
	</div>
}

templ projectsTempl(
	posts *[]master.FullPost,
	projects *[]master.FullProject,
	tags *[]master.FullTag,
	fullPostsSlugMap *map[string]master.FullPost,
	fullProjectsSlugMap *map[string]master.FullProject,
	fullTagsSlugMap *map[string]master.FullTag,
) {
	<div
		class="container mx-auto px-4 py-8"
	>
		<h1
			class="text-3xl font-bold mb-6 text-gray-900 dark:text-white"
		>
			Projects
		</h1>
		// Search and Filter Controls using the Searcher component
		@layouts.Searcher(
			"searchQuery",
			"selectedTag",
			"Search projects...",
			"All Tags",
			"tags",
			"updateURL()",
			"updateURL()",
		)
		// Results info
		@layouts.SearchResultInfo("projects", "filteredProjects()")
		// Projects Grid
		<div
			class="grid sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 grid-cols-1 gap-6"
		>
			// Hidden data elements for Alpine to process
			if projects != nil {
				for _, project := range *projects {
					@components.ProjectEmbed(&project)
				}
			}
		</div>
	</div>
}

templ tagsTempl(
	posts *[]master.FullPost,
	projects *[]master.FullProject,
	tags *[]master.FullTag,
	fullPostsSlugMap *map[string]master.FullPost,
	fullProjectsSlugMap *map[string]master.FullProject,
	fullTagsSlugMap *map[string]master.FullTag,
) {
	<div
		class="container mx-auto px-4 py-8"
	>
		<h1
			class="text-3xl font-bold mb-6 text-gray-900 dark:text-white"
		>
			Tags
		</h1>
		// Search and Filter Controls using the Searcher component
		@layouts.Searcher(
			"searchQuery",
			"selectedSection",
			"Search tags...",
			"All Sections",
			"sections",
			"",
			"",
		)
		// Results Info
		@layouts.SearchResultInfo("tags", "filteredTags()")
		// Hidden tag data for Alpine
		if tags != nil {
			// Create a nested map for sections
			for _, tag := range *tags {
				<div
					class="hidden"
					data-tag-id={ fmt.Sprintf("%d", tag.ID) }
					data-tag-name={ tag.Title }
					data-tag-description={ tag.Description }
					data-tag-slug={ tag.Slug }
					data-tag-section={ templ.EscapeString(getTagSection(tag.Slug)) }
					data-tag-posts-count={ fmt.Sprintf("%d", len(tag.Posts)) }
					data-tag-icon={ tag.Icon }
					data-tag-projects-count={ fmt.Sprintf("%d", len(tag.Projects)) }
				></div>
			}
		}
		// Tags Grid
		<div
			x-show="!isLoading"
			class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
		></div>
	</div>
}

templ worksTempl(
	posts *[]master.FullPost,
	projects *[]master.FullProject,
	tags *[]master.FullTag,
	fullPostsSlugMap *map[string]master.FullPost,
	fullProjectsSlugMap *map[string]master.FullProject,
	fullTagsSlugMap *map[string]master.FullTag,
) {
}
