package views

import (
	"fmt"
	"github.com/conneroisu/conneroh.com/internal/data/gen"
	"github.com/conneroisu/conneroh.com/internal/hx"
	"github.com/conneroisu/conneroh.com/internal/routing"
	"github.com/conneroisu/twerge"
	"strconv"
)

const (
	activeBtnStyle   = "px-3 py-2 rounded-md bg-blue-600 text-white font-medium"
	inactiveBtnStyle = "px-3 py-2 rounded-md border border-gray-700 bg-gray-800 text-gray-300 hover:bg-gray-700 transition-colors"
	ellipsisStyle    = "px-2 py-1 text-gray-400"
)

templ search(
	target routing.PluralPath,
	query string,
) {
	<div
		class={ twerge.It("p-3 border-gray-700 border-b") }
	>
		<div
			class={ twerge.It("relative") }
		>
			<input
				id="search"
				class={ twerge.It("text-white border-gray-600 rounded-md focus:outline-none bg-gray-700 border focus:ring-blue-500 w-full focus:ring-2 pr-4 py-2 pl-10") }
				placeholder={ fmt.Sprintf("Search %s...", target) }
				hx-get={ fmt.Sprintf("/search/%s", target) }
				hx-target="#listi"
				value={ query }
				name="search"
				hx-push-url="true"
				hx-trigger="keyup changed delay:300ms"
				hx-indicator="#search-indicator"
				aria-label="Local Search"
			/>
			<div
				class={ twerge.It("text-gray-500 absolute left-3 top-2.5") }
			>
				@icon("search", templ.Attributes{})
			</div>
			<div
				id="search-indicator"
				class={ twerge.It("htmx-indicator absolute right-3 top-2.5 text-blue-500") }
			>
				<svg
					class={ twerge.It("animate-spin h-5 w-5") }
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
				>
					<circle
						class={ twerge.It("opacity-25") }
						cx="12"
						cy="12"
						r="10"
						stroke="currentColor"
						stroke-width="4"
					></circle>
					<path
						class={ twerge.It("opacity-75") }
						fill="currentColor"
						d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
					></path>
				</svg>
			</div>
		</div>
		<div
			id={ fmt.Sprintf("list-suggest-%s", target) }
			class={ twerge.It("mt-2") }
		></div>
	</div>
}

templ List(
	target routing.PluralPath,
	posts *[]*gen.Post,
	projects *[]*gen.Project,
	tags *[]*gen.Tag,
	query string,
	page int,
	pageCount int,
) {
	<div
		class={ twerge.It("py-8 px-4 container mx-auto") }
	>
		<h1
			class={ twerge.It("text-white text-3xl font-bold mb-6") }
		>
			Search { target }
		</h1>
		@search(
			target,
			query,
		)
		@Results(
			target,
			posts,
			projects,
			tags,
			page,
			pageCount,
		)
	</div>
}

// Main pagination component
templ pagination(page, pageCount int, target routing.PluralPath) {
	if pageCount > 1 {
		<div class={ twerge.It("flex justify-center items-center mt-8 space-x-2") }>
			@previousPageButton(page, target)
			<div class={ twerge.It("hidden md:flex space-x-2") }>
				@renderPageNumbers(page, pageCount, target, routing.MaxDesktopPageNumber)
			</div>
			<div class={ twerge.It("flex md:hidden space-x-2") }>
				@renderPageNumbers(page, pageCount, target, routing.MaxMobilePageNumber)
			</div>
			@nextPageButton(page, pageCount, target)
		</div>
	}
}

// Helper to render pagination numbers based on device (mobile or desktop)
templ renderPageNumbers(page, pageCount int, target routing.PluralPath, maxPageNumber int) {
	for _, pageNum := range routing.GeneratePagination(page, pageCount, routing.MaxMobilePageNumber) {
		@pageButton(pageNum, page, target)
	}
}

// Reusable page button component
templ pageButton(pageNum string, currentPage int, target routing.PluralPath) {
	if pageNum == strconv.Itoa(currentPage) {
		<span class={ twerge.It(activeBtnStyle) }>
			{ pageNum }
		</span>
	} else {
		if pageNum == "..." {
			@icon("ellipsis", templ.Attributes{
				"class": twerge.It(ellipsisStyle),
			})
		} else {
			<a
				hx-get={ fmt.Sprintf("/search/%s?page=%s", target, pageNum) }
				name="pager"
				hx-target="#listi"
				hx-include="[name='search']"
				hx-push-url="true"
				class={ twerge.It(inactiveBtnStyle) }
			>
				{ pageNum }
			</a>
		}
	}
}

// Previous page button
templ previousPageButton(currentPage int, target routing.PluralPath) {
	if currentPage > 1 {
		<a
			hx-get={ fmt.Sprintf("/search/%s?page=%d", target, currentPage-1) }
			hx-target="#listi"
			hx-include="[name='search']"
			hx-push-url="true"
			class={ twerge.It(inactiveBtnStyle + " flex items-center") }
			aria-label="Previous page"
		>
			@icon("chevron-left", templ.Attributes{})
		</a>
	} else {
		<span
			class={ twerge.It(inactiveBtnStyle + " opacity-50 flex items-center") }
			aria-disabled="true"
		>
			@icon("chevron-left", templ.Attributes{})
		</span>
	}
}

// Next page button
templ nextPageButton(currentPage, pageCount int, target routing.PluralPath) {
	if currentPage < pageCount {
		<a
			hx-get={ fmt.Sprintf("/search/%s?page=%d", target, currentPage+1) }
			hx-target="#listi"
			hx-include="[name='search']"
			hx-swap="innerHTML"
			hx-push-url="true"
			class={ twerge.It(inactiveBtnStyle + " flex items-center") }
			aria-label="Next page"
		>
			@icon("chevron-right", templ.Attributes{})
		</a>
	} else {
		<span
			class={ twerge.It(inactiveBtnStyle + " opacity-50 flex items-center") }
			aria-disabled="true"
		>
			@icon("chevron-right", templ.Attributes{})
		</span>
	}
}

templ Results(
	target routing.PluralPath,
	posts *[]*gen.Post,
	projects *[]*gen.Project,
	tags *[]*gen.Tag,
	page, pageCount int,
) {
	<div
		id="listi"
	>
		<div
			class={ twerge.It("py-2 px-4 container mx-auto") }
		>
			@pagination(page, pageCount, target)
		</div>
		<div
			class={ twerge.It("md:grid-cols-2 lg:grid-cols-3 gap-6 grid grid-cols-1") }
		>
			switch target {
				case routing.PostPluralPath:
					for i, post := range *posts {
						if i < routing.MaxListLargeItems {
							@listPostItem(post)
						}
					}
				case routing.ProjectPluralPath:
					for i, project := range *projects {
						if i < routing.MaxListLargeItems {
							@listProjectItem(project)
						}
					}
				case routing.TagsPluralPath:
					for i, tag := range *tags {
						if i < routing.MaxListSmallItems {
							@listTagItem(tag)
						}
					}
			}
		</div>
	</div>
}

templ listProjectItem(project *gen.Project) {
	<div
		class={ twerge.It("transition-all flex transform hover:-translate-y-3 duration-300 rounded-lg overflow-hidden flex-col h-full bg-gray-800 hover:shadow-lg p-6 shadow-md") }
		aria-label={ project.Title }
	>
		<a
			hx-target={ hx.Bodiody.Sel }
			hx-get={ project.MorphPath() }
			hx-push-url={ project.PagePath() }
			class={ twerge.It("cursor-pointer h-full") }
			preload="mouseover"
		>
			@image(
				project.BannerPath,
				project.Title,
				twerge.It("w-full h-48 object-cover"),
			)
			<div
				class={ twerge.It("flex-grow flex-col flex p-6") }
			>
				<h2
					class={ twerge.It("text-white line-clamp-2 mb-3 text-xl hover:underline font-semibold") }
				>
					{ project.Title }
				</h2>
				<p
					class={ twerge.It("mb-4 line-clamp-2 text-gray-300") }
				>
					{ project.Description }
				</p>
				<div
					class={ twerge.It("grid flex-wrap gap-2 mb-4 grid-cols-2") }
					x-data="{ po_open: false }"
				>
					for i, tag := range project.Tags {
						if i < 8 {
							@TagControl(tag)
						} else {
							@icon("ellipsis", templ.Attributes{
								"class":           twerge.It("w-full text-blue-200 px-3 items-center flex-row flex text-sm bg-blue-900 transition-colors py-1 hover:bg-blue-800 justify-between font-medium h-8 rounded-full hover:underline"),
								"x-on:mouseover":  "po_open = true",
								"x-on:mouseleave": "po_open = false",
								"x-on:click":      "po_open = !po-open",
							})
						}
					}
				</div>
			</div>
			<a
				class={ twerge.It("left-0 flex bottom-5 font-medium hover:underline items-center right-0 text-sm justify-center text-blue-400 absolute") }
			>
				Read More
				@icon("arrow-right", templ.Attributes{})
			</a>
			<span
				class={ twerge.It("bg-red-500 py-1 text-gray-200 bottom-0 left-0 px-2 absolute text-xs rounded-tr-md") }
			>
				{ strconv.Itoa(len(project.Posts)) } posts
			</span>
			<span
				class={ twerge.It("right-0 px-2 text-gray-200 text-xs bottom-0 rounded-tl-md bg-blue-500 py-1 absolute") }
			>
				{ strconv.Itoa(len(project.Tags)) } tags
			</span>
		</a>
	</div>
}

templ listTagItem(tag *gen.Tag) {
	<a
		hx-target={ hx.Bodiody.Sel }
		hx-get={ tag.MorphPath() }
		hx-push-url={ tag.PagePath() }
		class={ twerge.It("p-6 rounded-lg overflow-hidden bg-gray-800 shadow-md hover:shadow-lg duration-300 transform transition-all hover:-translate-y-1") }
		preload="mouseover"
		aria-label={ tag.Title }
	>
		<div
			class={ twerge.It("flex items-center justify-between mb-3 p-6") }
		>
			<h2
				class={ twerge.It("text-xl font-semibold text-white") }
			>
				{ tag.Title }
			</h2>
			<div
				class={ twerge.It("rounded-full flex h-8 justify-center items-center bg-gray-700 w-8") }
			>
				@icon(tag.Icon, templ.Attributes{"class": "stoke-white"})
			</div>
		</div>
		<div
			class={ twerge.It("mb-4 line-clamp-2 text-gray-300") }
		>
			{ tag.Description }
		</div>
		<span
			class={ twerge.It("bg-red-500 py-1 text-gray-200 bottom-0 left-0 px-2 absolute text-xs rounded-tr-md") }
		>
			{ strconv.Itoa(len(tag.Posts)) } posts
		</span>
		<span
			class={ twerge.It("right-0 px-2 text-gray-200 text-xs bottom-0 rounded-tl-md bg-blue-500 py-1 absolute") }
		>
			{ strconv.Itoa(len(tag.Projects)) } projects
		</span>
	</a>
}

templ listPostItem(post *gen.Post) {
	<div
		class={ twerge.It("p-6 rounded-lg overflow-hidden bg-gray-800 shadow-md hover:shadow-lg duration-300 transform transition-all hover:-translate-y-1") }
		x-transition:enter={ twerge.It("duration-200 transition ease-out") }
		x-transition:enter-start={ twerge.It("translate-y-4 opacity-0 transform") }
		x-transition:enter-end={ twerge.It("transform translate-y-0 opacity-100") }
		aria-label={ post.Title }
	>
		<a
			hx-target={ hx.Bodiody.Sel }
			hx-get={ post.MorphPath() }
			hx-push-url={ post.PagePath() }
			class={ twerge.It("block cursor-pointer") }
			preload="mouseover"
		>
			@image(
				post.BannerPath,
				post.Title,
				twerge.It("w-full h-48 object-cover"),
			)
			<div
				class={ twerge.It("p-6") }
			>
				<h2
					class={ twerge.It("text-white line-clamp-2 mb-3 text-xl hover:underline font-semibold") }
				>
					{ post.Title }
				</h2>
				<p
					class={ twerge.It("mb-4 line-clamp-2 text-gray-300") }
				>
					{ post.Description }
				</p>
				<div
					class={ twerge.It("grid flex-wrap gap-2 mb-4 grid-cols-2") }
					x-data="{ allTags: false }"
				>
					for i, tag := range post.Tags {
						if i < 8 {
							@TagControl(tag)
						} else {
							<div x-show="allTags">
								@TagControl(tag)
							</div>
						}
					}
					if len(post.Tags) > 8 {
						<button
							type="button"
							class={ twerge.It("w-full text-blue-200 px-3 items-center flex-row flex text-sm bg-blue-900 transition-colors py-1 hover:bg-blue-800 justify-between font-medium h-8 rounded-full hover:underline") }
							x-on:click.stop="allTags = !allTags"
							x-show="!allTags"
						>
							@icon("ellipsis", templ.Attributes{})
							<span>Show more tags ({ strconv.Itoa(len(post.Tags) - 8) })</span>
						</button>
						<button
							type="button"
							class={ twerge.It("w-full text-blue-200 px-3 items-center flex-row flex text-sm bg-blue-900 transition-colors py-1 hover:bg-blue-800 justify-between font-medium h-8 rounded-full hover:underline") }
							x-on:click.stop="allTags = !allTags"
							x-show="allTags"
						>
							@icon("minus", templ.Attributes{})
							<span>Show less</span>
						</button>
					}
				</div>
			</div>
			<a
				class={ twerge.It("left-0 flex bottom-5 font-medium hover:underline items-center right-0 text-sm justify-center text-blue-400 absolute") }
			>
				Read More
				@icon("arrow-right", templ.Attributes{})
			</a>
			<span
				class={ twerge.It("bg-red-500 py-1 text-gray-200 bottom-0 left-0 px-2 absolute text-xs rounded-tr-md") }
			>
				{ strconv.Itoa(len(post.Tags)) } tags | { strconv.Itoa(len(post.Projects)) } projects
			</span>
			<div
				class={ twerge.It("rounded-tl-md px-2 text-xs py-1 text-white absolute right-0 bottom-0 bg-blue-500") }
			>
				{ post.CreatedAt.Format("Jan 02, 2006") }
			</div>
		</a>
	</div>
}
