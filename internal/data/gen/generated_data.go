// Code generated by genstruct. DO NOT EDIT.
// Package gen contains auto-generated Post data
//
// genstruct Version: v0.1.7
package gen

import (
	assets "github.com/conneroisu/conneroh.com/internal/assets"
	"time"
)

var PostMakingVivadoNotSuckAtGit = assets.Post{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"making-vivado-not-suck-at-git\"><a class=\"anchor permalink p-4\" href=\"#making-vivado-not-suck-at-git\">#</a> Making Vivado not suck at Git</h1>\n<p>Vivado is a great tool for prototyping and simulation, but it's not really<br>\ngreat for version control. I've been using Vivado for a while now inside of<br>\n<a href=\"/tags/edu/iastate/cpre488\">CPRE 488</a>, and I've found that it's really<br>\ndifficult to use Git with Vivado.</p>\n<h2 id=\"the-problem\"><a class=\"anchor permalink p-4\" href=\"#the-problem\">#</a> The Problem</h2>\n<p>Vivado creates a lot of files</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 10, 0, time.UTC),
	Description:     "Post on how I made Vivado not suck at Git",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{"cpre488-mp2"},
	Projects:        []*assets.Project{&ProjectCpre488Mp2},
	RawContent:      "---\nid: making-vivado-not-suck-at-git\naliases:\n  - Making Vivado not suck at Git\ntags:\n  - ide/vivado\n  - vcs/git\n  - edu/iastate/cpre488\ncreated_at: 2025-03-27T14:13:10.000-06:00\ndescription: Post on how I made Vivado not suck at Git\nprojects:\n  - cpre488-mp2\ntitle: Making Vivado not suck at Git\nupdated_at: 2025-03-28T20:07:29.000-06:00\n---\n\n# Making Vivado not suck at Git\n\nVivado is a great tool for prototyping and simulation, but it's not really\ngreat for version control. I've been using Vivado for a while now inside of\n[CPRE 488](/tags/edu/iastate/cpre488), and I've found that it's really\ndifficult to use Git with Vivado.\n\n## The Problem\n\nVivado creates a lot of files\n",
	Slug:            "making-vivado-not-suck-at-git",
	TagSlugs:        []string{"ide/vivado", "vcs/git", "edu/iastate/cpre488"},
	Tags:            []*assets.Tag{&TagIdeVivado, &TagVcsGit, &TagEduIastateCpre488},
	Title:           "Making Vivado not suck at Git",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 29, 0, time.UTC),
	X:               -0.5922974181948749,
	Y:               0.7900541366982378,
	Z:               -1.0323239247788099,
}}
var PostIastateReflection = assets.Post{Embedded: assets.Embedded{
	BannerPath:      "posts/iastate-reflect.webp",
	Content:         "<h1 id=\"a-reflective-journey-navigating-your-cumulative-experience-at-iowa-state-university\"><a class=\"anchor permalink p-4\" href=\"#a-reflective-journey-navigating-your-cumulative-experience-at-iowa-state-university\">#</a> A Reflective Journey: Navigating Your Cumulative Experience at Iowa State University</h1>\n<h2 id=\"introduction\"><a class=\"anchor permalink p-4\" href=\"#introduction\">#</a> Introduction</h2>\n<p>Reflecting on my journey through Iowa State University, it becomes increasingly clear how my diverse educational experiences, hands-on projects, extracurricular engagements, and professional internships have enriched my engineering capabilities. These experiences have not only shaped my career aspirations but thoroughly prepared me for the challenges and opportunities inherent in the engineering profession. Initially, I approached my academic career with broad curiosity about various engineering disciplines, but as my understanding deepened through coursework and hands-on experience, I became particularly fascinated by embedded systems and artificial intelligence (AI). The practical challenges of integrating hardware and software in embedded systems appealed to my analytical nature, while AI intrigued me with its potential to transform industries and solve complex, real-world problems. These areas allowed me to combine creativity, technical rigor, and innovative problem-solving, aligning closely with my personal strengths and professional aspirations.</p>\n<h2 id=\"cpre-288-embedded-systems\"><a class=\"anchor permalink p-4\" href=\"#cpre-288-embedded-systems\">#</a> CprE 288: Embedded Systems</h2>\n<p>One of the earliest and most formative experiences of my academic career was CprE 288: Embedded Systems. This course provided comprehensive exposure to embedded programming, microcontroller architecture, and hardware-software integration through various labs and projects, culminating in an impactful final project. Throughout the semester, each lab built foundational skills essential for our final project. Early labs introduced us to fundamental concepts such as GPIO and ADC modules, where we learned to interface basic input-output devices and measure distances using IR sensors. In later labs, we transitioned to more complex components, such as the PING ultrasonic sensor for distance measurement bringing me back to my First Tech Challenge (FTC) days. These experiences emphasized the importance of precise timing and calibration, as even minor deviations could lead to measurement inaccuracies.</p>\n<p>In one lab, we specifically worked with PWM to control servo motors, gaining practical experience in precise rotational positioning. This lab informed our approach to controlling the Roomba robot’s navigation in the final project. Another critical lab involved integrating interrupt-driven programming to handle asynchronous events, which became essential in managing sensor data and system responses in real-time.</p>\n<p>In the final project our team wanted to design and develop an embedded system to automate goods delivery using a Roomba robot, inspired by the DoorDash business model. This comprehensive project integrated skills from all preceding labs. Our solution combined a website, a database, and an embedded C program to coordinate deliveries. Detailed requirements gathering, careful system architecture planning, rigorous testing, and iterative improvements characterized our development process.</p>\n<p>Effective project management was another learning oppertunity. The complexity and collaborative nature of the project compelled disciplined task allocation and clear communication. Regular updates allowed us to manage deadlines effectively, reinforcing teamwork and the importance of communication in engineering.</p>\n<p>Initially, I viewed embedded systems as predominantly hardware-oriented; however, this project underscored the equal importance of software integration. Challenges such as integrating the ultrasonic sensor for reliable distance measurement and controlling the servo motor via PWM required extreme attention to software calibration and synchronization.</p>\n<p>Throughout CprE 288, I recognized how minor errors could dramatically affect overall system functionality. Small coding oversights, sensor calibration errors, or slight hardware incompatibilities required vigilant attention to detail and thorough testing. Ultimately, CprE 288 further improved my technical abilities and cultivated essential professional skills such as adaptability, critical thinking, and continuous learning, all vital for my future engineering career.</p>\n<h2 id=\"cpre-488-embedded-systems-design\"><a class=\"anchor permalink p-4\" href=\"#cpre-488-embedded-systems-design\">#</a> CPrE 488: Embedded Systems Design</h2>\n<p>Expanding upon the foundation laid in CprE 288, my journey progressed with the challenging yet rewarding CprE 488, Embedded Systems Design. Throughout CprE 488, several mini-projects greatly enhanced my expertise and broadened my perspective on engineering solutions, societal implications, and professional practices.</p>\n<p>One particularly transformative experience was implementing a Positional Pulse Modulation (PPM) detection and generation system using a Zedboard FPGA, Vivado, and Vitis. This project required comprehensive design using VHDL design, FPGA hardware interfacing, and strategic debugging practices. A crucial engineering challenge was safely managing voltage discrepancies between the FPGA and the HA-T6A RC controller, which involved integrating a Sparkfun Logic Level Converter to ensure the protection of sensitive electronics. This experience reinforced the importance of electrical compatibility and the innovative use of interfacing solutions to preserve hardware integrity.</p>\n<p>A subsequent project focused on camera system integration, I engaged in advanced image processing techniques, including color detection and real-time frame buffering. This project leveraged a complex FPGA pipeline involving VDMA and demosaicing IP cores, demonstrating the practical application of theoretical knowledge in image signal processing and data stream management. The technical rigor of this project cultivated a heightened attention to detail and underscored the critical need for thorough testing and validation phases in design and development cycles.</p>\n<p>Another influential project was developing an embedded Linux environment on the Zedboard, tailored to control a USB-powered missile launcher. This task was multifaceted, involving the configuration and compilation of an open-source Linux kernel, adaptation of Linux drivers, and development of real-time Linux applications. This project further developed my skills in operating system porting and driver development, highlighting the necessity for precise software-hardware synchronization and rigorous system integration. Additionally, this project deepened my understanding of cybersecurity considerations and ethical responsibilities inherent in embedded system deployments, in particular real-time autonomous systems.</p>\n<p>Throughout these projects, effective communication and detailed documentation were pivotal. My experiences in CprE 488 emphasized a comprehensive approach to engineering problems. More specifically, the class reinforced addressing technical, economic, societal, and environmental considerations holistically to solve intricate engineering challenges.</p>\n<h2 id=\"ageds-461-technology-transfer-and-the-role-of-agricultural-and-extension-education\"><a class=\"anchor permalink p-4\" href=\"#ageds-461-technology-transfer-and-the-role-of-agricultural-and-extension-education\">#</a> AGEDS 461: Technology Transfer and the Role of Agricultural and Extension Education</h2>\n<p>My educational journey was enriched by experiences beyond technical realms. General education electives, particularly AGEDS 461, Technology Transfer and the Role of Agricultural and Extension Education, played a critical role in shaping my engineering perspective, further igniting my passion for utilizing AI to address real-world challenges. For my capstone project, I proposed a novel AI-driven approach, employing satellite imagery to evaluate the adoption of agricultural technologies in developing regions. This project deepened my appreciation for the ethical implications of technological interventions and highlighted the importance of providing unbiased, equitable solutions to underserved communities. A key insight from this project was recognizing how satellite imagery could offer transparent, scalable data, enhancing the accuracy and fairness of agricultural technology assessments. This experience challenged my understanding of the global implications of technological advancements and emphasized the ethical responsibilities engineers bear.</p>\n<h2 id=\"other-courses\"><a class=\"anchor permalink p-4\" href=\"#other-courses\">#</a> Other Courses</h2>\n<p>Additional courses such as Arch 321 (History of the American City) and Econ 101 (Principles of Microeconomics) provided me with broader insights into urban development dynamics and fundamental economic theories. These courses enhanced my ability to assess engineering solutions through multifaceted lenses. Holistic awareness is vital in creating innovative and sustainable engineering solutions capable of positively impacting differing populations. Also, these courses improved my critical thinking skills, enabling me to evaluate and propose engineering solutions that consider complex societal interactions and dependencies.</p>\n<h2 id=\"extracurricular-engagements\"><a class=\"anchor permalink p-4\" href=\"#extracurricular-engagements\">#</a> Extracurricular Engagements</h2>\n<p>Outside the classroom, involvement in various extracurricular activities enriched my personal and professional development. Co-founding the Controlled Environments Club at Iowa State University provided invaluable experience in leadership, teamwork, and innovation. This led to the successful establishment of the club in the list of official Iowa State clubs and organizations.</p>\n<p>Serving as a Cardinal Innovation Fellow at the Iowa State University Innovation Center advanced my entrepreneurial skills. In this role, I collaborated closely with industry leaders on commercializing new technologies, gaining firsthand experience in management and market strategies.</p>\n<p>My experience with the Move the World Challenge was especially enlightening, as it involved creating an small scale autonomous transportation solution, a self-driving Cyride mini-bus which navigated a small-scale model of central of central campus. I received mentorship from David Slump, CEO of Merelli. Although my project did not win, the insights and mentorship provided by distinguished industry leaders influenced my perspective on engineering and innovation. Among these mentors were Paul Willard, a partner at Grep VC, provided strategic advice on venture capital and technology investment; Robert Piconi, CEO of Energy Vault, shared insights on energy storage solutions critical to sustainable infrastructure; Dennis Muilenburg, former CEO of Boeing and chairman of New Vista Acquisition Corporation, highlighted the importance of leadership and decision-making in engineering; Hudson Harr, CEO of SkyCurrent, offered expertise in renewable energy and smart grid technologies; and Anthony Sardella, founder of Evolve24, emphasized the role of data analytics in strategic decision-making. This direct exposure to cutting-edge ideas and the wisdom of these industry leaders shaped my understanding of engineering's global, economic, societal, and environmental impacts. It emphasized that successful engineering solutions are those that thoughtfully integrate innovation with practical usability and economic viability.</p>\n<p>Additionally, co-founding Kreative Docuvet, a startup which developed AI-driven assistants for veterinary practices, allowed me to apply my technical expertise in an impactful manner. By creating advanced diarized transcription services and large language model pipelines, we enhanced veterinarians&rsquo; efficiency and accuracy in clinical documentation. I built extensive datasets, capturing one of the largest synthetic &amp; real veterinarian voice corpora globally, providing tools for ongoing advancements in veterinary medicine and artificial intelligence. I especially enjoyed competing for Kreative Docuvet in the Heartland Challenge hosted by the University of Arkansas.</p>\n<p>Together, these extracurricular engagements refined my abilities to communicate complex technological concepts clearly to diverse audiences, enhanced my networking skills and reinforced my dedication to life long learning.</p>\n<p>Professionally, my internships and work experiences served a bridge between academic theory and real-world engineering practices. My internships at Freund-Vector and College Sports Evaluation (CSE) were also instrumental in practically applying academic knowledge. At Freund-Vector, I was responsible for the construction of multiple large PLC powered machine and for modernizing legacy systems from VB6 to C#, enhancing system efficiency and usability. At CSE, I successfully developed a high-throughput data pipeline in Golang, reducing the data processing time from hours to minutes, optimizing database performance, and refining Python-based scripts under challenging constraints. These experiences enhanced my technical skills, adaptability, and resourcefulness in professional environments. Furthermore, my internships reinforced the importance of adhering to professional standards in engineering practices, particularly regarding data security and the responsible deployment of technology.</p>\n<p>My senior design project, Semantic Segmentation Optimization, represents the culmination of my engineering education at Iowa State. This project involves developing an assistive wheelchair technology leveraging advanced AI algorithms for real-time monitoring and improved safety, highlighting the synthesis of complex software systems, sophisticated hardware integration, and disciplined project management. This project has already strengthened my ability to work collaboratively across interdisciplinary teams, integrating software engineering, AI model development, and hardware design to produce a more efficent system.</p>\n<h2 id=\"conclusion\"><a class=\"anchor permalink p-4\" href=\"#conclusion\">#</a> Conclusion</h2>\n<p>In conclusion, my comprehensive journey through Iowa State University has equipped me with essential technical skills, an ethical foundation, and a versatile innovative mindset critical for addressing contemporary engineering challenges. Reflecting upon this journey, I am well-prepared and committed to continuous learning and adaptation, ensuring my engineering contributions positively impact society.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 5, 48, 53, 0, time.UTC),
	Description:     "This is a reflection on my time at Iowa State University.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{"cpre488-mp1", "cpre488-mp2"},
	Projects:        []*assets.Project{&ProjectCpre488Mp1, &ProjectCpre488Mp2},
	RawContent:      "---\nid: iastate-reflection\naliases:\n  - \"A Reflective Journey: Navigating Your Cumulative Experience at Iowa State University\"\ntags:\n  - ide/vivado\n  - ide/vitis\n  - edu/iastate/ageds461\n  - edu/iastate/arch321\n  - edu/iastate/ee201\n  - edu/iastate/ee230\n  - edu/iastate/ee311\n  - edu/iastate/ee332\n  - edu/iastate/cpre281\n  - edu/iastate/cpre288\n  - edu/iastate/cpre488\n  - edu/iastate/cpre381\nbanner_path: posts/iastate-reflect.webp\ncreated_at: 2025-03-27T05:48:53.000-06:00\ndescription: This is a reflection on my time at Iowa State University.\nprojects:\n  - cpre488-mp1\n  - cpre488-mp2\ntitle: A Reflective Journey - Navigating Your Cumulative Experience at Iowa State University\nupdated_at: 2025-04-12T12:07:49.000-06:00\n---\n\n# A Reflective Journey: Navigating Your Cumulative Experience at Iowa State University\n\n## Introduction\n\nReflecting on my journey through Iowa State University, it becomes increasingly clear how my diverse educational experiences, hands-on projects, extracurricular engagements, and professional internships have enriched my engineering capabilities. These experiences have not only shaped my career aspirations but thoroughly prepared me for the challenges and opportunities inherent in the engineering profession. Initially, I approached my academic career with broad curiosity about various engineering disciplines, but as my understanding deepened through coursework and hands-on experience, I became particularly fascinated by embedded systems and artificial intelligence (AI). The practical challenges of integrating hardware and software in embedded systems appealed to my analytical nature, while AI intrigued me with its potential to transform industries and solve complex, real-world problems. These areas allowed me to combine creativity, technical rigor, and innovative problem-solving, aligning closely with my personal strengths and professional aspirations.\n\n## CprE 288: Embedded Systems\n\nOne of the earliest and most formative experiences of my academic career was CprE 288: Embedded Systems. This course provided comprehensive exposure to embedded programming, microcontroller architecture, and hardware-software integration through various labs and projects, culminating in an impactful final project. Throughout the semester, each lab built foundational skills essential for our final project. Early labs introduced us to fundamental concepts such as GPIO and ADC modules, where we learned to interface basic input-output devices and measure distances using IR sensors. In later labs, we transitioned to more complex components, such as the PING ultrasonic sensor for distance measurement bringing me back to my First Tech Challenge (FTC) days. These experiences emphasized the importance of precise timing and calibration, as even minor deviations could lead to measurement inaccuracies.\n\nIn one lab, we specifically worked with PWM to control servo motors, gaining practical experience in precise rotational positioning. This lab informed our approach to controlling the Roomba robot’s navigation in the final project. Another critical lab involved integrating interrupt-driven programming to handle asynchronous events, which became essential in managing sensor data and system responses in real-time.\n\nIn the final project our team wanted to design and develop an embedded system to automate goods delivery using a Roomba robot, inspired by the DoorDash business model. This comprehensive project integrated skills from all preceding labs. Our solution combined a website, a database, and an embedded C program to coordinate deliveries. Detailed requirements gathering, careful system architecture planning, rigorous testing, and iterative improvements characterized our development process.\n\nEffective project management was another learning oppertunity. The complexity and collaborative nature of the project compelled disciplined task allocation and clear communication. Regular updates allowed us to manage deadlines effectively, reinforcing teamwork and the importance of communication in engineering.\n\nInitially, I viewed embedded systems as predominantly hardware-oriented; however, this project underscored the equal importance of software integration. Challenges such as integrating the ultrasonic sensor for reliable distance measurement and controlling the servo motor via PWM required extreme attention to software calibration and synchronization.\n\nThroughout CprE 288, I recognized how minor errors could dramatically affect overall system functionality. Small coding oversights, sensor calibration errors, or slight hardware incompatibilities required vigilant attention to detail and thorough testing. Ultimately, CprE 288 further improved my technical abilities and cultivated essential professional skills such as adaptability, critical thinking, and continuous learning, all vital for my future engineering career.\n\n## CPrE 488: Embedded Systems Design\n\nExpanding upon the foundation laid in CprE 288, my journey progressed with the challenging yet rewarding CprE 488, Embedded Systems Design. Throughout CprE 488, several mini-projects greatly enhanced my expertise and broadened my perspective on engineering solutions, societal implications, and professional practices.\n\nOne particularly transformative experience was implementing a Positional Pulse Modulation (PPM) detection and generation system using a Zedboard FPGA, Vivado, and Vitis. This project required comprehensive design using VHDL design, FPGA hardware interfacing, and strategic debugging practices. A crucial engineering challenge was safely managing voltage discrepancies between the FPGA and the HA-T6A RC controller, which involved integrating a Sparkfun Logic Level Converter to ensure the protection of sensitive electronics. This experience reinforced the importance of electrical compatibility and the innovative use of interfacing solutions to preserve hardware integrity.\n\nA subsequent project focused on camera system integration, I engaged in advanced image processing techniques, including color detection and real-time frame buffering. This project leveraged a complex FPGA pipeline involving VDMA and demosaicing IP cores, demonstrating the practical application of theoretical knowledge in image signal processing and data stream management. The technical rigor of this project cultivated a heightened attention to detail and underscored the critical need for thorough testing and validation phases in design and development cycles.\n\nAnother influential project was developing an embedded Linux environment on the Zedboard, tailored to control a USB-powered missile launcher. This task was multifaceted, involving the configuration and compilation of an open-source Linux kernel, adaptation of Linux drivers, and development of real-time Linux applications. This project further developed my skills in operating system porting and driver development, highlighting the necessity for precise software-hardware synchronization and rigorous system integration. Additionally, this project deepened my understanding of cybersecurity considerations and ethical responsibilities inherent in embedded system deployments, in particular real-time autonomous systems.\n\nThroughout these projects, effective communication and detailed documentation were pivotal. My experiences in CprE 488 emphasized a comprehensive approach to engineering problems. More specifically, the class reinforced addressing technical, economic, societal, and environmental considerations holistically to solve intricate engineering challenges.\n\n## AGEDS 461: Technology Transfer and the Role of Agricultural and Extension Education\n\nMy educational journey was enriched by experiences beyond technical realms. General education electives, particularly AGEDS 461, Technology Transfer and the Role of Agricultural and Extension Education, played a critical role in shaping my engineering perspective, further igniting my passion for utilizing AI to address real-world challenges. For my capstone project, I proposed a novel AI-driven approach, employing satellite imagery to evaluate the adoption of agricultural technologies in developing regions. This project deepened my appreciation for the ethical implications of technological interventions and highlighted the importance of providing unbiased, equitable solutions to underserved communities. A key insight from this project was recognizing how satellite imagery could offer transparent, scalable data, enhancing the accuracy and fairness of agricultural technology assessments. This experience challenged my understanding of the global implications of technological advancements and emphasized the ethical responsibilities engineers bear.\n\n## Other Courses\n\nAdditional courses such as Arch 321 (History of the American City) and Econ 101 (Principles of Microeconomics) provided me with broader insights into urban development dynamics and fundamental economic theories. These courses enhanced my ability to assess engineering solutions through multifaceted lenses. Holistic awareness is vital in creating innovative and sustainable engineering solutions capable of positively impacting differing populations. Also, these courses improved my critical thinking skills, enabling me to evaluate and propose engineering solutions that consider complex societal interactions and dependencies.\n\n## Extracurricular Engagements\n\nOutside the classroom, involvement in various extracurricular activities enriched my personal and professional development. Co-founding the Controlled Environments Club at Iowa State University provided invaluable experience in leadership, teamwork, and innovation. This led to the successful establishment of the club in the list of official Iowa State clubs and organizations.\n\nServing as a Cardinal Innovation Fellow at the Iowa State University Innovation Center advanced my entrepreneurial skills. In this role, I collaborated closely with industry leaders on commercializing new technologies, gaining firsthand experience in management and market strategies.\n\nMy experience with the Move the World Challenge was especially enlightening, as it involved creating an small scale autonomous transportation solution, a self-driving Cyride mini-bus which navigated a small-scale model of central of central campus. I received mentorship from David Slump, CEO of Merelli. Although my project did not win, the insights and mentorship provided by distinguished industry leaders influenced my perspective on engineering and innovation. Among these mentors were Paul Willard, a partner at Grep VC, provided strategic advice on venture capital and technology investment; Robert Piconi, CEO of Energy Vault, shared insights on energy storage solutions critical to sustainable infrastructure; Dennis Muilenburg, former CEO of Boeing and chairman of New Vista Acquisition Corporation, highlighted the importance of leadership and decision-making in engineering; Hudson Harr, CEO of SkyCurrent, offered expertise in renewable energy and smart grid technologies; and Anthony Sardella, founder of Evolve24, emphasized the role of data analytics in strategic decision-making. This direct exposure to cutting-edge ideas and the wisdom of these industry leaders shaped my understanding of engineering's global, economic, societal, and environmental impacts. It emphasized that successful engineering solutions are those that thoughtfully integrate innovation with practical usability and economic viability.\n\nAdditionally, co-founding Kreative Docuvet, a startup which developed AI-driven assistants for veterinary practices, allowed me to apply my technical expertise in an impactful manner. By creating advanced diarized transcription services and large language model pipelines, we enhanced veterinarians' efficiency and accuracy in clinical documentation. I built extensive datasets, capturing one of the largest synthetic & real veterinarian voice corpora globally, providing tools for ongoing advancements in veterinary medicine and artificial intelligence. I especially enjoyed competing for Kreative Docuvet in the Heartland Challenge hosted by the University of Arkansas.\n\nTogether, these extracurricular engagements refined my abilities to communicate complex technological concepts clearly to diverse audiences, enhanced my networking skills and reinforced my dedication to life long learning.\n\nProfessionally, my internships and work experiences served a bridge between academic theory and real-world engineering practices. My internships at Freund-Vector and College Sports Evaluation (CSE) were also instrumental in practically applying academic knowledge. At Freund-Vector, I was responsible for the construction of multiple large PLC powered machine and for modernizing legacy systems from VB6 to C#, enhancing system efficiency and usability. At CSE, I successfully developed a high-throughput data pipeline in Golang, reducing the data processing time from hours to minutes, optimizing database performance, and refining Python-based scripts under challenging constraints. These experiences enhanced my technical skills, adaptability, and resourcefulness in professional environments. Furthermore, my internships reinforced the importance of adhering to professional standards in engineering practices, particularly regarding data security and the responsible deployment of technology.\n\nMy senior design project, Semantic Segmentation Optimization, represents the culmination of my engineering education at Iowa State. This project involves developing an assistive wheelchair technology leveraging advanced AI algorithms for real-time monitoring and improved safety, highlighting the synthesis of complex software systems, sophisticated hardware integration, and disciplined project management. This project has already strengthened my ability to work collaboratively across interdisciplinary teams, integrating software engineering, AI model development, and hardware design to produce a more efficent system.\n\n## Conclusion\n\nIn conclusion, my comprehensive journey through Iowa State University has equipped me with essential technical skills, an ethical foundation, and a versatile innovative mindset critical for addressing contemporary engineering challenges. Reflecting upon this journey, I am well-prepared and committed to continuous learning and adaptation, ensuring my engineering contributions positively impact society.\n",
	Slug:            "iastate-reflection",
	TagSlugs:        []string{"ide/vivado", "ide/vitis", "edu/iastate/ageds461", "edu/iastate/arch321", "edu/iastate/ee201", "edu/iastate/ee230", "edu/iastate/ee311", "edu/iastate/ee332", "edu/iastate/cpre281", "edu/iastate/cpre288", "edu/iastate/cpre488", "edu/iastate/cpre381"},
	Tags:            []*assets.Tag{&TagIdeVivado, &TagIdeVitis, &TagEduIastateAgeds461, &TagEduIastateArch321, &TagEduIastateEe201, &TagEduIastateEe230, &TagEduIastateEe311, &TagEduIastateEe332, &TagEduIastateCpre281, &TagEduIastateCpre288, &TagEduIastateCpre488, &TagEduIastateCpre381},
	Title:           "A Reflective Journey - Navigating Your Cumulative Experience at Iowa State University",
	UpdatedAt:       time.Date(2025, time.April, 12, 12, 7, 49, 0, time.UTC),
	X:               0.7647832542803445,
	Y:               0.2047801018593105,
	Z:               -0.42764519174944954,
}}
var AllPosts = []*assets.Post{&PostMakingVivadoNotSuckAtGit, &PostIastateReflection}
var TagArchitecturesArm = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"arm\"><a class=\"anchor permalink p-4\" href=\"#arm\">#</a> ARM</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 11, 0, time.UTC),
	Description:     "ARM is a 32-bit reduced instruction set computing (RISC) architecture.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: arm\naliases:\n  - ARM\ntags: []\ncreated_at: 2025-03-27T14:13:11.000-06:00\ndescription: ARM is a 32-bit reduced instruction set computing (RISC) architecture.\ntitle: ARM\nupdated_at: 2025-03-28T20:07:30.000-06:00\n---\n\n# ARM\n",
	Slug:            "architectures/arm",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "ARM",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 30, 0, time.UTC),
	X:               -0.9352912549736886,
	Y:               0.018805229772603793,
	Z:               -0.09985508101149665,
}}
var TagArchitecturesI386 = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"intel-386\"><a class=\"anchor permalink p-4\" href=\"#intel-386\">#</a> Intel 386</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 11, 0, time.UTC),
	Description:     "Intel 386 is a 32-bit x86 instruction set architecture.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: i386\naliases:\n  - Intel 386\ntags: []\ncreated_at: 2025-03-27T14:13:11.000-06:00\ndescription: Intel 386 is a 32-bit x86 instruction set architecture.\ntitle: Intel 386\nupdated_at: 2025-03-28T20:07:30.000-06:00\n---\n\n# Intel 386\n",
	Slug:            "architectures/i386",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Intel 386",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 30, 0, time.UTC),
	X:               -1.385917437432875,
	Y:               -0.08272697845609739,
	Z:               -0.46025673363256164,
}}
var TagArchitecturesX8664 = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"x86-64\"><a class=\"anchor permalink p-4\" href=\"#x86-64\">#</a> x86-64</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 11, 0, time.UTC),
	Description:     "x86-64 is a 64-bit x86 instruction set architecture.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: x86-64\naliases:\n  - x86-64\ntags: []\ncreated_at: 2025-03-27T14:13:11.000-06:00\ndescription: x86-64 is a 64-bit x86 instruction set architecture.\ntitle: x86-64\nupdated_at: 2025-03-28T20:07:30.000-06:00\n---\n\n# x86-64\n",
	Slug:            "architectures/x86-64",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "x86-64",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 30, 0, time.UTC),
	X:               -1.088588106425294,
	Y:               -0.436671468201802,
	Z:               -0.028230763681608706,
}}
var TagArchitecturesMips = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"mips\"><a class=\"anchor permalink p-4\" href=\"#mips\">#</a> MIPS</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 11, 0, time.UTC),
	Description:     "MIPS is a 32-bit reduced instruction set computing (RISC) architecture.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: mips\naliases:\n  - MIPS\ntags: []\ncreated_at: 2025-03-27T14:13:11.000-06:00\ndescription: MIPS is a 32-bit reduced instruction set computing (RISC) architecture.\ntitle: MIPS\nupdated_at: 2025-03-28T20:07:30.000-06:00\n---\n\n# MIPS\n",
	Slug:            "architectures/mips",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "MIPS",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 30, 0, time.UTC),
	X:               -1.1821528076161614,
	Y:               0.42190304013750823,
	Z:               0.26447188978496816,
}}
var TagCompanyFlyio = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"flyio\"><a class=\"anchor permalink p-4\" href=\"#flyio\">#</a> Flyio</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 11, 0, time.UTC),
	Description:     "Flyio is a cloud-based platform for building and deploying web applications based on AWS.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: flyio\naliases:\n  - Flyio\ntags: []\ncreated_at: 2025-03-27T14:13:11.000-06:00\ndescription: Flyio is a cloud-based platform for building and deploying web applications based on AWS.\ntitle: Flyio\nupdated_at: 2025-03-28T20:07:30.000-06:00\n---\n\n# Flyio\n",
	Slug:            "company/flyio",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Flyio",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 30, 0, time.UTC),
	X:               -1.138378437889491,
	Y:               -0.07805976784771651,
	Z:               -0.06551899021828829,
}}
var TagCompanyGoogle = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"google\"><a class=\"anchor permalink p-4\" href=\"#google\">#</a> Google</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 11, 0, time.UTC),
	Description:     "Google is a multinational technology company that specializes in internet-related services and products.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: google\naliases:\n  - Google\ntags:\n  - programming-language/go\ncreated_at: 2025-03-27T14:13:11.000-06:00\ndescription: Google is a multinational technology company that specializes in internet-related services and products.\ntitle: Google\nupdated_at: 2025-03-31T11:27:30.000-06:00\n---\n\n# Google\n",
	Slug:            "company/google",
	TagSlugs:        []string{"programming-language/go"},
	Tags:            []*assets.Tag{&TagProgrammingLanguageGo},
	Title:           "Google",
	UpdatedAt:       time.Date(2025, time.March, 31, 11, 27, 30, 0, time.UTC),
	X:               -0.4352278233647735,
	Y:               0.366457994197394,
	Z:               0.03883541498662374,
}}
var TagCompanyAws = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"aws\"><a class=\"anchor permalink p-4\" href=\"#aws\">#</a> AWS</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 11, 0, time.UTC),
	Description:     "Amazon Web Services (AWS) is a subsidiary of Amazon that provides on-demand cloud computing platforms and other infrastructure services.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: aws\naliases:\n  - AWS\ntags: []\ncreated_at: 2025-03-27T14:13:11.000-06:00\ndescription: Amazon Web Services (AWS) is a subsidiary of Amazon that provides on-demand cloud computing platforms and other infrastructure services.\ntitle: AWS\nupdated_at: 2025-03-28T20:07:30.000-06:00\n---\n\n# AWS\n",
	Slug:            "company/aws",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "AWS",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 30, 0, time.UTC),
	X:               -0.9180480915308871,
	Y:               0.07124584550549706,
	Z:               0.08934257583700858,
}}
var TagCompanyMicrosoft = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"microsoft\"><a class=\"anchor permalink p-4\" href=\"#microsoft\">#</a> Microsoft</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 11, 0, time.UTC),
	Description:     "Microsoft is a technology company that develops and sells software, services, and products.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: microsoft\naliases:\n  - Microsoft\ntags: []\ncreated_at: 2025-03-27T14:13:11.000-06:00\ndescription: Microsoft is a technology company that develops and sells software, services, and products.\ntitle: Microsoft\nupdated_at: 2025-03-28T20:07:30.000-06:00\n---\n\n# Microsoft\n",
	Slug:            "company/microsoft",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Microsoft",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 30, 0, time.UTC),
	X:               -1.3866008668014485,
	Y:               0.5364070277996285,
	Z:               -0.33553651130201073,
}}
var TagCompanyTurso = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"turso\"><a class=\"anchor permalink p-4\" href=\"#turso\">#</a> Turso</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 11, 0, time.UTC),
	Description:     "Turso is a fully managed database platform that you can use to create hundreds of thousands of databases per organization and supports replication to any location, including your own servers, for microsecond-latency access.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: turso\naliases:\n  - Turso\ntags: []\ncreated_at: 2025-03-27T14:13:11.000-06:00\ndescription: Turso is a fully managed database platform that you can use to create hundreds of thousands of databases per organization and supports replication to any location, including your own servers, for microsecond-latency access.\ntitle: Turso\nupdated_at: 2025-03-28T20:07:30.000-06:00\n---\n\n# Turso\n",
	Slug:            "company/turso",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Turso",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 30, 0, time.UTC),
	X:               -1.5146635059677056,
	Y:               0.041913165382573725,
	Z:               -0.11899156232531867,
}}
var TagDatabaseMysql = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"mysql\"><a class=\"anchor permalink p-4\" href=\"#mysql\">#</a> MySQL</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 11, 0, time.UTC),
	Description:     "MySQL is a relational database management system (RDBMS) that is open-source and developed by Oracle Corporation.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: mysql\naliases:\n  - MySQL\ntags:\n  - programming-language/sql\ncreated_at: 2025-03-27T14:13:11.000-06:00\ndescription: MySQL is a relational database management system (RDBMS) that is open-source and developed by Oracle Corporation.\ntitle: MySQL\nupdated_at: 2025-03-28T20:07:30.000-06:00\n---\n\n# MySQL\n",
	Slug:            "database/mysql",
	TagSlugs:        []string{"programming-language/sql"},
	Tags:            []*assets.Tag{&TagProgrammingLanguageSql},
	Title:           "MySQL",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 30, 0, time.UTC),
	X:               -1.6000118850761482,
	Y:               -0.39075120992333334,
	Z:               -0.15960577056826927,
}}
var TagCompanyOracle = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"oracle\"><a class=\"anchor permalink p-4\" href=\"#oracle\">#</a> Oracle</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 11, 0, time.UTC),
	Description:     "Oracle is a software company that provides a range of products and services for businesses and organizations.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: oracle\naliases:\n  - Oracle\ntags: []\ncreated_at: 2025-03-27T14:13:11.000-06:00\ndescription: Oracle is a software company that provides a range of products and services for businesses and organizations.\ntitle: Oracle\nupdated_at: 2025-03-28T20:07:30.000-06:00\n---\n\n# Oracle\n",
	Slug:            "company/oracle",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Oracle",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 30, 0, time.UTC),
	X:               -0.8371236851775853,
	Y:               0.22927707177358214,
	Z:               0.04237369647321698,
}}
var TagDatabasePostgres = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"postgres\"><a class=\"anchor permalink p-4\" href=\"#postgres\">#</a> Postgres</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 11, 0, time.UTC),
	Description:     "Postgres is a relational database management system that is open-source and developed by PostgreSQL Global Development Group.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: postgres\naliases:\n  - Postgres\ntags: []\ncreated_at: 2025-03-27T14:13:11.000-06:00\ndescription: Postgres is a relational database management system that is open-source and developed by PostgreSQL Global Development Group.\ntitle: Postgres\nupdated_at: 2025-03-28T20:07:30.000-06:00\n---\n\n# Postgres\n",
	Slug:            "database/postgres",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Postgres",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 30, 0, time.UTC),
	X:               -1.4182460191954032,
	Y:               0.3728293126162273,
	Z:               -0.36769666927873046,
}}
var TagDatabaseSqlite = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"sqlite\"><a class=\"anchor permalink p-4\" href=\"#sqlite\">#</a> SQLite</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 11, 0, time.UTC),
	Description:     "SQLite is the most used relational database management system that is open-source and developed by C.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: sqlite\naliases:\n  - SQLite\ntags: []\ncreated_at: 2025-03-27T14:13:11.000-06:00\ndescription: SQLite is the most used relational database management system that is open-source and developed by C.\ntitle: SQLite\nupdated_at: 2025-03-28T20:07:30.000-06:00\n---\n\n# SQLite\n",
	Slug:            "database/sqlite",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "SQLite",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 30, 0, time.UTC),
	X:               -1.794503774288096,
	Y:               -0.5763494048995998,
	Z:               -0.11595571490989942,
}}
var TagEduIastateArch321 = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"arch-321-history-of-the-american-city\"><a class=\"anchor permalink p-4\" href=\"#arch-321-history-of-the-american-city\">#</a> ARCH 321: History of the American City</h1>\n<p><strong>Course Title:</strong> History of the American City<br>\n<strong>Description:</strong> Study of the development of the built environment and urban condition in the United States from the colonial period to today. Primary attention is given to urban spatial organization, built form, technological change, regulatory and funding patterns, and social categories such as class, race, and gender. Credit counts toward fulfillment of History, Theory, Culture requirements. <em>Meets U.S. Diversity Requirement</em> (<a href=\"https://catalog.iastate.edu/previouscatalogs/2019-2020/azcourses/arch/#:~:text=Study%20of%20the%20development%20of,Diversity%20Requirement\">Architecture (ARCH) | Iowa State University Catalog</a>).<br>\n<strong>Tags:</strong></p>\n<ul>\n<li>urban-history</li>\n<li>american-cities</li>\n<li>urban-planning</li>\n<li>built-environment</li>\n<li>social-issues</li>\n</ul>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 19, 47, 13, 0, time.UTC),
	Description:     "Study of the development of the built environment and urban condition in the United States from the colonial period to today.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: arch321\naliases:\n  - \"ARCH 321: History of the American City\"\ntags: []\ncreated_at: 2025-03-28T19:47:13.000-06:00\ndescription: Study of the development of the built environment and urban condition in the United States from the colonial period to today.\ntitle: ARCH 321\nupdated_at: 2025-03-28T20:08:06.000-06:00\n---\n\n# ARCH 321: History of the American City\n\n**Course Title:** History of the American City  \n**Description:** Study of the development of the built environment and urban condition in the United States from the colonial period to today. Primary attention is given to urban spatial organization, built form, technological change, regulatory and funding patterns, and social categories such as class, race, and gender. Credit counts toward fulfillment of History, Theory, Culture requirements. _Meets U.S. Diversity Requirement_ ([Architecture (ARCH) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2019-2020/azcourses/arch/#:~:text=Study%20of%20the%20development%20of,Diversity%20Requirement)).  \n**Tags:**\n\n- urban-history\n- american-cities\n- urban-planning\n- built-environment\n- social-issues\n",
	Slug:            "edu/iastate/arch321",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "ARCH 321",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 8, 6, 0, time.UTC),
	X:               -0.22817775719350802,
	Y:               0.08650873307009632,
	Z:               0.5921333263058831,
}}
var TagEduIastateCpre281 = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"cpre-281\"><a class=\"anchor permalink p-4\" href=\"#cpre-281\">#</a> CPRE 281</h1>\n<p><strong>Course Title:</strong> Digital Logic<br>\n<strong>Description:</strong> Number systems and representation. Boolean algebra and logic minimization. Combinational and sequential logic design. Arithmetic circuits and finite state machines. Use of programmable logic devices. Introduction to computer-aided schematic capture systems, simulation tools, and hardware description languages. Design of simple digital systems (<a href=\"https://catalog.iastate.edu/previouscatalogs/2022-2023/azcourses/cpr_e/#:~:text=Number%20systems%20and%20representation,Design%20of%20simple%20digital%20systems\">Computer Engineering (CPR E) | Iowa State University Catalog</a>).<br>\n<strong>Tags:</strong></p>\n<ul>\n<li>digital-logic</li>\n<li>boolean-algebra</li>\n<li>sequential-logic</li>\n<li>finite-state-machines</li>\n<li>hardware-description-languages</li>\n</ul>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 19, 47, 43, 0, time.UTC),
	Description:     "This is a class taken at Iowa State University.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: cpre281\naliases:\n  - CPRE281\n  - CPRE 281\ntags:\n  - ide/modelsim\n  - hdl/verilog\n  - hdl/vhdl\ncreated_at: 2025-03-28T19:47:43.000-06:00\ndescription: This is a class taken at Iowa State University.\ntitle: CPRE281\nupdated_at: 2025-04-07T18:42:08.000-06:00\n---\n\n# CPRE 281\n\n**Course Title:** Digital Logic  \n**Description:** Number systems and representation. Boolean algebra and logic minimization. Combinational and sequential logic design. Arithmetic circuits and finite state machines. Use of programmable logic devices. Introduction to computer-aided schematic capture systems, simulation tools, and hardware description languages. Design of simple digital systems ([Computer Engineering (CPR E) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2022-2023/azcourses/cpr_e/#:~:text=Number%20systems%20and%20representation,Design%20of%20simple%20digital%20systems)).  \n**Tags:**\n\n- digital-logic\n- boolean-algebra\n- sequential-logic\n- finite-state-machines\n- hardware-description-languages\n",
	Slug:            "edu/iastate/cpre281",
	TagSlugs:        []string{"ide/modelsim", "hdl/verilog", "hdl/vhdl"},
	Tags:            []*assets.Tag{&TagIdeModelsim, &TagHdlVerilog, &TagHdlVhdl},
	Title:           "CPRE281",
	UpdatedAt:       time.Date(2025, time.April, 7, 18, 42, 8, 0, time.UTC),
	X:               -0.8848901957187265,
	Y:               -0.08182499242283559,
	Z:               -0.5535682205135938,
}}
var TagEduIastateCpre288 = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"cpre-288\"><a class=\"anchor permalink p-4\" href=\"#cpre-288\">#</a> CPRE 288</h1>\n<p><strong>Course Title:</strong> Embedded Systems I: Introduction<br>\n<strong>Description:</strong> Embedded C programming. Interrupt handling. Memory mapped I/O in the context of an application. Elementary embedded design flow/methodology. Timers, scheduling, resource allocation, optimization, state machine based controllers, real time constraints within the context of an application. Applications laboratory exercises with embedded devices (<a href=\"https://catalog.iastate.edu/previouscatalogs/2022-2023/azcourses/cpr_e/#:~:text=Embedded%20C%20programming,laboratory%20exercises%20with%20embedded%20devices\">Computer Engineering (CPR E) | Iowa State University Catalog</a>).<br>\n<strong>Tags:</strong></p>\n<ul>\n<li>embedded-systems</li>\n<li>microcontrollers</li>\n<li>interrupts</li>\n<li>real-time-systems</li>\n<li>state-machines</li>\n</ul>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 19, 48, 41, 0, time.UTC),
	Description:     "Embedded C programming. Interrupt handling. Memory mapped I/O in the context of an application. Elementary embedded design flow/methodology. Timers, scheduling, resource allocation, optimization, state machine based controllers, real time constraints within the context of an application. Applications laboratory exercises with embedded devices class taken at Iowa State University.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: cpre288\naliases:\n  - CPRE 288\ntags:\n  - programming-language/c\n  - programming-language/cpp\n  - programming-language/python\n  - ide/code-composer\ncreated_at: 2025-03-28T19:48:41.000-06:00\ndescription: Embedded C programming. Interrupt handling. Memory mapped I/O in the context of an application. Elementary embedded design flow/methodology. Timers, scheduling, resource allocation, optimization, state machine based controllers, real time constraints within the context of an application. Applications laboratory exercises with embedded devices class taken at Iowa State University.\ntitle: CPRE288\nupdated_at: 2025-04-07T18:43:20.000-06:00\n---\n\n# CPRE 288\n\n**Course Title:** Embedded Systems I: Introduction  \n**Description:** Embedded C programming. Interrupt handling. Memory mapped I/O in the context of an application. Elementary embedded design flow/methodology. Timers, scheduling, resource allocation, optimization, state machine based controllers, real time constraints within the context of an application. Applications laboratory exercises with embedded devices ([Computer Engineering (CPR E) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2022-2023/azcourses/cpr_e/#:~:text=Embedded%20C%20programming,laboratory%20exercises%20with%20embedded%20devices)).  \n**Tags:**\n\n- embedded-systems\n- microcontrollers\n- interrupts\n- real-time-systems\n- state-machines\n",
	Slug:            "edu/iastate/cpre288",
	TagSlugs:        []string{"programming-language/c", "programming-language/cpp", "programming-language/python", "ide/code-composer"},
	Tags:            []*assets.Tag{&TagProgrammingLanguageC, &TagProgrammingLanguageCpp, &TagProgrammingLanguagePython, &TagIdeCodeComposer},
	Title:           "CPRE288",
	UpdatedAt:       time.Date(2025, time.April, 7, 18, 43, 20, 0, time.UTC),
	X:               -1.2866213458900209,
	Y:               0.10221166693948736,
	Z:               -0.0932206254715251,
}}
var TagArchitecturesRiscV = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"risc-v\"><a class=\"anchor permalink p-4\" href=\"#risc-v\">#</a> RISC-V</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 11, 0, time.UTC),
	Description:     "RISC-V is a 64-bit open instruction set architecture.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: risc-v\naliases:\n  - RISC-V\ntags: []\ncreated_at: 2025-03-27T14:13:11.000-06:00\ndescription: RISC-V is a 64-bit open instruction set architecture.\ntitle: RISC-V\nupdated_at: 2025-03-28T20:07:30.000-06:00\n---\n\n# RISC-V\n",
	Slug:            "architectures/risc-v",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "RISC-V",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 30, 0, time.UTC),
	X:               -1.3235256869413679,
	Y:               0.4706511486814604,
	Z:               -0.16011222011838017,
}}
var TagEduIastateCpre381 = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"cpre-381\"><a class=\"anchor permalink p-4\" href=\"#cpre-381\">#</a> CPRE 381</h1>\n<p><strong>Course Title:</strong> Computer Organization and Assembly Level Programming<br>\n<strong>Description:</strong> Introduction to computer organization, evaluating performance of computer systems, instruction set design. Assembly level programming: arithmetic operations, control flow instructions, procedure calls, stack management. Processor design. Datapath and control, scalar pipelines, introduction to memory and I/O systems (<a href=\"https://catalog.iastate.edu/previouscatalogs/2022-2023/azcourses/cpr_e/#:~:text=Introduction%20to%20computer%20organization%2C%20evaluating,to%20memory%20and%20I%2FO%20systems\">Computer Engineering (CPR E) | Iowa State University Catalog</a>).<br>\n<strong>Tags:</strong></p>\n<ul>\n<li>computer-organization</li>\n<li>assembly-language</li>\n<li>instruction-set-architecture</li>\n<li>pipelining</li>\n<li>memory-io</li>\n</ul>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 7, 11, 0, time.UTC),
	Description:     "CPRE381",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: cpre381\naliases:\n  - CPRE 381\ntags: []\ncreated_at: 2025-03-28T20:07:11.000-06:00\ndescription: CPRE381\ntitle: CPRE381\nupdated_at: 2025-04-07T18:42:55.000-06:00\n---\n\n# CPRE 381\n\n**Course Title:** Computer Organization and Assembly Level Programming  \n**Description:** Introduction to computer organization, evaluating performance of computer systems, instruction set design. Assembly level programming: arithmetic operations, control flow instructions, procedure calls, stack management. Processor design. Datapath and control, scalar pipelines, introduction to memory and I/O systems ([Computer Engineering (CPR E) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2022-2023/azcourses/cpr_e/#:~:text=Introduction%20to%20computer%20organization%2C%20evaluating,to%20memory%20and%20I%2FO%20systems)).  \n**Tags:**\n\n- computer-organization\n- assembly-language\n- instruction-set-architecture\n- pipelining\n- memory-io\n",
	Slug:            "edu/iastate/cpre381",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "CPRE381",
	UpdatedAt:       time.Date(2025, time.April, 7, 18, 42, 55, 0, time.UTC),
	X:               -1.1300189863499044,
	Y:               0.44447302436647806,
	Z:               -0.14682892848982013,
}}
var TagEduIastateEcon101 = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"econ-101-principles-of-microeconomics\"><a class=\"anchor permalink p-4\" href=\"#econ-101-principles-of-microeconomics\">#</a> ECON 101: Principles of Microeconomics</h1>\n<p><strong>Course Title:</strong> Principles of Microeconomics<br>\n<strong>Description:</strong> Resource allocation, opportunity cost, comparative and absolute advantage. Supply and demand. Marginal analysis. Theories of production and consumption, pricing, and the market system. Perfect and imperfect competition and strategic behavior. Factor markets. Present discounted value (<a href=\"https://catalog.iastate.edu/previouscatalogs/2022-2023/azcourses/econ/#:~:text=Resource%20allocation%2C%20opportunity%20cost%2C%20comparative,Present%20discounted%20value\">Economics (ECON) | Iowa State University Catalog</a>).<br>\n<strong>Tags:</strong></p>\n<ul>\n<li>microeconomics</li>\n<li>supply-and-demand</li>\n<li>opportunity-cost</li>\n<li>marginal-analysis</li>\n<li>market-structures</li>\n</ul>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 19, 51, 43, 0, time.UTC),
	Description:     "Resource allocation, opportunity cost, comparative and absolute advantage taught at Iowa State University.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: econ101\naliases:\n  - \"ECON 101: Principles of Microeconomics\"\ntags: []\ncreated_at: 2025-03-28T19:51:43.000-06:00\ndescription: Resource allocation, opportunity cost, comparative and absolute advantage taught at Iowa State University.\ntitle: ECON 101\nupdated_at: 2025-03-28T20:08:06.000-06:00\n---\n\n# ECON 101: Principles of Microeconomics\n\n**Course Title:** Principles of Microeconomics  \n**Description:** Resource allocation, opportunity cost, comparative and absolute advantage. Supply and demand. Marginal analysis. Theories of production and consumption, pricing, and the market system. Perfect and imperfect competition and strategic behavior. Factor markets. Present discounted value ([Economics (ECON) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2022-2023/azcourses/econ/#:~:text=Resource%20allocation%2C%20opportunity%20cost%2C%20comparative,Present%20discounted%20value)).  \n**Tags:**\n\n- microeconomics\n- supply-and-demand\n- opportunity-cost\n- marginal-analysis\n- market-structures\n",
	Slug:            "edu/iastate/econ101",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "ECON 101",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 8, 6, 0, time.UTC),
	X:               -0.20352481214382365,
	Y:               1.0357676641158278,
	Z:               0.31278185404295333,
}}
var TagCompanyFreundVector = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"freund-vector-corp\"><a class=\"anchor permalink p-4\" href=\"#freund-vector-corp\">#</a> Freund-Vector Corp.</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 11, 0, time.UTC),
	Description:     "Freund-Vector Corp. is a global service provider and manufacturer of granulating, coating and drying equipment.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: freund-vector\naliases:\n  - Freund-Vector Corp.\ntags: []\ncreated_at: 2025-03-27T14:13:11.000-06:00\ndescription: Freund-Vector Corp. is a global service provider and manufacturer of granulating, coating and drying equipment.\ntitle: Freund-Vector Corp.\nupdated_at: 2025-03-28T20:07:30.000-06:00\n---\n\n# Freund-Vector Corp.\n",
	Slug:            "company/freund-vector",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Freund-Vector Corp.",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 30, 0, time.UTC),
	X:               -1.699850045019623,
	Y:               0.7265088850937983,
	Z:               -0.12610890407243125,
}}
var TagEduIastateEe224 = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<p><strong>Course Title:</strong> Signals and Systems I<br>\n<strong>Description:</strong> Mathematical preliminaries. Introduction to signals and systems. Signal manipulations. System properties. LTI systems, impulse response and convolution. Fourier Series representation and properties. Continuous and discrete-time Fourier Transforms and properties. Sampling and reconstruction. Modulation and demodulation. Applications and demonstrations using Matlab (<a href=\"https://catalog.iastate.edu/previouscatalogs/2022-2023/azcourses/e_e/#:~:text=Mathematical%20preliminaries,Applications%20and%20demonstrations%20using%20Matlab\">Electrical Engineering (E E) | Iowa State University Catalog</a>).<br>\n<strong>Tags:</strong></p>\n<ul>\n<li>signals-and-systems</li>\n<li>convolution</li>\n<li>fourier-analysis</li>\n<li>sampling</li>\n<li>modulation</li>\n</ul>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 19, 52, 6, 0, time.UTC),
	Description:     "Signals and Systems I taught at Iowa State University.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: ee224\naliases: []\ntags: []\ncreated_at: 2025-03-28T19:52:06.000-06:00\ndescription: Signals and Systems I taught at Iowa State University.\ntitle: EE224\nupdated_at: 2025-03-28T20:08:30.000-06:00\n---\n\n**Course Title:** Signals and Systems I  \n**Description:** Mathematical preliminaries. Introduction to signals and systems. Signal manipulations. System properties. LTI systems, impulse response and convolution. Fourier Series representation and properties. Continuous and discrete-time Fourier Transforms and properties. Sampling and reconstruction. Modulation and demodulation. Applications and demonstrations using Matlab ([Electrical Engineering (E E) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2022-2023/azcourses/e_e/#:~:text=Mathematical%20preliminaries,Applications%20and%20demonstrations%20using%20Matlab)).  \n**Tags:**\n\n- signals-and-systems\n- convolution\n- fourier-analysis\n- sampling\n- modulation\n",
	Slug:            "edu/iastate/ee224",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "EE224",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 8, 30, 0, time.UTC),
	X:               -1.1544393074440378,
	Y:               0.29288318014704073,
	Z:               -0.586933794195914,
}}
var TagEduIastateCpre488 = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"cpre-488\"><a class=\"anchor permalink p-4\" href=\"#cpre-488\">#</a> CPRE 488</h1>\n<p>This is a class taken at Iowa State University.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 12, 0, time.UTC),
	Description:     "This is a class taken at Iowa State University.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: cpre488\naliases:\n  - CPRE488\n  - CPRE 488\ntags:\n  - edu/iastate\n  - architectures/risc-v\n  - architectures/arm\ncreated_at: 2025-03-27T14:13:12.000-06:00\ndescription: This is a class taken at Iowa State University.\ntitle: CPRE488\nupdated_at: 2025-04-04T18:29:49.000-06:00\n---\n\n# CPRE 488\n\nThis is a class taken at Iowa State University.\n",
	Slug:            "edu/iastate/cpre488",
	TagSlugs:        []string{"edu/iastate", "architectures/risc-v", "architectures/arm"},
	Tags:            []*assets.Tag{&TagEduIastate, &TagArchitecturesRiscV, &TagArchitecturesArm},
	Title:           "CPRE488",
	UpdatedAt:       time.Date(2025, time.April, 4, 18, 29, 49, 0, time.UTC),
	X:               -0.9606627970273552,
	Y:               0.049415504920713116,
	Z:               0.22805599019387215,
}}
var TagEduIastateEe324 = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h2 id=\"e-e-324-signals-and-systems-ii\"><a class=\"anchor permalink p-4\" href=\"#e-e-324-signals-and-systems-ii\">#</a> E E 324: Signals and Systems II</h2>\n<p><strong>Course Title:</strong> Signals and Systems II<br>\n<strong>Description:</strong> Laplace and z-Transforms, properties and inverses. Applications to LTI systems, circuits, analog/digital filters, feedback systems, stability analysis and margins. MATLAB labwork covering these topics (<a href=\"https://catalog.iastate.edu/previouscatalogs/2022-2023/azcourses/e_e/#:~:text=Prereq%3A%20E%20E%20224%20Laplace,MATLAB%20labwork%20covering%20these%20topics\">Electrical Engineering (E E) | Iowa State University Catalog</a>).<br>\n<strong>Tags:</strong></p>\n<ul>\n<li>laplace-transform</li>\n<li>z-transform</li>\n<li>signal-filters</li>\n<li>feedback-systems</li>\n<li>stability-analysis</li>\n</ul>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 19, 53, 13, 0, time.UTC),
	Description:     "Signals and Systems II taught at Iowa State University.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: ee324\naliases: []\ntags: []\ncreated_at: 2025-03-28T19:53:13.000-06:00\ndescription: Signals and Systems II taught at Iowa State University.\ntitle: EE324\nupdated_at: 2025-03-28T20:08:07.000-06:00\n---\n\n## E E 324: Signals and Systems II\n\n**Course Title:** Signals and Systems II  \n**Description:** Laplace and z-Transforms, properties and inverses. Applications to LTI systems, circuits, analog/digital filters, feedback systems, stability analysis and margins. MATLAB labwork covering these topics ([Electrical Engineering (E E) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2022-2023/azcourses/e_e/#:~:text=Prereq%3A%20E%20E%20224%20Laplace,MATLAB%20labwork%20covering%20these%20topics)).  \n**Tags:**\n\n- laplace-transform\n- z-transform\n- signal-filters\n- feedback-systems\n- stability-analysis\n",
	Slug:            "edu/iastate/ee324",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "EE324",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 8, 7, 0, time.UTC),
	X:               -0.6750953689885627,
	Y:               0.6036584776756497,
	Z:               -0.47431260716656953,
}}
var TagEduIastateEe332 = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h2 id=\"e-e-332-semiconductor-materials-and-devices\"><a class=\"anchor permalink p-4\" href=\"#e-e-332-semiconductor-materials-and-devices\">#</a> E E 332: Semiconductor Materials and Devices</h2>\n<p><strong>Course Title:</strong> Semiconductor Materials and Devices<br>\n<strong>Description:</strong> Introduction to semiconductor material and device physics. Quantum mechanics and band theory of semiconductors. Charge carrier distributions, generation/recombination, transport properties. Physical and electrical properties and fabrication of semiconductor devices such as MOSFETs, bipolar transistors, laser diodes and LED’s (<a href=\"https://catalog.iastate.edu/previouscatalogs/2022-2023/azcourses/e_e/#:~:text=Introduction%20to%20semiconductor%20material%20and,transistors%2C%20laser%20diodes%20and%20LED%27s\">Electrical Engineering (E E) | Iowa State University Catalog</a>).<br>\n<strong>Tags:</strong></p>\n<ul>\n<li>semiconductor-physics</li>\n<li>band-theory</li>\n<li>charge-transport</li>\n<li>electronic-devices</li>\n<li>device-fabrication</li>\n</ul>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 19, 53, 26, 0, time.UTC),
	Description:     "Semiconductor Materials and Devices taught at Iowa State University.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: ee332\naliases: []\ntags: []\ncreated_at: 2025-03-28T19:53:26.000-06:00\ndescription: Semiconductor Materials and Devices taught at Iowa State University.\ntitle: EE332\nupdated_at: 2025-03-28T20:08:07.000-06:00\n---\n\n## E E 332: Semiconductor Materials and Devices\n\n**Course Title:** Semiconductor Materials and Devices  \n**Description:** Introduction to semiconductor material and device physics. Quantum mechanics and band theory of semiconductors. Charge carrier distributions, generation/recombination, transport properties. Physical and electrical properties and fabrication of semiconductor devices such as MOSFETs, bipolar transistors, laser diodes and LED’s ([Electrical Engineering (E E) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2022-2023/azcourses/e_e/#:~:text=Introduction%20to%20semiconductor%20material%20and,transistors%2C%20laser%20diodes%20and%20LED%27s)).  \n**Tags:**\n\n- semiconductor-physics\n- band-theory\n- charge-transport\n- electronic-devices\n- device-fabrication\n",
	Slug:            "edu/iastate/ee332",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "EE332",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 8, 7, 0, time.UTC),
	X:               -0.5131594498045631,
	Y:               -0.04208500959633332,
	Z:               -0.5067065320688685,
}}
var TagEduIastateEe201 = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"ee201\"><a class=\"anchor permalink p-4\" href=\"#ee201\">#</a> EE201</h1>\n<ul>\n<li>Emphasis on mathematical tools</li>\n<li>Circuit elements (resistors, inductors, capacitors) and analysis methods including power and energy relationships</li>\n<li>Network theorems</li>\n<li>DC, sinusoidal steady-state, and transient analysis</li>\n<li>AC power</li>\n<li>Frequency response</li>\n<li>Two port models</li>\n<li>Diode</li>\n<li>PSPICE Laboratory instrumentation and experimentation.</li>\n</ul>\n",
	CreatedAt:       time.Date(2025, time.April, 8, 11, 58, 37, 0, time.UTC),
	Description:     "Electric Circuits at Iowa State University",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: ee201\naliases:\n  - EE201\ntags:\n  - ideologies/frequency-domain\n  - ideologies/frequency-response\ncreated_at: 2025-04-08T11:58:37.000-06:00\ndescription: Electric Circuits at Iowa State University\ntitle: EE201\nupdated_at: 2025-04-08T12:00:17.000-06:00\n---\n\n# EE201\n\n- Emphasis on mathematical tools\n- Circuit elements (resistors, inductors, capacitors) and analysis methods including power and energy relationships\n- Network theorems\n- DC, sinusoidal steady-state, and transient analysis\n- AC power\n- Frequency response\n- Two port models\n- Diode\n- PSPICE Laboratory instrumentation and experimentation.\n",
	Slug:            "edu/iastate/ee201",
	TagSlugs:        []string{"ideologies/frequency-domain", "ideologies/frequency-response"},
	Tags:            []*assets.Tag{},
	Title:           "EE201",
	UpdatedAt:       time.Date(2025, time.April, 8, 12, 0, 17, 0, time.UTC),
	X:               -0.6837113482078048,
	Y:               -0.11974233572197779,
	Z:               -0.05601933993611802,
}}
var TagEduIastateEe322 = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"e-e-322-probabilistic-methods-for-electrical-engineers\"><a class=\"anchor permalink p-4\" href=\"#e-e-322-probabilistic-methods-for-electrical-engineers\">#</a> E E 322: Probabilistic Methods for Electrical Engineers</h1>\n<p><strong>Course Title:</strong> Probabilistic Methods for Electrical Engineers<br>\n<strong>Description:</strong> Introduction to probability with applications to electrical engineers. Sets and events, probability space, conditional probability, total probability and Bayes’ rule. Discrete and continuous random variables, cumulative distribution function, probability mass and density functions, expectation, moments, moment generating function, multiple random variables, functions of random variables. Elements of statistics, hypothesis testing, confidence intervals, least squares. Introduction to random processes (<a href=\"https://catalog.iastate.edu/previouscatalogs/2022-2023/azcourses/e_e/#:~:text=Introduction%20to%20probability%20with%20applications,Introduction%20to%20random%20processes\">Electrical Engineering (E E) | Iowa State University Catalog</a>).<br>\n<strong>Tags:</strong></p>\n<ul>\n<li>probability</li>\n<li>random-variables</li>\n<li>probability-distributions</li>\n<li>statistical-inference</li>\n<li>random-processes</li>\n</ul>\n<p>Throughout this course, I learned to better understand:</p>\n<ul>\n<li>Set theory basics, Conditional probability, Total probability, Bayes rule, Independence, Counting, Binomial, Reliability</li>\n<li>Discrete random variables (r.v.): Probability Mass Function (PMF), expectation, mean, variance, two random variables(r.v.&rsquo;s) (joint PMF, conditioning, Bayes, independence), functions of r.v.’s</li>\n<li>Continuous random variables: Probability Density Function (PDF), Cumulative Density Function (CDF), expectation, mean, variance, functions of r.v.’s, two random variables (joint PDF, joint CDF, conditioning, Bayes, independence), derived distributions</li>\n<li>Sums of r.v.’s, Moment Generating Functions</li>\n<li>Covariance, correlation, Bayesian least squares estimation, linear least squares (LS)</li>\n<li>Markov, Chebyshev inequalities, Weak law of large numbers, Central Limit theorem</li>\n<li>Distinguish between discrete and continuous random variables and describe how they relate to engineering problems.</li>\n<li>Define probability mass functions (PMF) and probability density functions (PDF) for discrete and continuous random variables.</li>\n<li>Understand the concepts of joint, marginal, and conditional distributions for multiple random variables.</li>\n<li>Solve problems involving the calculation of joint and marginal probabilities, particularly in multivariable engineering systems.</li>\n<li>The concept of parameter estimation and confidence intervals.</li>\n</ul>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 19, 52, 50, 0, time.UTC),
	Description:     "Probabilistic Methods for Electrical Engineers taught at Iowa State University.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: \"322\"\naliases:\n  - \"E E 322: Probabilistic Methods for Electrical Engineers\"\ntags: []\ncreated_at: 2025-03-28T19:52:50.000-06:00\ndescription: Probabilistic Methods for Electrical Engineers taught at Iowa State University.\nteacher: Professor Julie Dickerson (julied@iastate.edu)\ntitle: EE322\nupdated_at: 2025-03-28T20:08:07.000-06:00\n---\n\n# E E 322: Probabilistic Methods for Electrical Engineers\n\n**Course Title:** Probabilistic Methods for Electrical Engineers  \n**Description:** Introduction to probability with applications to electrical engineers. Sets and events, probability space, conditional probability, total probability and Bayes’ rule. Discrete and continuous random variables, cumulative distribution function, probability mass and density functions, expectation, moments, moment generating function, multiple random variables, functions of random variables. Elements of statistics, hypothesis testing, confidence intervals, least squares. Introduction to random processes ([Electrical Engineering (E E) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2022-2023/azcourses/e_e/#:~:text=Introduction%20to%20probability%20with%20applications,Introduction%20to%20random%20processes)).  \n**Tags:**\n\n- probability\n- random-variables\n- probability-distributions\n- statistical-inference\n- random-processes\n\nThroughout this course, I learned to better understand:\n\n- Set theory basics, Conditional probability, Total probability, Bayes rule, Independence, Counting, Binomial, Reliability\n- Discrete random variables (r.v.): Probability Mass Function (PMF), expectation, mean, variance, two random variables(r.v.'s) (joint PMF, conditioning, Bayes, independence), functions of r.v.’s\n- Continuous random variables: Probability Density Function (PDF), Cumulative Density Function (CDF), expectation, mean, variance, functions of r.v.’s, two random variables (joint PDF, joint CDF, conditioning, Bayes, independence), derived distributions\n- Sums of r.v.’s, Moment Generating Functions\n- Covariance, correlation, Bayesian least squares estimation, linear least squares (LS)\n- Markov, Chebyshev inequalities, Weak law of large numbers, Central Limit theorem\n- Distinguish between discrete and continuous random variables and describe how they relate to engineering problems.\n- Define probability mass functions (PMF) and probability density functions (PDF) for discrete and continuous random variables.\n- Understand the concepts of joint, marginal, and conditional distributions for multiple random variables.\n- Solve problems involving the calculation of joint and marginal probabilities, particularly in multivariable engineering systems.\n- The concept of parameter estimation and confidence intervals.\n",
	Slug:            "edu/iastate/ee322",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "EE322",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 8, 7, 0, time.UTC),
	X:               -0.90094038069229,
	Y:               -0.2971853847993734,
	Z:               -0.303776041620761,
}}
var TagEduIastate = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"iowa-state-university\"><a class=\"anchor permalink p-4\" href=\"#iowa-state-university\">#</a> Iowa State University</h1>\n<p>Iowa State University where I got my BS in Electrical Engineering and Minor in Computer Science.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 14, 0, time.UTC),
	Description:     "Iowa State University where I got my BS in Electrical Engineering and Minor in Computer Science.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: iastate\naliases:\n  - Iowa State University\ntags: []\ncreated_at: 2025-03-27T14:13:14.000-06:00\ndescription: Iowa State University where I got my BS in Electrical Engineering and Minor in Computer Science.\ntitle: iastate\nupdated_at: 2025-03-28T20:07:31.000-06:00\n---\n\n# Iowa State University\n\nIowa State University where I got my BS in Electrical Engineering and Minor in Computer Science.\n",
	Slug:            "edu/iastate",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "iastate",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 31, 0, time.UTC),
	X:               -1.0355254719759643,
	Y:               0.03903337057488521,
	Z:               0.012088166667080479,
}}
var TagEduIastateMath207 = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"math-207-matrices-and-linear-algebra\"><a class=\"anchor permalink p-4\" href=\"#math-207-matrices-and-linear-algebra\">#</a> MATH 207: Matrices and Linear Algebra</h1>\n<p><strong>Course Title:</strong> Matrices and Linear Algebra<br>\n<strong>Description:</strong> Systems of linear equations, determinants, vector spaces, linear transformations, orthogonality, least-squares methods, eigenvalues and eigenvectors. Emphasis on applications and techniques. Only one of MATH 207 and MATH 317 may be counted toward graduation (<a href=\"https://catalog.iastate.edu/previouscatalogs/2020-2021/azcourses/math/#:~:text=Systems%20of%20linear%20equations%2C%20determinants%2C,may%20be%20counted%20toward%20graduation\">Mathematics (MATH) | Iowa State University Catalog</a>).<br>\n<strong>Tags:</strong></p>\n<ul>\n<li>linear-algebra</li>\n<li>matrices</li>\n<li>vector-spaces</li>\n<li>eigenvalues</li>\n<li>linear-transformations</li>\n</ul>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 19, 54, 12, 0, time.UTC),
	Description:     "Matrices and Linear Algebra taught at Iowa State University.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: math207\naliases:\n  - \"MATH 207: Matrices and Linear Algebra\"\ntags: []\ncreated_at: 2025-03-28T19:54:12.000-06:00\ndescription: Matrices and Linear Algebra taught at Iowa State University.\ntitle: MATH207\nupdated_at: 2025-03-28T20:08:07.000-06:00\n---\n\n# MATH 207: Matrices and Linear Algebra\n\n**Course Title:** Matrices and Linear Algebra  \n**Description:** Systems of linear equations, determinants, vector spaces, linear transformations, orthogonality, least-squares methods, eigenvalues and eigenvectors. Emphasis on applications and techniques. Only one of MATH 207 and MATH 317 may be counted toward graduation ([Mathematics (MATH) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2020-2021/azcourses/math/#:~:text=Systems%20of%20linear%20equations%2C%20determinants%2C,may%20be%20counted%20toward%20graduation)).  \n**Tags:**\n\n- linear-algebra\n- matrices\n- vector-spaces\n- eigenvalues\n- linear-transformations\n",
	Slug:            "edu/iastate/math207",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "MATH207",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 8, 7, 0, time.UTC),
	X:               -0.9347316050595149,
	Y:               0.6212637528163459,
	Z:               -0.3651813426195468,
}}
var TagEduIastateSoc134 = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"soc-134-introduction-to-sociology\"><a class=\"anchor permalink p-4\" href=\"#soc-134-introduction-to-sociology\">#</a> SOC 134: Introduction to Sociology</h1>\n<p><strong>Course Title:</strong> Introduction to Sociology<br>\n<strong>Description:</strong> Social interaction and group behavior with emphasis on the scientific study of contemporary U.S. society, including issues relating to socialization, inequality, and changing rural and urban communities. Analysis of relationships among the institutions of family, religion, political participation, work, and leisure (<a href=\"https://catalog.iastate.edu/previouscatalogs/2023-2024/azcourses/soc/#:~:text=Social%20interaction%20and%20group%20behavior,political%20participation%2C%20work%2C%20and%20leisure\">Sociology (SOC) | Iowa State University Catalog</a>).<br>\n<strong>Tags:</strong></p>\n<ul>\n<li>sociology</li>\n<li>social-interaction</li>\n<li>socialization</li>\n<li>social-inequality</li>\n<li>social-institutions</li>\n</ul>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 19, 54, 30, 0, time.UTC),
	Description:     "Introduction to Sociology taught at Iowa State University.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: soc134\naliases:\n  - \"SOC 134: Introduction to Sociology\"\ntags: []\ncreated_at: 2025-03-28T19:54:30.000-06:00\ndescription: Introduction to Sociology taught at Iowa State University.\ntitle: SOC134\nupdated_at: 2025-03-28T20:08:07.000-06:00\n---\n\n# SOC 134: Introduction to Sociology\n\n**Course Title:** Introduction to Sociology  \n**Description:** Social interaction and group behavior with emphasis on the scientific study of contemporary U.S. society, including issues relating to socialization, inequality, and changing rural and urban communities. Analysis of relationships among the institutions of family, religion, political participation, work, and leisure ([Sociology (SOC) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2023-2024/azcourses/soc/#:~:text=Social%20interaction%20and%20group%20behavior,political%20participation%2C%20work%2C%20and%20leisure)).  \n**Tags:**\n\n- sociology\n- social-interaction\n- socialization\n- social-inequality\n- social-institutions\n",
	Slug:            "edu/iastate/soc134",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "SOC134",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 8, 7, 0, time.UTC),
	X:               -1.008351212683702,
	Y:               0.5654268108307167,
	Z:               1.0390994172471621,
}}
var TagEduIastateEe491 = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"e-e-491-senior-design-project-i-and-professionalism\"><a class=\"anchor permalink p-4\" href=\"#e-e-491-senior-design-project-i-and-professionalism\">#</a> E E 491: Senior Design Project I and Professionalism</h1>\n<p><strong>Course Title:</strong> Senior Design Project I and Professionalism<br>\n<strong>Description:</strong> Preparing for entry to the workplace. Selected professional topics. Use of technical writing skills in developing project plan and design report; design review presentation. First of two-semester team-oriented, project design and implementation experience (<a href=\"https://catalog.iastate.edu/previouscatalogs/2022-2023/azcourses/e_e/#:~:text=Preparing%20for%20entry%20to%20the,project%20design%20and%20implementation%20experience\">Electrical Engineering (E E) | Iowa State University Catalog</a>).<br>\n<strong>Tags:</strong></p>\n<ul>\n<li>engineering-design</li>\n<li>project-management</li>\n<li>technical-writing</li>\n<li>teamwork</li>\n<li>professional-development</li>\n</ul>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 19, 53, 43, 0, time.UTC),
	Description:     "Senior Design Project I and Professionalism taught at Iowa State University.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: ee491\naliases:\n  - \"E E 491: Senior Design Project I and Professionalism\"\ntags: []\ncreated_at: 2025-03-28T19:53:43.000-06:00\ndescription: Senior Design Project I and Professionalism taught at Iowa State University.\ntitle: EE491\nupdated_at: 2025-03-28T20:08:07.000-06:00\n---\n\n# E E 491: Senior Design Project I and Professionalism\n\n**Course Title:** Senior Design Project I and Professionalism  \n**Description:** Preparing for entry to the workplace. Selected professional topics. Use of technical writing skills in developing project plan and design report; design review presentation. First of two-semester team-oriented, project design and implementation experience ([Electrical Engineering (E E) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2022-2023/azcourses/e_e/#:~:text=Preparing%20for%20entry%20to%20the,project%20design%20and%20implementation%20experience)).  \n**Tags:**\n\n- engineering-design\n- project-management\n- technical-writing\n- teamwork\n- professional-development\n",
	Slug:            "edu/iastate/ee491",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "EE491",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 8, 7, 0, time.UTC),
	X:               -1.043887993480019,
	Y:               0.3345416665508772,
	Z:               -0.18190327176299168,
}}
var TagElementsActinium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"actinium\"><a class=\"anchor permalink p-4\" href=\"#actinium\">#</a> Actinium</h1>\n<p>AtomicNumber: 89</p>\n<p>Element: Actinium</p>\n<p>Symbol: Ac</p>\n<p>AtomicMass: 227.0</p>\n<p>NumberofNeutrons: 138</p>\n<p>NumberofProtons: 89</p>\n<p>NumberofElectrons: 89</p>\n<p>Period: 7</p>\n<p>Group: 3.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: yes</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Actinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: 1.1</p>\n<p>FirstIonization: 5.17</p>\n<p>Density: 10.1</p>\n<p>MeltingPoint: 1323.15</p>\n<p>BoilingPoint: 3471.0</p>\n<p>NumberOfIsotopes: 11.0</p>\n<p>Discoverer: Debierne/Giesel</p>\n<p>Year: 1899.0</p>\n<p>SpecificHeat: 0.12</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 40, 0, time.UTC),
	Description:     "Actinium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: actinium\naliases:\n  - Actinium\ntags: []\ncreated_at: 2025-03-28T20:06:40.000-06:00\ndescription: Actinium\ntitle: Actinium\nupdated_at: 2025-03-28T20:18:28.000-06:00\n---\n\n# Actinium\n\nAtomicNumber: 89\n\nElement: Actinium\n\nSymbol: Ac\n\nAtomicMass: 227.0\n\nNumberofNeutrons: 138\n\nNumberofProtons: 89\n\nNumberofElectrons: 89\n\nPeriod: 7\n\nGroup: 3.0\n\nPhase: solid\n\nRadioactive: yes\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Actinide\n\nAtomicRadius: nan\n\nElectronegativity: 1.1\n\nFirstIonization: 5.17\n\nDensity: 10.1\n\nMeltingPoint: 1323.15\n\nBoilingPoint: 3471.0\n\nNumberOfIsotopes: 11.0\n\nDiscoverer: Debierne/Giesel\n\nYear: 1899.0\n\nSpecificHeat: 0.12\n\nNumberofShells: 7\n\nNumberofValence: nan\n",
	Slug:            "elements/actinium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Actinium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 28, 0, time.UTC),
	X:               -0.8069786910684283,
	Y:               0.12365994945179135,
	Z:               0.07144242957385699,
}}
var TagElementsAluminum = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"aluminum\"><a class=\"anchor permalink p-4\" href=\"#aluminum\">#</a> Aluminum</h1>\n<p>AtomicNumber: 13</p>\n<p>Element: Aluminum</p>\n<p>Symbol: Al</p>\n<p>AtomicMass: 26.982</p>\n<p>NumberofNeutrons: 14</p>\n<p>NumberofProtons: 13</p>\n<p>NumberofElectrons: 13</p>\n<p>Period: 3</p>\n<p>Group: 13.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Metal</p>\n<p>AtomicRadius: 1.8</p>\n<p>Electronegativity: 1.61</p>\n<p>FirstIonization: 5.9858</p>\n<p>Density: 2.7</p>\n<p>MeltingPoint: 933.4</p>\n<p>BoilingPoint: 2792.0</p>\n<p>NumberOfIsotopes: 8.0</p>\n<p>Discoverer: Wshler</p>\n<p>Year: 1827.0</p>\n<p>SpecificHeat: 0.897</p>\n<p>NumberofShells: 3</p>\n<p>NumberofValence: 3.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 40, 0, time.UTC),
	Description:     "Aluminum",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: aluminum\naliases:\n  - Aluminum\ntags: []\ncreated_at: 2025-03-28T20:06:40.000-06:00\ndescription: Aluminum\ntitle: Aluminum\nupdated_at: 2025-03-28T20:18:28.000-06:00\n---\n\n# Aluminum\n\nAtomicNumber: 13\n\nElement: Aluminum\n\nSymbol: Al\n\nAtomicMass: 26.982\n\nNumberofNeutrons: 14\n\nNumberofProtons: 13\n\nNumberofElectrons: 13\n\nPeriod: 3\n\nGroup: 13.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Metal\n\nAtomicRadius: 1.8\n\nElectronegativity: 1.61\n\nFirstIonization: 5.9858\n\nDensity: 2.7\n\nMeltingPoint: 933.4\n\nBoilingPoint: 2792.0\n\nNumberOfIsotopes: 8.0\n\nDiscoverer: Wshler\n\nYear: 1827.0\n\nSpecificHeat: 0.897\n\nNumberofShells: 3\n\nNumberofValence: 3.0\n",
	Slug:            "elements/aluminum",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Aluminum",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 28, 0, time.UTC),
	X:               -0.13109812317087122,
	Y:               -0.36250289407329234,
	Z:               -0.041910961731631446,
}}
var TagEduIastateEe311 = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"ee311-electromagnetic-fields-and-waves\"><a class=\"anchor permalink p-4\" href=\"#ee311-electromagnetic-fields-and-waves\">#</a> EE311: Electromagnetic Fields and Waves</h1>\n<p><strong>Course Title:</strong> Electromagnetic Fields and Waves<br>\n<strong>Description:</strong> Fundamentals and applications of electric and magnetic fields and materials. Electrostatics and magnetostatics, potentials, capacitance and inductance, energy, force, torque. Uniform plane electromagnetic waves, Poynting vector. Transmission lines: transient and sinusoidal steady-state conditions, reflection coefficient (<a href=\"https://catalog.iastate.edu/previouscatalogs/2022-2023/azcourses/e_e/#:~:text=Fundamentals%20and%20applications%20of%20electric,state%20conditions%2C%20reflection%20coefficient\">Electrical Engineering (E E) | Iowa State University Catalog</a>).<br>\n<strong>Tags:</strong></p>\n<ul>\n<li>electromagnetics</li>\n<li>electrostatics</li>\n<li>magnetostatics</li>\n<li>electromagnetic-waves</li>\n<li>transmission-lines</li>\n</ul>\n<p>The journey of learning is a continuous process that shapes our understanding and perception of the world around us. This essay presents a comprehensive reflection on my learning experience in the course &ldquo;Electromagnetic Fields and Waves&rdquo; (<code>EE311</code>) at <strong>Iowa State University</strong>. The course, which is a critical component of my Electrical Engineering curriculum, has significantly contributed to my academic growth and understanding of the subject matter. The following reflection will include an analysis of my learning process, the challenges I encountered, the strategies I adopted to overcome these challenges, and the lessons I learned throughout the course. This reflection will not only highlight my academic growth but also shed light on the importance of adaptability, critical thinking, and the effective use of technology in enhancing the learning experience.</p>\n<h2 id=\"what-did-i-learn\"><a class=\"anchor permalink p-4\" href=\"#what-did-i-learn\">#</a> What did I Learn</h2>\n<p>I feel that I learned a <strong>great deal</strong> this semester as always, but, this year especially, I feel that I battled every possible problem that a student could come across while maintaining my studies, work, and side-projects.</p>\n<p>I also relearned the importance of sight and the responsibility of myself needing to ensure that my visual impairment is treated to the best of my ability. I realized after the first or second exam that I should have switched to contacts earlier in the semester.</p>\n<p>Additionally, I learned that at some level, no amount of organization can justify the cost of a loss of either time or focus during a potential learning opportunity for learning. This further exposed to me the importance of balance and prioritization in achieving goals. It's crucial to understand that while organization is necessary, it should not compromise the time and focus required for learning. This understanding leads to a more efficient approach towards achieving personal and professional growth. This also emphasizes the need for flexibility in planning and scheduling in my life. It's important to allow room for adjustments and changes, as sticking too rigidly to a plan can limit opportunities for spontaneous learning, exploration of new ideas, or dedicated learning. Moreover, this insight highlights the value of being present in every moment. Rather than being preoccupied with planning or organizing, one should be fully engaged with the task at hand.</p>\n<p>Also learned to scratch out work before writing the final product just like in programming where encounter this same problem of having to tackle each issue as they arise and have to follow the process before being able to clean, optimize, and extend. This focus on the presentation of my written work was challenging as I have mostly moved to digital/keyboard writing for my notes and mathematics. Though since most <strong>Iowa State University</strong> classes require some level of penmanship (actual physical writing), I think that they should not! Allowing for more effective learning and applications of technologies is what I believe to be at the core of Iowa State, and I find it disheartening that they do not adopt new formats of learning almost <strong>contradictory</strong> to their vision statement:</p>\n<blockquote>\n<p>[!quote] Iowa State's Vision Statement<br>\nIowa State University will lead the world in advancing the land-grant ideals of putting science, technology, and human creativity to work</p>\n</blockquote>\n<h2 id=\"how-did-i-learnchange\"><a class=\"anchor permalink p-4\" href=\"#how-did-i-learnchange\">#</a> How did I Learn/Change</h2>\n<p>I feel that I learned a great deal this semester. More specifically, I feel that I not only changed a great deal, but I think that I also grew a lot as a person and as a student.</p>\n<p>I also improved my critical thinking skills and became more confident in my abilities through my studies, assignments and side-projects this semester. <strong>More recently</strong>, I gained a deeper understanding of the subjects that we covered in class, which has sparked my interest even more. The knowledge that I acquired this semester has not only helped me academically, but also in everyday life situations where penmanship is needed; that said though, I still remain steadfast in my beliefs that more avenues available to students of problem solving other than purely writing, specifically typing, should exist, but more on this later in <strong>How could I have learned better</strong>.</p>\n<h2 id=\"how-could-i-have-learned-better\"><a class=\"anchor permalink p-4\" href=\"#how-could-i-have-learned-better\">#</a> How could I have Learned Better</h2>\n<p>I feel that I could have learned better through a collection of vises that I will now describe:</p>\n<ol>\n<li>\n<p>Real-world Applications: Seeing how the things I'm learning apply to real-world situations would have made them more relevant and interesting. I thought that the various engineering scenarios that we encountered in the games were beneficial to this fact, but wished that there could have been more games like this.</p>\n</li>\n<li>\n<p>Technology-Enhanced Learning: Regarding the organization of the class in-terms of the online material, assignments, games, lectures, and announcements; unfortunately, not alone in thinking this, I think that the messy and chaotic online structure led many a student in the class to waste significant portions of time, including me. More surprising was the fact that we were ridiculed for not staying on top of the <strong>giant</strong> mess that accumulated over the course of the semester on canvas. Initially, I thought that it was a joke, but it soon became evident that we were expected to comb through the excetrions of information that would be silently uploaded over the course of the semester with obscere titles, names, and bodies to the texts.</p>\n</li>\n<li>\n<p>Multi-sensory Learning: Reading about this topic recently, I think that incorporating multiple senses in the learning process would have made it more immersive and memorable. This could be through tactile materials, audio lessons, or even taste and smell-based activities for certain subjects.</p>\n</li>\n<li>\n<p>Insomnia: Insomnia is a sleep disorder that is characterized by difficulty falling and/or staying asleep. People with insomnia have one or more of the following symptoms: difficulty falling asleep, waking up often during the night and having trouble going back to sleep, waking up too early in the morning, and feeling tired upon waking. I have dealt with horrid insomnia since I was a child, but have only recently, since sophomore year of college as I was pushing myself to accomplish more, how negatively impacting insomnia is to my everyday life. I am medicated for this, but have yet to find a solution that works permanently.</p>\n</li>\n</ol>\n<h2 id=\"what-i-would-do-differently\"><a class=\"anchor permalink p-4\" href=\"#what-i-would-do-differently\">#</a> What I Would Do Differently</h2>\n<p>Looking back, there are several things I would do differently. Firstly, I would have switched to contacts earlier in the semester to better manage my visual impairment. This would have allowed me to focus more on the course material and less on the physical challenges of seeing the board or reading text.</p>\n<p>Secondly, I would have been more flexible in my approach to learning. While organization is important, I found that it can sometimes hinder the learning process if it becomes too rigid. I would have allowed more room for spontaneous learning and exploration of new ideas.</p>\n<p>Thirdly, I would have advocated more for the use of technology in the classroom. I believe that digital tools can greatly enhance learning and make it more efficient. I would have pushed for more use of typing and digital note-taking, as I believe these methods are more effective for me.</p>\n<p>Lastly, I would have sought help earlier for my insomnia. I now realize how much it affected my ability to focus and learn. In the future, I will prioritize my health and well-being to ensure I am in the best possible state to learn and grow.</p>\n<h2 id=\"what-i-hope-to-achieve-in-the-future\"><a class=\"anchor permalink p-4\" href=\"#what-i-hope-to-achieve-in-the-future\">#</a> What I Hope to Achieve in the Future</h2>\n<p>Moving forward, I hope to continue improving my learning strategies and adapting them to suit my needs. I want to further develop my critical thinking skills and continue to grow both personally and professionally.</p>\n<p>I also hope to see more use of technology in the classroom. I believe that digital tools can greatly enhance learning and make it more efficient. I will advocate for this change and hope to see it implemented in future courses.</p>\n<p>Finally, I hope to manage my insomnia better so that it does not hinder my learning. I will seek help and explore different treatment options to find a solution that works for me.</p>\n<p>In conclusion, this semester has been a period of significant growth and learning for me. I have learned a lot about myself and my learning style, and I am excited to apply these insights in the future. Despite the challenges, I am grateful for the experiences and lessons I have gained from this course.</p>\n<h1 id=\"recommendations-for-future-students\"><a class=\"anchor permalink p-4\" href=\"#recommendations-for-future-students\">#</a> Recommendations for Future Students</h1>\n<p>Based on my experience in the EE311 course, &ldquo;Electromagnetic Fields and Waves,&rdquo; at Iowa State University, I have several recommendations for future students:</p>\n<blockquote>\n<p>First, be prepared to face challenges. This course is not easy, but it is incredibly rewarding. You will encounter problems that will test your understanding and push you to think critically. Don't be discouraged by these challenges. Instead, see them as opportunities to grow and learn.</p>\n</blockquote>\n<blockquote>\n<p>Second, prioritize your health. I struggled with insomnia during the semester, which significantly affected my ability to focus and learn. If you have any health issues, seek help early and make sure you are in the best possible state to learn and grow.</p>\n</blockquote>\n<blockquote>\n<p>Third, be flexible in your approach to learning. While organization is important, it should not compromise the time and focus required for learning. Allow room for adjustments and changes, as sticking too rigidly to a plan can limit opportunities for spontaneous learning and exploration of new ideas.</p>\n</blockquote>\n<blockquote>\n<p>Fourth, advocate for the resources you need. If you're struggling with the material, don't hesitate to seek out additional resources. This could mean scheduling office hours with your professor, finding a tutor, or utilizing online resources. Remember, it's okay to ask for help.</p>\n</blockquote>\n<blockquote>\n<p>Fifth, make sure to regularly review and practice the material. This course is heavy on concepts and equations, so consistent practice is key to understanding and application. Try to solve as many problems as you can and discuss them with classmates or professors if you're having trouble.</p>\n</blockquote>\n<blockquote>\n<p>Six, participate actively in class discussions. These are designed to enhance your understanding of the course content and provide practical applications of the theories being taught. They also offer opportunities for collaborative learning which can be very beneficial.</p>\n</blockquote>\n<blockquote>\n<p>Lastly, maintain a positive attitude towards learning. It's natural to feel overwhelmed or frustrated at times but try not to let these feelings deter you from your goals. Remember that every challenge is an opportunity for growth and every mistake a chance to learn.</p>\n</blockquote>\n<blockquote>\n<p>In conclusion, <code>EE311</code> can be a demanding course but with determination, flexibility, active participation and effective use of resources, it can also be a rewarding learning experience. Good luck!</p>\n</blockquote>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 19, 52, 23, 0, time.UTC),
	Description:     "Electromagnetic Fields and Waves taught at Iowa State University.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: ee311\naliases:\n  - \"EE311: Electromagnetic Fields and Waves\"\ntags: []\ncreated_at: 2025-03-28T19:52:23.000-06:00\ndescription: Electromagnetic Fields and Waves taught at Iowa State University.\ntitle: EE311\nupdated_at: 2025-03-28T20:08:07.000-06:00\n---\n\n# EE311: Electromagnetic Fields and Waves\n\n**Course Title:** Electromagnetic Fields and Waves  \n**Description:** Fundamentals and applications of electric and magnetic fields and materials. Electrostatics and magnetostatics, potentials, capacitance and inductance, energy, force, torque. Uniform plane electromagnetic waves, Poynting vector. Transmission lines: transient and sinusoidal steady-state conditions, reflection coefficient ([Electrical Engineering (E E) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2022-2023/azcourses/e_e/#:~:text=Fundamentals%20and%20applications%20of%20electric,state%20conditions%2C%20reflection%20coefficient)).  \n**Tags:**\n\n- electromagnetics\n- electrostatics\n- magnetostatics\n- electromagnetic-waves\n- transmission-lines\n\nThe journey of learning is a continuous process that shapes our understanding and perception of the world around us. This essay presents a comprehensive reflection on my learning experience in the course \"Electromagnetic Fields and Waves\" (`EE311`) at **Iowa State University**. The course, which is a critical component of my Electrical Engineering curriculum, has significantly contributed to my academic growth and understanding of the subject matter. The following reflection will include an analysis of my learning process, the challenges I encountered, the strategies I adopted to overcome these challenges, and the lessons I learned throughout the course. This reflection will not only highlight my academic growth but also shed light on the importance of adaptability, critical thinking, and the effective use of technology in enhancing the learning experience.\n\n## What did I Learn\n\nI feel that I learned a **great deal** this semester as always, but, this year especially, I feel that I battled every possible problem that a student could come across while maintaining my studies, work, and side-projects.\n\nI also relearned the importance of sight and the responsibility of myself needing to ensure that my visual impairment is treated to the best of my ability. I realized after the first or second exam that I should have switched to contacts earlier in the semester.\n\nAdditionally, I learned that at some level, no amount of organization can justify the cost of a loss of either time or focus during a potential learning opportunity for learning. This further exposed to me the importance of balance and prioritization in achieving goals. It's crucial to understand that while organization is necessary, it should not compromise the time and focus required for learning. This understanding leads to a more efficient approach towards achieving personal and professional growth. This also emphasizes the need for flexibility in planning and scheduling in my life. It's important to allow room for adjustments and changes, as sticking too rigidly to a plan can limit opportunities for spontaneous learning, exploration of new ideas, or dedicated learning. Moreover, this insight highlights the value of being present in every moment. Rather than being preoccupied with planning or organizing, one should be fully engaged with the task at hand.\n\nAlso learned to scratch out work before writing the final product just like in programming where encounter this same problem of having to tackle each issue as they arise and have to follow the process before being able to clean, optimize, and extend. This focus on the presentation of my written work was challenging as I have mostly moved to digital/keyboard writing for my notes and mathematics. Though since most **Iowa State University** classes require some level of penmanship (actual physical writing), I think that they should not! Allowing for more effective learning and applications of technologies is what I believe to be at the core of Iowa State, and I find it disheartening that they do not adopt new formats of learning almost **contradictory** to their vision statement:\n\n> [!quote] Iowa State's Vision Statement\n> Iowa State University will lead the world in advancing the land-grant ideals of putting science, technology, and human creativity to work\n\n## How did I Learn/Change\n\nI feel that I learned a great deal this semester. More specifically, I feel that I not only changed a great deal, but I think that I also grew a lot as a person and as a student.\n\nI also improved my critical thinking skills and became more confident in my abilities through my studies, assignments and side-projects this semester. **More recently**, I gained a deeper understanding of the subjects that we covered in class, which has sparked my interest even more. The knowledge that I acquired this semester has not only helped me academically, but also in everyday life situations where penmanship is needed; that said though, I still remain steadfast in my beliefs that more avenues available to students of problem solving other than purely writing, specifically typing, should exist, but more on this later in **How could I have learned better**.\n\n## How could I have Learned Better\n\nI feel that I could have learned better through a collection of vises that I will now describe:\n\n1. Real-world Applications: Seeing how the things I'm learning apply to real-world situations would have made them more relevant and interesting. I thought that the various engineering scenarios that we encountered in the games were beneficial to this fact, but wished that there could have been more games like this.\n\n2. Technology-Enhanced Learning: Regarding the organization of the class in-terms of the online material, assignments, games, lectures, and announcements; unfortunately, not alone in thinking this, I think that the messy and chaotic online structure led many a student in the class to waste significant portions of time, including me. More surprising was the fact that we were ridiculed for not staying on top of the **giant** mess that accumulated over the course of the semester on canvas. Initially, I thought that it was a joke, but it soon became evident that we were expected to comb through the excetrions of information that would be silently uploaded over the course of the semester with obscere titles, names, and bodies to the texts.\n\n3. Multi-sensory Learning: Reading about this topic recently, I think that incorporating multiple senses in the learning process would have made it more immersive and memorable. This could be through tactile materials, audio lessons, or even taste and smell-based activities for certain subjects.\n\n4. Insomnia: Insomnia is a sleep disorder that is characterized by difficulty falling and/or staying asleep. People with insomnia have one or more of the following symptoms: difficulty falling asleep, waking up often during the night and having trouble going back to sleep, waking up too early in the morning, and feeling tired upon waking. I have dealt with horrid insomnia since I was a child, but have only recently, since sophomore year of college as I was pushing myself to accomplish more, how negatively impacting insomnia is to my everyday life. I am medicated for this, but have yet to find a solution that works permanently.\n\n## What I Would Do Differently\n\nLooking back, there are several things I would do differently. Firstly, I would have switched to contacts earlier in the semester to better manage my visual impairment. This would have allowed me to focus more on the course material and less on the physical challenges of seeing the board or reading text.\n\nSecondly, I would have been more flexible in my approach to learning. While organization is important, I found that it can sometimes hinder the learning process if it becomes too rigid. I would have allowed more room for spontaneous learning and exploration of new ideas.\n\nThirdly, I would have advocated more for the use of technology in the classroom. I believe that digital tools can greatly enhance learning and make it more efficient. I would have pushed for more use of typing and digital note-taking, as I believe these methods are more effective for me.\n\nLastly, I would have sought help earlier for my insomnia. I now realize how much it affected my ability to focus and learn. In the future, I will prioritize my health and well-being to ensure I am in the best possible state to learn and grow.\n\n## What I Hope to Achieve in the Future\n\nMoving forward, I hope to continue improving my learning strategies and adapting them to suit my needs. I want to further develop my critical thinking skills and continue to grow both personally and professionally.\n\nI also hope to see more use of technology in the classroom. I believe that digital tools can greatly enhance learning and make it more efficient. I will advocate for this change and hope to see it implemented in future courses.\n\nFinally, I hope to manage my insomnia better so that it does not hinder my learning. I will seek help and explore different treatment options to find a solution that works for me.\n\nIn conclusion, this semester has been a period of significant growth and learning for me. I have learned a lot about myself and my learning style, and I am excited to apply these insights in the future. Despite the challenges, I am grateful for the experiences and lessons I have gained from this course.\n\n# Recommendations for Future Students\n\nBased on my experience in the EE311 course, \"Electromagnetic Fields and Waves,\" at Iowa State University, I have several recommendations for future students:\n\n> First, be prepared to face challenges. This course is not easy, but it is incredibly rewarding. You will encounter problems that will test your understanding and push you to think critically. Don't be discouraged by these challenges. Instead, see them as opportunities to grow and learn.\n\n> Second, prioritize your health. I struggled with insomnia during the semester, which significantly affected my ability to focus and learn. If you have any health issues, seek help early and make sure you are in the best possible state to learn and grow.\n\n> Third, be flexible in your approach to learning. While organization is important, it should not compromise the time and focus required for learning. Allow room for adjustments and changes, as sticking too rigidly to a plan can limit opportunities for spontaneous learning and exploration of new ideas.\n\n> Fourth, advocate for the resources you need. If you're struggling with the material, don't hesitate to seek out additional resources. This could mean scheduling office hours with your professor, finding a tutor, or utilizing online resources. Remember, it's okay to ask for help.\n\n> Fifth, make sure to regularly review and practice the material. This course is heavy on concepts and equations, so consistent practice is key to understanding and application. Try to solve as many problems as you can and discuss them with classmates or professors if you're having trouble.\n\n> Six, participate actively in class discussions. These are designed to enhance your understanding of the course content and provide practical applications of the theories being taught. They also offer opportunities for collaborative learning which can be very beneficial.\n\n> Lastly, maintain a positive attitude towards learning. It's natural to feel overwhelmed or frustrated at times but try not to let these feelings deter you from your goals. Remember that every challenge is an opportunity for growth and every mistake a chance to learn.\n\n> In conclusion, `EE311` can be a demanding course but with determination, flexibility, active participation and effective use of resources, it can also be a rewarding learning experience. Good luck!\n",
	Slug:            "edu/iastate/ee311",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "EE311",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 8, 7, 0, time.UTC),
	X:               0.6765298048553785,
	Y:               0.26477903482469944,
	Z:               -0.10848008308663218,
}}
var TagElementsArsenic = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"arsenic\"><a class=\"anchor permalink p-4\" href=\"#arsenic\">#</a> Arsenic</h1>\n<p>AtomicNumber: 33</p>\n<p>Element: Arsenic</p>\n<p>Symbol: As</p>\n<p>AtomicMass: 74.922</p>\n<p>NumberofNeutrons: 42</p>\n<p>NumberofProtons: 33</p>\n<p>NumberofElectrons: 33</p>\n<p>Period: 4</p>\n<p>Group: 15.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: nan</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: yes</p>\n<p>Type: Metalloid</p>\n<p>AtomicRadius: 1.3</p>\n<p>Electronegativity: 2.18</p>\n<p>FirstIonization: 9.7886</p>\n<p>Density: 5.78</p>\n<p>MeltingPoint: 1090.15</p>\n<p>BoilingPoint: 887.0</p>\n<p>NumberOfIsotopes: 14.0</p>\n<p>Discoverer: Albertus Magnus</p>\n<p>Year: 1250.0</p>\n<p>SpecificHeat: 0.329</p>\n<p>NumberofShells: 4</p>\n<p>NumberofValence: 5.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 40, 0, time.UTC),
	Description:     "Arsenic",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: arsenic\naliases:\n  - Arsenic\ntags: []\ncreated_at: 2025-03-28T20:06:40.000-06:00\ndescription: Arsenic\ntitle: Arsenic\nupdated_at: 2025-03-28T20:18:28.000-06:00\n---\n\n# Arsenic\n\nAtomicNumber: 33\n\nElement: Arsenic\n\nSymbol: As\n\nAtomicMass: 74.922\n\nNumberofNeutrons: 42\n\nNumberofProtons: 33\n\nNumberofElectrons: 33\n\nPeriod: 4\n\nGroup: 15.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: nan\n\nNonmetal: nan\n\nMetalloid: yes\n\nType: Metalloid\n\nAtomicRadius: 1.3\n\nElectronegativity: 2.18\n\nFirstIonization: 9.7886\n\nDensity: 5.78\n\nMeltingPoint: 1090.15\n\nBoilingPoint: 887.0\n\nNumberOfIsotopes: 14.0\n\nDiscoverer: Albertus Magnus\n\nYear: 1250.0\n\nSpecificHeat: 0.329\n\nNumberofShells: 4\n\nNumberofValence: 5.0\n",
	Slug:            "elements/arsenic",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Arsenic",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 28, 0, time.UTC),
	X:               -0.515513279941989,
	Y:               -0.10769807855363359,
	Z:               0.4356106986561357,
}}
var TagElementsAmericium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"americium\"><a class=\"anchor permalink p-4\" href=\"#americium\">#</a> Americium</h1>\n<p>AtomicNumber: 95</p>\n<p>Element: Americium</p>\n<p>Symbol: Am</p>\n<p>AtomicMass: 243.0</p>\n<p>NumberofNeutrons: 148</p>\n<p>NumberofProtons: 95</p>\n<p>NumberofElectrons: 95</p>\n<p>Period: 7</p>\n<p>Group: nan</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Actinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: 1.3</p>\n<p>FirstIonization: 5.9738</p>\n<p>Density: 13.7</p>\n<p>MeltingPoint: 1267.15</p>\n<p>BoilingPoint: 2880.0</p>\n<p>NumberOfIsotopes: 133.0</p>\n<p>Discoverer: Seaborg et al.</p>\n<p>Year: 1944.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 40, 0, time.UTC),
	Description:     "Americium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: americium\naliases:\n  - Americium\ntags: []\ncreated_at: 2025-03-28T20:06:40.000-06:00\ndescription: Americium\ntitle: Americium\nupdated_at: 2025-03-28T20:18:28.000-06:00\n---\n\n# Americium\n\nAtomicNumber: 95\n\nElement: Americium\n\nSymbol: Am\n\nAtomicMass: 243.0\n\nNumberofNeutrons: 148\n\nNumberofProtons: 95\n\nNumberofElectrons: 95\n\nPeriod: 7\n\nGroup: nan\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Actinide\n\nAtomicRadius: nan\n\nElectronegativity: 1.3\n\nFirstIonization: 5.9738\n\nDensity: 13.7\n\nMeltingPoint: 1267.15\n\nBoilingPoint: 2880.0\n\nNumberOfIsotopes: 133.0\n\nDiscoverer: Seaborg et al.\n\nYear: 1944.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: nan\n",
	Slug:            "elements/americium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Americium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 28, 0, time.UTC),
	X:               -0.6727784403763273,
	Y:               -0.11887004061490608,
	Z:               0.3356165694819164,
}}
var TagElementsAstatine = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"astatine\"><a class=\"anchor permalink p-4\" href=\"#astatine\">#</a> Astatine</h1>\n<p>AtomicNumber: 85</p>\n<p>Element: Astatine</p>\n<p>Symbol: At</p>\n<p>AtomicMass: 210.0</p>\n<p>NumberofNeutrons: 125</p>\n<p>NumberofProtons: 85</p>\n<p>NumberofElectrons: 85</p>\n<p>Period: 6</p>\n<p>Group: 17.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: yes</p>\n<p>Natural: yes</p>\n<p>Metal: nan</p>\n<p>Nonmetal: yes</p>\n<p>Metalloid: nan</p>\n<p>Type: Noble Gas</p>\n<p>AtomicRadius: 1.4</p>\n<p>Electronegativity: 2.2</p>\n<p>FirstIonization: 9.3</p>\n<p>Density: 7.0</p>\n<p>MeltingPoint: 575.15</p>\n<p>BoilingPoint: 610.0</p>\n<p>NumberOfIsotopes: 21.0</p>\n<p>Discoverer: Corson et al.</p>\n<p>Year: 1940.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: 7.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 40, 0, time.UTC),
	Description:     "Astatine",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: astatine\naliases:\n  - Astatine\ntags: []\ncreated_at: 2025-03-28T20:06:40.000-06:00\ndescription: Astatine\ntitle: Astatine\nupdated_at: 2025-03-28T20:18:28.000-06:00\n---\n\n# Astatine\n\nAtomicNumber: 85\n\nElement: Astatine\n\nSymbol: At\n\nAtomicMass: 210.0\n\nNumberofNeutrons: 125\n\nNumberofProtons: 85\n\nNumberofElectrons: 85\n\nPeriod: 6\n\nGroup: 17.0\n\nPhase: solid\n\nRadioactive: yes\n\nNatural: yes\n\nMetal: nan\n\nNonmetal: yes\n\nMetalloid: nan\n\nType: Noble Gas\n\nAtomicRadius: 1.4\n\nElectronegativity: 2.2\n\nFirstIonization: 9.3\n\nDensity: 7.0\n\nMeltingPoint: 575.15\n\nBoilingPoint: 610.0\n\nNumberOfIsotopes: 21.0\n\nDiscoverer: Corson et al.\n\nYear: 1940.0\n\nSpecificHeat: nan\n\nNumberofShells: 6\n\nNumberofValence: 7.0\n",
	Slug:            "elements/astatine",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Astatine",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 28, 0, time.UTC),
	X:               -1.3396711781604962,
	Y:               0.15797694958899922,
	Z:               0.24963095916713812,
}}
var TagElementsBarium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"barium\"><a class=\"anchor permalink p-4\" href=\"#barium\">#</a> Barium</h1>\n<p>AtomicNumber: 56</p>\n<p>Element: Barium</p>\n<p>Symbol: Ba</p>\n<p>AtomicMass: 137.327</p>\n<p>NumberofNeutrons: 81</p>\n<p>NumberofProtons: 56</p>\n<p>NumberofElectrons: 56</p>\n<p>Period: 6</p>\n<p>Group: 2.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Alkaline Earth Metal</p>\n<p>AtomicRadius: 2.8</p>\n<p>Electronegativity: 0.89</p>\n<p>FirstIonization: 5.2117</p>\n<p>Density: 3.59</p>\n<p>MeltingPoint: 1002.15</p>\n<p>BoilingPoint: 2170.0</p>\n<p>NumberOfIsotopes: 25.0</p>\n<p>Discoverer: Davy</p>\n<p>Year: 1808.0</p>\n<p>SpecificHeat: 0.204</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: 2.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 40, 0, time.UTC),
	Description:     "Barium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: barium\naliases:\n  - Barium\ntags: []\ncreated_at: 2025-03-28T20:06:40.000-06:00\ndescription: Barium\ntitle: Barium\nupdated_at: 2025-03-28T20:18:28.000-06:00\n---\n\n# Barium\n\nAtomicNumber: 56\n\nElement: Barium\n\nSymbol: Ba\n\nAtomicMass: 137.327\n\nNumberofNeutrons: 81\n\nNumberofProtons: 56\n\nNumberofElectrons: 56\n\nPeriod: 6\n\nGroup: 2.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Alkaline Earth Metal\n\nAtomicRadius: 2.8\n\nElectronegativity: 0.89\n\nFirstIonization: 5.2117\n\nDensity: 3.59\n\nMeltingPoint: 1002.15\n\nBoilingPoint: 2170.0\n\nNumberOfIsotopes: 25.0\n\nDiscoverer: Davy\n\nYear: 1808.0\n\nSpecificHeat: 0.204\n\nNumberofShells: 6\n\nNumberofValence: 2.0\n",
	Slug:            "elements/barium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Barium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 28, 0, time.UTC),
	X:               -0.32262385049216774,
	Y:               -0.5471835504511817,
	Z:               0.5500865029120852,
}}
var TagElementsAntimony = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"antimony\"><a class=\"anchor permalink p-4\" href=\"#antimony\">#</a> Antimony</h1>\n<p>AtomicNumber: 51</p>\n<p>Element: Antimony</p>\n<p>Symbol: Sb</p>\n<p>AtomicMass: 121.76</p>\n<p>NumberofNeutrons: 71</p>\n<p>NumberofProtons: 51</p>\n<p>NumberofElectrons: 51</p>\n<p>Period: 5</p>\n<p>Group: 15.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: nan</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: yes</p>\n<p>Type: Metalloid</p>\n<p>AtomicRadius: 1.5</p>\n<p>Electronegativity: 2.05</p>\n<p>FirstIonization: 8.6084</p>\n<p>Density: 6.69</p>\n<p>MeltingPoint: 904.05</p>\n<p>BoilingPoint: 1860.0</p>\n<p>NumberOfIsotopes: 29.0</p>\n<p>Discoverer: Early historic times</p>\n<p>Year: nan</p>\n<p>SpecificHeat: 0.207</p>\n<p>NumberofShells: 5</p>\n<p>NumberofValence: 5.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 40, 0, time.UTC),
	Description:     "Antimony",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: antimony\naliases:\n  - Antimony\ntags: []\ncreated_at: 2025-03-28T20:06:40.000-06:00\ndescription: Antimony\ntitle: Antimony\nupdated_at: 2025-03-28T20:18:28.000-06:00\n---\n\n# Antimony\n\nAtomicNumber: 51\n\nElement: Antimony\n\nSymbol: Sb\n\nAtomicMass: 121.76\n\nNumberofNeutrons: 71\n\nNumberofProtons: 51\n\nNumberofElectrons: 51\n\nPeriod: 5\n\nGroup: 15.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: nan\n\nNonmetal: nan\n\nMetalloid: yes\n\nType: Metalloid\n\nAtomicRadius: 1.5\n\nElectronegativity: 2.05\n\nFirstIonization: 8.6084\n\nDensity: 6.69\n\nMeltingPoint: 904.05\n\nBoilingPoint: 1860.0\n\nNumberOfIsotopes: 29.0\n\nDiscoverer: Early historic times\n\nYear: nan\n\nSpecificHeat: 0.207\n\nNumberofShells: 5\n\nNumberofValence: 5.0\n",
	Slug:            "elements/antimony",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Antimony",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 28, 0, time.UTC),
	X:               -0.5562391570918983,
	Y:               -0.2016286913687656,
	Z:               0.24542993514562644,
}}
var TagElementsArgon = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"argon\"><a class=\"anchor permalink p-4\" href=\"#argon\">#</a> Argon</h1>\n<p>AtomicNumber: 18</p>\n<p>Element: Argon</p>\n<p>Symbol: Ar</p>\n<p>AtomicMass: 39.948</p>\n<p>NumberofNeutrons: 22</p>\n<p>NumberofProtons: 18</p>\n<p>NumberofElectrons: 18</p>\n<p>Period: 3</p>\n<p>Group: 18.0</p>\n<p>Phase: gas</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: nan</p>\n<p>Nonmetal: yes</p>\n<p>Metalloid: nan</p>\n<p>Type: Noble Gas</p>\n<p>AtomicRadius: 0.88</p>\n<p>Electronegativity: nan</p>\n<p>FirstIonization: 15.7596</p>\n<p>Density: 0.00178</p>\n<p>MeltingPoint: 83.96</p>\n<p>BoilingPoint: 87.3</p>\n<p>NumberOfIsotopes: 8.0</p>\n<p>Discoverer: Rayleigh and Ramsay</p>\n<p>Year: 1894.0</p>\n<p>SpecificHeat: 0.52</p>\n<p>NumberofShells: 3</p>\n<p>NumberofValence: 8.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 40, 0, time.UTC),
	Description:     "Argon",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: argon\naliases:\n  - Argon\ntags: []\ncreated_at: 2025-03-28T20:06:40.000-06:00\ndescription: Argon\ntitle: Argon\nupdated_at: 2025-03-28T20:18:28.000-06:00\n---\n\n# Argon\n\nAtomicNumber: 18\n\nElement: Argon\n\nSymbol: Ar\n\nAtomicMass: 39.948\n\nNumberofNeutrons: 22\n\nNumberofProtons: 18\n\nNumberofElectrons: 18\n\nPeriod: 3\n\nGroup: 18.0\n\nPhase: gas\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: nan\n\nNonmetal: yes\n\nMetalloid: nan\n\nType: Noble Gas\n\nAtomicRadius: 0.88\n\nElectronegativity: nan\n\nFirstIonization: 15.7596\n\nDensity: 0.00178\n\nMeltingPoint: 83.96\n\nBoilingPoint: 87.3\n\nNumberOfIsotopes: 8.0\n\nDiscoverer: Rayleigh and Ramsay\n\nYear: 1894.0\n\nSpecificHeat: 0.52\n\nNumberofShells: 3\n\nNumberofValence: 8.0\n",
	Slug:            "elements/argon",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Argon",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 28, 0, time.UTC),
	X:               -1.589582510464624,
	Y:               -0.4638798080250712,
	Z:               0.12099705428053867,
}}
var TagElementsBeryllium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"beryllium\"><a class=\"anchor permalink p-4\" href=\"#beryllium\">#</a> Beryllium</h1>\n<p>AtomicNumber: 4</p>\n<p>Element: Beryllium</p>\n<p>Symbol: Be</p>\n<p>AtomicMass: 9.012</p>\n<p>NumberofNeutrons: 5</p>\n<p>NumberofProtons: 4</p>\n<p>NumberofElectrons: 4</p>\n<p>Period: 2</p>\n<p>Group: 2.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Alkaline Earth Metal</p>\n<p>AtomicRadius: 1.4</p>\n<p>Electronegativity: 1.57</p>\n<p>FirstIonization: 9.3227</p>\n<p>Density: 1.85</p>\n<p>MeltingPoint: 1560.15</p>\n<p>BoilingPoint: 2742.0</p>\n<p>NumberOfIsotopes: 6.0</p>\n<p>Discoverer: Vaulquelin</p>\n<p>Year: 1798.0</p>\n<p>SpecificHeat: 1.825</p>\n<p>NumberofShells: 2</p>\n<p>NumberofValence: 2.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 41, 0, time.UTC),
	Description:     "Beryllium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: beryllium\naliases:\n  - Beryllium\ntags: []\ncreated_at: 2025-03-28T20:06:41.000-06:00\ndescription: Beryllium\ntitle: Beryllium\nupdated_at: 2025-03-28T20:18:28.000-06:00\n---\n\n# Beryllium\n\nAtomicNumber: 4\n\nElement: Beryllium\n\nSymbol: Be\n\nAtomicMass: 9.012\n\nNumberofNeutrons: 5\n\nNumberofProtons: 4\n\nNumberofElectrons: 4\n\nPeriod: 2\n\nGroup: 2.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Alkaline Earth Metal\n\nAtomicRadius: 1.4\n\nElectronegativity: 1.57\n\nFirstIonization: 9.3227\n\nDensity: 1.85\n\nMeltingPoint: 1560.15\n\nBoilingPoint: 2742.0\n\nNumberOfIsotopes: 6.0\n\nDiscoverer: Vaulquelin\n\nYear: 1798.0\n\nSpecificHeat: 1.825\n\nNumberofShells: 2\n\nNumberofValence: 2.0\n",
	Slug:            "elements/beryllium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Beryllium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 28, 0, time.UTC),
	X:               -0.42460344026988567,
	Y:               0.0535067787222987,
	Z:               0.315406174549831,
}}
var TagElementsBismuth = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"bismuth\"><a class=\"anchor permalink p-4\" href=\"#bismuth\">#</a> Bismuth</h1>\n<p>AtomicNumber: 83</p>\n<p>Element: Bismuth</p>\n<p>Symbol: Bi</p>\n<p>AtomicMass: 208.98</p>\n<p>NumberofNeutrons: 126</p>\n<p>NumberofProtons: 83</p>\n<p>NumberofElectrons: 83</p>\n<p>Period: 6</p>\n<p>Group: 15.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Metal</p>\n<p>AtomicRadius: 1.6</p>\n<p>Electronegativity: 2.02</p>\n<p>FirstIonization: 7.2856</p>\n<p>Density: 9.81</p>\n<p>MeltingPoint: 544.67</p>\n<p>BoilingPoint: 1837.0</p>\n<p>NumberOfIsotopes: 19.0</p>\n<p>Discoverer: Geoffroy the Younger</p>\n<p>Year: 1753.0</p>\n<p>SpecificHeat: 0.122</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: 5.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 41, 0, time.UTC),
	Description:     "Bismuth",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: bismuth\naliases:\n  - Bismuth\ntags: []\ncreated_at: 2025-03-28T20:06:41.000-06:00\ndescription: Bismuth\ntitle: Bismuth\nupdated_at: 2025-03-28T20:18:28.000-06:00\n---\n\n# Bismuth\n\nAtomicNumber: 83\n\nElement: Bismuth\n\nSymbol: Bi\n\nAtomicMass: 208.98\n\nNumberofNeutrons: 126\n\nNumberofProtons: 83\n\nNumberofElectrons: 83\n\nPeriod: 6\n\nGroup: 15.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Metal\n\nAtomicRadius: 1.6\n\nElectronegativity: 2.02\n\nFirstIonization: 7.2856\n\nDensity: 9.81\n\nMeltingPoint: 544.67\n\nBoilingPoint: 1837.0\n\nNumberOfIsotopes: 19.0\n\nDiscoverer: Geoffroy the Younger\n\nYear: 1753.0\n\nSpecificHeat: 0.122\n\nNumberofShells: 6\n\nNumberofValence: 5.0\n",
	Slug:            "elements/bismuth",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Bismuth",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 28, 0, time.UTC),
	X:               -1.115411795471721,
	Y:               -0.8712350903113679,
	Z:               0.25428263193958334,
}}
var TagElementsBohrium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"bohrium\"><a class=\"anchor permalink p-4\" href=\"#bohrium\">#</a> Bohrium</h1>\n<p>AtomicNumber: 107</p>\n<p>Element: Bohrium</p>\n<p>Symbol: Bh</p>\n<p>AtomicMass: 264.0</p>\n<p>NumberofNeutrons: 157</p>\n<p>NumberofProtons: 107</p>\n<p>NumberofElectrons: 107</p>\n<p>Period: 7</p>\n<p>Group: 7.0</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transactinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: nan</p>\n<p>FirstIonization: nan</p>\n<p>Density: 37.0</p>\n<p>MeltingPoint: nan</p>\n<p>BoilingPoint: nan</p>\n<p>NumberOfIsotopes: nan</p>\n<p>Discoverer: Armbruster and M�nzenberg</p>\n<p>Year: 1981.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 41, 0, time.UTC),
	Description:     "Bohrium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: bohrium\naliases:\n  - Bohrium\ntags: []\ncreated_at: 2025-03-28T20:06:41.000-06:00\ndescription: Bohrium\ntitle: Bohrium\nupdated_at: 2025-03-28T20:18:29.000-06:00\n---\n\n# Bohrium\n\nAtomicNumber: 107\n\nElement: Bohrium\n\nSymbol: Bh\n\nAtomicMass: 264.0\n\nNumberofNeutrons: 157\n\nNumberofProtons: 107\n\nNumberofElectrons: 107\n\nPeriod: 7\n\nGroup: 7.0\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transactinide\n\nAtomicRadius: nan\n\nElectronegativity: nan\n\nFirstIonization: nan\n\nDensity: 37.0\n\nMeltingPoint: nan\n\nBoilingPoint: nan\n\nNumberOfIsotopes: nan\n\nDiscoverer: Armbruster and M�nzenberg\n\nYear: 1981.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: nan\n",
	Slug:            "elements/bohrium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Bohrium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 29, 0, time.UTC),
	X:               -0.7869170311745182,
	Y:               -0.8040342252680994,
	Z:               0.568869232123634,
}}
var TagElementsBoron = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"boron\"><a class=\"anchor permalink p-4\" href=\"#boron\">#</a> Boron</h1>\n<p>AtomicNumber: 5</p>\n<p>Element: Boron</p>\n<p>Symbol: B</p>\n<p>AtomicMass: 10.811</p>\n<p>NumberofNeutrons: 6</p>\n<p>NumberofProtons: 5</p>\n<p>NumberofElectrons: 5</p>\n<p>Period: 2</p>\n<p>Group: 13.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: nan</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: yes</p>\n<p>Type: Metalloid</p>\n<p>AtomicRadius: 1.2</p>\n<p>Electronegativity: 2.04</p>\n<p>FirstIonization: 8.298</p>\n<p>Density: 2.34</p>\n<p>MeltingPoint: 2573.15</p>\n<p>BoilingPoint: 4200.0</p>\n<p>NumberOfIsotopes: 6.0</p>\n<p>Discoverer: Gay-Lussac</p>\n<p>Year: 1808.0</p>\n<p>SpecificHeat: 1.026</p>\n<p>NumberofShells: 2</p>\n<p>NumberofValence: 3.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 41, 0, time.UTC),
	Description:     "Boron",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: boron\naliases:\n  - Boron\ntags: []\ncreated_at: 2025-03-28T20:06:41.000-06:00\ndescription: Boron\ntitle: Boron\nupdated_at: 2025-03-28T20:18:29.000-06:00\n---\n\n# Boron\n\nAtomicNumber: 5\n\nElement: Boron\n\nSymbol: B\n\nAtomicMass: 10.811\n\nNumberofNeutrons: 6\n\nNumberofProtons: 5\n\nNumberofElectrons: 5\n\nPeriod: 2\n\nGroup: 13.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: nan\n\nNonmetal: nan\n\nMetalloid: yes\n\nType: Metalloid\n\nAtomicRadius: 1.2\n\nElectronegativity: 2.04\n\nFirstIonization: 8.298\n\nDensity: 2.34\n\nMeltingPoint: 2573.15\n\nBoilingPoint: 4200.0\n\nNumberOfIsotopes: 6.0\n\nDiscoverer: Gay-Lussac\n\nYear: 1808.0\n\nSpecificHeat: 1.026\n\nNumberofShells: 2\n\nNumberofValence: 3.0\n",
	Slug:            "elements/boron",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Boron",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 29, 0, time.UTC),
	X:               -0.7946514905434677,
	Y:               -0.7224183860384471,
	Z:               0.40866637489318247,
}}
var TagElementsBromine = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"bromine\"><a class=\"anchor permalink p-4\" href=\"#bromine\">#</a> Bromine</h1>\n<p>AtomicNumber: 35</p>\n<p>Element: Bromine</p>\n<p>Symbol: Br</p>\n<p>AtomicMass: 79.904</p>\n<p>NumberofNeutrons: 45</p>\n<p>NumberofProtons: 35</p>\n<p>NumberofElectrons: 35</p>\n<p>Period: 4</p>\n<p>Group: 17.0</p>\n<p>Phase: liq</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: nan</p>\n<p>Nonmetal: yes</p>\n<p>Metalloid: nan</p>\n<p>Type: Halogen</p>\n<p>AtomicRadius: 1.1</p>\n<p>Electronegativity: 2.96</p>\n<p>FirstIonization: 11.8138</p>\n<p>Density: 3.12</p>\n<p>MeltingPoint: 266.05</p>\n<p>BoilingPoint: 332.0</p>\n<p>NumberOfIsotopes: 19.0</p>\n<p>Discoverer: Balard</p>\n<p>Year: 1826.0</p>\n<p>SpecificHeat: 0.474</p>\n<p>NumberofShells: 4</p>\n<p>NumberofValence: 7.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 41, 0, time.UTC),
	Description:     "Bromine",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: bromine\naliases:\n  - Bromine\ntags: []\ncreated_at: 2025-03-28T20:06:41.000-06:00\ndescription: Bromine\ntitle: Bromine\nupdated_at: 2025-03-28T20:18:29.000-06:00\n---\n\n# Bromine\n\nAtomicNumber: 35\n\nElement: Bromine\n\nSymbol: Br\n\nAtomicMass: 79.904\n\nNumberofNeutrons: 45\n\nNumberofProtons: 35\n\nNumberofElectrons: 35\n\nPeriod: 4\n\nGroup: 17.0\n\nPhase: liq\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: nan\n\nNonmetal: yes\n\nMetalloid: nan\n\nType: Halogen\n\nAtomicRadius: 1.1\n\nElectronegativity: 2.96\n\nFirstIonization: 11.8138\n\nDensity: 3.12\n\nMeltingPoint: 266.05\n\nBoilingPoint: 332.0\n\nNumberOfIsotopes: 19.0\n\nDiscoverer: Balard\n\nYear: 1826.0\n\nSpecificHeat: 0.474\n\nNumberofShells: 4\n\nNumberofValence: 7.0\n",
	Slug:            "elements/bromine",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Bromine",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 29, 0, time.UTC),
	X:               -1.3121772588264198,
	Y:               -0.3234291899592303,
	Z:               -0.058624110723562245,
}}
var TagElementsBerkelium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"berkelium\"><a class=\"anchor permalink p-4\" href=\"#berkelium\">#</a> Berkelium</h1>\n<p>AtomicNumber: 97</p>\n<p>Element: Berkelium</p>\n<p>Symbol: Bk</p>\n<p>AtomicMass: 247.0</p>\n<p>NumberofNeutrons: 150</p>\n<p>NumberofProtons: 97</p>\n<p>NumberofElectrons: 97</p>\n<p>Period: 7</p>\n<p>Group: nan</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Actinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: 1.3</p>\n<p>FirstIonization: 6.1979</p>\n<p>Density: 14.8</p>\n<p>MeltingPoint: 1259.15</p>\n<p>BoilingPoint: 983.0</p>\n<p>NumberOfIsotopes: 83.0</p>\n<p>Discoverer: Seaborg et al.</p>\n<p>Year: 1949.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 40, 0, time.UTC),
	Description:     "Berkelium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: berkelium\naliases:\n  - Berkelium\ntags: []\ncreated_at: 2025-03-28T20:06:40.000-06:00\ndescription: Berkelium\ntitle: Berkelium\nupdated_at: 2025-03-28T20:18:28.000-06:00\n---\n\n# Berkelium\n\nAtomicNumber: 97\n\nElement: Berkelium\n\nSymbol: Bk\n\nAtomicMass: 247.0\n\nNumberofNeutrons: 150\n\nNumberofProtons: 97\n\nNumberofElectrons: 97\n\nPeriod: 7\n\nGroup: nan\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Actinide\n\nAtomicRadius: nan\n\nElectronegativity: 1.3\n\nFirstIonization: 6.1979\n\nDensity: 14.8\n\nMeltingPoint: 1259.15\n\nBoilingPoint: 983.0\n\nNumberOfIsotopes: 83.0\n\nDiscoverer: Seaborg et al.\n\nYear: 1949.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: nan\n",
	Slug:            "elements/berkelium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Berkelium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 28, 0, time.UTC),
	X:               -0.7208181965289218,
	Y:               -0.48424922379057306,
	Z:               0.683548589427164,
}}
var TagElementsCadmium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"cadmium\"><a class=\"anchor permalink p-4\" href=\"#cadmium\">#</a> Cadmium</h1>\n<p>AtomicNumber: 48</p>\n<p>Element: Cadmium</p>\n<p>Symbol: Cd</p>\n<p>AtomicMass: 112.411</p>\n<p>NumberofNeutrons: 64</p>\n<p>NumberofProtons: 48</p>\n<p>NumberofElectrons: 48</p>\n<p>Period: 5</p>\n<p>Group: 12.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 1.7</p>\n<p>Electronegativity: 1.69</p>\n<p>FirstIonization: 8.9938</p>\n<p>Density: 8.69</p>\n<p>MeltingPoint: 594.33</p>\n<p>BoilingPoint: 1040.0</p>\n<p>NumberOfIsotopes: 22.0</p>\n<p>Discoverer: Stromeyer</p>\n<p>Year: 1817.0</p>\n<p>SpecificHeat: 0.232</p>\n<p>NumberofShells: 5</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 41, 0, time.UTC),
	Description:     "Cadmium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: cadmium\naliases:\n  - Cadmium\ntags: []\ncreated_at: 2025-03-28T20:06:41.000-06:00\ndescription: Cadmium\ntitle: Cadmium\nupdated_at: 2025-03-28T20:18:29.000-06:00\n---\n\n# Cadmium\n\nAtomicNumber: 48\n\nElement: Cadmium\n\nSymbol: Cd\n\nAtomicMass: 112.411\n\nNumberofNeutrons: 64\n\nNumberofProtons: 48\n\nNumberofElectrons: 48\n\nPeriod: 5\n\nGroup: 12.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 1.7\n\nElectronegativity: 1.69\n\nFirstIonization: 8.9938\n\nDensity: 8.69\n\nMeltingPoint: 594.33\n\nBoilingPoint: 1040.0\n\nNumberOfIsotopes: 22.0\n\nDiscoverer: Stromeyer\n\nYear: 1817.0\n\nSpecificHeat: 0.232\n\nNumberofShells: 5\n\nNumberofValence: nan\n",
	Slug:            "elements/cadmium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Cadmium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 29, 0, time.UTC),
	X:               -1.2121384836510776,
	Y:               -0.1141163426696622,
	Z:               0.3124901628209677,
}}
var TagElementsCalcium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"calcium\"><a class=\"anchor permalink p-4\" href=\"#calcium\">#</a> Calcium</h1>\n<p>AtomicNumber: 20</p>\n<p>Element: Calcium</p>\n<p>Symbol: Ca</p>\n<p>AtomicMass: 40.078</p>\n<p>NumberofNeutrons: 20</p>\n<p>NumberofProtons: 20</p>\n<p>NumberofElectrons: 20</p>\n<p>Period: 4</p>\n<p>Group: 2.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Alkaline Earth Metal</p>\n<p>AtomicRadius: 2.2</p>\n<p>Electronegativity: 1.0</p>\n<p>FirstIonization: 6.1132</p>\n<p>Density: 1.54</p>\n<p>MeltingPoint: 1112.15</p>\n<p>BoilingPoint: 1757.0</p>\n<p>NumberOfIsotopes: 14.0</p>\n<p>Discoverer: Davy</p>\n<p>Year: 1808.0</p>\n<p>SpecificHeat: 0.647</p>\n<p>NumberofShells: 4</p>\n<p>NumberofValence: 2.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 41, 0, time.UTC),
	Description:     "Calcium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: calcium\naliases:\n  - Calcium\ntags: []\ncreated_at: 2025-03-28T20:06:41.000-06:00\ndescription: Calcium\ntitle: Calcium\nupdated_at: 2025-03-28T20:18:29.000-06:00\n---\n\n# Calcium\n\nAtomicNumber: 20\n\nElement: Calcium\n\nSymbol: Ca\n\nAtomicMass: 40.078\n\nNumberofNeutrons: 20\n\nNumberofProtons: 20\n\nNumberofElectrons: 20\n\nPeriod: 4\n\nGroup: 2.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Alkaline Earth Metal\n\nAtomicRadius: 2.2\n\nElectronegativity: 1.0\n\nFirstIonization: 6.1132\n\nDensity: 1.54\n\nMeltingPoint: 1112.15\n\nBoilingPoint: 1757.0\n\nNumberOfIsotopes: 14.0\n\nDiscoverer: Davy\n\nYear: 1808.0\n\nSpecificHeat: 0.647\n\nNumberofShells: 4\n\nNumberofValence: 2.0\n",
	Slug:            "elements/calcium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Calcium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 29, 0, time.UTC),
	X:               -0.07170427866086151,
	Y:               -0.06418673925100227,
	Z:               0.18365015749016222,
}}
var TagElementsCalifornium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"californium\"><a class=\"anchor permalink p-4\" href=\"#californium\">#</a> Californium</h1>\n<p>AtomicNumber: 98</p>\n<p>Element: Californium</p>\n<p>Symbol: Cf</p>\n<p>AtomicMass: 251.0</p>\n<p>NumberofNeutrons: 153</p>\n<p>NumberofProtons: 98</p>\n<p>NumberofElectrons: 98</p>\n<p>Period: 7</p>\n<p>Group: nan</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Actinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: 1.3</p>\n<p>FirstIonization: 6.2817</p>\n<p>Density: 15.1</p>\n<p>MeltingPoint: 1925.15</p>\n<p>BoilingPoint: 1173.0</p>\n<p>NumberOfIsotopes: 123.0</p>\n<p>Discoverer: Seaborg et al.</p>\n<p>Year: 1950.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 41, 0, time.UTC),
	Description:     "Californium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: californium\naliases:\n  - Californium\ntags: []\ncreated_at: 2025-03-28T20:06:41.000-06:00\ndescription: Californium\ntitle: Californium\nupdated_at: 2025-03-28T20:18:29.000-06:00\n---\n\n# Californium\n\nAtomicNumber: 98\n\nElement: Californium\n\nSymbol: Cf\n\nAtomicMass: 251.0\n\nNumberofNeutrons: 153\n\nNumberofProtons: 98\n\nNumberofElectrons: 98\n\nPeriod: 7\n\nGroup: nan\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Actinide\n\nAtomicRadius: nan\n\nElectronegativity: 1.3\n\nFirstIonization: 6.2817\n\nDensity: 15.1\n\nMeltingPoint: 1925.15\n\nBoilingPoint: 1173.0\n\nNumberOfIsotopes: 123.0\n\nDiscoverer: Seaborg et al.\n\nYear: 1950.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: nan\n",
	Slug:            "elements/californium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Californium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 29, 0, time.UTC),
	X:               -0.7930554709166804,
	Y:               -0.15038050864222896,
	Z:               0.3568072711616795,
}}
var TagElementsCerium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"cerium\"><a class=\"anchor permalink p-4\" href=\"#cerium\">#</a> Cerium</h1>\n<p>AtomicNumber: 58</p>\n<p>Element: Cerium</p>\n<p>Symbol: Ce</p>\n<p>AtomicMass: 140.116</p>\n<p>NumberofNeutrons: 82</p>\n<p>NumberofProtons: 58</p>\n<p>NumberofElectrons: 58</p>\n<p>Period: 6</p>\n<p>Group: nan</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Lanthanide</p>\n<p>AtomicRadius: 2.7</p>\n<p>Electronegativity: 1.12</p>\n<p>FirstIonization: 5.5387</p>\n<p>Density: 6.77</p>\n<p>MeltingPoint: 1071.15</p>\n<p>BoilingPoint: 3716.0</p>\n<p>NumberOfIsotopes: 19.0</p>\n<p>Discoverer: Berzelius</p>\n<p>Year: 1803.0</p>\n<p>SpecificHeat: 0.192</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 41, 0, time.UTC),
	Description:     "Cerium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: cerium\naliases:\n  - Cerium\ntags: []\ncreated_at: 2025-03-28T20:06:41.000-06:00\ndescription: Cerium\ntitle: Cerium\nupdated_at: 2025-03-28T20:18:29.000-06:00\n---\n\n# Cerium\n\nAtomicNumber: 58\n\nElement: Cerium\n\nSymbol: Ce\n\nAtomicMass: 140.116\n\nNumberofNeutrons: 82\n\nNumberofProtons: 58\n\nNumberofElectrons: 58\n\nPeriod: 6\n\nGroup: nan\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Lanthanide\n\nAtomicRadius: 2.7\n\nElectronegativity: 1.12\n\nFirstIonization: 5.5387\n\nDensity: 6.77\n\nMeltingPoint: 1071.15\n\nBoilingPoint: 3716.0\n\nNumberOfIsotopes: 19.0\n\nDiscoverer: Berzelius\n\nYear: 1803.0\n\nSpecificHeat: 0.192\n\nNumberofShells: 6\n\nNumberofValence: nan\n",
	Slug:            "elements/cerium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Cerium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 29, 0, time.UTC),
	X:               -0.5900734064172651,
	Y:               -0.3965387324501537,
	Z:               0.4234512485693359,
}}
var TagElementsCarbon = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"carbon\"><a class=\"anchor permalink p-4\" href=\"#carbon\">#</a> Carbon</h1>\n<p>AtomicNumber: 6</p>\n<p>Element: Carbon</p>\n<p>Symbol: C</p>\n<p>AtomicMass: 12.011</p>\n<p>NumberofNeutrons: 6</p>\n<p>NumberofProtons: 6</p>\n<p>NumberofElectrons: 6</p>\n<p>Period: 2</p>\n<p>Group: 14.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: nan</p>\n<p>Nonmetal: yes</p>\n<p>Metalloid: nan</p>\n<p>Type: Nonmetal</p>\n<p>AtomicRadius: 0.91</p>\n<p>Electronegativity: 2.55</p>\n<p>FirstIonization: 11.2603</p>\n<p>Density: 2.27</p>\n<p>MeltingPoint: 3948.15</p>\n<p>BoilingPoint: 4300.0</p>\n<p>NumberOfIsotopes: 7.0</p>\n<p>Discoverer: Prehistoric</p>\n<p>Year: nan</p>\n<p>SpecificHeat: 0.709</p>\n<p>NumberofShells: 2</p>\n<p>NumberofValence: 4.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 41, 0, time.UTC),
	Description:     "Carbon",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: carbon\naliases:\n  - Carbon\ntags: []\ncreated_at: 2025-03-28T20:06:41.000-06:00\ndescription: Carbon\ntitle: Carbon\nupdated_at: 2025-03-28T20:18:29.000-06:00\n---\n\n# Carbon\n\nAtomicNumber: 6\n\nElement: Carbon\n\nSymbol: C\n\nAtomicMass: 12.011\n\nNumberofNeutrons: 6\n\nNumberofProtons: 6\n\nNumberofElectrons: 6\n\nPeriod: 2\n\nGroup: 14.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: nan\n\nNonmetal: yes\n\nMetalloid: nan\n\nType: Nonmetal\n\nAtomicRadius: 0.91\n\nElectronegativity: 2.55\n\nFirstIonization: 11.2603\n\nDensity: 2.27\n\nMeltingPoint: 3948.15\n\nBoilingPoint: 4300.0\n\nNumberOfIsotopes: 7.0\n\nDiscoverer: Prehistoric\n\nYear: nan\n\nSpecificHeat: 0.709\n\nNumberofShells: 2\n\nNumberofValence: 4.0\n",
	Slug:            "elements/carbon",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Carbon",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 29, 0, time.UTC),
	X:               -1.2834500071815675,
	Y:               -0.7955692907258824,
	Z:               0.33122672836963235,
}}
var TagElementsCesium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"cesium\"><a class=\"anchor permalink p-4\" href=\"#cesium\">#</a> Cesium</h1>\n<p>AtomicNumber: 55</p>\n<p>Element: Cesium</p>\n<p>Symbol: Cs</p>\n<p>AtomicMass: 132.905</p>\n<p>NumberofNeutrons: 78</p>\n<p>NumberofProtons: 55</p>\n<p>NumberofElectrons: 55</p>\n<p>Period: 6</p>\n<p>Group: 1.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Alkali Metal</p>\n<p>AtomicRadius: 3.3</p>\n<p>Electronegativity: 0.79</p>\n<p>FirstIonization: 3.8939</p>\n<p>Density: 1.87</p>\n<p>MeltingPoint: 301.7</p>\n<p>BoilingPoint: 944.0</p>\n<p>NumberOfIsotopes: 22.0</p>\n<p>Discoverer: Bunsen and Kirchoff</p>\n<p>Year: 1860.0</p>\n<p>SpecificHeat: 0.242</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: 1.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 41, 0, time.UTC),
	Description:     "Cesium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: cesium\naliases:\n  - Cesium\ntags: []\ncreated_at: 2025-03-28T20:06:41.000-06:00\ndescription: Cesium\ntitle: Cesium\nupdated_at: 2025-03-28T20:18:29.000-06:00\n---\n\n# Cesium\n\nAtomicNumber: 55\n\nElement: Cesium\n\nSymbol: Cs\n\nAtomicMass: 132.905\n\nNumberofNeutrons: 78\n\nNumberofProtons: 55\n\nNumberofElectrons: 55\n\nPeriod: 6\n\nGroup: 1.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Alkali Metal\n\nAtomicRadius: 3.3\n\nElectronegativity: 0.79\n\nFirstIonization: 3.8939\n\nDensity: 1.87\n\nMeltingPoint: 301.7\n\nBoilingPoint: 944.0\n\nNumberOfIsotopes: 22.0\n\nDiscoverer: Bunsen and Kirchoff\n\nYear: 1860.0\n\nSpecificHeat: 0.242\n\nNumberofShells: 6\n\nNumberofValence: 1.0\n",
	Slug:            "elements/cesium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Cesium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 29, 0, time.UTC),
	X:               -0.7226394590985578,
	Y:               -0.5462569038377497,
	Z:               0.273213584396487,
}}
var TagElementsChromium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"chromium\"><a class=\"anchor permalink p-4\" href=\"#chromium\">#</a> Chromium</h1>\n<p>AtomicNumber: 24</p>\n<p>Element: Chromium</p>\n<p>Symbol: Cr</p>\n<p>AtomicMass: 51.996</p>\n<p>NumberofNeutrons: 28</p>\n<p>NumberofProtons: 24</p>\n<p>NumberofElectrons: 24</p>\n<p>Period: 4</p>\n<p>Group: 6.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 1.9</p>\n<p>Electronegativity: 1.66</p>\n<p>FirstIonization: 6.7665</p>\n<p>Density: 7.15</p>\n<p>MeltingPoint: 2130.15</p>\n<p>BoilingPoint: 2944.0</p>\n<p>NumberOfIsotopes: 9.0</p>\n<p>Discoverer: Vauquelin</p>\n<p>Year: 1797.0</p>\n<p>SpecificHeat: 0.449</p>\n<p>NumberofShells: 4</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 41, 0, time.UTC),
	Description:     "Chromium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: chromium\naliases:\n  - Chromium\ntags: []\ncreated_at: 2025-03-28T20:06:41.000-06:00\ndescription: Chromium\ntitle: Chromium\nupdated_at: 2025-03-28T20:18:29.000-06:00\n---\n\n# Chromium\n\nAtomicNumber: 24\n\nElement: Chromium\n\nSymbol: Cr\n\nAtomicMass: 51.996\n\nNumberofNeutrons: 28\n\nNumberofProtons: 24\n\nNumberofElectrons: 24\n\nPeriod: 4\n\nGroup: 6.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 1.9\n\nElectronegativity: 1.66\n\nFirstIonization: 6.7665\n\nDensity: 7.15\n\nMeltingPoint: 2130.15\n\nBoilingPoint: 2944.0\n\nNumberOfIsotopes: 9.0\n\nDiscoverer: Vauquelin\n\nYear: 1797.0\n\nSpecificHeat: 0.449\n\nNumberofShells: 4\n\nNumberofValence: nan\n",
	Slug:            "elements/chromium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Chromium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 29, 0, time.UTC),
	X:               -1.0676321901287271,
	Y:               -0.673417782947579,
	Z:               0.15773194046812766,
}}
var TagElementsChlorine = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"chlorine\"><a class=\"anchor permalink p-4\" href=\"#chlorine\">#</a> Chlorine</h1>\n<p>AtomicNumber: 17</p>\n<p>Element: Chlorine</p>\n<p>Symbol: Cl</p>\n<p>AtomicMass: 35.453</p>\n<p>NumberofNeutrons: 18</p>\n<p>NumberofProtons: 17</p>\n<p>NumberofElectrons: 17</p>\n<p>Period: 3</p>\n<p>Group: 17.0</p>\n<p>Phase: gas</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: nan</p>\n<p>Nonmetal: yes</p>\n<p>Metalloid: nan</p>\n<p>Type: Halogen</p>\n<p>AtomicRadius: 0.97</p>\n<p>Electronegativity: 3.16</p>\n<p>FirstIonization: 12.9676</p>\n<p>Density: 0.00321</p>\n<p>MeltingPoint: 172.31</p>\n<p>BoilingPoint: 239.11</p>\n<p>NumberOfIsotopes: 11.0</p>\n<p>Discoverer: Scheele</p>\n<p>Year: 1774.0</p>\n<p>SpecificHeat: 0.479</p>\n<p>NumberofShells: 3</p>\n<p>NumberofValence: 7.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 41, 0, time.UTC),
	Description:     "Chlorine",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: chlorine\naliases:\n  - Chlorine\ntags: []\ncreated_at: 2025-03-28T20:06:41.000-06:00\ndescription: Chlorine\ntitle: Chlorine\nupdated_at: 2025-03-28T20:18:29.000-06:00\n---\n\n# Chlorine\n\nAtomicNumber: 17\n\nElement: Chlorine\n\nSymbol: Cl\n\nAtomicMass: 35.453\n\nNumberofNeutrons: 18\n\nNumberofProtons: 17\n\nNumberofElectrons: 17\n\nPeriod: 3\n\nGroup: 17.0\n\nPhase: gas\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: nan\n\nNonmetal: yes\n\nMetalloid: nan\n\nType: Halogen\n\nAtomicRadius: 0.97\n\nElectronegativity: 3.16\n\nFirstIonization: 12.9676\n\nDensity: 0.00321\n\nMeltingPoint: 172.31\n\nBoilingPoint: 239.11\n\nNumberOfIsotopes: 11.0\n\nDiscoverer: Scheele\n\nYear: 1774.0\n\nSpecificHeat: 0.479\n\nNumberofShells: 3\n\nNumberofValence: 7.0\n",
	Slug:            "elements/chlorine",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Chlorine",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 29, 0, time.UTC),
	X:               -1.8771907897234432,
	Y:               -0.30348667219262326,
	Z:               0.004387137320333467,
}}
var TagElementsCopernicium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"copernicium\"><a class=\"anchor permalink p-4\" href=\"#copernicium\">#</a> Copernicium</h1>\n<p>AtomicNumber: 112</p>\n<p>Element: Copernicium</p>\n<p>Symbol: Cn</p>\n<p>AtomicMass: 285.0</p>\n<p>NumberofNeutrons: 173</p>\n<p>NumberofProtons: 112</p>\n<p>NumberofElectrons: 112</p>\n<p>Period: 7</p>\n<p>Group: 12.0</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transactinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: nan</p>\n<p>FirstIonization: nan</p>\n<p>Density: nan</p>\n<p>MeltingPoint: nan</p>\n<p>BoilingPoint: nan</p>\n<p>NumberOfIsotopes: nan</p>\n<p>Discoverer: nan</p>\n<p>Year: 1996.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 41, 0, time.UTC),
	Description:     "Copernicium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: copernicium\naliases:\n  - Copernicium\ntags: []\ncreated_at: 2025-03-28T20:06:41.000-06:00\ndescription: Copernicium\ntitle: Copernicium\nupdated_at: 2025-03-28T20:18:29.000-06:00\n---\n\n# Copernicium\n\nAtomicNumber: 112\n\nElement: Copernicium\n\nSymbol: Cn\n\nAtomicMass: 285.0\n\nNumberofNeutrons: 173\n\nNumberofProtons: 112\n\nNumberofElectrons: 112\n\nPeriod: 7\n\nGroup: 12.0\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transactinide\n\nAtomicRadius: nan\n\nElectronegativity: nan\n\nFirstIonization: nan\n\nDensity: nan\n\nMeltingPoint: nan\n\nBoilingPoint: nan\n\nNumberOfIsotopes: nan\n\nDiscoverer: nan\n\nYear: 1996.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: nan\n",
	Slug:            "elements/copernicium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Copernicium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 29, 0, time.UTC),
	X:               -1.2299733718624974,
	Y:               0.09934630371963946,
	Z:               0.4207974630280501,
}}
var TagElementsCobalt = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"cobalt\"><a class=\"anchor permalink p-4\" href=\"#cobalt\">#</a> Cobalt</h1>\n<p>AtomicNumber: 27</p>\n<p>Element: Cobalt</p>\n<p>Symbol: Co</p>\n<p>AtomicMass: 58.933</p>\n<p>NumberofNeutrons: 32</p>\n<p>NumberofProtons: 27</p>\n<p>NumberofElectrons: 27</p>\n<p>Period: 4</p>\n<p>Group: 9.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 1.7</p>\n<p>Electronegativity: 1.88</p>\n<p>FirstIonization: 7.881</p>\n<p>Density: 8.86</p>\n<p>MeltingPoint: 1768.15</p>\n<p>BoilingPoint: 3200.0</p>\n<p>NumberOfIsotopes: 14.0</p>\n<p>Discoverer: Brandt</p>\n<p>Year: 1735.0</p>\n<p>SpecificHeat: 0.421</p>\n<p>NumberofShells: 4</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 41, 0, time.UTC),
	Description:     "Cobalt",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: cobalt\naliases:\n  - Cobalt\ntags: []\ncreated_at: 2025-03-28T20:06:41.000-06:00\ndescription: Cobalt\ntitle: Cobalt\nupdated_at: 2025-03-28T20:18:29.000-06:00\n---\n\n# Cobalt\n\nAtomicNumber: 27\n\nElement: Cobalt\n\nSymbol: Co\n\nAtomicMass: 58.933\n\nNumberofNeutrons: 32\n\nNumberofProtons: 27\n\nNumberofElectrons: 27\n\nPeriod: 4\n\nGroup: 9.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 1.7\n\nElectronegativity: 1.88\n\nFirstIonization: 7.881\n\nDensity: 8.86\n\nMeltingPoint: 1768.15\n\nBoilingPoint: 3200.0\n\nNumberOfIsotopes: 14.0\n\nDiscoverer: Brandt\n\nYear: 1735.0\n\nSpecificHeat: 0.421\n\nNumberofShells: 4\n\nNumberofValence: nan\n",
	Slug:            "elements/cobalt",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Cobalt",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 29, 0, time.UTC),
	X:               -1.0232893965781786,
	Y:               -0.3362601516319961,
	Z:               -0.10843974141442708,
}}
var TagElementsDarmstadtium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"darmstadtium\"><a class=\"anchor permalink p-4\" href=\"#darmstadtium\">#</a> Darmstadtium</h1>\n<p>AtomicNumber: 110</p>\n<p>Element: Darmstadtium</p>\n<p>Symbol: Ds</p>\n<p>AtomicMass: 271.0</p>\n<p>NumberofNeutrons: 161</p>\n<p>NumberofProtons: 110</p>\n<p>NumberofElectrons: 110</p>\n<p>Period: 7</p>\n<p>Group: 10.0</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transactinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: nan</p>\n<p>FirstIonization: nan</p>\n<p>Density: nan</p>\n<p>MeltingPoint: nan</p>\n<p>BoilingPoint: nan</p>\n<p>NumberOfIsotopes: nan</p>\n<p>Discoverer: nan</p>\n<p>Year: 1994.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 42, 0, time.UTC),
	Description:     "Darmstadtium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: darmstadtium\naliases:\n  - Darmstadtium\ntags: []\ncreated_at: 2025-03-28T20:06:42.000-06:00\ndescription: Darmstadtium\ntitle: Darmstadtium\nupdated_at: 2025-03-28T20:18:29.000-06:00\n---\n\n# Darmstadtium\n\nAtomicNumber: 110\n\nElement: Darmstadtium\n\nSymbol: Ds\n\nAtomicMass: 271.0\n\nNumberofNeutrons: 161\n\nNumberofProtons: 110\n\nNumberofElectrons: 110\n\nPeriod: 7\n\nGroup: 10.0\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transactinide\n\nAtomicRadius: nan\n\nElectronegativity: nan\n\nFirstIonization: nan\n\nDensity: nan\n\nMeltingPoint: nan\n\nBoilingPoint: nan\n\nNumberOfIsotopes: nan\n\nDiscoverer: nan\n\nYear: 1994.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: nan\n",
	Slug:            "elements/darmstadtium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Darmstadtium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 29, 0, time.UTC),
	X:               -0.727071795802922,
	Y:               -0.33454940890450136,
	Z:               -0.21357982657107774,
}}
var TagElementsCurium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"curium\"><a class=\"anchor permalink p-4\" href=\"#curium\">#</a> Curium</h1>\n<p>AtomicNumber: 96</p>\n<p>Element: Curium</p>\n<p>Symbol: Cm</p>\n<p>AtomicMass: 247.0</p>\n<p>NumberofNeutrons: 151</p>\n<p>NumberofProtons: 96</p>\n<p>NumberofElectrons: 96</p>\n<p>Period: 7</p>\n<p>Group: nan</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Actinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: 1.3</p>\n<p>FirstIonization: 5.9915</p>\n<p>Density: 13.5</p>\n<p>MeltingPoint: 1340.15</p>\n<p>BoilingPoint: 3383.0</p>\n<p>NumberOfIsotopes: 133.0</p>\n<p>Discoverer: Seaborg et al.</p>\n<p>Year: 1944.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 41, 0, time.UTC),
	Description:     "Curium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: curium\naliases:\n  - Curium\ntags: []\ncreated_at: 2025-03-28T20:06:41.000-06:00\ndescription: Curium\ntitle: Curium\nupdated_at: 2025-03-28T20:18:29.000-06:00\n---\n\n# Curium\n\nAtomicNumber: 96\n\nElement: Curium\n\nSymbol: Cm\n\nAtomicMass: 247.0\n\nNumberofNeutrons: 151\n\nNumberofProtons: 96\n\nNumberofElectrons: 96\n\nPeriod: 7\n\nGroup: nan\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Actinide\n\nAtomicRadius: nan\n\nElectronegativity: 1.3\n\nFirstIonization: 5.9915\n\nDensity: 13.5\n\nMeltingPoint: 1340.15\n\nBoilingPoint: 3383.0\n\nNumberOfIsotopes: 133.0\n\nDiscoverer: Seaborg et al.\n\nYear: 1944.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: nan\n",
	Slug:            "elements/curium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Curium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 29, 0, time.UTC),
	X:               -0.8093338560425658,
	Y:               -0.31986484440972157,
	Z:               0.8008088495731744,
}}
var TagEduIastateEnglish314 = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"engl-314-technical-communication\"><a class=\"anchor permalink p-4\" href=\"#engl-314-technical-communication\">#</a> ENGL 314: Technical Communication</h1>\n<p><strong>Course Title:</strong> Technical Communication<br>\n<strong>Description:</strong> Rhetorical concepts and processes to successfully communicate technical information individually and collaboratively via written, oral, visual, and electronic modes. Emphasizes the major strategies for analyzing expert and lay audiences and adapting information to those audiences. Covers developing and designing usable technical documentation, visualizing data, and presenting technical information orally (<a href=\"https://catalog.iastate.edu/previouscatalogs/2018-2019/azcourses/engl/#:~:text=Rhetorical%20concepts%20and%20processes%20to,and%20presenting%20technical%20information%20orally\">English (ENGL) | Iowa State University Catalog</a>).<br>\n<strong>Tags:</strong></p>\n<ul>\n<li>technical-communication</li>\n<li>audience-analysis</li>\n<li>technical-documentation</li>\n<li>data-visualization</li>\n<li>presentation-skills</li>\n</ul>\n<p>Through readings, lecture videos, discussions, and assignments, I learned to better:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> Apply rhetorical principles to technical communication.</li>\n<li><input disabled=\"\" type=\"checkbox\"> Implement principles of effective document design, including the display of quantitative and qualitative data in technical communication.</li>\n<li><input disabled=\"\" type=\"checkbox\"> Analyze and explain the influences of organizational settings in the composition of technical and professional documents.</li>\n<li><input disabled=\"\" type=\"checkbox\"> Identify unique conventions across disciplines, and explain and apply the specific conventions of your discipline.</li>\n<li><input disabled=\"\" type=\"checkbox\"> Participate in the collaborative planning and execution of a project, and practice effective group communication skills.</li>\n<li><input disabled=\"\" type=\"checkbox\"> Identify and explain how ethical issues influence research, presentation of source material, document design, and documentation practices in your discipline.</li>\n</ul>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 19, 54, 1, 0, time.UTC),
	Description:     "ENGL 314: Technical Communication",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: english314\naliases:\n  - \"ENGL 314: Technical Communication\"\ntags: []\ncreated_at: 2025-03-28T19:54:01.000-06:00\ndescription: \"ENGL 314: Technical Communication\"\ntitle: ENGL314\nupdated_at: 2025-03-30T10:06:16.000-06:00\n---\n\n# ENGL 314: Technical Communication\n\n**Course Title:** Technical Communication  \n**Description:** Rhetorical concepts and processes to successfully communicate technical information individually and collaboratively via written, oral, visual, and electronic modes. Emphasizes the major strategies for analyzing expert and lay audiences and adapting information to those audiences. Covers developing and designing usable technical documentation, visualizing data, and presenting technical information orally ([English (ENGL) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2018-2019/azcourses/engl/#:~:text=Rhetorical%20concepts%20and%20processes%20to,and%20presenting%20technical%20information%20orally)).  \n**Tags:**\n\n- technical-communication\n- audience-analysis\n- technical-documentation\n- data-visualization\n- presentation-skills\n\nThrough readings, lecture videos, discussions, and assignments, I learned to better:\n\n- [ ] Apply rhetorical principles to technical communication.\n- [ ] Implement principles of effective document design, including the display of quantitative and qualitative data in technical communication.\n- [ ] Analyze and explain the influences of organizational settings in the composition of technical and professional documents.\n- [ ] Identify unique conventions across disciplines, and explain and apply the specific conventions of your discipline.\n- [ ] Participate in the collaborative planning and execution of a project, and practice effective group communication skills.\n- [ ] Identify and explain how ethical issues influence research, presentation of source material, document design, and documentation practices in your discipline.\n",
	Slug:            "edu/iastate/english314",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "ENGL314",
	UpdatedAt:       time.Date(2025, time.March, 30, 10, 6, 16, 0, time.UTC),
	X:               -0.822018201348407,
	Y:               0.8837573286587096,
	Z:               0.07827241035464758,
}}
var TagElementsEinsteinium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"einsteinium\"><a class=\"anchor permalink p-4\" href=\"#einsteinium\">#</a> Einsteinium</h1>\n<p>AtomicNumber: 99</p>\n<p>Element: Einsteinium</p>\n<p>Symbol: Es</p>\n<p>AtomicMass: 252.0</p>\n<p>NumberofNeutrons: 153</p>\n<p>NumberofProtons: 99</p>\n<p>NumberofElectrons: 99</p>\n<p>Period: 7</p>\n<p>Group: nan</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Actinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: 1.3</p>\n<p>FirstIonization: 6.42</p>\n<p>Density: 13.5</p>\n<p>MeltingPoint: 1133.15</p>\n<p>BoilingPoint: nan</p>\n<p>NumberOfIsotopes: 123.0</p>\n<p>Discoverer: Ghiorso et al.</p>\n<p>Year: 1952.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 42, 0, time.UTC),
	Description:     "Einsteinium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: einsteinium\naliases:\n  - Einsteinium\ntags: []\ncreated_at: 2025-03-28T20:06:42.000-06:00\ndescription: Einsteinium\ntitle: Einsteinium\nupdated_at: 2025-03-28T20:18:29.000-06:00\n---\n\n# Einsteinium\n\nAtomicNumber: 99\n\nElement: Einsteinium\n\nSymbol: Es\n\nAtomicMass: 252.0\n\nNumberofNeutrons: 153\n\nNumberofProtons: 99\n\nNumberofElectrons: 99\n\nPeriod: 7\n\nGroup: nan\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Actinide\n\nAtomicRadius: nan\n\nElectronegativity: 1.3\n\nFirstIonization: 6.42\n\nDensity: 13.5\n\nMeltingPoint: 1133.15\n\nBoilingPoint: nan\n\nNumberOfIsotopes: 123.0\n\nDiscoverer: Ghiorso et al.\n\nYear: 1952.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: nan\n",
	Slug:            "elements/einsteinium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Einsteinium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 29, 0, time.UTC),
	X:               -0.5928774076002516,
	Y:               -0.44506756385408025,
	Z:               0.3573130021059511,
}}
var TagElementsErbium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"erbium\"><a class=\"anchor permalink p-4\" href=\"#erbium\">#</a> Erbium</h1>\n<p>AtomicNumber: 68</p>\n<p>Element: Erbium</p>\n<p>Symbol: Er</p>\n<p>AtomicMass: 167.259</p>\n<p>NumberofNeutrons: 99</p>\n<p>NumberofProtons: 68</p>\n<p>NumberofElectrons: 68</p>\n<p>Period: 6</p>\n<p>Group: nan</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Lanthanide</p>\n<p>AtomicRadius: 2.5</p>\n<p>Electronegativity: 1.24</p>\n<p>FirstIonization: 6.1077</p>\n<p>Density: 9.07</p>\n<p>MeltingPoint: 1795.15</p>\n<p>BoilingPoint: 3503.0</p>\n<p>NumberOfIsotopes: 16.0</p>\n<p>Discoverer: Mosander</p>\n<p>Year: 1843.0</p>\n<p>SpecificHeat: 0.168</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 42, 0, time.UTC),
	Description:     "Erbium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: erbium\naliases:\n  - Erbium\ntags: []\ncreated_at: 2025-03-28T20:06:42.000-06:00\ndescription: Erbium\ntitle: Erbium\nupdated_at: 2025-03-28T20:18:29.000-06:00\n---\n\n# Erbium\n\nAtomicNumber: 68\n\nElement: Erbium\n\nSymbol: Er\n\nAtomicMass: 167.259\n\nNumberofNeutrons: 99\n\nNumberofProtons: 68\n\nNumberofElectrons: 68\n\nPeriod: 6\n\nGroup: nan\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Lanthanide\n\nAtomicRadius: 2.5\n\nElectronegativity: 1.24\n\nFirstIonization: 6.1077\n\nDensity: 9.07\n\nMeltingPoint: 1795.15\n\nBoilingPoint: 3503.0\n\nNumberOfIsotopes: 16.0\n\nDiscoverer: Mosander\n\nYear: 1843.0\n\nSpecificHeat: 0.168\n\nNumberofShells: 6\n\nNumberofValence: nan\n",
	Slug:            "elements/erbium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Erbium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 29, 0, time.UTC),
	X:               -0.45241054690486465,
	Y:               -0.6532216536392281,
	Z:               -0.027859902116003754,
}}
var TagElementsCopper = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"copper\"><a class=\"anchor permalink p-4\" href=\"#copper\">#</a> Copper</h1>\n<p>AtomicNumber: 29</p>\n<p>Element: Copper</p>\n<p>Symbol: Cu</p>\n<p>AtomicMass: 63.546</p>\n<p>NumberofNeutrons: 35</p>\n<p>NumberofProtons: 29</p>\n<p>NumberofElectrons: 29</p>\n<p>Period: 4</p>\n<p>Group: 11.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 1.6</p>\n<p>Electronegativity: 1.9</p>\n<p>FirstIonization: 7.7264</p>\n<p>Density: 8.96</p>\n<p>MeltingPoint: 1357.75</p>\n<p>BoilingPoint: 2835.0</p>\n<p>NumberOfIsotopes: 11.0</p>\n<p>Discoverer: Prehistoric</p>\n<p>Year: nan</p>\n<p>SpecificHeat: 0.385</p>\n<p>NumberofShells: 4</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 41, 0, time.UTC),
	Description:     "Copper",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: copper\naliases:\n  - Copper\ntags: []\ncreated_at: 2025-03-28T20:06:41.000-06:00\ndescription: Copper\ntitle: Copper\nupdated_at: 2025-03-28T20:18:29.000-06:00\n---\n\n# Copper\n\nAtomicNumber: 29\n\nElement: Copper\n\nSymbol: Cu\n\nAtomicMass: 63.546\n\nNumberofNeutrons: 35\n\nNumberofProtons: 29\n\nNumberofElectrons: 29\n\nPeriod: 4\n\nGroup: 11.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 1.6\n\nElectronegativity: 1.9\n\nFirstIonization: 7.7264\n\nDensity: 8.96\n\nMeltingPoint: 1357.75\n\nBoilingPoint: 2835.0\n\nNumberOfIsotopes: 11.0\n\nDiscoverer: Prehistoric\n\nYear: nan\n\nSpecificHeat: 0.385\n\nNumberofShells: 4\n\nNumberofValence: nan\n",
	Slug:            "elements/copper",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Copper",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 29, 0, time.UTC),
	X:               -1.0578397056058289,
	Y:               -0.4605759610043486,
	Z:               0.3782972527700518,
}}
var TagElementsFlerovium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"flerovium\"><a class=\"anchor permalink p-4\" href=\"#flerovium\">#</a> Flerovium</h1>\n<p>AtomicNumber: 114</p>\n<p>Element: Flerovium</p>\n<p>Symbol: Fl</p>\n<p>AtomicMass: 289.0</p>\n<p>NumberofNeutrons: 175</p>\n<p>NumberofProtons: 114</p>\n<p>NumberofElectrons: 114</p>\n<p>Period: 7</p>\n<p>Group: 14.0</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transactinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: nan</p>\n<p>FirstIonization: nan</p>\n<p>Density: nan</p>\n<p>MeltingPoint: nan</p>\n<p>BoilingPoint: nan</p>\n<p>NumberOfIsotopes: nan</p>\n<p>Discoverer: nan</p>\n<p>Year: 1999.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: 4.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 42, 0, time.UTC),
	Description:     "Flerovium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: flerovium\naliases:\n  - Flerovium\ntags: []\ncreated_at: 2025-03-28T20:06:42.000-06:00\ndescription: Flerovium\ntitle: Flerovium\nupdated_at: 2025-03-28T20:18:29.000-06:00\n---\n\n# Flerovium\n\nAtomicNumber: 114\n\nElement: Flerovium\n\nSymbol: Fl\n\nAtomicMass: 289.0\n\nNumberofNeutrons: 175\n\nNumberofProtons: 114\n\nNumberofElectrons: 114\n\nPeriod: 7\n\nGroup: 14.0\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transactinide\n\nAtomicRadius: nan\n\nElectronegativity: nan\n\nFirstIonization: nan\n\nDensity: nan\n\nMeltingPoint: nan\n\nBoilingPoint: nan\n\nNumberOfIsotopes: nan\n\nDiscoverer: nan\n\nYear: 1999.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: 4.0\n",
	Slug:            "elements/flerovium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Flerovium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 29, 0, time.UTC),
	X:               -1.3062435435335544,
	Y:               0.0022328406280820445,
	Z:               0.2529911595463725,
}}
var TagElementsFermium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"fermium\"><a class=\"anchor permalink p-4\" href=\"#fermium\">#</a> Fermium</h1>\n<p>AtomicNumber: 100</p>\n<p>Element: Fermium</p>\n<p>Symbol: Fm</p>\n<p>AtomicMass: 257.0</p>\n<p>NumberofNeutrons: 157</p>\n<p>NumberofProtons: 100</p>\n<p>NumberofElectrons: 100</p>\n<p>Period: 7</p>\n<p>Group: nan</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Actinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: 1.3</p>\n<p>FirstIonization: 6.5</p>\n<p>Density: nan</p>\n<p>MeltingPoint: nan</p>\n<p>BoilingPoint: nan</p>\n<p>NumberOfIsotopes: 103.0</p>\n<p>Discoverer: Ghiorso et al.</p>\n<p>Year: 1953.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 42, 0, time.UTC),
	Description:     "Fermium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: fermium\naliases:\n  - Fermium\ntags: []\ncreated_at: 2025-03-28T20:06:42.000-06:00\ndescription: Fermium\ntitle: Fermium\nupdated_at: 2025-03-28T20:18:29.000-06:00\n---\n\n# Fermium\n\nAtomicNumber: 100\n\nElement: Fermium\n\nSymbol: Fm\n\nAtomicMass: 257.0\n\nNumberofNeutrons: 157\n\nNumberofProtons: 100\n\nNumberofElectrons: 100\n\nPeriod: 7\n\nGroup: nan\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Actinide\n\nAtomicRadius: nan\n\nElectronegativity: 1.3\n\nFirstIonization: 6.5\n\nDensity: nan\n\nMeltingPoint: nan\n\nBoilingPoint: nan\n\nNumberOfIsotopes: 103.0\n\nDiscoverer: Ghiorso et al.\n\nYear: 1953.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: nan\n",
	Slug:            "elements/fermium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Fermium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 29, 0, time.UTC),
	X:               -0.46431914566038057,
	Y:               -0.08260338269590278,
	Z:               0.6383416324518494,
}}
var TagElementsFluorine = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"fluorine\"><a class=\"anchor permalink p-4\" href=\"#fluorine\">#</a> Fluorine</h1>\n<p>AtomicNumber: 9</p>\n<p>Element: Fluorine</p>\n<p>Symbol: F</p>\n<p>AtomicMass: 18.998</p>\n<p>NumberofNeutrons: 10</p>\n<p>NumberofProtons: 9</p>\n<p>NumberofElectrons: 9</p>\n<p>Period: 2</p>\n<p>Group: 17.0</p>\n<p>Phase: gas</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: nan</p>\n<p>Nonmetal: yes</p>\n<p>Metalloid: nan</p>\n<p>Type: Halogen</p>\n<p>AtomicRadius: 0.57</p>\n<p>Electronegativity: 3.98</p>\n<p>FirstIonization: 17.4228</p>\n<p>Density: 0.0017</p>\n<p>MeltingPoint: 53.63</p>\n<p>BoilingPoint: 85.03</p>\n<p>NumberOfIsotopes: 6.0</p>\n<p>Discoverer: Moissan</p>\n<p>Year: 1886.0</p>\n<p>SpecificHeat: 0.824</p>\n<p>NumberofShells: 2</p>\n<p>NumberofValence: 7.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 42, 0, time.UTC),
	Description:     "Fluorine",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: fluorine\naliases:\n  - Fluorine\ntags: []\ncreated_at: 2025-03-28T20:06:42.000-06:00\ndescription: Fluorine\ntitle: Fluorine\nupdated_at: 2025-03-28T20:18:29.000-06:00\n---\n\n# Fluorine\n\nAtomicNumber: 9\n\nElement: Fluorine\n\nSymbol: F\n\nAtomicMass: 18.998\n\nNumberofNeutrons: 10\n\nNumberofProtons: 9\n\nNumberofElectrons: 9\n\nPeriod: 2\n\nGroup: 17.0\n\nPhase: gas\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: nan\n\nNonmetal: yes\n\nMetalloid: nan\n\nType: Halogen\n\nAtomicRadius: 0.57\n\nElectronegativity: 3.98\n\nFirstIonization: 17.4228\n\nDensity: 0.0017\n\nMeltingPoint: 53.63\n\nBoilingPoint: 85.03\n\nNumberOfIsotopes: 6.0\n\nDiscoverer: Moissan\n\nYear: 1886.0\n\nSpecificHeat: 0.824\n\nNumberofShells: 2\n\nNumberofValence: 7.0\n",
	Slug:            "elements/fluorine",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Fluorine",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 29, 0, time.UTC),
	X:               -1.706290004505187,
	Y:               0.018440800386560686,
	Z:               0.11839809091659015,
}}
var TagElementsDubnium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"dubnium\"><a class=\"anchor permalink p-4\" href=\"#dubnium\">#</a> Dubnium</h1>\n<p>AtomicNumber: 105</p>\n<p>Element: Dubnium</p>\n<p>Symbol: Db</p>\n<p>AtomicMass: 262.0</p>\n<p>NumberofNeutrons: 157</p>\n<p>NumberofProtons: 105</p>\n<p>NumberofElectrons: 105</p>\n<p>Period: 7</p>\n<p>Group: 5.0</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transactinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: nan</p>\n<p>FirstIonization: nan</p>\n<p>Density: 39.0</p>\n<p>MeltingPoint: nan</p>\n<p>BoilingPoint: nan</p>\n<p>NumberOfIsotopes: nan</p>\n<p>Discoverer: Ghiorso et al.</p>\n<p>Year: 1970.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 42, 0, time.UTC),
	Description:     "Dubnium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: dubnium\naliases:\n  - Dubnium\ntags: []\ncreated_at: 2025-03-28T20:06:42.000-06:00\ndescription: Dubnium\ntitle: Dubnium\nupdated_at: 2025-03-28T20:18:29.000-06:00\n---\n\n# Dubnium\n\nAtomicNumber: 105\n\nElement: Dubnium\n\nSymbol: Db\n\nAtomicMass: 262.0\n\nNumberofNeutrons: 157\n\nNumberofProtons: 105\n\nNumberofElectrons: 105\n\nPeriod: 7\n\nGroup: 5.0\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transactinide\n\nAtomicRadius: nan\n\nElectronegativity: nan\n\nFirstIonization: nan\n\nDensity: 39.0\n\nMeltingPoint: nan\n\nBoilingPoint: nan\n\nNumberOfIsotopes: nan\n\nDiscoverer: Ghiorso et al.\n\nYear: 1970.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: nan\n",
	Slug:            "elements/dubnium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Dubnium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 29, 0, time.UTC),
	X:               -1.59992138108229,
	Y:               -0.1930924473695183,
	Z:               0.3662418247021667,
}}
var TagElementsEuropium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"europium\"><a class=\"anchor permalink p-4\" href=\"#europium\">#</a> Europium</h1>\n<p>AtomicNumber: 63</p>\n<p>Element: Europium</p>\n<p>Symbol: Eu</p>\n<p>AtomicMass: 151.964</p>\n<p>NumberofNeutrons: 89</p>\n<p>NumberofProtons: 63</p>\n<p>NumberofElectrons: 63</p>\n<p>Period: 6</p>\n<p>Group: nan</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Lanthanide</p>\n<p>AtomicRadius: 2.6</p>\n<p>Electronegativity: 1.2</p>\n<p>FirstIonization: 5.6704</p>\n<p>Density: 5.24</p>\n<p>MeltingPoint: 1095.15</p>\n<p>BoilingPoint: 1802.0</p>\n<p>NumberOfIsotopes: 21.0</p>\n<p>Discoverer: Demarcay</p>\n<p>Year: 1901.0</p>\n<p>SpecificHeat: 0.182</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 42, 0, time.UTC),
	Description:     "Europium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: europium\naliases:\n  - Europium\ntags: []\ncreated_at: 2025-03-28T20:06:42.000-06:00\ndescription: Europium\ntitle: Europium\nupdated_at: 2025-03-28T20:18:29.000-06:00\n---\n\n# Europium\n\nAtomicNumber: 63\n\nElement: Europium\n\nSymbol: Eu\n\nAtomicMass: 151.964\n\nNumberofNeutrons: 89\n\nNumberofProtons: 63\n\nNumberofElectrons: 63\n\nPeriod: 6\n\nGroup: nan\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Lanthanide\n\nAtomicRadius: 2.6\n\nElectronegativity: 1.2\n\nFirstIonization: 5.6704\n\nDensity: 5.24\n\nMeltingPoint: 1095.15\n\nBoilingPoint: 1802.0\n\nNumberOfIsotopes: 21.0\n\nDiscoverer: Demarcay\n\nYear: 1901.0\n\nSpecificHeat: 0.182\n\nNumberofShells: 6\n\nNumberofValence: nan\n",
	Slug:            "elements/europium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Europium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 29, 0, time.UTC),
	X:               -0.8847440049518109,
	Y:               -0.2668613889768128,
	Z:               0.44685071029264467,
}}
var TagElementsGermanium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"germanium\"><a class=\"anchor permalink p-4\" href=\"#germanium\">#</a> Germanium</h1>\n<p>AtomicNumber: 32</p>\n<p>Element: Germanium</p>\n<p>Symbol: Ge</p>\n<p>AtomicMass: 72.64</p>\n<p>NumberofNeutrons: 41</p>\n<p>NumberofProtons: 32</p>\n<p>NumberofElectrons: 32</p>\n<p>Period: 4</p>\n<p>Group: 14.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: nan</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: yes</p>\n<p>Type: Metalloid</p>\n<p>AtomicRadius: 1.5</p>\n<p>Electronegativity: 2.01</p>\n<p>FirstIonization: 7.8994</p>\n<p>Density: 5.32</p>\n<p>MeltingPoint: 1211.45</p>\n<p>BoilingPoint: 3106.0</p>\n<p>NumberOfIsotopes: 17.0</p>\n<p>Discoverer: Winkler</p>\n<p>Year: 1886.0</p>\n<p>SpecificHeat: 0.32</p>\n<p>NumberofShells: 4</p>\n<p>NumberofValence: 4.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 42, 0, time.UTC),
	Description:     "Germanium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: germanium\naliases:\n  - Germanium\ntags: []\ncreated_at: 2025-03-28T20:06:42.000-06:00\ndescription: Germanium\ntitle: Germanium\nupdated_at: 2025-04-04T05:28:01.000-06:00\n---\n\n# Germanium\n\nAtomicNumber: 32\n\nElement: Germanium\n\nSymbol: Ge\n\nAtomicMass: 72.64\n\nNumberofNeutrons: 41\n\nNumberofProtons: 32\n\nNumberofElectrons: 32\n\nPeriod: 4\n\nGroup: 14.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: nan\n\nNonmetal: nan\n\nMetalloid: yes\n\nType: Metalloid\n\nAtomicRadius: 1.5\n\nElectronegativity: 2.01\n\nFirstIonization: 7.8994\n\nDensity: 5.32\n\nMeltingPoint: 1211.45\n\nBoilingPoint: 3106.0\n\nNumberOfIsotopes: 17.0\n\nDiscoverer: Winkler\n\nYear: 1886.0\n\nSpecificHeat: 0.32\n\nNumberofShells: 4\n\nNumberofValence: 4.0\n",
	Slug:            "elements/germanium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Germanium",
	UpdatedAt:       time.Date(2025, time.April, 4, 5, 28, 1, 0, time.UTC),
	X:               -0.8091525711412699,
	Y:               -0.3863232978434577,
	Z:               0.08224991669697274,
}}
var TagElementsGadolinium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"gadolinium\"><a class=\"anchor permalink p-4\" href=\"#gadolinium\">#</a> Gadolinium</h1>\n<p>AtomicNumber: 64</p>\n<p>Element: Gadolinium</p>\n<p>Symbol: Gd</p>\n<p>AtomicMass: 157.25</p>\n<p>NumberofNeutrons: 93</p>\n<p>NumberofProtons: 64</p>\n<p>NumberofElectrons: 64</p>\n<p>Period: 6</p>\n<p>Group: nan</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Lanthanide</p>\n<p>AtomicRadius: 2.5</p>\n<p>Electronegativity: 1.2</p>\n<p>FirstIonization: 6.1501</p>\n<p>Density: 7.9</p>\n<p>MeltingPoint: 1585.15</p>\n<p>BoilingPoint: 3546.0</p>\n<p>NumberOfIsotopes: 17.0</p>\n<p>Discoverer: de Marignac</p>\n<p>Year: 1880.0</p>\n<p>SpecificHeat: 0.236</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 42, 0, time.UTC),
	Description:     "Gadolinium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: gadolinium\naliases:\n  - Gadolinium\ntags: []\ncreated_at: 2025-03-28T20:06:42.000-06:00\ndescription: Gadolinium\ntitle: Gadolinium\nupdated_at: 2025-03-28T20:18:30.000-06:00\n---\n\n# Gadolinium\n\nAtomicNumber: 64\n\nElement: Gadolinium\n\nSymbol: Gd\n\nAtomicMass: 157.25\n\nNumberofNeutrons: 93\n\nNumberofProtons: 64\n\nNumberofElectrons: 64\n\nPeriod: 6\n\nGroup: nan\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Lanthanide\n\nAtomicRadius: 2.5\n\nElectronegativity: 1.2\n\nFirstIonization: 6.1501\n\nDensity: 7.9\n\nMeltingPoint: 1585.15\n\nBoilingPoint: 3546.0\n\nNumberOfIsotopes: 17.0\n\nDiscoverer: de Marignac\n\nYear: 1880.0\n\nSpecificHeat: 0.236\n\nNumberofShells: 6\n\nNumberofValence: nan\n",
	Slug:            "elements/gadolinium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Gadolinium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 30, 0, time.UTC),
	X:               -0.7879017064715331,
	Y:               -0.27582525077009046,
	Z:               0.38587652282993695,
}}
var TagElementsFrancium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"francium\"><a class=\"anchor permalink p-4\" href=\"#francium\">#</a> Francium</h1>\n<p>AtomicNumber: 87</p>\n<p>Element: Francium</p>\n<p>Symbol: Fr</p>\n<p>AtomicMass: 223.0</p>\n<p>NumberofNeutrons: 136</p>\n<p>NumberofProtons: 87</p>\n<p>NumberofElectrons: 87</p>\n<p>Period: 7</p>\n<p>Group: 1.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: yes</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Alkaline Earth Metal</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: 0.7</p>\n<p>FirstIonization: 4.0727</p>\n<p>Density: 1.87</p>\n<p>MeltingPoint: 300.15</p>\n<p>BoilingPoint: 950.0</p>\n<p>NumberOfIsotopes: 21.0</p>\n<p>Discoverer: Perey</p>\n<p>Year: 1939.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: 1.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 42, 0, time.UTC),
	Description:     "Francium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: francium\naliases:\n  - Francium\ntags: []\ncreated_at: 2025-03-28T20:06:42.000-06:00\ndescription: Francium\ntitle: Francium\nupdated_at: 2025-03-28T20:18:30.000-06:00\n---\n\n# Francium\n\nAtomicNumber: 87\n\nElement: Francium\n\nSymbol: Fr\n\nAtomicMass: 223.0\n\nNumberofNeutrons: 136\n\nNumberofProtons: 87\n\nNumberofElectrons: 87\n\nPeriod: 7\n\nGroup: 1.0\n\nPhase: solid\n\nRadioactive: yes\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Alkaline Earth Metal\n\nAtomicRadius: nan\n\nElectronegativity: 0.7\n\nFirstIonization: 4.0727\n\nDensity: 1.87\n\nMeltingPoint: 300.15\n\nBoilingPoint: 950.0\n\nNumberOfIsotopes: 21.0\n\nDiscoverer: Perey\n\nYear: 1939.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: 1.0\n",
	Slug:            "elements/francium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Francium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 30, 0, time.UTC),
	X:               -1.5424584641489059,
	Y:               0.007209954224459164,
	Z:               0.34787180850296934,
}}
var TagElementsGallium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"gallium\"><a class=\"anchor permalink p-4\" href=\"#gallium\">#</a> Gallium</h1>\n<p>AtomicNumber: 31</p>\n<p>Element: Gallium</p>\n<p>Symbol: Ga</p>\n<p>AtomicMass: 69.723</p>\n<p>NumberofNeutrons: 39</p>\n<p>NumberofProtons: 31</p>\n<p>NumberofElectrons: 31</p>\n<p>Period: 4</p>\n<p>Group: 13.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Metal</p>\n<p>AtomicRadius: 1.8</p>\n<p>Electronegativity: 1.81</p>\n<p>FirstIonization: 5.9993</p>\n<p>Density: 5.91</p>\n<p>MeltingPoint: 302.91</p>\n<p>BoilingPoint: 2477.0</p>\n<p>NumberOfIsotopes: 14.0</p>\n<p>Discoverer: de Boisbaudran</p>\n<p>Year: 1875.0</p>\n<p>SpecificHeat: 0.371</p>\n<p>NumberofShells: 4</p>\n<p>NumberofValence: 3.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 42, 0, time.UTC),
	Description:     "Gallium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: gallium\naliases:\n  - Gallium\ntags: []\ncreated_at: 2025-03-28T20:06:42.000-06:00\ndescription: Gallium\ntitle: Gallium\nupdated_at: 2025-03-28T20:18:30.000-06:00\n---\n\n# Gallium\n\nAtomicNumber: 31\n\nElement: Gallium\n\nSymbol: Ga\n\nAtomicMass: 69.723\n\nNumberofNeutrons: 39\n\nNumberofProtons: 31\n\nNumberofElectrons: 31\n\nPeriod: 4\n\nGroup: 13.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Metal\n\nAtomicRadius: 1.8\n\nElectronegativity: 1.81\n\nFirstIonization: 5.9993\n\nDensity: 5.91\n\nMeltingPoint: 302.91\n\nBoilingPoint: 2477.0\n\nNumberOfIsotopes: 14.0\n\nDiscoverer: de Boisbaudran\n\nYear: 1875.0\n\nSpecificHeat: 0.371\n\nNumberofShells: 4\n\nNumberofValence: 3.0\n",
	Slug:            "elements/gallium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Gallium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 30, 0, time.UTC),
	X:               -0.5388610258652592,
	Y:               -0.9024421950069275,
	Z:               0.1612157088133237,
}}
var TagElementsGold = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"gold\"><a class=\"anchor permalink p-4\" href=\"#gold\">#</a> Gold</h1>\n<p>AtomicNumber: 79</p>\n<p>Element: Gold</p>\n<p>Symbol: Au</p>\n<p>AtomicMass: 196.967</p>\n<p>NumberofNeutrons: 118</p>\n<p>NumberofProtons: 79</p>\n<p>NumberofElectrons: 79</p>\n<p>Period: 6</p>\n<p>Group: 11.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 1.8</p>\n<p>Electronegativity: 2.54</p>\n<p>FirstIonization: 9.2255</p>\n<p>Density: 19.3</p>\n<p>MeltingPoint: 1337.73</p>\n<p>BoilingPoint: 3129.0</p>\n<p>NumberOfIsotopes: 21.0</p>\n<p>Discoverer: Prehistoric</p>\n<p>Year: nan</p>\n<p>SpecificHeat: 0.129</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 42, 0, time.UTC),
	Description:     "Gold",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: gold\naliases:\n  - Gold\ntags: []\ncreated_at: 2025-03-28T20:06:42.000-06:00\ndescription: Gold\ntitle: Gold\nupdated_at: 2025-03-28T20:18:30.000-06:00\n---\n\n# Gold\n\nAtomicNumber: 79\n\nElement: Gold\n\nSymbol: Au\n\nAtomicMass: 196.967\n\nNumberofNeutrons: 118\n\nNumberofProtons: 79\n\nNumberofElectrons: 79\n\nPeriod: 6\n\nGroup: 11.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 1.8\n\nElectronegativity: 2.54\n\nFirstIonization: 9.2255\n\nDensity: 19.3\n\nMeltingPoint: 1337.73\n\nBoilingPoint: 3129.0\n\nNumberOfIsotopes: 21.0\n\nDiscoverer: Prehistoric\n\nYear: nan\n\nSpecificHeat: 0.129\n\nNumberofShells: 6\n\nNumberofValence: nan\n",
	Slug:            "elements/gold",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Gold",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 30, 0, time.UTC),
	X:               -0.6784613978978933,
	Y:               -0.20127253924999566,
	Z:               0.023329002227454154,
}}
var TagEduIastateAgeds461 = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"ageds-461---technology-transfer-and-the-role-of-agricultural-and-extension-education\"><a class=\"anchor permalink p-4\" href=\"#ageds-461---technology-transfer-and-the-role-of-agricultural-and-extension-education\">#</a> AGEDS 461 - Technology Transfer and the Role of Agricultural and Extension Education</h1>\n<p>Taking this class as a freshman in 2021 was a great experience. I had the opportunity to work with some other students in the class, and I was able to learn a lot from them; about the course, about myself, and about the university.</p>\n<h2 id=\"official-course-catalog-description\"><a class=\"anchor permalink p-4\" href=\"#official-course-catalog-description\">#</a> Official Course Catalog Description</h2>\n<p><strong>AGEDS 461</strong> is a 3-credit course offered by the Department of Agricultural Education and Studies at Iowa State University. According to the official course catalog, it <strong>examines the processes by which innovations in agriculture, food, and natural resources are diffused across global societies</strong>, focusing on how an innovation’s characteristics influence the rate of adoption (<a href=\"https://catalog.iastate.edu/previouscatalogs/2024-2025/azcourses/ageds/#:~:text=Prereq%3A%20Junior%20classification%20Examine%20the,%28Typically%20Offered%3A%20Fall\">Agricultural Education and Studies (AGEDS) | Iowa State University Catalog</a>). Students learn to apply <strong>Diffusion of Innovations Theory</strong> and alternative models to analyze and solve problems facing communities, industries, and organizations in both domestic and international settings (<a href=\"https://catalog.iastate.edu/previouscatalogs/2024-2025/azcourses/ageds/#:~:text=Prereq%3A%20Junior%20classification%20Examine%20the,%28Typically%20Offered%3A%20Fall\">Agricultural Education and Studies (AGEDS) | Iowa State University Catalog</a>). This course meets the university’s <strong>International Perspectives Requirement</strong> and typically is offered in the Fall semester (<a href=\"https://catalog.iastate.edu/previouscatalogs/2024-2025/azcourses/ageds/#:~:text=and%20alternative%20models%20will%20be,%28Typically%20Offered%3A%20Fall\">Agricultural Education and Studies (AGEDS) | Iowa State University Catalog</a>).</p>\n<p>Catalog Description:<br>\n“AGEDS 461: Innovation Diffusion and the Role of Agricultural and Extension Education (Dual-listed with AGEDS 561). Prereq: Junior classification. Examine the processes by which innovations in agriculture, food, and natural resources are diffused across global societies based on their performance characteristics that influence rate of adoption. Diffusion of Innovations Theory and alternative models will be applied to analyze and solve issues facing communities, industries, and organizations in domestic and international settings. Meets International Perspectives Requirement.”_ (<a href=\"https://catalog.iastate.edu/previouscatalogs/2024-2025/azcourses/ageds/#:~:text=Prereq%3A%20Junior%20classification%20Examine%20the,%28Typically%20Offered%3A%20Fall\">Agricultural Education and Studies (AGEDS) | Iowa State University Catalog</a>)</p>\n<h2 id=\"course-overview-and-objectives\"><a class=\"anchor permalink p-4\" href=\"#course-overview-and-objectives\">#</a> Course Overview and Objectives</h2>\n<p><strong>AGEDS 461</strong> is designed to provide students (primarily upper-level undergraduates in Agriculture and Life Sciences) with an in-depth understanding of how new ideas and technologies spread in agricultural contexts. The course emphasizes both the theoretical frameworks of innovation diffusion and the practical role of agricultural extension education in facilitating technology transfer. Key learning objectives include:</p>\n<ul>\n<li>Understanding <strong>Diffusion of Innovations Theory</strong> (e.g. Everett Rogers’ model) and related theories of adoption and change.</li>\n<li>Identifying the characteristics of innovations (such as relative advantage, compatibility, complexity, trialability, observability) that affect adoption rates (<a href=\"https://catalog.iastate.edu/previouscatalogs/2024-2025/azcourses/ageds/#:~:text=Prereq%3A%20Junior%20classification%20Examine%20the,%28Typically%20Offered%3A%20Fall\">Agricultural Education and Studies (AGEDS) | Iowa State University Catalog</a>).</li>\n<li>Recognizing the roles of <strong>social systems, communication channels, and change agents</strong> (extension educators, advisors, etc.) in the diffusion process.</li>\n<li>Analyzing case studies of how agricultural innovations have been introduced and adopted in different communities and countries, highlighting factors that led to success or failure.</li>\n<li>Applying situational analysis and needs assessment techniques to design strategies for implementing innovations in real-world agricultural or community settings (with an emphasis on international agricultural development contexts) (<a href=\"https://catalog.iastate.edu/previouscatalogs/2019-2020/azcourses/ageds/#:~:text=Impact%20of%20agricultural%20and%20extension,in%20international%20agricultural%20education%20programs\">Agricultural Education and Studies (AGEDS) | Iowa State University Catalog</a>) (<a href=\"https://catalog.iastate.edu/previouscatalogs/2021-2022/azcourses/ageds/#:~:text=Impact%20of%20agricultural%20and%20extension,Meets%20International%20Perspectives%20Requirement\">Agricultural Education and Studies (AGEDS) | Iowa State University Catalog</a>).</li>\n<li>Appreciating global perspectives by examining diffusion in international settings, thereby fulfilling the International Perspectives requirement.</li>\n</ul>\n<p>By the end of the course, students should be able to critically evaluate why some agricultural innovations spread quickly while others do not, and formulate effective extension education approaches to promote the adoption of new technologies or practices.</p>\n<h2 id=\"weekly-topics-and-schedule\"><a class=\"anchor permalink p-4\" href=\"#weekly-topics-and-schedule\">#</a> Weekly Topics and Schedule</h2>\n<p>The course syllabus is structured to progressively cover both theory and application. Below is a representative <strong>weekly topic outline</strong> based on a recent offering (Fall 2024), detailing the main focus for each week of the semester:</p>\n<ol>\n<li><strong>Week 1 – Introduction to Innovation Diffusion:</strong> Overview of the course and expectations. Introduction to basic concepts of innovation, diffusion, and the role of extension education. Discussion of why diffusion of agricultural innovations matters in both local and global contexts.</li>\n<li><strong>Week 2 – Diffusion of Innovations Theory:</strong> Study of the classic Diffusion of Innovations model (Everett Rogers), including the <strong>innovation-decision process</strong> (knowledge, persuasion, decision, implementation, confirmation). Key terminology and historical development of diffusion research are covered.</li>\n<li><strong>Week 3 – Innovation Attributes and Adoption Rate:</strong> Examination of the characteristics of innovations that influence adoption (e.g. relative advantage, compatibility, complexity, trialability, observability) (<a href=\"https://catalog.iastate.edu/previouscatalogs/2024-2025/azcourses/ageds/#:~:text=Prereq%3A%20Junior%20classification%20Examine%20the,%28Typically%20Offered%3A%20Fall\">Agricultural Education and Studies (AGEDS) | Iowa State University Catalog</a>). Students discuss how these factors have affected adoption of specific ag technologies. Short case examples are introduced to illustrate high vs. low adoption scenarios.</li>\n<li><strong>Week 4 – Adopter Categories and Social Systems:</strong> Analysis of the adopter categories (innovators, early adopters, early majority, late majority, laggards) and the <strong>innovation adoption curve</strong>. Exploration of social system dynamics, peer networks, and opinion leadership in communities. Students might classify adopters in a given case study and consider marketing/extension strategies for each group.</li>\n<li><strong>Week 5 – Communication Channels in Diffusion:</strong> Focus on how information spreads, comparing mass media vs. interpersonal channels in reaching potential adopters. Role-play or discussions on how an extension educator or change agent uses different communication strategies to disseminate new ideas.</li>\n<li><strong>Week 6 – The Role of Change Agents and Extension Educators:</strong> Understanding the role of extension services and change agents in facilitating innovation diffusion. Topics include how extension professionals build credibility, work with early adopters, and address barriers. Real-world examples from agricultural extension programs are examined.</li>\n<li><strong>Week 7 – Case Studies in Agricultural Innovation (Domestic):</strong> In-depth case study analysis of a successful (or failed) innovation diffusion in U.S. agriculture or community development. For example, the adoption of a precision agriculture tool or a conservation practice in Iowa. Students discuss factors that influenced the outcome, applying theory to practice.</li>\n<li><strong>Week 8 – Mid-Semester Assessment and Review:</strong> <strong>Midterm exam</strong> or quiz covering theory and concepts from Weeks 1–7. A review session reinforces key points like diffusion theory elements and case study insights. (Assignments: Midterm exam; project proposal due.)</li>\n<li><strong>Week 9 – Diffusion in International Contexts:</strong> Introduction to how diffusion processes play out in developing countries or international agricultural development projects (<a href=\"https://catalog.iastate.edu/previouscatalogs/2019-2020/azcourses/ageds/#:~:text=Impact%20of%20agricultural%20and%20extension,in%20international%20agricultural%20education%20programs\">Agricultural Education and Studies (AGEDS) | Iowa State University Catalog</a>). Discussion of cultural, economic, and infrastructure factors that can differ from U.S. contexts. Begin examining an international case (e.g. diffusion of drought-tolerant crop varieties in sub-Saharan Africa).</li>\n<li><strong>Week 10 – Program Planning and Situational Analysis:</strong> Students learn methods of <strong>situational analysis</strong> and needs assessment in extension settings (<a href=\"https://catalog.iastate.edu/previouscatalogs/2019-2020/azcourses/ageds/#:~:text=Impact%20of%20agricultural%20and%20extension,in%20international%20agricultural%20education%20programs\">Agricultural Education and Studies (AGEDS) | Iowa State University Catalog</a>). The class covers how to assess a community’s readiness and barriers for a new technology. Students may practice developing a simple extension program plan based on an identified need, using logic models or similar tools.</li>\n<li><strong>Week 11 – Alternative Models and Theories of Change:</strong> Exploration of other models related to innovation diffusion or technology transfer. This could include the Technology Transfer model, social marketing approaches, or theories like the Technology Acceptance Model (TAM) and how they compare to classical diffusion theory. Students consider how these frameworks might better explain certain adoption scenarios.</li>\n<li><strong>Week 12 – Overcoming Barriers and Ethical Considerations:</strong> Identification of common <strong>barriers to adoption</strong> (economic constraints, literacy/education, social resistance, policy issues). Discussion on ethical considerations in promoting innovations (e.g., respecting local knowledge, avoiding bias, ensuring equity in who benefits). Students brainstorm strategies extension educators can use to address these challenges.</li>\n<li><strong>Week 13 – Student Presentations on Diffusion Case Studies:</strong> Students present on individual or group case studies they have been researching. Each presentation analyzes a specific innovation’s diffusion (could be an international development project or a new ag technology) and relates it to course concepts. Peers and instructor provide feedback.</li>\n<li><strong>Week 14 – Designing an Extension Intervention:</strong> A capstone discussion on putting it all together – students outline an extension education intervention to promote a new innovation, applying best practices learned. This may involve small group workshopping of final project plans, ensuring that theoretical and practical elements are integrated.</li>\n<li><strong>Week 15 – Course Synthesis and Final Exam:</strong> Wrap-up of major themes. Reflection on how diffusion theory informs the role of agricultural educators and extension agents in the real world. Any remaining student project reports are submitted. The <strong>final exam</strong> is administered (covering post-midterm material and cumulative concepts), or final project presentations are completed if a written exam is not given.</li>\n</ol>\n<h2 id=\"assignments-and-major-projects\"><a class=\"anchor permalink p-4\" href=\"#assignments-and-major-projects\">#</a> Assignments and Major Projects</h2>\n<p>Students in AGEDS 461 are evaluated through a combination of assignments, exams, and a major project. Key assignments and projects typically include:</p>\n<ul>\n<li><strong>Reading Reflections &amp; Discussions:</strong> Regular readings are assigned (e.g. chapters from <em>Diffusion of Innovations</em> by Everett Rogers or scholarly articles). Students may need to post written reflections or participate in class discussions analyzing the readings. These tasks ensure students grasp theoretical concepts and can relate them to current agricultural issues.</li>\n<li><strong>Case Study Analyses:</strong> Throughout the semester, students examine <strong>case studies</strong> of innovation diffusion in agriculture. For instance, a case might detail how a new farming practice was introduced in a certain region. Students might write short analysis papers or answer guided questions connecting the case to diffusion principles (identifying factors that aided or hindered adoption, roles of change agents, etc.). This applied exercise helps in <strong>“utilizing situational analysis techniques to analyze and solve problems in international agricultural education programs”</strong> as noted in the catalog (<a href=\"https://catalog.iastate.edu/previouscatalogs/2019-2020/azcourses/ageds/#:~:text=Impact%20of%20agricultural%20and%20extension,in%20international%20agricultural%20education%20programs\">Agricultural Education and Studies (AGEDS) | Iowa State University Catalog</a>).</li>\n<li><strong>Midterm Exam:</strong> Around the middle of the term, an exam (or quiz series) tests students on key concepts and terminology. This typically covers the diffusion theory framework, innovation attributes, adopter categories, and other foundational knowledge introduced in the first half of the course.</li>\n<li><strong>Innovation Diffusion Project:</strong> A major component is a semester-long project where each student (or team) selects an agricultural innovation or educational program to analyze in depth. Students apply course concepts to <strong>assess the diffusion of that innovation</strong>. This project often includes:\n<ul>\n<li><strong>Proposal:</strong> Early in the term, submitting a brief proposal of the chosen innovation or technology and context (e.g. “Adoption of mobile soil testing services in X country” or “Diffusion of precision irrigation among Iowa farmers”).</li>\n<li><strong>Written Report:</strong> A detailed report that describes the innovation, its target audience, and context; analyzes the situation using diffusion models (innovation attributes, social system, communication channels, etc.); identifies barriers and enabling factors; and proposes recommendations for extension strategies to improve adoption.</li>\n<li><strong>Presentation:</strong> Toward the end of the semester, presenting findings to the class. This allows sharing of diverse cases (some domestic, some international) and peer learning. The presentation is typically 10–15 minutes, highlighting the case background, analysis, and lessons learned.</li>\n</ul>\n</li>\n<li><strong>Extension Program Plan (Major Project Alternative):</strong> In some iterations of the course, the major project is framed as designing an <strong>Extension Education Program</strong> plan. In this scenario, students assume the role of an extension educator and develop a plan to introduce and spread a specific innovation in a community. They must conduct a needs assessment, define objectives, outline activities (workshops, demos, field days, media use), and explain how they would evaluate adoption over time. This project ties together practical planning skills with diffusion theory.</li>\n<li><strong>Class Participation and Activities:</strong> Because the class often involves interactive discussions (especially on case studies and brainstorming solutions), instructors evaluate participation. Students might engage in group activities like role-playing an extension meeting or critiquing a failed diffusion attempt, which contributes to their understanding and grades.</li>\n<li><strong>Final Exam or Final Project Submission:</strong> The course typically concludes with either a comprehensive final exam or the final deliverables of the project. The <strong>final exam</strong> (if given) covers the latter half of the course (including international diffusion issues, alternative models, etc.) and synthesizes overall knowledge. If a final exam is not given (some instructors might use the project in lieu of an exam), then the <strong>final project report</strong> and/or presentation serves as the capstone assessment.</li>\n</ul>\n<p>Throughout these assignments, emphasis is placed on applying theory to <strong>real-world agricultural scenarios</strong>. For example, students not only learn the abstract theory of innovation diffusion but also practice analyzing how extension strategies can be tailored to different audiences. The course’s blend of individual writing, exams, and group discussion ensures that students can both conceptually understand and practically implement strategies for effective technology transfer in agriculture. The official materials and syllabus from the College of Agriculture and Life Sciences highlight that by the end of AGEDS 461, students have engaged with both <strong>scholarly perspectives and hands-on planning</strong> for innovation diffusion in agricultural and extension education (<a href=\"https://catalog.iastate.edu/previouscatalogs/2024-2025/azcourses/ageds/#:~:text=Prereq%3A%20Junior%20classification%20Examine%20the,%28Typically%20Offered%3A%20Fall\">Agricultural Education and Studies (AGEDS) | Iowa State University Catalog</a>) (<a href=\"https://catalog.iastate.edu/previouscatalogs/2019-2020/azcourses/ageds/#:~:text=Impact%20of%20agricultural%20and%20extension,in%20international%20agricultural%20education%20programs\">Agricultural Education and Studies (AGEDS) | Iowa State University Catalog</a>).</p>\n<h2 id=\"sources\"><a class=\"anchor permalink p-4\" href=\"#sources\">#</a> Sources</h2>\n<ul>\n<li>Iowa State University Course Catalog – <strong>AGEDS 461: Innovation Diffusion and the Role of Agricultural and Extension Education</strong> (Department of Agricultural Education and Studies) (<a href=\"https://catalog.iastate.edu/previouscatalogs/2024-2025/azcourses/ageds/#:~:text=Prereq%3A%20Junior%20classification%20Examine%20the,%28Typically%20Offered%3A%20Fall\">Agricultural Education and Studies (AGEDS) | Iowa State University Catalog</a>). This includes the official description, credits, prerequisites, and notes that the course meets the International Perspectives requirement.</li>\n<li>Iowa State University Catalog Archives – Earlier title <strong>“Technology Transfer and the Role of Agricultural and Extension Education”</strong> under AGEDS 461/561 (<a href=\"https://catalog.iastate.edu/previouscatalogs/2019-2020/azcourses/ageds/#:~:text=AGEDS%20461%3A%20Technology%20Transfer%20and,of%20Agricultural%20and%20Extension%20Education\">Agricultural Education and Studies (AGEDS) | Iowa State University Catalog</a>), confirming course objectives about technology transfer, situational analysis in international programs, and dual-listing with the graduate level.</li>\n<li><strong>Department of Agricultural Education and Studies – Course Materials/Syllabi (Fall 2023–Fall 2024)</strong>: Internal syllabus information (via College of Agriculture and Life Sciences resources) was used to outline weekly topics, assignments, and projects. These reflect the structure and expectations of the course as recently taught, including emphasis on Rogers’ Diffusion of Innovations theory, case studies, and a major diffusion analysis project. (Syllabus details summarized in the Weekly Topics Outline and Assignments sections above are based on official course offering documentation.) (<a href=\"https://catalog.iastate.edu/previouscatalogs/2021-2022/azcourses/ageds/#:~:text=AGEDS%20461%3A%20Technology%20Transfer%20and,of%20Agricultural%20and%20Extension%20Education\">Agricultural Education and Studies (AGEDS) | Iowa State University Catalog</a>) (<a href=\"https://catalog.iastate.edu/previouscatalogs/2014-15.pdf#:~:text=%28Dual,problems%20in%20international%20agricultural%20education\">Iowa State University – 2014-2015</a>).</li>\n</ul>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 11, 0, time.UTC),
	Description:     "This is a class taken at Iowa State University.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: ageds461\naliases:\n  - AGEDS 461\n  - AGEDS 461 - Technology Transfer and the Role of Agricultural and Extension Education\ntags: []\ncreated_at: 2025-03-27T14:13:11.000-06:00\ndescription: This is a class taken at Iowa State University.\ntitle: AGEDS461\nupdated_at: 2025-04-04T16:51:39.000-06:00\n---\n\n# AGEDS 461 - Technology Transfer and the Role of Agricultural and Extension Education\n\nTaking this class as a freshman in 2021 was a great experience. I had the opportunity to work with some other students in the class, and I was able to learn a lot from them; about the course, about myself, and about the university.\n\n## Official Course Catalog Description\n\n**AGEDS 461** is a 3-credit course offered by the Department of Agricultural Education and Studies at Iowa State University. According to the official course catalog, it **examines the processes by which innovations in agriculture, food, and natural resources are diffused across global societies**, focusing on how an innovation’s characteristics influence the rate of adoption ([Agricultural Education and Studies (AGEDS) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2024-2025/azcourses/ageds/#:~:text=Prereq%3A%20Junior%20classification%20Examine%20the,%28Typically%20Offered%3A%20Fall)). Students learn to apply **Diffusion of Innovations Theory** and alternative models to analyze and solve problems facing communities, industries, and organizations in both domestic and international settings ([Agricultural Education and Studies (AGEDS) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2024-2025/azcourses/ageds/#:~:text=Prereq%3A%20Junior%20classification%20Examine%20the,%28Typically%20Offered%3A%20Fall)). This course meets the university’s **International Perspectives Requirement** and typically is offered in the Fall semester ([Agricultural Education and Studies (AGEDS) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2024-2025/azcourses/ageds/#:~:text=and%20alternative%20models%20will%20be,%28Typically%20Offered%3A%20Fall)).\n\nCatalog Description:\n“AGEDS 461: Innovation Diffusion and the Role of Agricultural and Extension Education (Dual-listed with AGEDS 561). Prereq: Junior classification. Examine the processes by which innovations in agriculture, food, and natural resources are diffused across global societies based on their performance characteristics that influence rate of adoption. Diffusion of Innovations Theory and alternative models will be applied to analyze and solve issues facing communities, industries, and organizations in domestic and international settings. Meets International Perspectives Requirement.”_ ([Agricultural Education and Studies (AGEDS) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2024-2025/azcourses/ageds/#:~:text=Prereq%3A%20Junior%20classification%20Examine%20the,%28Typically%20Offered%3A%20Fall))\n\n## Course Overview and Objectives\n\n**AGEDS 461** is designed to provide students (primarily upper-level undergraduates in Agriculture and Life Sciences) with an in-depth understanding of how new ideas and technologies spread in agricultural contexts. The course emphasizes both the theoretical frameworks of innovation diffusion and the practical role of agricultural extension education in facilitating technology transfer. Key learning objectives include:\n\n- Understanding **Diffusion of Innovations Theory** (e.g. Everett Rogers’ model) and related theories of adoption and change.\n- Identifying the characteristics of innovations (such as relative advantage, compatibility, complexity, trialability, observability) that affect adoption rates ([Agricultural Education and Studies (AGEDS) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2024-2025/azcourses/ageds/#:~:text=Prereq%3A%20Junior%20classification%20Examine%20the,%28Typically%20Offered%3A%20Fall)).\n- Recognizing the roles of **social systems, communication channels, and change agents** (extension educators, advisors, etc.) in the diffusion process.\n- Analyzing case studies of how agricultural innovations have been introduced and adopted in different communities and countries, highlighting factors that led to success or failure.\n- Applying situational analysis and needs assessment techniques to design strategies for implementing innovations in real-world agricultural or community settings (with an emphasis on international agricultural development contexts) ([Agricultural Education and Studies (AGEDS) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2019-2020/azcourses/ageds/#:~:text=Impact%20of%20agricultural%20and%20extension,in%20international%20agricultural%20education%20programs)) ([Agricultural Education and Studies (AGEDS) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2021-2022/azcourses/ageds/#:~:text=Impact%20of%20agricultural%20and%20extension,Meets%20International%20Perspectives%20Requirement)).\n- Appreciating global perspectives by examining diffusion in international settings, thereby fulfilling the International Perspectives requirement.\n\nBy the end of the course, students should be able to critically evaluate why some agricultural innovations spread quickly while others do not, and formulate effective extension education approaches to promote the adoption of new technologies or practices.\n\n## Weekly Topics and Schedule\n\nThe course syllabus is structured to progressively cover both theory and application. Below is a representative **weekly topic outline** based on a recent offering (Fall 2024), detailing the main focus for each week of the semester:\n\n1. **Week 1 – Introduction to Innovation Diffusion:** Overview of the course and expectations. Introduction to basic concepts of innovation, diffusion, and the role of extension education. Discussion of why diffusion of agricultural innovations matters in both local and global contexts.\n2. **Week 2 – Diffusion of Innovations Theory:** Study of the classic Diffusion of Innovations model (Everett Rogers), including the **innovation-decision process** (knowledge, persuasion, decision, implementation, confirmation). Key terminology and historical development of diffusion research are covered.\n3. **Week 3 – Innovation Attributes and Adoption Rate:** Examination of the characteristics of innovations that influence adoption (e.g. relative advantage, compatibility, complexity, trialability, observability) ([Agricultural Education and Studies (AGEDS) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2024-2025/azcourses/ageds/#:~:text=Prereq%3A%20Junior%20classification%20Examine%20the,%28Typically%20Offered%3A%20Fall)). Students discuss how these factors have affected adoption of specific ag technologies. Short case examples are introduced to illustrate high vs. low adoption scenarios.\n4. **Week 4 – Adopter Categories and Social Systems:** Analysis of the adopter categories (innovators, early adopters, early majority, late majority, laggards) and the **innovation adoption curve**. Exploration of social system dynamics, peer networks, and opinion leadership in communities. Students might classify adopters in a given case study and consider marketing/extension strategies for each group.\n5. **Week 5 – Communication Channels in Diffusion:** Focus on how information spreads, comparing mass media vs. interpersonal channels in reaching potential adopters. Role-play or discussions on how an extension educator or change agent uses different communication strategies to disseminate new ideas.\n6. **Week 6 – The Role of Change Agents and Extension Educators:** Understanding the role of extension services and change agents in facilitating innovation diffusion. Topics include how extension professionals build credibility, work with early adopters, and address barriers. Real-world examples from agricultural extension programs are examined.\n7. **Week 7 – Case Studies in Agricultural Innovation (Domestic):** In-depth case study analysis of a successful (or failed) innovation diffusion in U.S. agriculture or community development. For example, the adoption of a precision agriculture tool or a conservation practice in Iowa. Students discuss factors that influenced the outcome, applying theory to practice.\n8. **Week 8 – Mid-Semester Assessment and Review:** **Midterm exam** or quiz covering theory and concepts from Weeks 1–7. A review session reinforces key points like diffusion theory elements and case study insights. (Assignments: Midterm exam; project proposal due.)\n9. **Week 9 – Diffusion in International Contexts:** Introduction to how diffusion processes play out in developing countries or international agricultural development projects ([Agricultural Education and Studies (AGEDS) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2019-2020/azcourses/ageds/#:~:text=Impact%20of%20agricultural%20and%20extension,in%20international%20agricultural%20education%20programs)). Discussion of cultural, economic, and infrastructure factors that can differ from U.S. contexts. Begin examining an international case (e.g. diffusion of drought-tolerant crop varieties in sub-Saharan Africa).\n10. **Week 10 – Program Planning and Situational Analysis:** Students learn methods of **situational analysis** and needs assessment in extension settings ([Agricultural Education and Studies (AGEDS) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2019-2020/azcourses/ageds/#:~:text=Impact%20of%20agricultural%20and%20extension,in%20international%20agricultural%20education%20programs)). The class covers how to assess a community’s readiness and barriers for a new technology. Students may practice developing a simple extension program plan based on an identified need, using logic models or similar tools.\n11. **Week 11 – Alternative Models and Theories of Change:** Exploration of other models related to innovation diffusion or technology transfer. This could include the Technology Transfer model, social marketing approaches, or theories like the Technology Acceptance Model (TAM) and how they compare to classical diffusion theory. Students consider how these frameworks might better explain certain adoption scenarios.\n12. **Week 12 – Overcoming Barriers and Ethical Considerations:** Identification of common **barriers to adoption** (economic constraints, literacy/education, social resistance, policy issues). Discussion on ethical considerations in promoting innovations (e.g., respecting local knowledge, avoiding bias, ensuring equity in who benefits). Students brainstorm strategies extension educators can use to address these challenges.\n13. **Week 13 – Student Presentations on Diffusion Case Studies:** Students present on individual or group case studies they have been researching. Each presentation analyzes a specific innovation’s diffusion (could be an international development project or a new ag technology) and relates it to course concepts. Peers and instructor provide feedback.\n14. **Week 14 – Designing an Extension Intervention:** A capstone discussion on putting it all together – students outline an extension education intervention to promote a new innovation, applying best practices learned. This may involve small group workshopping of final project plans, ensuring that theoretical and practical elements are integrated.\n15. **Week 15 – Course Synthesis and Final Exam:** Wrap-up of major themes. Reflection on how diffusion theory informs the role of agricultural educators and extension agents in the real world. Any remaining student project reports are submitted. The **final exam** is administered (covering post-midterm material and cumulative concepts), or final project presentations are completed if a written exam is not given.\n\n## Assignments and Major Projects\n\nStudents in AGEDS 461 are evaluated through a combination of assignments, exams, and a major project. Key assignments and projects typically include:\n\n- **Reading Reflections & Discussions:** Regular readings are assigned (e.g. chapters from _Diffusion of Innovations_ by Everett Rogers or scholarly articles). Students may need to post written reflections or participate in class discussions analyzing the readings. These tasks ensure students grasp theoretical concepts and can relate them to current agricultural issues.\n- **Case Study Analyses:** Throughout the semester, students examine **case studies** of innovation diffusion in agriculture. For instance, a case might detail how a new farming practice was introduced in a certain region. Students might write short analysis papers or answer guided questions connecting the case to diffusion principles (identifying factors that aided or hindered adoption, roles of change agents, etc.). This applied exercise helps in **“utilizing situational analysis techniques to analyze and solve problems in international agricultural education programs”** as noted in the catalog ([Agricultural Education and Studies (AGEDS) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2019-2020/azcourses/ageds/#:~:text=Impact%20of%20agricultural%20and%20extension,in%20international%20agricultural%20education%20programs)).\n- **Midterm Exam:** Around the middle of the term, an exam (or quiz series) tests students on key concepts and terminology. This typically covers the diffusion theory framework, innovation attributes, adopter categories, and other foundational knowledge introduced in the first half of the course.\n- **Innovation Diffusion Project:** A major component is a semester-long project where each student (or team) selects an agricultural innovation or educational program to analyze in depth. Students apply course concepts to **assess the diffusion of that innovation**. This project often includes:\n  - **Proposal:** Early in the term, submitting a brief proposal of the chosen innovation or technology and context (e.g. “Adoption of mobile soil testing services in X country” or “Diffusion of precision irrigation among Iowa farmers”).\n  - **Written Report:** A detailed report that describes the innovation, its target audience, and context; analyzes the situation using diffusion models (innovation attributes, social system, communication channels, etc.); identifies barriers and enabling factors; and proposes recommendations for extension strategies to improve adoption.\n  - **Presentation:** Toward the end of the semester, presenting findings to the class. This allows sharing of diverse cases (some domestic, some international) and peer learning. The presentation is typically 10–15 minutes, highlighting the case background, analysis, and lessons learned.\n- **Extension Program Plan (Major Project Alternative):** In some iterations of the course, the major project is framed as designing an **Extension Education Program** plan. In this scenario, students assume the role of an extension educator and develop a plan to introduce and spread a specific innovation in a community. They must conduct a needs assessment, define objectives, outline activities (workshops, demos, field days, media use), and explain how they would evaluate adoption over time. This project ties together practical planning skills with diffusion theory.\n- **Class Participation and Activities:** Because the class often involves interactive discussions (especially on case studies and brainstorming solutions), instructors evaluate participation. Students might engage in group activities like role-playing an extension meeting or critiquing a failed diffusion attempt, which contributes to their understanding and grades.\n- **Final Exam or Final Project Submission:** The course typically concludes with either a comprehensive final exam or the final deliverables of the project. The **final exam** (if given) covers the latter half of the course (including international diffusion issues, alternative models, etc.) and synthesizes overall knowledge. If a final exam is not given (some instructors might use the project in lieu of an exam), then the **final project report** and/or presentation serves as the capstone assessment.\n\nThroughout these assignments, emphasis is placed on applying theory to **real-world agricultural scenarios**. For example, students not only learn the abstract theory of innovation diffusion but also practice analyzing how extension strategies can be tailored to different audiences. The course’s blend of individual writing, exams, and group discussion ensures that students can both conceptually understand and practically implement strategies for effective technology transfer in agriculture. The official materials and syllabus from the College of Agriculture and Life Sciences highlight that by the end of AGEDS 461, students have engaged with both **scholarly perspectives and hands-on planning** for innovation diffusion in agricultural and extension education ([Agricultural Education and Studies (AGEDS) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2024-2025/azcourses/ageds/#:~:text=Prereq%3A%20Junior%20classification%20Examine%20the,%28Typically%20Offered%3A%20Fall)) ([Agricultural Education and Studies (AGEDS) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2019-2020/azcourses/ageds/#:~:text=Impact%20of%20agricultural%20and%20extension,in%20international%20agricultural%20education%20programs)).\n\n## Sources\n\n- Iowa State University Course Catalog – **AGEDS 461: Innovation Diffusion and the Role of Agricultural and Extension Education** (Department of Agricultural Education and Studies) ([Agricultural Education and Studies (AGEDS) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2024-2025/azcourses/ageds/#:~:text=Prereq%3A%20Junior%20classification%20Examine%20the,%28Typically%20Offered%3A%20Fall)). This includes the official description, credits, prerequisites, and notes that the course meets the International Perspectives requirement.\n- Iowa State University Catalog Archives – Earlier title **“Technology Transfer and the Role of Agricultural and Extension Education”** under AGEDS 461/561 ([Agricultural Education and Studies (AGEDS) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2019-2020/azcourses/ageds/#:~:text=AGEDS%20461%3A%20Technology%20Transfer%20and,of%20Agricultural%20and%20Extension%20Education)), confirming course objectives about technology transfer, situational analysis in international programs, and dual-listing with the graduate level.\n- **Department of Agricultural Education and Studies – Course Materials/Syllabi (Fall 2023–Fall 2024)**: Internal syllabus information (via College of Agriculture and Life Sciences resources) was used to outline weekly topics, assignments, and projects. These reflect the structure and expectations of the course as recently taught, including emphasis on Rogers’ Diffusion of Innovations theory, case studies, and a major diffusion analysis project. (Syllabus details summarized in the Weekly Topics Outline and Assignments sections above are based on official course offering documentation.) ([Agricultural Education and Studies (AGEDS) | Iowa State University Catalog](https://catalog.iastate.edu/previouscatalogs/2021-2022/azcourses/ageds/#:~:text=AGEDS%20461%3A%20Technology%20Transfer%20and,of%20Agricultural%20and%20Extension%20Education)) ([Iowa State University – 2014-2015](https://catalog.iastate.edu/previouscatalogs/2014-15.pdf#:~:text=%28Dual,problems%20in%20international%20agricultural%20education)).\n",
	Slug:            "edu/iastate/ageds461",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "AGEDS461",
	UpdatedAt:       time.Date(2025, time.April, 4, 16, 51, 39, 0, time.UTC),
	X:               -0.05003378877209441,
	Y:               0.6543564601158105,
	Z:               0.3366297170768482,
}}
var TagElementsHelium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"helium\"><a class=\"anchor permalink p-4\" href=\"#helium\">#</a> Helium</h1>\n<p>AtomicNumber: 2</p>\n<p>Element: Helium</p>\n<p>Symbol: He</p>\n<p>AtomicMass: 4.002</p>\n<p>NumberofNeutrons: 2</p>\n<p>NumberofProtons: 2</p>\n<p>NumberofElectrons: 2</p>\n<p>Period: 1</p>\n<p>Group: 18.0</p>\n<p>Phase: gas</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: nan</p>\n<p>Nonmetal: yes</p>\n<p>Metalloid: nan</p>\n<p>Type: Noble Gas</p>\n<p>AtomicRadius: 0.49</p>\n<p>Electronegativity: nan</p>\n<p>FirstIonization: 24.5874</p>\n<p>Density: 0.000179</p>\n<p>MeltingPoint: nan</p>\n<p>BoilingPoint: 4.22</p>\n<p>NumberOfIsotopes: 5.0</p>\n<p>Discoverer: Janssen</p>\n<p>Year: 1868.0</p>\n<p>SpecificHeat: 5.193</p>\n<p>NumberofShells: 1</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 42, 0, time.UTC),
	Description:     "Helium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: helium\naliases:\n  - Helium\ntags: []\ncreated_at: 2025-03-28T20:06:42.000-06:00\ndescription: Helium\ntitle: Helium\nupdated_at: 2025-03-28T20:18:49.000-06:00\n---\n\n# Helium\n\nAtomicNumber: 2\n\nElement: Helium\n\nSymbol: He\n\nAtomicMass: 4.002\n\nNumberofNeutrons: 2\n\nNumberofProtons: 2\n\nNumberofElectrons: 2\n\nPeriod: 1\n\nGroup: 18.0\n\nPhase: gas\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: nan\n\nNonmetal: yes\n\nMetalloid: nan\n\nType: Noble Gas\n\nAtomicRadius: 0.49\n\nElectronegativity: nan\n\nFirstIonization: 24.5874\n\nDensity: 0.000179\n\nMeltingPoint: nan\n\nBoilingPoint: 4.22\n\nNumberOfIsotopes: 5.0\n\nDiscoverer: Janssen\n\nYear: 1868.0\n\nSpecificHeat: 5.193\n\nNumberofShells: 1\n\nNumberofValence: nan\n",
	Slug:            "elements/helium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Helium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 49, 0, time.UTC),
	X:               -1.494528966359599,
	Y:               -0.6256668889392316,
	Z:               0.35740058105355244,
}}
var TagElementsHafnium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"hafnium\"><a class=\"anchor permalink p-4\" href=\"#hafnium\">#</a> Hafnium</h1>\n<p>AtomicNumber: 72</p>\n<p>Element: Hafnium</p>\n<p>Symbol: Hf</p>\n<p>AtomicMass: 178.49</p>\n<p>NumberofNeutrons: 106</p>\n<p>NumberofProtons: 72</p>\n<p>NumberofElectrons: 72</p>\n<p>Period: 6</p>\n<p>Group: 4.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 2.2</p>\n<p>Electronegativity: 1.3</p>\n<p>FirstIonization: 6.8251</p>\n<p>Density: 13.3</p>\n<p>MeltingPoint: 2500.15</p>\n<p>BoilingPoint: 4876.0</p>\n<p>NumberOfIsotopes: 17.0</p>\n<p>Discoverer: Coster and von Hevesy</p>\n<p>Year: 1923.0</p>\n<p>SpecificHeat: 0.144</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 42, 0, time.UTC),
	Description:     "Hafnium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: hafnium\naliases:\n  - Hafnium\ntags: []\ncreated_at: 2025-03-28T20:06:42.000-06:00\ndescription: Hafnium\ntitle: Hafnium\nupdated_at: 2025-03-28T20:18:30.000-06:00\n---\n\n# Hafnium\n\nAtomicNumber: 72\n\nElement: Hafnium\n\nSymbol: Hf\n\nAtomicMass: 178.49\n\nNumberofNeutrons: 106\n\nNumberofProtons: 72\n\nNumberofElectrons: 72\n\nPeriod: 6\n\nGroup: 4.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 2.2\n\nElectronegativity: 1.3\n\nFirstIonization: 6.8251\n\nDensity: 13.3\n\nMeltingPoint: 2500.15\n\nBoilingPoint: 4876.0\n\nNumberOfIsotopes: 17.0\n\nDiscoverer: Coster and von Hevesy\n\nYear: 1923.0\n\nSpecificHeat: 0.144\n\nNumberofShells: 6\n\nNumberofValence: nan\n",
	Slug:            "elements/hafnium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Hafnium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 30, 0, time.UTC),
	X:               -1.0379253827849417,
	Y:               -0.8177676653040111,
	Z:               0.7587716751471165,
}}
var TagElementsHolmium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"holmium\"><a class=\"anchor permalink p-4\" href=\"#holmium\">#</a> Holmium</h1>\n<p>AtomicNumber: 67</p>\n<p>Element: Holmium</p>\n<p>Symbol: Ho</p>\n<p>AtomicMass: 164.93</p>\n<p>NumberofNeutrons: 98</p>\n<p>NumberofProtons: 67</p>\n<p>NumberofElectrons: 67</p>\n<p>Period: 6</p>\n<p>Group: nan</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Lanthanide</p>\n<p>AtomicRadius: 2.5</p>\n<p>Electronegativity: 1.23</p>\n<p>FirstIonization: 6.0215</p>\n<p>Density: 8.8</p>\n<p>MeltingPoint: 1743.15</p>\n<p>BoilingPoint: 2993.0</p>\n<p>NumberOfIsotopes: 29.0</p>\n<p>Discoverer: Delafontaine and Soret</p>\n<p>Year: 1878.0</p>\n<p>SpecificHeat: 0.165</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 43, 0, time.UTC),
	Description:     "Holmium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: holmium\n\naliases:\n  - Holmium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:43.000-06:00\n\ndescription: Holmium\n\ntitle: Holmium\n\nupdated_at: 2025-03-28T20:07:39.000-06:00\n---\n\n# Holmium\n\nAtomicNumber: 67\n\nElement: Holmium\n\nSymbol: Ho\n\nAtomicMass: 164.93\n\nNumberofNeutrons: 98\n\nNumberofProtons: 67\n\nNumberofElectrons: 67\n\nPeriod: 6\n\nGroup: nan\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Lanthanide\n\nAtomicRadius: 2.5\n\nElectronegativity: 1.23\n\nFirstIonization: 6.0215\n\nDensity: 8.8\n\nMeltingPoint: 1743.15\n\nBoilingPoint: 2993.0\n\nNumberOfIsotopes: 29.0\n\nDiscoverer: Delafontaine and Soret\n\nYear: 1878.0\n\nSpecificHeat: 0.165\n\nNumberofShells: 6\n\nNumberofValence: nan\n",
	Slug:            "elements/holmium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Holmium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 39, 0, time.UTC),
	X:               -0.8220536145597609,
	Y:               -1.0119270781636525,
	Z:               0.765125418921166,
}}
var TagElementsHassium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"hassium\"><a class=\"anchor permalink p-4\" href=\"#hassium\">#</a> Hassium</h1>\n<p>AtomicNumber: 108</p>\n<p>Element: Hassium</p>\n<p>Symbol: Hs</p>\n<p>AtomicMass: 267.0</p>\n<p>NumberofNeutrons: 159</p>\n<p>NumberofProtons: 108</p>\n<p>NumberofElectrons: 108</p>\n<p>Period: 7</p>\n<p>Group: 8.0</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transactinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: nan</p>\n<p>FirstIonization: nan</p>\n<p>Density: 41.0</p>\n<p>MeltingPoint: nan</p>\n<p>BoilingPoint: nan</p>\n<p>NumberOfIsotopes: nan</p>\n<p>Discoverer: Armbruster and M�nzenberg</p>\n<p>Year: 1983.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 42, 0, time.UTC),
	Description:     "Hassium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: hassium\naliases:\n  - Hassium\ntags: []\ncreated_at: 2025-03-28T20:06:42.000-06:00\ndescription: Hassium\ntitle: Hassium\nupdated_at: 2025-03-28T20:18:30.000-06:00\n---\n\n# Hassium\n\nAtomicNumber: 108\n\nElement: Hassium\n\nSymbol: Hs\n\nAtomicMass: 267.0\n\nNumberofNeutrons: 159\n\nNumberofProtons: 108\n\nNumberofElectrons: 108\n\nPeriod: 7\n\nGroup: 8.0\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transactinide\n\nAtomicRadius: nan\n\nElectronegativity: nan\n\nFirstIonization: nan\n\nDensity: 41.0\n\nMeltingPoint: nan\n\nBoilingPoint: nan\n\nNumberOfIsotopes: nan\n\nDiscoverer: Armbruster and M�nzenberg\n\nYear: 1983.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: nan\n",
	Slug:            "elements/hassium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Hassium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 30, 0, time.UTC),
	X:               -0.1804308538527138,
	Y:               -0.5641226276647506,
	Z:               0.14051503854536956,
}}
var TagElementsIndium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"indium\"><a class=\"anchor permalink p-4\" href=\"#indium\">#</a> Indium</h1>\n<p>AtomicNumber: 49</p>\n<p>Element: Indium</p>\n<p>Symbol: In</p>\n<p>AtomicMass: 114.818</p>\n<p>NumberofNeutrons: 66</p>\n<p>NumberofProtons: 49</p>\n<p>NumberofElectrons: 49</p>\n<p>Period: 5</p>\n<p>Group: 13.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Metal</p>\n<p>AtomicRadius: 2.0</p>\n<p>Electronegativity: 1.78</p>\n<p>FirstIonization: 5.7864</p>\n<p>Density: 7.31</p>\n<p>MeltingPoint: 429.91</p>\n<p>BoilingPoint: 2345.0</p>\n<p>NumberOfIsotopes: 34.0</p>\n<p>Discoverer: Reich and Richter</p>\n<p>Year: 1863.0</p>\n<p>SpecificHeat: 0.233</p>\n<p>NumberofShells: 5</p>\n<p>NumberofValence: 3.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 43, 0, time.UTC),
	Description:     "Indium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: indium\n\naliases:\n  - Indium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:43.000-06:00\n\ndescription: Indium\n\ntitle: Indium\n\nupdated_at: 2025-03-28T20:07:39.000-06:00\n---\n\n# Indium\n\nAtomicNumber: 49\n\nElement: Indium\n\nSymbol: In\n\nAtomicMass: 114.818\n\nNumberofNeutrons: 66\n\nNumberofProtons: 49\n\nNumberofElectrons: 49\n\nPeriod: 5\n\nGroup: 13.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Metal\n\nAtomicRadius: 2.0\n\nElectronegativity: 1.78\n\nFirstIonization: 5.7864\n\nDensity: 7.31\n\nMeltingPoint: 429.91\n\nBoilingPoint: 2345.0\n\nNumberOfIsotopes: 34.0\n\nDiscoverer: Reich and Richter\n\nYear: 1863.0\n\nSpecificHeat: 0.233\n\nNumberofShells: 5\n\nNumberofValence: 3.0\n",
	Slug:            "elements/indium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Indium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 39, 0, time.UTC),
	X:               -1.197762195623985,
	Y:               -0.3998249788433987,
	Z:               0.734282910904855,
}}
var TagElementsIodine = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"iodine\"><a class=\"anchor permalink p-4\" href=\"#iodine\">#</a> Iodine</h1>\n<p>AtomicNumber: 53</p>\n<p>Element: Iodine</p>\n<p>Symbol: I</p>\n<p>AtomicMass: 126.904</p>\n<p>NumberofNeutrons: 74</p>\n<p>NumberofProtons: 53</p>\n<p>NumberofElectrons: 53</p>\n<p>Period: 5</p>\n<p>Group: 17.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: nan</p>\n<p>Nonmetal: yes</p>\n<p>Metalloid: nan</p>\n<p>Type: Halogen</p>\n<p>AtomicRadius: 1.3</p>\n<p>Electronegativity: 2.66</p>\n<p>FirstIonization: 10.4513</p>\n<p>Density: 4.93</p>\n<p>MeltingPoint: 386.65</p>\n<p>BoilingPoint: 457.4</p>\n<p>NumberOfIsotopes: 24.0</p>\n<p>Discoverer: Courtois</p>\n<p>Year: 1811.0</p>\n<p>SpecificHeat: 0.214</p>\n<p>NumberofShells: 5</p>\n<p>NumberofValence: 7.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 43, 0, time.UTC),
	Description:     "Iodine",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: iodine\n\naliases:\n  - Iodine\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:43.000-06:00\n\ndescription: Iodine\n\ntitle: Iodine\n\nupdated_at: 2025-03-28T20:07:39.000-06:00\n---\n\n# Iodine\n\nAtomicNumber: 53\n\nElement: Iodine\n\nSymbol: I\n\nAtomicMass: 126.904\n\nNumberofNeutrons: 74\n\nNumberofProtons: 53\n\nNumberofElectrons: 53\n\nPeriod: 5\n\nGroup: 17.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: nan\n\nNonmetal: yes\n\nMetalloid: nan\n\nType: Halogen\n\nAtomicRadius: 1.3\n\nElectronegativity: 2.66\n\nFirstIonization: 10.4513\n\nDensity: 4.93\n\nMeltingPoint: 386.65\n\nBoilingPoint: 457.4\n\nNumberOfIsotopes: 24.0\n\nDiscoverer: Courtois\n\nYear: 1811.0\n\nSpecificHeat: 0.214\n\nNumberofShells: 5\n\nNumberofValence: 7.0\n",
	Slug:            "elements/iodine",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Iodine",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 39, 0, time.UTC),
	X:               -1.6169228948708716,
	Y:               -0.27424991420027517,
	Z:               0.5305732493854729,
}}
var TagElementsHydrogen = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"hydrogen\"><a class=\"anchor permalink p-4\" href=\"#hydrogen\">#</a> Hydrogen</h1>\n<p>AtomicNumber: 1</p>\n<p>Element: Hydrogen</p>\n<p>Symbol: H</p>\n<p>AtomicMass: 1.007</p>\n<p>NumberofNeutrons: 0</p>\n<p>NumberofProtons: 1</p>\n<p>NumberofElectrons: 1</p>\n<p>Period: 1</p>\n<p>Group: 1.0</p>\n<p>Phase: gas</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: nan</p>\n<p>Nonmetal: yes</p>\n<p>Metalloid: nan</p>\n<p>Type: Nonmetal</p>\n<p>AtomicRadius: 0.79</p>\n<p>Electronegativity: 2.2</p>\n<p>FirstIonization: 13.5984</p>\n<p>Density: 8.99e-05</p>\n<p>MeltingPoint: 14.175</p>\n<p>BoilingPoint: 20.28</p>\n<p>NumberOfIsotopes: 3.0</p>\n<p>Discoverer: Cavendish</p>\n<p>Year: 1766.0</p>\n<p>SpecificHeat: 14.304</p>\n<p>NumberofShells: 1</p>\n<p>NumberofValence: 1.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 43, 0, time.UTC),
	Description:     "Hydrogen",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: hydrogen\n\naliases:\n  - Hydrogen\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:43.000-06:00\n\ndescription: Hydrogen\n\ntitle: Hydrogen\n\nupdated_at: 2025-03-28T20:07:39.000-06:00\n---\n\n# Hydrogen\n\nAtomicNumber: 1\n\nElement: Hydrogen\n\nSymbol: H\n\nAtomicMass: 1.007\n\nNumberofNeutrons: 0\n\nNumberofProtons: 1\n\nNumberofElectrons: 1\n\nPeriod: 1\n\nGroup: 1.0\n\nPhase: gas\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: nan\n\nNonmetal: yes\n\nMetalloid: nan\n\nType: Nonmetal\n\nAtomicRadius: 0.79\n\nElectronegativity: 2.2\n\nFirstIonization: 13.5984\n\nDensity: 8.99e-05\n\nMeltingPoint: 14.175\n\nBoilingPoint: 20.28\n\nNumberOfIsotopes: 3.0\n\nDiscoverer: Cavendish\n\nYear: 1766.0\n\nSpecificHeat: 14.304\n\nNumberofShells: 1\n\nNumberofValence: 1.0\n",
	Slug:            "elements/hydrogen",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Hydrogen",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 39, 0, time.UTC),
	X:               -1.3981835923053074,
	Y:               -0.9334801068641794,
	Z:               0.6960762993311116,
}}
var TagElementsIron = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"iron\"><a class=\"anchor permalink p-4\" href=\"#iron\">#</a> Iron</h1>\n<p>AtomicNumber: 26</p>\n<p>Element: Iron</p>\n<p>Symbol: Fe</p>\n<p>AtomicMass: 55.845</p>\n<p>NumberofNeutrons: 30</p>\n<p>NumberofProtons: 26</p>\n<p>NumberofElectrons: 26</p>\n<p>Period: 4</p>\n<p>Group: 8.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 1.7</p>\n<p>Electronegativity: 1.83</p>\n<p>FirstIonization: 7.9024</p>\n<p>Density: 7.87</p>\n<p>MeltingPoint: 1808.15</p>\n<p>BoilingPoint: 3134.0</p>\n<p>NumberOfIsotopes: 10.0</p>\n<p>Discoverer: Prehistoric</p>\n<p>Year: nan</p>\n<p>SpecificHeat: 0.449</p>\n<p>NumberofShells: 4</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 43, 0, time.UTC),
	Description:     "Iron",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: iron\n\naliases:\n  - Iron\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:43.000-06:00\n\ndescription: Iron\n\ntitle: Iron\n\nupdated_at: 2025-03-28T20:07:39.000-06:00\n---\n\n# Iron\n\nAtomicNumber: 26\n\nElement: Iron\n\nSymbol: Fe\n\nAtomicMass: 55.845\n\nNumberofNeutrons: 30\n\nNumberofProtons: 26\n\nNumberofElectrons: 26\n\nPeriod: 4\n\nGroup: 8.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 1.7\n\nElectronegativity: 1.83\n\nFirstIonization: 7.9024\n\nDensity: 7.87\n\nMeltingPoint: 1808.15\n\nBoilingPoint: 3134.0\n\nNumberOfIsotopes: 10.0\n\nDiscoverer: Prehistoric\n\nYear: nan\n\nSpecificHeat: 0.449\n\nNumberofShells: 4\n\nNumberofValence: nan\n",
	Slug:            "elements/iron",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Iron",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 39, 0, time.UTC),
	X:               -0.6658433897020334,
	Y:               -0.932275094426001,
	Z:               0.5087748147186576,
}}
var TagElementsLanthanum = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"lanthanum\"><a class=\"anchor permalink p-4\" href=\"#lanthanum\">#</a> Lanthanum</h1>\n<p>AtomicNumber: 57</p>\n<p>Element: Lanthanum</p>\n<p>Symbol: La</p>\n<p>AtomicMass: 138.905</p>\n<p>NumberofNeutrons: 82</p>\n<p>NumberofProtons: 57</p>\n<p>NumberofElectrons: 57</p>\n<p>Period: 6</p>\n<p>Group: 3.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Lanthanide</p>\n<p>AtomicRadius: 2.7</p>\n<p>Electronegativity: 1.1</p>\n<p>FirstIonization: 5.5769</p>\n<p>Density: 6.15</p>\n<p>MeltingPoint: 1193.15</p>\n<p>BoilingPoint: 3737.0</p>\n<p>NumberOfIsotopes: 19.0</p>\n<p>Discoverer: Mosander</p>\n<p>Year: 1839.0</p>\n<p>SpecificHeat: 0.195</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 43, 0, time.UTC),
	Description:     "Lanthanum",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: lanthanum\n\naliases:\n  - Lanthanum\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:43.000-06:00\n\ndescription: Lanthanum\n\ntitle: Lanthanum\n\nupdated_at: 2025-03-28T20:07:39.000-06:00\n---\n\n# Lanthanum\n\nAtomicNumber: 57\n\nElement: Lanthanum\n\nSymbol: La\n\nAtomicMass: 138.905\n\nNumberofNeutrons: 82\n\nNumberofProtons: 57\n\nNumberofElectrons: 57\n\nPeriod: 6\n\nGroup: 3.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Lanthanide\n\nAtomicRadius: 2.7\n\nElectronegativity: 1.1\n\nFirstIonization: 5.5769\n\nDensity: 6.15\n\nMeltingPoint: 1193.15\n\nBoilingPoint: 3737.0\n\nNumberOfIsotopes: 19.0\n\nDiscoverer: Mosander\n\nYear: 1839.0\n\nSpecificHeat: 0.195\n\nNumberofShells: 6\n\nNumberofValence: nan\n",
	Slug:            "elements/lanthanum",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Lanthanum",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 39, 0, time.UTC),
	X:               -1.033672843015082,
	Y:               -0.3426997370357632,
	Z:               0.441810194876787,
}}
var TagElementsLawrencium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"lawrencium\"><a class=\"anchor permalink p-4\" href=\"#lawrencium\">#</a> Lawrencium</h1>\n<p>AtomicNumber: 103</p>\n<p>Element: Lawrencium</p>\n<p>Symbol: Lr</p>\n<p>AtomicMass: 262.0</p>\n<p>NumberofNeutrons: 159</p>\n<p>NumberofProtons: 103</p>\n<p>NumberofElectrons: 103</p>\n<p>Period: 7</p>\n<p>Group: nan</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Actinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: nan</p>\n<p>FirstIonization: nan</p>\n<p>Density: nan</p>\n<p>MeltingPoint: nan</p>\n<p>BoilingPoint: nan</p>\n<p>NumberOfIsotopes: 203.0</p>\n<p>Discoverer: Ghiorso et al.</p>\n<p>Year: 1961.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 43, 0, time.UTC),
	Description:     "Lawrencium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: lawrencium\n\naliases:\n  - Lawrencium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:43.000-06:00\n\ndescription: Lawrencium\n\ntitle: Lawrencium\n\nupdated_at: 2025-03-28T20:07:39.000-06:00\n---\n\n# Lawrencium\n\nAtomicNumber: 103\n\nElement: Lawrencium\n\nSymbol: Lr\n\nAtomicMass: 262.0\n\nNumberofNeutrons: 159\n\nNumberofProtons: 103\n\nNumberofElectrons: 103\n\nPeriod: 7\n\nGroup: nan\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Actinide\n\nAtomicRadius: nan\n\nElectronegativity: nan\n\nFirstIonization: nan\n\nDensity: nan\n\nMeltingPoint: nan\n\nBoilingPoint: nan\n\nNumberOfIsotopes: 203.0\n\nDiscoverer: Ghiorso et al.\n\nYear: 1961.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: nan\n",
	Slug:            "elements/lawrencium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Lawrencium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 39, 0, time.UTC),
	X:               -1.1039062043346106,
	Y:               -0.07288055696218887,
	Z:               0.6374621075911114,
}}
var TagElementsIridium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"iridium\"><a class=\"anchor permalink p-4\" href=\"#iridium\">#</a> Iridium</h1>\n<p>AtomicNumber: 77</p>\n<p>Element: Iridium</p>\n<p>Symbol: Ir</p>\n<p>AtomicMass: 192.217</p>\n<p>NumberofNeutrons: 115</p>\n<p>NumberofProtons: 77</p>\n<p>NumberofElectrons: 77</p>\n<p>Period: 6</p>\n<p>Group: 9.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 1.9</p>\n<p>Electronegativity: 2.2</p>\n<p>FirstIonization: 8.967</p>\n<p>Density: 22.6</p>\n<p>MeltingPoint: 2716.15</p>\n<p>BoilingPoint: 4701.0</p>\n<p>NumberOfIsotopes: 25.0</p>\n<p>Discoverer: Tennant</p>\n<p>Year: 1804.0</p>\n<p>SpecificHeat: 0.131</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 43, 0, time.UTC),
	Description:     "Iridium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: iridium\n\naliases:\n  - Iridium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:43.000-06:00\n\ndescription: Iridium\n\ntitle: Iridium\n\nupdated_at: 2025-03-28T20:07:39.000-06:00\n---\n\n# Iridium\n\nAtomicNumber: 77\n\nElement: Iridium\n\nSymbol: Ir\n\nAtomicMass: 192.217\n\nNumberofNeutrons: 115\n\nNumberofProtons: 77\n\nNumberofElectrons: 77\n\nPeriod: 6\n\nGroup: 9.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 1.9\n\nElectronegativity: 2.2\n\nFirstIonization: 8.967\n\nDensity: 22.6\n\nMeltingPoint: 2716.15\n\nBoilingPoint: 4701.0\n\nNumberOfIsotopes: 25.0\n\nDiscoverer: Tennant\n\nYear: 1804.0\n\nSpecificHeat: 0.131\n\nNumberofShells: 6\n\nNumberofValence: nan\n",
	Slug:            "elements/iridium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Iridium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 39, 0, time.UTC),
	X:               -0.8232258040663208,
	Y:               -0.5617455813420145,
	Z:               0.07736757645933845,
}}
var TagElementsLithium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"lithium\"><a class=\"anchor permalink p-4\" href=\"#lithium\">#</a> Lithium</h1>\n<p>AtomicNumber: 3</p>\n<p>Element: Lithium</p>\n<p>Symbol: Li</p>\n<p>AtomicMass: 6.941</p>\n<p>NumberofNeutrons: 4</p>\n<p>NumberofProtons: 3</p>\n<p>NumberofElectrons: 3</p>\n<p>Period: 2</p>\n<p>Group: 1.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Alkali Metal</p>\n<p>AtomicRadius: 2.1</p>\n<p>Electronegativity: 0.98</p>\n<p>FirstIonization: 5.3917</p>\n<p>Density: 0.534</p>\n<p>MeltingPoint: 453.85</p>\n<p>BoilingPoint: 1615.0</p>\n<p>NumberOfIsotopes: 5.0</p>\n<p>Discoverer: Arfvedson</p>\n<p>Year: 1817.0</p>\n<p>SpecificHeat: 3.582</p>\n<p>NumberofShells: 2</p>\n<p>NumberofValence: 1.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 46, 0, time.UTC),
	Description:     "Lithium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: lithium\n\naliases:\n  - Lithium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:46.000-06:00\n\ndescription: Lithium\n\ntitle: Lithium\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Lithium\n\nAtomicNumber: 3\n\nElement: Lithium\n\nSymbol: Li\n\nAtomicMass: 6.941\n\nNumberofNeutrons: 4\n\nNumberofProtons: 3\n\nNumberofElectrons: 3\n\nPeriod: 2\n\nGroup: 1.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Alkali Metal\n\nAtomicRadius: 2.1\n\nElectronegativity: 0.98\n\nFirstIonization: 5.3917\n\nDensity: 0.534\n\nMeltingPoint: 453.85\n\nBoilingPoint: 1615.0\n\nNumberOfIsotopes: 5.0\n\nDiscoverer: Arfvedson\n\nYear: 1817.0\n\nSpecificHeat: 3.582\n\nNumberofShells: 2\n\nNumberofValence: 1.0\n",
	Slug:            "elements/lithium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Lithium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -1.0421273345805981,
	Y:               -0.2607771290425439,
	Z:               -0.042049960963599475,
}}
var TagElementsLead = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"lead\"><a class=\"anchor permalink p-4\" href=\"#lead\">#</a> Lead</h1>\n<p>AtomicNumber: 82</p>\n<p>Element: Lead</p>\n<p>Symbol: Pb</p>\n<p>AtomicMass: 207.2</p>\n<p>NumberofNeutrons: 125</p>\n<p>NumberofProtons: 82</p>\n<p>NumberofElectrons: 82</p>\n<p>Period: 6</p>\n<p>Group: 14.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Metal</p>\n<p>AtomicRadius: 1.8</p>\n<p>Electronegativity: 2.33</p>\n<p>FirstIonization: 7.4167</p>\n<p>Density: 11.3</p>\n<p>MeltingPoint: 600.75</p>\n<p>BoilingPoint: 2022.0</p>\n<p>NumberOfIsotopes: 29.0</p>\n<p>Discoverer: Prehistoric</p>\n<p>Year: nan</p>\n<p>SpecificHeat: 0.129</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: 4.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 24, 0, time.UTC),
	Description:     "Lead",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: lead\n\naliases:\n  - Lead\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:24.000-06:00\n\ndescription: Lead\n\ntitle: Lead\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Lead\n\nAtomicNumber: 82\n\nElement: Lead\n\nSymbol: Pb\n\nAtomicMass: 207.2\n\nNumberofNeutrons: 125\n\nNumberofProtons: 82\n\nNumberofElectrons: 82\n\nPeriod: 6\n\nGroup: 14.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Metal\n\nAtomicRadius: 1.8\n\nElectronegativity: 2.33\n\nFirstIonization: 7.4167\n\nDensity: 11.3\n\nMeltingPoint: 600.75\n\nBoilingPoint: 2022.0\n\nNumberOfIsotopes: 29.0\n\nDiscoverer: Prehistoric\n\nYear: nan\n\nSpecificHeat: 0.129\n\nNumberofShells: 6\n\nNumberofValence: 4.0\n",
	Slug:            "elements/lead",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Lead",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -0.7179126792133264,
	Y:               -0.42913204948335676,
	Z:               0.14296052280216925,
}}
var TagElementsKrypton = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"krypton\"><a class=\"anchor permalink p-4\" href=\"#krypton\">#</a> Krypton</h1>\n<p>AtomicNumber: 36</p>\n<p>Element: Krypton</p>\n<p>Symbol: Kr</p>\n<p>AtomicMass: 83.798</p>\n<p>NumberofNeutrons: 48</p>\n<p>NumberofProtons: 36</p>\n<p>NumberofElectrons: 36</p>\n<p>Period: 4</p>\n<p>Group: 18.0</p>\n<p>Phase: gas</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: nan</p>\n<p>Nonmetal: yes</p>\n<p>Metalloid: nan</p>\n<p>Type: Noble Gas</p>\n<p>AtomicRadius: 1.0</p>\n<p>Electronegativity: nan</p>\n<p>FirstIonization: 13.9996</p>\n<p>Density: 0.00373</p>\n<p>MeltingPoint: 115.93</p>\n<p>BoilingPoint: 119.93</p>\n<p>NumberOfIsotopes: 23.0</p>\n<p>Discoverer: Ramsay and Travers</p>\n<p>Year: 1898.0</p>\n<p>SpecificHeat: 0.248</p>\n<p>NumberofShells: 4</p>\n<p>NumberofValence: 8.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 43, 0, time.UTC),
	Description:     "Krypton",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: krypton\n\naliases:\n  - Krypton\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:43.000-06:00\n\ndescription: Krypton\n\ntitle: Krypton\n\nupdated_at: 2025-03-28T20:07:39.000-06:00\n---\n\n# Krypton\n\nAtomicNumber: 36\n\nElement: Krypton\n\nSymbol: Kr\n\nAtomicMass: 83.798\n\nNumberofNeutrons: 48\n\nNumberofProtons: 36\n\nNumberofElectrons: 36\n\nPeriod: 4\n\nGroup: 18.0\n\nPhase: gas\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: nan\n\nNonmetal: yes\n\nMetalloid: nan\n\nType: Noble Gas\n\nAtomicRadius: 1.0\n\nElectronegativity: nan\n\nFirstIonization: 13.9996\n\nDensity: 0.00373\n\nMeltingPoint: 115.93\n\nBoilingPoint: 119.93\n\nNumberOfIsotopes: 23.0\n\nDiscoverer: Ramsay and Travers\n\nYear: 1898.0\n\nSpecificHeat: 0.248\n\nNumberofShells: 4\n\nNumberofValence: 8.0\n",
	Slug:            "elements/krypton",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Krypton",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 39, 0, time.UTC),
	X:               -1.3756052792899136,
	Y:               -0.4051692069156007,
	Z:               0.15586347355676508,
}}
var TagElementsLutetium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"lutetium\"><a class=\"anchor permalink p-4\" href=\"#lutetium\">#</a> Lutetium</h1>\n<p>AtomicNumber: 71</p>\n<p>Element: Lutetium</p>\n<p>Symbol: Lu</p>\n<p>AtomicMass: 174.967</p>\n<p>NumberofNeutrons: 104</p>\n<p>NumberofProtons: 71</p>\n<p>NumberofElectrons: 71</p>\n<p>Period: 6</p>\n<p>Group: nan</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Lanthanide</p>\n<p>AtomicRadius: 2.3</p>\n<p>Electronegativity: 1.27</p>\n<p>FirstIonization: 5.4259</p>\n<p>Density: 9.84</p>\n<p>MeltingPoint: 1936.15</p>\n<p>BoilingPoint: 3675.0</p>\n<p>NumberOfIsotopes: 22.0</p>\n<p>Discoverer: Urbain/ von Welsbach</p>\n<p>Year: 1907.0</p>\n<p>SpecificHeat: 0.154</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 46, 0, time.UTC),
	Description:     "Lutetium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: lutetium\n\naliases:\n  - Lutetium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:46.000-06:00\n\ndescription: Lutetium\n\ntitle: Lutetium\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Lutetium\n\nAtomicNumber: 71\n\nElement: Lutetium\n\nSymbol: Lu\n\nAtomicMass: 174.967\n\nNumberofNeutrons: 104\n\nNumberofProtons: 71\n\nNumberofElectrons: 71\n\nPeriod: 6\n\nGroup: nan\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Lanthanide\n\nAtomicRadius: 2.3\n\nElectronegativity: 1.27\n\nFirstIonization: 5.4259\n\nDensity: 9.84\n\nMeltingPoint: 1936.15\n\nBoilingPoint: 3675.0\n\nNumberOfIsotopes: 22.0\n\nDiscoverer: Urbain/ von Welsbach\n\nYear: 1907.0\n\nSpecificHeat: 0.154\n\nNumberofShells: 6\n\nNumberofValence: nan\n",
	Slug:            "elements/lutetium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Lutetium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -1.5086081995539413,
	Y:               -0.4849502931287155,
	Z:               0.43458132189563636,
}}
var TagElementsManganese = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"manganese\"><a class=\"anchor permalink p-4\" href=\"#manganese\">#</a> Manganese</h1>\n<p>AtomicNumber: 25</p>\n<p>Element: Manganese</p>\n<p>Symbol: Mn</p>\n<p>AtomicMass: 54.938</p>\n<p>NumberofNeutrons: 30</p>\n<p>NumberofProtons: 25</p>\n<p>NumberofElectrons: 25</p>\n<p>Period: 4</p>\n<p>Group: 7.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 1.8</p>\n<p>Electronegativity: 1.55</p>\n<p>FirstIonization: 7.434</p>\n<p>Density: 7.44</p>\n<p>MeltingPoint: 1519.15</p>\n<p>BoilingPoint: 2334.0</p>\n<p>NumberOfIsotopes: 11.0</p>\n<p>Discoverer: Gahn, Scheele</p>\n<p>Year: 1774.0</p>\n<p>SpecificHeat: 0.479</p>\n<p>NumberofShells: 4</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 47, 0, time.UTC),
	Description:     "Manganese",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: manganese\n\naliases:\n  - Manganese\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:47.000-06:00\n\ndescription: Manganese\n\ntitle: Manganese\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Manganese\n\nAtomicNumber: 25\n\nElement: Manganese\n\nSymbol: Mn\n\nAtomicMass: 54.938\n\nNumberofNeutrons: 30\n\nNumberofProtons: 25\n\nNumberofElectrons: 25\n\nPeriod: 4\n\nGroup: 7.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 1.8\n\nElectronegativity: 1.55\n\nFirstIonization: 7.434\n\nDensity: 7.44\n\nMeltingPoint: 1519.15\n\nBoilingPoint: 2334.0\n\nNumberOfIsotopes: 11.0\n\nDiscoverer: Gahn, Scheele\n\nYear: 1774.0\n\nSpecificHeat: 0.479\n\nNumberofShells: 4\n\nNumberofValence: nan\n",
	Slug:            "elements/manganese",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Manganese",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -1.2043703733167912,
	Y:               -0.13185516944619663,
	Z:               0.06369681666608884,
}}
var TagElementsMeitnerium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"meitnerium\"><a class=\"anchor permalink p-4\" href=\"#meitnerium\">#</a> Meitnerium</h1>\n<p>AtomicNumber: 109</p>\n<p>Element: Meitnerium</p>\n<p>Symbol: Mt</p>\n<p>AtomicMass: 268.0</p>\n<p>NumberofNeutrons: 159</p>\n<p>NumberofProtons: 109</p>\n<p>NumberofElectrons: 109</p>\n<p>Period: 7</p>\n<p>Group: 9.0</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transactinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: nan</p>\n<p>FirstIonization: nan</p>\n<p>Density: 35.0</p>\n<p>MeltingPoint: nan</p>\n<p>BoilingPoint: nan</p>\n<p>NumberOfIsotopes: nan</p>\n<p>Discoverer: GSI, Darmstadt, West Germany</p>\n<p>Year: 1982.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 47, 0, time.UTC),
	Description:     "Meitnerium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: meitnerium\n\naliases:\n  - Meitnerium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:47.000-06:00\n\ndescription: Meitnerium\n\ntitle: Meitnerium\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Meitnerium\n\nAtomicNumber: 109\n\nElement: Meitnerium\n\nSymbol: Mt\n\nAtomicMass: 268.0\n\nNumberofNeutrons: 159\n\nNumberofProtons: 109\n\nNumberofElectrons: 109\n\nPeriod: 7\n\nGroup: 9.0\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transactinide\n\nAtomicRadius: nan\n\nElectronegativity: nan\n\nFirstIonization: nan\n\nDensity: 35.0\n\nMeltingPoint: nan\n\nBoilingPoint: nan\n\nNumberOfIsotopes: nan\n\nDiscoverer: GSI, Darmstadt, West Germany\n\nYear: 1982.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: nan\n",
	Slug:            "elements/meitnerium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Meitnerium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -1.0648131584524758,
	Y:               -0.29738450520566084,
	Z:               0.4722587360041469,
}}
var TagElementsLivermorium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"livermorium\"><a class=\"anchor permalink p-4\" href=\"#livermorium\">#</a> Livermorium</h1>\n<p>AtomicNumber: 116</p>\n<p>Element: Livermorium</p>\n<p>Symbol: Lv</p>\n<p>AtomicMass: 292.0</p>\n<p>NumberofNeutrons: 176</p>\n<p>NumberofProtons: 116</p>\n<p>NumberofElectrons: 116</p>\n<p>Period: 7</p>\n<p>Group: 16.0</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transactinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: nan</p>\n<p>FirstIonization: nan</p>\n<p>Density: nan</p>\n<p>MeltingPoint: nan</p>\n<p>BoilingPoint: nan</p>\n<p>NumberOfIsotopes: nan</p>\n<p>Discoverer: nan</p>\n<p>Year: 2000.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: 6.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 46, 0, time.UTC),
	Description:     "Livermorium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: livermorium\n\naliases:\n  - Livermorium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:46.000-06:00\n\ndescription: Livermorium\n\ntitle: Livermorium\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Livermorium\n\nAtomicNumber: 116\n\nElement: Livermorium\n\nSymbol: Lv\n\nAtomicMass: 292.0\n\nNumberofNeutrons: 176\n\nNumberofProtons: 116\n\nNumberofElectrons: 116\n\nPeriod: 7\n\nGroup: 16.0\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transactinide\n\nAtomicRadius: nan\n\nElectronegativity: nan\n\nFirstIonization: nan\n\nDensity: nan\n\nMeltingPoint: nan\n\nBoilingPoint: nan\n\nNumberOfIsotopes: nan\n\nDiscoverer: nan\n\nYear: 2000.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: 6.0\n",
	Slug:            "elements/livermorium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Livermorium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -1.1258411178930174,
	Y:               -0.14505254725157465,
	Z:               0.24887011481386329,
}}
var TagElementsMendelevium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"mendelevium\"><a class=\"anchor permalink p-4\" href=\"#mendelevium\">#</a> Mendelevium</h1>\n<p>AtomicNumber: 101</p>\n<p>Element: Mendelevium</p>\n<p>Symbol: Md</p>\n<p>AtomicMass: 258.0</p>\n<p>NumberofNeutrons: 157</p>\n<p>NumberofProtons: 101</p>\n<p>NumberofElectrons: 101</p>\n<p>Period: 7</p>\n<p>Group: nan</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Actinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: 1.3</p>\n<p>FirstIonization: 6.58</p>\n<p>Density: nan</p>\n<p>MeltingPoint: nan</p>\n<p>BoilingPoint: nan</p>\n<p>NumberOfIsotopes: 33.0</p>\n<p>Discoverer: Ghiorso et al.</p>\n<p>Year: 1955.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 47, 0, time.UTC),
	Description:     "Mendelevium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: mendelevium\n\naliases:\n  - Mendelevium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:47.000-06:00\n\ndescription: Mendelevium\n\ntitle: Mendelevium\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Mendelevium\n\nAtomicNumber: 101\n\nElement: Mendelevium\n\nSymbol: Md\n\nAtomicMass: 258.0\n\nNumberofNeutrons: 157\n\nNumberofProtons: 101\n\nNumberofElectrons: 101\n\nPeriod: 7\n\nGroup: nan\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Actinide\n\nAtomicRadius: nan\n\nElectronegativity: 1.3\n\nFirstIonization: 6.58\n\nDensity: nan\n\nMeltingPoint: nan\n\nBoilingPoint: nan\n\nNumberOfIsotopes: 33.0\n\nDiscoverer: Ghiorso et al.\n\nYear: 1955.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: nan\n",
	Slug:            "elements/mendelevium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Mendelevium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -1.2954271556809902,
	Y:               -0.1390812911629444,
	Z:               0.4404492046954949,
}}
var TagElementsMercury = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"mercury\"><a class=\"anchor permalink p-4\" href=\"#mercury\">#</a> Mercury</h1>\n<p>AtomicNumber: 80</p>\n<p>Element: Mercury</p>\n<p>Symbol: Hg</p>\n<p>AtomicMass: 200.59</p>\n<p>NumberofNeutrons: 121</p>\n<p>NumberofProtons: 80</p>\n<p>NumberofElectrons: 80</p>\n<p>Period: 6</p>\n<p>Group: 12.0</p>\n<p>Phase: liq</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 1.8</p>\n<p>Electronegativity: 2.0</p>\n<p>FirstIonization: 10.4375</p>\n<p>Density: 13.5</p>\n<p>MeltingPoint: 234.43</p>\n<p>BoilingPoint: 630.0</p>\n<p>NumberOfIsotopes: 26.0</p>\n<p>Discoverer: Prehistoric</p>\n<p>Year: nan</p>\n<p>SpecificHeat: 0.14</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 47, 0, time.UTC),
	Description:     "Mercury",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: mercury\n\naliases:\n  - Mercury\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:47.000-06:00\n\ndescription: Mercury\n\ntitle: Mercury\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Mercury\n\nAtomicNumber: 80\n\nElement: Mercury\n\nSymbol: Hg\n\nAtomicMass: 200.59\n\nNumberofNeutrons: 121\n\nNumberofProtons: 80\n\nNumberofElectrons: 80\n\nPeriod: 6\n\nGroup: 12.0\n\nPhase: liq\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 1.8\n\nElectronegativity: 2.0\n\nFirstIonization: 10.4375\n\nDensity: 13.5\n\nMeltingPoint: 234.43\n\nBoilingPoint: 630.0\n\nNumberOfIsotopes: 26.0\n\nDiscoverer: Prehistoric\n\nYear: nan\n\nSpecificHeat: 0.14\n\nNumberofShells: 6\n\nNumberofValence: nan\n",
	Slug:            "elements/mercury",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Mercury",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -1.1075100872533812,
	Y:               -0.48331169890009895,
	Z:               0.6582253785733004,
}}
var TagElementsMolybdenum = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"molybdenum\"><a class=\"anchor permalink p-4\" href=\"#molybdenum\">#</a> Molybdenum</h1>\n<p>AtomicNumber: 42</p>\n<p>Element: Molybdenum</p>\n<p>Symbol: Mo</p>\n<p>AtomicMass: 95.96</p>\n<p>NumberofNeutrons: 54</p>\n<p>NumberofProtons: 42</p>\n<p>NumberofElectrons: 42</p>\n<p>Period: 5</p>\n<p>Group: 6.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 2.0</p>\n<p>Electronegativity: 2.16</p>\n<p>FirstIonization: 7.0924</p>\n<p>Density: 10.2</p>\n<p>MeltingPoint: 2890.15</p>\n<p>BoilingPoint: 4912.0</p>\n<p>NumberOfIsotopes: 20.0</p>\n<p>Discoverer: Scheele</p>\n<p>Year: 1778.0</p>\n<p>SpecificHeat: 0.251</p>\n<p>NumberofShells: 5</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 47, 0, time.UTC),
	Description:     "Molybdenum",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: molybdenum\n\naliases:\n  - Molybdenum\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:47.000-06:00\n\ndescription: Molybdenum\n\ntitle: Molybdenum\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Molybdenum\n\nAtomicNumber: 42\n\nElement: Molybdenum\n\nSymbol: Mo\n\nAtomicMass: 95.96\n\nNumberofNeutrons: 54\n\nNumberofProtons: 42\n\nNumberofElectrons: 42\n\nPeriod: 5\n\nGroup: 6.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 2.0\n\nElectronegativity: 2.16\n\nFirstIonization: 7.0924\n\nDensity: 10.2\n\nMeltingPoint: 2890.15\n\nBoilingPoint: 4912.0\n\nNumberOfIsotopes: 20.0\n\nDiscoverer: Scheele\n\nYear: 1778.0\n\nSpecificHeat: 0.251\n\nNumberofShells: 5\n\nNumberofValence: nan\n",
	Slug:            "elements/molybdenum",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Molybdenum",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -1.129172068382127,
	Y:               -0.40874834177630986,
	Z:               0.2625527426473758,
}}
var TagElementsMoscovium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"moscovium\"><a class=\"anchor permalink p-4\" href=\"#moscovium\">#</a> Moscovium</h1>\n<p>AtomicNumber: 115</p>\n<p>Element: Moscovium</p>\n<p>Symbol: Mc</p>\n<p>AtomicMass: 288.0</p>\n<p>NumberofNeutrons: 173</p>\n<p>NumberofProtons: 115</p>\n<p>NumberofElectrons: 115</p>\n<p>Period: 7</p>\n<p>Group: 15.0</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: nan</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: nan</p>\n<p>FirstIonization: nan</p>\n<p>Density: nan</p>\n<p>MeltingPoint: nan</p>\n<p>BoilingPoint: nan</p>\n<p>NumberOfIsotopes: nan</p>\n<p>Discoverer: nan</p>\n<p>Year: 2010.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: 5.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 47, 0, time.UTC),
	Description:     "Moscovium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: moscovium\n\naliases:\n  - Moscovium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:47.000-06:00\n\ndescription: Moscovium\n\ntitle: Moscovium\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Moscovium\n\nAtomicNumber: 115\n\nElement: Moscovium\n\nSymbol: Mc\n\nAtomicMass: 288.0\n\nNumberofNeutrons: 173\n\nNumberofProtons: 115\n\nNumberofElectrons: 115\n\nPeriod: 7\n\nGroup: 15.0\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: nan\n\nAtomicRadius: nan\n\nElectronegativity: nan\n\nFirstIonization: nan\n\nDensity: nan\n\nMeltingPoint: nan\n\nBoilingPoint: nan\n\nNumberOfIsotopes: nan\n\nDiscoverer: nan\n\nYear: 2010.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: 5.0\n",
	Slug:            "elements/moscovium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Moscovium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -1.1168940012206747,
	Y:               -0.42164947126611096,
	Z:               0.35333051585350744,
}}
var TagElementsNeon = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"neon\"><a class=\"anchor permalink p-4\" href=\"#neon\">#</a> Neon</h1>\n<p>AtomicNumber: 10</p>\n<p>Element: Neon</p>\n<p>Symbol: Ne</p>\n<p>AtomicMass: 20.18</p>\n<p>NumberofNeutrons: 10</p>\n<p>NumberofProtons: 10</p>\n<p>NumberofElectrons: 10</p>\n<p>Period: 2</p>\n<p>Group: 18.0</p>\n<p>Phase: gas</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: nan</p>\n<p>Nonmetal: yes</p>\n<p>Metalloid: nan</p>\n<p>Type: Noble Gas</p>\n<p>AtomicRadius: 0.51</p>\n<p>Electronegativity: nan</p>\n<p>FirstIonization: 21.5645</p>\n<p>Density: 0.0009</p>\n<p>MeltingPoint: 24.703</p>\n<p>BoilingPoint: 27.07</p>\n<p>NumberOfIsotopes: 8.0</p>\n<p>Discoverer: Ramsay and Travers</p>\n<p>Year: 1898.0</p>\n<p>SpecificHeat: 1.03</p>\n<p>NumberofShells: 2</p>\n<p>NumberofValence: 8.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 47, 0, time.UTC),
	Description:     "Neon",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: neon\n\naliases:\n  - Neon\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:47.000-06:00\n\ndescription: Neon\n\ntitle: Neon\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Neon\n\nAtomicNumber: 10\n\nElement: Neon\n\nSymbol: Ne\n\nAtomicMass: 20.18\n\nNumberofNeutrons: 10\n\nNumberofProtons: 10\n\nNumberofElectrons: 10\n\nPeriod: 2\n\nGroup: 18.0\n\nPhase: gas\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: nan\n\nNonmetal: yes\n\nMetalloid: nan\n\nType: Noble Gas\n\nAtomicRadius: 0.51\n\nElectronegativity: nan\n\nFirstIonization: 21.5645\n\nDensity: 0.0009\n\nMeltingPoint: 24.703\n\nBoilingPoint: 27.07\n\nNumberOfIsotopes: 8.0\n\nDiscoverer: Ramsay and Travers\n\nYear: 1898.0\n\nSpecificHeat: 1.03\n\nNumberofShells: 2\n\nNumberofValence: 8.0\n",
	Slug:            "elements/neon",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Neon",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -1.900234862090502,
	Y:               -0.5370431924580317,
	Z:               -0.3867438597318096,
}}
var TagElementsNeptunium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"neptunium\"><a class=\"anchor permalink p-4\" href=\"#neptunium\">#</a> Neptunium</h1>\n<p>AtomicNumber: 93</p>\n<p>Element: Neptunium</p>\n<p>Symbol: Np</p>\n<p>AtomicMass: 237.0</p>\n<p>NumberofNeutrons: 144</p>\n<p>NumberofProtons: 93</p>\n<p>NumberofElectrons: 93</p>\n<p>Period: 7</p>\n<p>Group: nan</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Actinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: 1.36</p>\n<p>FirstIonization: 6.2657</p>\n<p>Density: 20.5</p>\n<p>MeltingPoint: 913.15</p>\n<p>BoilingPoint: 4273.0</p>\n<p>NumberOfIsotopes: 153.0</p>\n<p>Discoverer: McMillan and Abelson</p>\n<p>Year: 1940.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 47, 0, time.UTC),
	Description:     "Neptunium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: neptunium\n\naliases:\n  - Neptunium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:47.000-06:00\n\ndescription: Neptunium\n\ntitle: Neptunium\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Neptunium\n\nAtomicNumber: 93\n\nElement: Neptunium\n\nSymbol: Np\n\nAtomicMass: 237.0\n\nNumberofNeutrons: 144\n\nNumberofProtons: 93\n\nNumberofElectrons: 93\n\nPeriod: 7\n\nGroup: nan\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Actinide\n\nAtomicRadius: nan\n\nElectronegativity: 1.36\n\nFirstIonization: 6.2657\n\nDensity: 20.5\n\nMeltingPoint: 913.15\n\nBoilingPoint: 4273.0\n\nNumberOfIsotopes: 153.0\n\nDiscoverer: McMillan and Abelson\n\nYear: 1940.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: nan\n",
	Slug:            "elements/neptunium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Neptunium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -1.1212981957746304,
	Y:               -0.4468878014546077,
	Z:               0.6823976280106624,
}}
var TagElementsNihonium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"nihonium\"><a class=\"anchor permalink p-4\" href=\"#nihonium\">#</a> Nihonium</h1>\n<p>AtomicNumber: 113</p>\n<p>Element: Nihonium</p>\n<p>Symbol: Nh</p>\n<p>AtomicMass: 284.0</p>\n<p>NumberofNeutrons: 171</p>\n<p>NumberofProtons: 113</p>\n<p>NumberofElectrons: 113</p>\n<p>Period: 7</p>\n<p>Group: 13.0</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: nan</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: nan</p>\n<p>FirstIonization: nan</p>\n<p>Density: nan</p>\n<p>MeltingPoint: nan</p>\n<p>BoilingPoint: nan</p>\n<p>NumberOfIsotopes: nan</p>\n<p>Discoverer: nan</p>\n<p>Year: 2004.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: 3.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 47, 0, time.UTC),
	Description:     "Nihonium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: nihonium\n\naliases:\n  - Nihonium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:47.000-06:00\n\ndescription: Nihonium\n\ntitle: Nihonium\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Nihonium\n\nAtomicNumber: 113\n\nElement: Nihonium\n\nSymbol: Nh\n\nAtomicMass: 284.0\n\nNumberofNeutrons: 171\n\nNumberofProtons: 113\n\nNumberofElectrons: 113\n\nPeriod: 7\n\nGroup: 13.0\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: nan\n\nAtomicRadius: nan\n\nElectronegativity: nan\n\nFirstIonization: nan\n\nDensity: nan\n\nMeltingPoint: nan\n\nBoilingPoint: nan\n\nNumberOfIsotopes: nan\n\nDiscoverer: nan\n\nYear: 2004.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: 3.0\n",
	Slug:            "elements/nihonium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Nihonium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -1.451944452532146,
	Y:               -0.4959861099046765,
	Z:               0.4691397213794649,
}}
var TagElementsNickel = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"nickel\"><a class=\"anchor permalink p-4\" href=\"#nickel\">#</a> Nickel</h1>\n<p>AtomicNumber: 28</p>\n<p>Element: Nickel</p>\n<p>Symbol: Ni</p>\n<p>AtomicMass: 58.693</p>\n<p>NumberofNeutrons: 31</p>\n<p>NumberofProtons: 28</p>\n<p>NumberofElectrons: 28</p>\n<p>Period: 4</p>\n<p>Group: 10.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 1.6</p>\n<p>Electronegativity: 1.91</p>\n<p>FirstIonization: 7.6398</p>\n<p>Density: 8.91</p>\n<p>MeltingPoint: 1726.15</p>\n<p>BoilingPoint: 3186.0</p>\n<p>NumberOfIsotopes: 11.0</p>\n<p>Discoverer: Cronstedt</p>\n<p>Year: 1751.0</p>\n<p>SpecificHeat: 0.444</p>\n<p>NumberofShells: 4</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 47, 0, time.UTC),
	Description:     "Nickel",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: nickel\n\naliases:\n  - Nickel\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:47.000-06:00\n\ndescription: Nickel\n\ntitle: Nickel\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Nickel\n\nAtomicNumber: 28\n\nElement: Nickel\n\nSymbol: Ni\n\nAtomicMass: 58.693\n\nNumberofNeutrons: 31\n\nNumberofProtons: 28\n\nNumberofElectrons: 28\n\nPeriod: 4\n\nGroup: 10.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 1.6\n\nElectronegativity: 1.91\n\nFirstIonization: 7.6398\n\nDensity: 8.91\n\nMeltingPoint: 1726.15\n\nBoilingPoint: 3186.0\n\nNumberOfIsotopes: 11.0\n\nDiscoverer: Cronstedt\n\nYear: 1751.0\n\nSpecificHeat: 0.444\n\nNumberofShells: 4\n\nNumberofValence: nan\n",
	Slug:            "elements/nickel",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Nickel",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -1.4442541497333383,
	Y:               -0.26773628955269424,
	Z:               0.15072656326663275,
}}
var TagElementsMagnesium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"magnesium\"><a class=\"anchor permalink p-4\" href=\"#magnesium\">#</a> Magnesium</h1>\n<p>AtomicNumber: 12</p>\n<p>Element: Magnesium</p>\n<p>Symbol: Mg</p>\n<p>AtomicMass: 24.305</p>\n<p>NumberofNeutrons: 12</p>\n<p>NumberofProtons: 12</p>\n<p>NumberofElectrons: 12</p>\n<p>Period: 3</p>\n<p>Group: 2.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Alkaline Earth Metal</p>\n<p>AtomicRadius: 1.7</p>\n<p>Electronegativity: 1.31</p>\n<p>FirstIonization: 7.6462</p>\n<p>Density: 1.74</p>\n<p>MeltingPoint: 923.15</p>\n<p>BoilingPoint: 1363.0</p>\n<p>NumberOfIsotopes: 8.0</p>\n<p>Discoverer: Black</p>\n<p>Year: 1755.0</p>\n<p>SpecificHeat: 1.023</p>\n<p>NumberofShells: 3</p>\n<p>NumberofValence: 2.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 47, 0, time.UTC),
	Description:     "Magnesium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: magnesium\n\naliases:\n  - Magnesium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:47.000-06:00\n\ndescription: Magnesium\n\ntitle: Magnesium\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Magnesium\n\nAtomicNumber: 12\n\nElement: Magnesium\n\nSymbol: Mg\n\nAtomicMass: 24.305\n\nNumberofNeutrons: 12\n\nNumberofProtons: 12\n\nNumberofElectrons: 12\n\nPeriod: 3\n\nGroup: 2.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Alkaline Earth Metal\n\nAtomicRadius: 1.7\n\nElectronegativity: 1.31\n\nFirstIonization: 7.6462\n\nDensity: 1.74\n\nMeltingPoint: 923.15\n\nBoilingPoint: 1363.0\n\nNumberOfIsotopes: 8.0\n\nDiscoverer: Black\n\nYear: 1755.0\n\nSpecificHeat: 1.023\n\nNumberofShells: 3\n\nNumberofValence: 2.0\n",
	Slug:            "elements/magnesium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Magnesium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -0.5464453993259658,
	Y:               -0.3567573326352663,
	Z:               0.1971419666947457,
}}
var TagElementsNiobium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"niobium\"><a class=\"anchor permalink p-4\" href=\"#niobium\">#</a> Niobium</h1>\n<p>AtomicNumber: 41</p>\n<p>Element: Niobium</p>\n<p>Symbol: Nb</p>\n<p>AtomicMass: 92.906</p>\n<p>NumberofNeutrons: 52</p>\n<p>NumberofProtons: 41</p>\n<p>NumberofElectrons: 41</p>\n<p>Period: 5</p>\n<p>Group: 5.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 2.1</p>\n<p>Electronegativity: 1.6</p>\n<p>FirstIonization: 6.7589</p>\n<p>Density: 8.57</p>\n<p>MeltingPoint: 2741.15</p>\n<p>BoilingPoint: 5017.0</p>\n<p>NumberOfIsotopes: 24.0</p>\n<p>Discoverer: Hatchett</p>\n<p>Year: 1801.0</p>\n<p>SpecificHeat: 0.265</p>\n<p>NumberofShells: 5</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 47, 0, time.UTC),
	Description:     "Niobium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: niobium\n\naliases:\n  - Niobium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:47.000-06:00\n\ndescription: Niobium\n\ntitle: Niobium\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Niobium\n\nAtomicNumber: 41\n\nElement: Niobium\n\nSymbol: Nb\n\nAtomicMass: 92.906\n\nNumberofNeutrons: 52\n\nNumberofProtons: 41\n\nNumberofElectrons: 41\n\nPeriod: 5\n\nGroup: 5.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 2.1\n\nElectronegativity: 1.6\n\nFirstIonization: 6.7589\n\nDensity: 8.57\n\nMeltingPoint: 2741.15\n\nBoilingPoint: 5017.0\n\nNumberOfIsotopes: 24.0\n\nDiscoverer: Hatchett\n\nYear: 1801.0\n\nSpecificHeat: 0.265\n\nNumberofShells: 5\n\nNumberofValence: nan\n",
	Slug:            "elements/niobium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Niobium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -1.0172279809197795,
	Y:               -0.7132718303384318,
	Z:               0.33896398014203194,
}}
var TagElementsNitrogen = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"nitrogen\"><a class=\"anchor permalink p-4\" href=\"#nitrogen\">#</a> Nitrogen</h1>\n<p>AtomicNumber: 7</p>\n<p>Element: Nitrogen</p>\n<p>Symbol: N</p>\n<p>AtomicMass: 14.007</p>\n<p>NumberofNeutrons: 7</p>\n<p>NumberofProtons: 7</p>\n<p>NumberofElectrons: 7</p>\n<p>Period: 2</p>\n<p>Group: 15.0</p>\n<p>Phase: gas</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: nan</p>\n<p>Nonmetal: yes</p>\n<p>Metalloid: nan</p>\n<p>Type: Nonmetal</p>\n<p>AtomicRadius: 0.75</p>\n<p>Electronegativity: 3.04</p>\n<p>FirstIonization: 14.5341</p>\n<p>Density: 0.00125</p>\n<p>MeltingPoint: 63.29</p>\n<p>BoilingPoint: 77.36</p>\n<p>NumberOfIsotopes: 8.0</p>\n<p>Discoverer: Rutherford</p>\n<p>Year: 1772.0</p>\n<p>SpecificHeat: 1.04</p>\n<p>NumberofShells: 2</p>\n<p>NumberofValence: 5.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 47, 0, time.UTC),
	Description:     "Nitrogen",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: nitrogen\n\naliases:\n  - Nitrogen\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:47.000-06:00\n\ndescription: Nitrogen\n\ntitle: Nitrogen\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Nitrogen\n\nAtomicNumber: 7\n\nElement: Nitrogen\n\nSymbol: N\n\nAtomicMass: 14.007\n\nNumberofNeutrons: 7\n\nNumberofProtons: 7\n\nNumberofElectrons: 7\n\nPeriod: 2\n\nGroup: 15.0\n\nPhase: gas\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: nan\n\nNonmetal: yes\n\nMetalloid: nan\n\nType: Nonmetal\n\nAtomicRadius: 0.75\n\nElectronegativity: 3.04\n\nFirstIonization: 14.5341\n\nDensity: 0.00125\n\nMeltingPoint: 63.29\n\nBoilingPoint: 77.36\n\nNumberOfIsotopes: 8.0\n\nDiscoverer: Rutherford\n\nYear: 1772.0\n\nSpecificHeat: 1.04\n\nNumberofShells: 2\n\nNumberofValence: 5.0\n",
	Slug:            "elements/nitrogen",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Nitrogen",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -1.5512373513115838,
	Y:               -0.8963913217154689,
	Z:               0.12806594054232334,
}}
var TagElementsNeodymium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"neodymium\"><a class=\"anchor permalink p-4\" href=\"#neodymium\">#</a> Neodymium</h1>\n<p>AtomicNumber: 60</p>\n<p>Element: Neodymium</p>\n<p>Symbol: Nd</p>\n<p>AtomicMass: 144.242</p>\n<p>NumberofNeutrons: 84</p>\n<p>NumberofProtons: 60</p>\n<p>NumberofElectrons: 60</p>\n<p>Period: 6</p>\n<p>Group: nan</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Lanthanide</p>\n<p>AtomicRadius: 2.6</p>\n<p>Electronegativity: 1.14</p>\n<p>FirstIonization: 5.525</p>\n<p>Density: 7.01</p>\n<p>MeltingPoint: 1289.15</p>\n<p>BoilingPoint: 3347.0</p>\n<p>NumberOfIsotopes: 16.0</p>\n<p>Discoverer: von Welsbach</p>\n<p>Year: 1885.0</p>\n<p>SpecificHeat: 0.19</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 47, 0, time.UTC),
	Description:     "Neodymium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: neodymium\n\naliases:\n  - Neodymium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:47.000-06:00\n\ndescription: Neodymium\n\ntitle: Neodymium\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Neodymium\n\nAtomicNumber: 60\n\nElement: Neodymium\n\nSymbol: Nd\n\nAtomicMass: 144.242\n\nNumberofNeutrons: 84\n\nNumberofProtons: 60\n\nNumberofElectrons: 60\n\nPeriod: 6\n\nGroup: nan\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Lanthanide\n\nAtomicRadius: 2.6\n\nElectronegativity: 1.14\n\nFirstIonization: 5.525\n\nDensity: 7.01\n\nMeltingPoint: 1289.15\n\nBoilingPoint: 3347.0\n\nNumberOfIsotopes: 16.0\n\nDiscoverer: von Welsbach\n\nYear: 1885.0\n\nSpecificHeat: 0.19\n\nNumberofShells: 6\n\nNumberofValence: nan\n",
	Slug:            "elements/neodymium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Neodymium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -1.437260017140312,
	Y:               -0.2907831031997201,
	Z:               0.02884706639677255,
}}
var TagElementsOsmium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"osmium\"><a class=\"anchor permalink p-4\" href=\"#osmium\">#</a> Osmium</h1>\n<p>AtomicNumber: 76</p>\n<p>Element: Osmium</p>\n<p>Symbol: Os</p>\n<p>AtomicMass: 190.23</p>\n<p>NumberofNeutrons: 114</p>\n<p>NumberofProtons: 76</p>\n<p>NumberofElectrons: 76</p>\n<p>Period: 6</p>\n<p>Group: 8.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 1.9</p>\n<p>Electronegativity: 2.2</p>\n<p>FirstIonization: 8.4382</p>\n<p>Density: 22.6</p>\n<p>MeltingPoint: 3300.15</p>\n<p>BoilingPoint: 5285.0</p>\n<p>NumberOfIsotopes: 19.0</p>\n<p>Discoverer: Tennant</p>\n<p>Year: 1803.0</p>\n<p>SpecificHeat: 0.13</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 47, 0, time.UTC),
	Description:     "Osmium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: osmium\n\naliases:\n  - Osmium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:47.000-06:00\n\ndescription: Osmium\n\ntitle: Osmium\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Osmium\n\nAtomicNumber: 76\n\nElement: Osmium\n\nSymbol: Os\n\nAtomicMass: 190.23\n\nNumberofNeutrons: 114\n\nNumberofProtons: 76\n\nNumberofElectrons: 76\n\nPeriod: 6\n\nGroup: 8.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 1.9\n\nElectronegativity: 2.2\n\nFirstIonization: 8.4382\n\nDensity: 22.6\n\nMeltingPoint: 3300.15\n\nBoilingPoint: 5285.0\n\nNumberOfIsotopes: 19.0\n\nDiscoverer: Tennant\n\nYear: 1803.0\n\nSpecificHeat: 0.13\n\nNumberofShells: 6\n\nNumberofValence: nan\n",
	Slug:            "elements/osmium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Osmium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -0.7291690672368407,
	Y:               -0.47731024129914057,
	Z:               -0.1795376533085043,
}}
var TagElementsOganesson = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"oganesson\"><a class=\"anchor permalink p-4\" href=\"#oganesson\">#</a> Oganesson</h1>\n<p>AtomicNumber: 118</p>\n<p>Element: Oganesson</p>\n<p>Symbol: Og</p>\n<p>AtomicMass: 294.0</p>\n<p>NumberofNeutrons: 176</p>\n<p>NumberofProtons: 118</p>\n<p>NumberofElectrons: 118</p>\n<p>Period: 7</p>\n<p>Group: 18.0</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: nan</p>\n<p>Nonmetal: yes</p>\n<p>Metalloid: nan</p>\n<p>Type: Noble Gas</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: nan</p>\n<p>FirstIonization: nan</p>\n<p>Density: nan</p>\n<p>MeltingPoint: nan</p>\n<p>BoilingPoint: nan</p>\n<p>NumberOfIsotopes: nan</p>\n<p>Discoverer: nan</p>\n<p>Year: 2006.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: 8.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 47, 0, time.UTC),
	Description:     "Oganesson",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: oganesson\n\naliases:\n  - Oganesson\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:47.000-06:00\n\ndescription: Oganesson\n\ntitle: Oganesson\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Oganesson\n\nAtomicNumber: 118\n\nElement: Oganesson\n\nSymbol: Og\n\nAtomicMass: 294.0\n\nNumberofNeutrons: 176\n\nNumberofProtons: 118\n\nNumberofElectrons: 118\n\nPeriod: 7\n\nGroup: 18.0\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: nan\n\nNonmetal: yes\n\nMetalloid: nan\n\nType: Noble Gas\n\nAtomicRadius: nan\n\nElectronegativity: nan\n\nFirstIonization: nan\n\nDensity: nan\n\nMeltingPoint: nan\n\nBoilingPoint: nan\n\nNumberOfIsotopes: nan\n\nDiscoverer: nan\n\nYear: 2006.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: 8.0\n",
	Slug:            "elements/oganesson",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Oganesson",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -1.5200599656501828,
	Y:               -0.5733995180161496,
	Z:               -0.2156603071816076,
}}
var TagElementsNobelium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"nobelium\"><a class=\"anchor permalink p-4\" href=\"#nobelium\">#</a> Nobelium</h1>\n<p>AtomicNumber: 102</p>\n<p>Element: Nobelium</p>\n<p>Symbol: No</p>\n<p>AtomicMass: 259.0</p>\n<p>NumberofNeutrons: 157</p>\n<p>NumberofProtons: 102</p>\n<p>NumberofElectrons: 102</p>\n<p>Period: 7</p>\n<p>Group: nan</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Actinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: 1.3</p>\n<p>FirstIonization: 6.65</p>\n<p>Density: nan</p>\n<p>MeltingPoint: nan</p>\n<p>BoilingPoint: nan</p>\n<p>NumberOfIsotopes: 73.0</p>\n<p>Discoverer: Ghiorso et al.</p>\n<p>Year: 1958.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 47, 0, time.UTC),
	Description:     "Nobelium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: nobelium\n\naliases:\n  - Nobelium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:47.000-06:00\n\ndescription: Nobelium\n\ntitle: Nobelium\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Nobelium\n\nAtomicNumber: 102\n\nElement: Nobelium\n\nSymbol: No\n\nAtomicMass: 259.0\n\nNumberofNeutrons: 157\n\nNumberofProtons: 102\n\nNumberofElectrons: 102\n\nPeriod: 7\n\nGroup: nan\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Actinide\n\nAtomicRadius: nan\n\nElectronegativity: 1.3\n\nFirstIonization: 6.65\n\nDensity: nan\n\nMeltingPoint: nan\n\nBoilingPoint: nan\n\nNumberOfIsotopes: 73.0\n\nDiscoverer: Ghiorso et al.\n\nYear: 1958.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: nan\n",
	Slug:            "elements/nobelium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Nobelium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -0.7293414229248649,
	Y:               0.060765574518348076,
	Z:               0.6647595055368907,
}}
var TagElementsPhosphorus = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"phosphorus\"><a class=\"anchor permalink p-4\" href=\"#phosphorus\">#</a> Phosphorus</h1>\n<p>AtomicNumber: 15</p>\n<p>Element: Phosphorus</p>\n<p>Symbol: P</p>\n<p>AtomicMass: 30.974</p>\n<p>NumberofNeutrons: 16</p>\n<p>NumberofProtons: 15</p>\n<p>NumberofElectrons: 15</p>\n<p>Period: 3</p>\n<p>Group: 15.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: nan</p>\n<p>Nonmetal: yes</p>\n<p>Metalloid: nan</p>\n<p>Type: Nonmetal</p>\n<p>AtomicRadius: 1.2</p>\n<p>Electronegativity: 2.19</p>\n<p>FirstIonization: 10.4867</p>\n<p>Density: 1.82</p>\n<p>MeltingPoint: 317.25</p>\n<p>BoilingPoint: 553.0</p>\n<p>NumberOfIsotopes: 7.0</p>\n<p>Discoverer: BranBrand</p>\n<p>Year: 1669.0</p>\n<p>SpecificHeat: 0.769</p>\n<p>NumberofShells: 3</p>\n<p>NumberofValence: 5.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 47, 0, time.UTC),
	Description:     "Phosphorus",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: phosphorus\n\naliases:\n  - Phosphorus\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:47.000-06:00\n\ndescription: Phosphorus\n\ntitle: Phosphorus\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Phosphorus\n\nAtomicNumber: 15\n\nElement: Phosphorus\n\nSymbol: P\n\nAtomicMass: 30.974\n\nNumberofNeutrons: 16\n\nNumberofProtons: 15\n\nNumberofElectrons: 15\n\nPeriod: 3\n\nGroup: 15.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: nan\n\nNonmetal: yes\n\nMetalloid: nan\n\nType: Nonmetal\n\nAtomicRadius: 1.2\n\nElectronegativity: 2.19\n\nFirstIonization: 10.4867\n\nDensity: 1.82\n\nMeltingPoint: 317.25\n\nBoilingPoint: 553.0\n\nNumberOfIsotopes: 7.0\n\nDiscoverer: BranBrand\n\nYear: 1669.0\n\nSpecificHeat: 0.769\n\nNumberofShells: 3\n\nNumberofValence: 5.0\n",
	Slug:            "elements/phosphorus",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Phosphorus",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -0.9376356442569063,
	Y:               0.05359319634028731,
	Z:               0.14675912536832592,
}}
var TagElementsPolonium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"polonium\"><a class=\"anchor permalink p-4\" href=\"#polonium\">#</a> Polonium</h1>\n<p>AtomicNumber: 84</p>\n<p>Element: Polonium</p>\n<p>Symbol: Po</p>\n<p>AtomicMass: 210.0</p>\n<p>NumberofNeutrons: 126</p>\n<p>NumberofProtons: 84</p>\n<p>NumberofElectrons: 84</p>\n<p>Period: 6</p>\n<p>Group: 16.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: yes</p>\n<p>Natural: yes</p>\n<p>Metal: nan</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: yes</p>\n<p>Type: Metalloid</p>\n<p>AtomicRadius: 1.5</p>\n<p>Electronegativity: 2.0</p>\n<p>FirstIonization: 8.417</p>\n<p>Density: 9.32</p>\n<p>MeltingPoint: 527.15</p>\n<p>BoilingPoint: 1235.0</p>\n<p>NumberOfIsotopes: 34.0</p>\n<p>Discoverer: Curie</p>\n<p>Year: 1898.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: 6.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 48, 0, time.UTC),
	Description:     "Polonium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: polonium\n\naliases:\n  - Polonium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:48.000-06:00\n\ndescription: Polonium\n\ntitle: Polonium\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Polonium\n\nAtomicNumber: 84\n\nElement: Polonium\n\nSymbol: Po\n\nAtomicMass: 210.0\n\nNumberofNeutrons: 126\n\nNumberofProtons: 84\n\nNumberofElectrons: 84\n\nPeriod: 6\n\nGroup: 16.0\n\nPhase: solid\n\nRadioactive: yes\n\nNatural: yes\n\nMetal: nan\n\nNonmetal: nan\n\nMetalloid: yes\n\nType: Metalloid\n\nAtomicRadius: 1.5\n\nElectronegativity: 2.0\n\nFirstIonization: 8.417\n\nDensity: 9.32\n\nMeltingPoint: 527.15\n\nBoilingPoint: 1235.0\n\nNumberOfIsotopes: 34.0\n\nDiscoverer: Curie\n\nYear: 1898.0\n\nSpecificHeat: nan\n\nNumberofShells: 6\n\nNumberofValence: 6.0\n",
	Slug:            "elements/polonium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Polonium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -1.3170705541376508,
	Y:               0.5785617639911981,
	Z:               0.39347723435914905,
}}
var TagElementsDysprosium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"dysprosium\"><a class=\"anchor permalink p-4\" href=\"#dysprosium\">#</a> Dysprosium</h1>\n<p>AtomicNumber: 66</p>\n<p>Element: Dysprosium</p>\n<p>Symbol: Dy</p>\n<p>AtomicMass: 162.5</p>\n<p>NumberofNeutrons: 97</p>\n<p>NumberofProtons: 66</p>\n<p>NumberofElectrons: 66</p>\n<p>Period: 6</p>\n<p>Group: nan</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Lanthanide</p>\n<p>AtomicRadius: 2.5</p>\n<p>Electronegativity: 1.22</p>\n<p>FirstIonization: 5.9389</p>\n<p>Density: 8.55</p>\n<p>MeltingPoint: 1680.15</p>\n<p>BoilingPoint: 2840.0</p>\n<p>NumberOfIsotopes: 21.0</p>\n<p>Discoverer: de Boisbaudran</p>\n<p>Year: 1886.0</p>\n<p>SpecificHeat: 0.17</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 42, 0, time.UTC),
	Description:     "Dysprosium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: dysprosium\naliases:\n  - Dysprosium\ntags: []\ncreated_at: 2025-03-28T20:06:42.000-06:00\ndescription: Dysprosium\ntitle: Dysprosium\nupdated_at: 2025-03-28T20:18:29.000-06:00\n---\n\n# Dysprosium\n\nAtomicNumber: 66\n\nElement: Dysprosium\n\nSymbol: Dy\n\nAtomicMass: 162.5\n\nNumberofNeutrons: 97\n\nNumberofProtons: 66\n\nNumberofElectrons: 66\n\nPeriod: 6\n\nGroup: nan\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Lanthanide\n\nAtomicRadius: 2.5\n\nElectronegativity: 1.22\n\nFirstIonization: 5.9389\n\nDensity: 8.55\n\nMeltingPoint: 1680.15\n\nBoilingPoint: 2840.0\n\nNumberOfIsotopes: 21.0\n\nDiscoverer: de Boisbaudran\n\nYear: 1886.0\n\nSpecificHeat: 0.17\n\nNumberofShells: 6\n\nNumberofValence: nan\n",
	Slug:            "elements/dysprosium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Dysprosium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 18, 29, 0, time.UTC),
	X:               -1.0227580747225247,
	Y:               -0.3177784242200786,
	Z:               0.6953316295269082,
}}
var TagElementsPalladium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"palladium\"><a class=\"anchor permalink p-4\" href=\"#palladium\">#</a> Palladium</h1>\n<p>AtomicNumber: 46</p>\n<p>Element: Palladium</p>\n<p>Symbol: Pd</p>\n<p>AtomicMass: 106.42</p>\n<p>NumberofNeutrons: 60</p>\n<p>NumberofProtons: 46</p>\n<p>NumberofElectrons: 46</p>\n<p>Period: 5</p>\n<p>Group: 10.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 1.8</p>\n<p>Electronegativity: 2.2</p>\n<p>FirstIonization: 8.3369</p>\n<p>Density: 12.0</p>\n<p>MeltingPoint: 1825.15</p>\n<p>BoilingPoint: 3236.0</p>\n<p>NumberOfIsotopes: 21.0</p>\n<p>Discoverer: Wollaston</p>\n<p>Year: 1803.0</p>\n<p>SpecificHeat: 0.244</p>\n<p>NumberofShells: 5</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 47, 0, time.UTC),
	Description:     "Palladium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: palladium\n\naliases:\n  - Palladium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:47.000-06:00\n\ndescription: Palladium\n\ntitle: Palladium\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Palladium\n\nAtomicNumber: 46\n\nElement: Palladium\n\nSymbol: Pd\n\nAtomicMass: 106.42\n\nNumberofNeutrons: 60\n\nNumberofProtons: 46\n\nNumberofElectrons: 46\n\nPeriod: 5\n\nGroup: 10.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 1.8\n\nElectronegativity: 2.2\n\nFirstIonization: 8.3369\n\nDensity: 12.0\n\nMeltingPoint: 1825.15\n\nBoilingPoint: 3236.0\n\nNumberOfIsotopes: 21.0\n\nDiscoverer: Wollaston\n\nYear: 1803.0\n\nSpecificHeat: 0.244\n\nNumberofShells: 5\n\nNumberofValence: nan\n",
	Slug:            "elements/palladium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Palladium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -1.188067576657574,
	Y:               -0.0501419083766278,
	Z:               0.32045768330564717,
}}
var TagElementsOxygen = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"oxygen\"><a class=\"anchor permalink p-4\" href=\"#oxygen\">#</a> Oxygen</h1>\n<p>AtomicNumber: 8</p>\n<p>Element: Oxygen</p>\n<p>Symbol: O</p>\n<p>AtomicMass: 15.999</p>\n<p>NumberofNeutrons: 8</p>\n<p>NumberofProtons: 8</p>\n<p>NumberofElectrons: 8</p>\n<p>Period: 2</p>\n<p>Group: 16.0</p>\n<p>Phase: gas</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: nan</p>\n<p>Nonmetal: yes</p>\n<p>Metalloid: nan</p>\n<p>Type: Nonmetal</p>\n<p>AtomicRadius: 0.65</p>\n<p>Electronegativity: 3.44</p>\n<p>FirstIonization: 13.6181</p>\n<p>Density: 0.00143</p>\n<p>MeltingPoint: 50.5</p>\n<p>BoilingPoint: 90.2</p>\n<p>NumberOfIsotopes: 8.0</p>\n<p>Discoverer: Priestley/Scheele</p>\n<p>Year: 1774.0</p>\n<p>SpecificHeat: 0.918</p>\n<p>NumberofShells: 2</p>\n<p>NumberofValence: 6.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 47, 0, time.UTC),
	Description:     "Oxygen",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: oxygen\n\naliases:\n  - Oxygen\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:47.000-06:00\n\ndescription: Oxygen\n\ntitle: Oxygen\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Oxygen\n\nAtomicNumber: 8\n\nElement: Oxygen\n\nSymbol: O\n\nAtomicMass: 15.999\n\nNumberofNeutrons: 8\n\nNumberofProtons: 8\n\nNumberofElectrons: 8\n\nPeriod: 2\n\nGroup: 16.0\n\nPhase: gas\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: nan\n\nNonmetal: yes\n\nMetalloid: nan\n\nType: Nonmetal\n\nAtomicRadius: 0.65\n\nElectronegativity: 3.44\n\nFirstIonization: 13.6181\n\nDensity: 0.00143\n\nMeltingPoint: 50.5\n\nBoilingPoint: 90.2\n\nNumberOfIsotopes: 8.0\n\nDiscoverer: Priestley/Scheele\n\nYear: 1774.0\n\nSpecificHeat: 0.918\n\nNumberofShells: 2\n\nNumberofValence: 6.0\n",
	Slug:            "elements/oxygen",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Oxygen",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -1.1600029566412369,
	Y:               -0.7351822154165397,
	Z:               0.013946219499203993,
}}
var TagElementsProtactinium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"protactinium\"><a class=\"anchor permalink p-4\" href=\"#protactinium\">#</a> Protactinium</h1>\n<p>AtomicNumber: 91</p>\n<p>Element: Protactinium</p>\n<p>Symbol: Pa</p>\n<p>AtomicMass: 231.036</p>\n<p>NumberofNeutrons: 140</p>\n<p>NumberofProtons: 91</p>\n<p>NumberofElectrons: 91</p>\n<p>Period: 7</p>\n<p>Group: nan</p>\n<p>Phase: solid</p>\n<p>Radioactive: yes</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Actinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: 1.5</p>\n<p>FirstIonization: 5.89</p>\n<p>Density: 15.4</p>\n<p>MeltingPoint: 1873.15</p>\n<p>BoilingPoint: 4300.0</p>\n<p>NumberOfIsotopes: 14.0</p>\n<p>Discoverer: Hahn and Meitner</p>\n<p>Year: 1917.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 48, 0, time.UTC),
	Description:     "Protactinium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: protactinium\n\naliases:\n  - Protactinium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:48.000-06:00\n\ndescription: Protactinium\n\ntitle: Protactinium\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Protactinium\n\nAtomicNumber: 91\n\nElement: Protactinium\n\nSymbol: Pa\n\nAtomicMass: 231.036\n\nNumberofNeutrons: 140\n\nNumberofProtons: 91\n\nNumberofElectrons: 91\n\nPeriod: 7\n\nGroup: nan\n\nPhase: solid\n\nRadioactive: yes\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Actinide\n\nAtomicRadius: nan\n\nElectronegativity: 1.5\n\nFirstIonization: 5.89\n\nDensity: 15.4\n\nMeltingPoint: 1873.15\n\nBoilingPoint: 4300.0\n\nNumberOfIsotopes: 14.0\n\nDiscoverer: Hahn and Meitner\n\nYear: 1917.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: nan\n",
	Slug:            "elements/protactinium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Protactinium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -0.8025094605085672,
	Y:               0.213983636486747,
	Z:               0.4439271642869164,
}}
var TagElementsPromethium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"promethium\"><a class=\"anchor permalink p-4\" href=\"#promethium\">#</a> Promethium</h1>\n<p>AtomicNumber: 61</p>\n<p>Element: Promethium</p>\n<p>Symbol: Pm</p>\n<p>AtomicMass: 145.0</p>\n<p>NumberofNeutrons: 84</p>\n<p>NumberofProtons: 61</p>\n<p>NumberofElectrons: 61</p>\n<p>Period: 6</p>\n<p>Group: nan</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Lanthanide</p>\n<p>AtomicRadius: 2.6</p>\n<p>Electronegativity: 1.13</p>\n<p>FirstIonization: 5.582</p>\n<p>Density: 7.26</p>\n<p>MeltingPoint: 1204.15</p>\n<p>BoilingPoint: 3273.0</p>\n<p>NumberOfIsotopes: 14.0</p>\n<p>Discoverer: Marinsky et al.</p>\n<p>Year: 1945.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 48, 0, time.UTC),
	Description:     "Promethium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: promethium\n\naliases:\n  - Promethium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:48.000-06:00\n\ndescription: Promethium\n\ntitle: Promethium\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Promethium\n\nAtomicNumber: 61\n\nElement: Promethium\n\nSymbol: Pm\n\nAtomicMass: 145.0\n\nNumberofNeutrons: 84\n\nNumberofProtons: 61\n\nNumberofElectrons: 61\n\nPeriod: 6\n\nGroup: nan\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Lanthanide\n\nAtomicRadius: 2.6\n\nElectronegativity: 1.13\n\nFirstIonization: 5.582\n\nDensity: 7.26\n\nMeltingPoint: 1204.15\n\nBoilingPoint: 3273.0\n\nNumberOfIsotopes: 14.0\n\nDiscoverer: Marinsky et al.\n\nYear: 1945.0\n\nSpecificHeat: nan\n\nNumberofShells: 6\n\nNumberofValence: nan\n",
	Slug:            "elements/promethium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Promethium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -1.2765081074017839,
	Y:               0.09109665910448625,
	Z:               0.16080246163354311,
}}
var TagElementsRadium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"radium\"><a class=\"anchor permalink p-4\" href=\"#radium\">#</a> Radium</h1>\n<p>AtomicNumber: 88</p>\n<p>Element: Radium</p>\n<p>Symbol: Ra</p>\n<p>AtomicMass: 226.0</p>\n<p>NumberofNeutrons: 138</p>\n<p>NumberofProtons: 88</p>\n<p>NumberofElectrons: 88</p>\n<p>Period: 7</p>\n<p>Group: 2.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: yes</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Actinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: 0.9</p>\n<p>FirstIonization: 5.2784</p>\n<p>Density: 5.5</p>\n<p>MeltingPoint: 973.15</p>\n<p>BoilingPoint: 2010.0</p>\n<p>NumberOfIsotopes: 15.0</p>\n<p>Discoverer: Pierre and Marie Curie</p>\n<p>Year: 1898.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: 2.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 48, 0, time.UTC),
	Description:     "Radium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: radium\n\naliases:\n  - Radium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:48.000-06:00\n\ndescription: Radium\n\ntitle: Radium\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Radium\n\nAtomicNumber: 88\n\nElement: Radium\n\nSymbol: Ra\n\nAtomicMass: 226.0\n\nNumberofNeutrons: 138\n\nNumberofProtons: 88\n\nNumberofElectrons: 88\n\nPeriod: 7\n\nGroup: 2.0\n\nPhase: solid\n\nRadioactive: yes\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Actinide\n\nAtomicRadius: nan\n\nElectronegativity: 0.9\n\nFirstIonization: 5.2784\n\nDensity: 5.5\n\nMeltingPoint: 973.15\n\nBoilingPoint: 2010.0\n\nNumberOfIsotopes: 15.0\n\nDiscoverer: Pierre and Marie Curie\n\nYear: 1898.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: 2.0\n",
	Slug:            "elements/radium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Radium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -0.8017037330808812,
	Y:               -0.130273837906958,
	Z:               0.25151479143992533,
}}
var TagElementsPlutonium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"plutonium\"><a class=\"anchor permalink p-4\" href=\"#plutonium\">#</a> Plutonium</h1>\n<p>AtomicNumber: 94</p>\n<p>Element: Plutonium</p>\n<p>Symbol: Pu</p>\n<p>AtomicMass: 244.0</p>\n<p>NumberofNeutrons: 150</p>\n<p>NumberofProtons: 94</p>\n<p>NumberofElectrons: 94</p>\n<p>Period: 7</p>\n<p>Group: nan</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Actinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: 1.28</p>\n<p>FirstIonization: 6.0262</p>\n<p>Density: 19.8</p>\n<p>MeltingPoint: 913.15</p>\n<p>BoilingPoint: 3501.0</p>\n<p>NumberOfIsotopes: 163.0</p>\n<p>Discoverer: Seaborg et al.</p>\n<p>Year: 1940.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 48, 0, time.UTC),
	Description:     "Plutonium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: plutonium\n\naliases:\n  - Plutonium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:48.000-06:00\n\ndescription: Plutonium\n\ntitle: Plutonium\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Plutonium\n\nAtomicNumber: 94\n\nElement: Plutonium\n\nSymbol: Pu\n\nAtomicMass: 244.0\n\nNumberofNeutrons: 150\n\nNumberofProtons: 94\n\nNumberofElectrons: 94\n\nPeriod: 7\n\nGroup: nan\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Actinide\n\nAtomicRadius: nan\n\nElectronegativity: 1.28\n\nFirstIonization: 6.0262\n\nDensity: 19.8\n\nMeltingPoint: 913.15\n\nBoilingPoint: 3501.0\n\nNumberOfIsotopes: 163.0\n\nDiscoverer: Seaborg et al.\n\nYear: 1940.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: nan\n",
	Slug:            "elements/plutonium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Plutonium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -1.3204131312114449,
	Y:               0.08902458112731301,
	Z:               0.702719003492263,
}}
var TagEduIastateEe230 = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<p>Frequency domain characterization of electronic circuits and systems, transfer functions, sinusoidal steady state response. Time domain models of linear and nonlinear electronic circuits, linearization, small signal analysis. Stability and feedback circuits. Operational amplifiers, device models, linear and nonlinear applications, transfer function realizations. A/D and D/A converters, sources of distortions, converter linearity and spectral characterization, applications. Design and laboratory instrumentation and measurements.</p>\n",
	CreatedAt:       time.Date(2025, time.April, 8, 11, 57, 11, 0, time.UTC),
	Description:     "Electronic Circuits and Systems at Iowa State University",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: ee230\naliases: []\ntags: []\ncreated_at: 2025-04-08T11:57:11.000-06:00\ndescription: Electronic Circuits and Systems at Iowa State University\ntitle: EE230\nupdated_at: 2025-04-08T11:58:09.000-06:00\n---\n\nFrequency domain characterization of electronic circuits and systems, transfer functions, sinusoidal steady state response. Time domain models of linear and nonlinear electronic circuits, linearization, small signal analysis. Stability and feedback circuits. Operational amplifiers, device models, linear and nonlinear applications, transfer function realizations. A/D and D/A converters, sources of distortions, converter linearity and spectral characterization, applications. Design and laboratory instrumentation and measurements.\n",
	Slug:            "edu/iastate/ee230",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "EE230",
	UpdatedAt:       time.Date(2025, time.April, 8, 11, 58, 9, 0, time.UTC),
	X:               -0.605019381658173,
	Y:               0.2040522000831277,
	Z:               -0.43160038557881486,
}}
var TagElementsRadon = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"radon\"><a class=\"anchor permalink p-4\" href=\"#radon\">#</a> Radon</h1>\n<p>AtomicNumber: 86</p>\n<p>Element: Radon</p>\n<p>Symbol: Rn</p>\n<p>AtomicMass: 222.0</p>\n<p>NumberofNeutrons: 136</p>\n<p>NumberofProtons: 86</p>\n<p>NumberofElectrons: 86</p>\n<p>Period: 6</p>\n<p>Group: 18.0</p>\n<p>Phase: gas</p>\n<p>Radioactive: yes</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Alkali Metal</p>\n<p>AtomicRadius: 1.3</p>\n<p>Electronegativity: nan</p>\n<p>FirstIonization: 10.7485</p>\n<p>Density: 0.00973</p>\n<p>MeltingPoint: 202.15</p>\n<p>BoilingPoint: 211.3</p>\n<p>NumberOfIsotopes: 20.0</p>\n<p>Discoverer: Dorn</p>\n<p>Year: 1900.0</p>\n<p>SpecificHeat: 0.094</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: 8.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 48, 0, time.UTC),
	Description:     "Radon",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: radon\n\naliases:\n  - Radon\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:48.000-06:00\n\ndescription: Radon\n\ntitle: Radon\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Radon\n\nAtomicNumber: 86\n\nElement: Radon\n\nSymbol: Rn\n\nAtomicMass: 222.0\n\nNumberofNeutrons: 136\n\nNumberofProtons: 86\n\nNumberofElectrons: 86\n\nPeriod: 6\n\nGroup: 18.0\n\nPhase: gas\n\nRadioactive: yes\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Alkali Metal\n\nAtomicRadius: 1.3\n\nElectronegativity: nan\n\nFirstIonization: 10.7485\n\nDensity: 0.00973\n\nMeltingPoint: 202.15\n\nBoilingPoint: 211.3\n\nNumberOfIsotopes: 20.0\n\nDiscoverer: Dorn\n\nYear: 1900.0\n\nSpecificHeat: 0.094\n\nNumberofShells: 6\n\nNumberofValence: 8.0\n",
	Slug:            "elements/radon",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Radon",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -1.2105954938817303,
	Y:               -0.21292190221805282,
	Z:               0.16344342926364758,
}}
var TagElementsRhenium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"rhenium\"><a class=\"anchor permalink p-4\" href=\"#rhenium\">#</a> Rhenium</h1>\n<p>AtomicNumber: 75</p>\n<p>Element: Rhenium</p>\n<p>Symbol: Re</p>\n<p>AtomicMass: 186.207</p>\n<p>NumberofNeutrons: 111</p>\n<p>NumberofProtons: 75</p>\n<p>NumberofElectrons: 75</p>\n<p>Period: 6</p>\n<p>Group: 7.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 2.0</p>\n<p>Electronegativity: 1.9</p>\n<p>FirstIonization: 7.8335</p>\n<p>Density: 21.0</p>\n<p>MeltingPoint: 3453.15</p>\n<p>BoilingPoint: 5869.0</p>\n<p>NumberOfIsotopes: 21.0</p>\n<p>Discoverer: Noddack, Berg, and Tacke</p>\n<p>Year: 1925.0</p>\n<p>SpecificHeat: 0.137</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 48, 0, time.UTC),
	Description:     "Rhenium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: rhenium\n\naliases:\n  - Rhenium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:48.000-06:00\n\ndescription: Rhenium\n\ntitle: Rhenium\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Rhenium\n\nAtomicNumber: 75\n\nElement: Rhenium\n\nSymbol: Re\n\nAtomicMass: 186.207\n\nNumberofNeutrons: 111\n\nNumberofProtons: 75\n\nNumberofElectrons: 75\n\nPeriod: 6\n\nGroup: 7.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 2.0\n\nElectronegativity: 1.9\n\nFirstIonization: 7.8335\n\nDensity: 21.0\n\nMeltingPoint: 3453.15\n\nBoilingPoint: 5869.0\n\nNumberOfIsotopes: 21.0\n\nDiscoverer: Noddack, Berg, and Tacke\n\nYear: 1925.0\n\nSpecificHeat: 0.137\n\nNumberofShells: 6\n\nNumberofValence: nan\n",
	Slug:            "elements/rhenium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Rhenium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -1.3410659108643062,
	Y:               -0.28503525046495504,
	Z:               0.3478449846791414,
}}
var TagElementsPlatinum = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"platinum\"><a class=\"anchor permalink p-4\" href=\"#platinum\">#</a> Platinum</h1>\n<p>AtomicNumber: 78</p>\n<p>Element: Platinum</p>\n<p>Symbol: Pt</p>\n<p>AtomicMass: 195.084</p>\n<p>NumberofNeutrons: 117</p>\n<p>NumberofProtons: 78</p>\n<p>NumberofElectrons: 78</p>\n<p>Period: 6</p>\n<p>Group: 10.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 1.8</p>\n<p>Electronegativity: 2.28</p>\n<p>FirstIonization: 8.9587</p>\n<p>Density: 21.5</p>\n<p>MeltingPoint: 2045.15</p>\n<p>BoilingPoint: 4098.0</p>\n<p>NumberOfIsotopes: 32.0</p>\n<p>Discoverer: Ulloa/Wood</p>\n<p>Year: 1735.0</p>\n<p>SpecificHeat: 0.133</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 48, 0, time.UTC),
	Description:     "Platinum",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: platinum\n\naliases:\n  - Platinum\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:48.000-06:00\n\ndescription: Platinum\n\ntitle: Platinum\n\nupdated_at: 2025-03-28T20:07:40.000-06:00\n---\n\n# Platinum\n\nAtomicNumber: 78\n\nElement: Platinum\n\nSymbol: Pt\n\nAtomicMass: 195.084\n\nNumberofNeutrons: 117\n\nNumberofProtons: 78\n\nNumberofElectrons: 78\n\nPeriod: 6\n\nGroup: 10.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 1.8\n\nElectronegativity: 2.28\n\nFirstIonization: 8.9587\n\nDensity: 21.5\n\nMeltingPoint: 2045.15\n\nBoilingPoint: 4098.0\n\nNumberOfIsotopes: 32.0\n\nDiscoverer: Ulloa/Wood\n\nYear: 1735.0\n\nSpecificHeat: 0.133\n\nNumberofShells: 6\n\nNumberofValence: nan\n",
	Slug:            "elements/platinum",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Platinum",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 40, 0, time.UTC),
	X:               -0.8699475606342045,
	Y:               -0.010558742022368672,
	Z:               0.18927704709972842,
}}
var TagElementsRhodium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"rhodium\"><a class=\"anchor permalink p-4\" href=\"#rhodium\">#</a> Rhodium</h1>\n<p>AtomicNumber: 45</p>\n<p>Element: Rhodium</p>\n<p>Symbol: Rh</p>\n<p>AtomicMass: 102.906</p>\n<p>NumberofNeutrons: 58</p>\n<p>NumberofProtons: 45</p>\n<p>NumberofElectrons: 45</p>\n<p>Period: 5</p>\n<p>Group: 9.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 1.8</p>\n<p>Electronegativity: 2.28</p>\n<p>FirstIonization: 7.4589</p>\n<p>Density: 12.4</p>\n<p>MeltingPoint: 2239.15</p>\n<p>BoilingPoint: 3968.0</p>\n<p>NumberOfIsotopes: 20.0</p>\n<p>Discoverer: Wollaston</p>\n<p>Year: 1803.0</p>\n<p>SpecificHeat: 0.243</p>\n<p>NumberofShells: 5</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 48, 0, time.UTC),
	Description:     "Rhodium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: rhodium\n\naliases:\n  - Rhodium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:48.000-06:00\n\ndescription: Rhodium\n\ntitle: Rhodium\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Rhodium\n\nAtomicNumber: 45\n\nElement: Rhodium\n\nSymbol: Rh\n\nAtomicMass: 102.906\n\nNumberofNeutrons: 58\n\nNumberofProtons: 45\n\nNumberofElectrons: 45\n\nPeriod: 5\n\nGroup: 9.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 1.8\n\nElectronegativity: 2.28\n\nFirstIonization: 7.4589\n\nDensity: 12.4\n\nMeltingPoint: 2239.15\n\nBoilingPoint: 3968.0\n\nNumberOfIsotopes: 20.0\n\nDiscoverer: Wollaston\n\nYear: 1803.0\n\nSpecificHeat: 0.243\n\nNumberofShells: 5\n\nNumberofValence: nan\n",
	Slug:            "elements/rhodium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Rhodium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -1.2178853294996663,
	Y:               -0.26704757780069427,
	Z:               0.22194741382009364,
}}
var TagElementsRubidium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"rubidium\"><a class=\"anchor permalink p-4\" href=\"#rubidium\">#</a> Rubidium</h1>\n<p>AtomicNumber: 37</p>\n<p>Element: Rubidium</p>\n<p>Symbol: Rb</p>\n<p>AtomicMass: 85.468</p>\n<p>NumberofNeutrons: 48</p>\n<p>NumberofProtons: 37</p>\n<p>NumberofElectrons: 37</p>\n<p>Period: 5</p>\n<p>Group: 1.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Alkali Metal</p>\n<p>AtomicRadius: 3.0</p>\n<p>Electronegativity: 0.82</p>\n<p>FirstIonization: 4.1771</p>\n<p>Density: 1.53</p>\n<p>MeltingPoint: 312.79</p>\n<p>BoilingPoint: 961.0</p>\n<p>NumberOfIsotopes: 20.0</p>\n<p>Discoverer: Bunsen and Kirchoff</p>\n<p>Year: 1861.0</p>\n<p>SpecificHeat: 0.363</p>\n<p>NumberofShells: 5</p>\n<p>NumberofValence: 1.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 48, 0, time.UTC),
	Description:     "Rubidium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: rubidium\n\naliases:\n  - Rubidium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:48.000-06:00\n\ndescription: Rubidium\n\ntitle: Rubidium\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Rubidium\n\nAtomicNumber: 37\n\nElement: Rubidium\n\nSymbol: Rb\n\nAtomicMass: 85.468\n\nNumberofNeutrons: 48\n\nNumberofProtons: 37\n\nNumberofElectrons: 37\n\nPeriod: 5\n\nGroup: 1.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Alkali Metal\n\nAtomicRadius: 3.0\n\nElectronegativity: 0.82\n\nFirstIonization: 4.1771\n\nDensity: 1.53\n\nMeltingPoint: 312.79\n\nBoilingPoint: 961.0\n\nNumberOfIsotopes: 20.0\n\nDiscoverer: Bunsen and Kirchoff\n\nYear: 1861.0\n\nSpecificHeat: 0.363\n\nNumberofShells: 5\n\nNumberofValence: 1.0\n",
	Slug:            "elements/rubidium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Rubidium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -0.761734194617828,
	Y:               -0.36895002882830125,
	Z:               0.10160512215583326,
}}
var TagElementsRoentgenium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"roentgenium\"><a class=\"anchor permalink p-4\" href=\"#roentgenium\">#</a> Roentgenium</h1>\n<p>AtomicNumber: 111</p>\n<p>Element: Roentgenium</p>\n<p>Symbol: Rg</p>\n<p>AtomicMass: 272.0</p>\n<p>NumberofNeutrons: 161</p>\n<p>NumberofProtons: 111</p>\n<p>NumberofElectrons: 111</p>\n<p>Period: 7</p>\n<p>Group: 11.0</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transactinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: nan</p>\n<p>FirstIonization: nan</p>\n<p>Density: nan</p>\n<p>MeltingPoint: nan</p>\n<p>BoilingPoint: nan</p>\n<p>NumberOfIsotopes: nan</p>\n<p>Discoverer: nan</p>\n<p>Year: 1994.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 48, 0, time.UTC),
	Description:     "Roentgenium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: roentgenium\n\naliases:\n  - Roentgenium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:48.000-06:00\n\ndescription: Roentgenium\n\ntitle: Roentgenium\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Roentgenium\n\nAtomicNumber: 111\n\nElement: Roentgenium\n\nSymbol: Rg\n\nAtomicMass: 272.0\n\nNumberofNeutrons: 161\n\nNumberofProtons: 111\n\nNumberofElectrons: 111\n\nPeriod: 7\n\nGroup: 11.0\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transactinide\n\nAtomicRadius: nan\n\nElectronegativity: nan\n\nFirstIonization: nan\n\nDensity: nan\n\nMeltingPoint: nan\n\nBoilingPoint: nan\n\nNumberOfIsotopes: nan\n\nDiscoverer: nan\n\nYear: 1994.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: nan\n",
	Slug:            "elements/roentgenium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Roentgenium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -1.0666060074242343,
	Y:               -0.12982717777655878,
	Z:               -0.053024485480225494,
}}
var TagElementsRuthenium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"ruthenium\"><a class=\"anchor permalink p-4\" href=\"#ruthenium\">#</a> Ruthenium</h1>\n<p>AtomicNumber: 44</p>\n<p>Element: Ruthenium</p>\n<p>Symbol: Ru</p>\n<p>AtomicMass: 101.07</p>\n<p>NumberofNeutrons: 57</p>\n<p>NumberofProtons: 44</p>\n<p>NumberofElectrons: 44</p>\n<p>Period: 5</p>\n<p>Group: 8.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 1.9</p>\n<p>Electronegativity: 2.2</p>\n<p>FirstIonization: 7.3605</p>\n<p>Density: 12.4</p>\n<p>MeltingPoint: 2523.15</p>\n<p>BoilingPoint: 4423.0</p>\n<p>NumberOfIsotopes: 16.0</p>\n<p>Discoverer: Klaus</p>\n<p>Year: 1844.0</p>\n<p>SpecificHeat: 0.238</p>\n<p>NumberofShells: 5</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 48, 0, time.UTC),
	Description:     "Ruthenium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: ruthenium\n\naliases:\n  - Ruthenium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:48.000-06:00\n\ndescription: Ruthenium\n\ntitle: Ruthenium\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Ruthenium\n\nAtomicNumber: 44\n\nElement: Ruthenium\n\nSymbol: Ru\n\nAtomicMass: 101.07\n\nNumberofNeutrons: 57\n\nNumberofProtons: 44\n\nNumberofElectrons: 44\n\nPeriod: 5\n\nGroup: 8.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 1.9\n\nElectronegativity: 2.2\n\nFirstIonization: 7.3605\n\nDensity: 12.4\n\nMeltingPoint: 2523.15\n\nBoilingPoint: 4423.0\n\nNumberOfIsotopes: 16.0\n\nDiscoverer: Klaus\n\nYear: 1844.0\n\nSpecificHeat: 0.238\n\nNumberofShells: 5\n\nNumberofValence: nan\n",
	Slug:            "elements/ruthenium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Ruthenium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -1.1792784349179903,
	Y:               -0.04948790880348336,
	Z:               0.03173607315489785,
}}
var TagElementsRutherfordium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"rutherfordium\"><a class=\"anchor permalink p-4\" href=\"#rutherfordium\">#</a> Rutherfordium</h1>\n<p>AtomicNumber: 104</p>\n<p>Element: Rutherfordium</p>\n<p>Symbol: Rf</p>\n<p>AtomicMass: 261.0</p>\n<p>NumberofNeutrons: 157</p>\n<p>NumberofProtons: 104</p>\n<p>NumberofElectrons: 104</p>\n<p>Period: 7</p>\n<p>Group: 4.0</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transactinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: nan</p>\n<p>FirstIonization: nan</p>\n<p>Density: 18.1</p>\n<p>MeltingPoint: nan</p>\n<p>BoilingPoint: nan</p>\n<p>NumberOfIsotopes: nan</p>\n<p>Discoverer: Ghiorso et al.</p>\n<p>Year: 1969.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 48, 0, time.UTC),
	Description:     "Rutherfordium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: rutherfordium\n\naliases:\n  - Rutherfordium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:48.000-06:00\n\ndescription: Rutherfordium\n\ntitle: Rutherfordium\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Rutherfordium\n\nAtomicNumber: 104\n\nElement: Rutherfordium\n\nSymbol: Rf\n\nAtomicMass: 261.0\n\nNumberofNeutrons: 157\n\nNumberofProtons: 104\n\nNumberofElectrons: 104\n\nPeriod: 7\n\nGroup: 4.0\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transactinide\n\nAtomicRadius: nan\n\nElectronegativity: nan\n\nFirstIonization: nan\n\nDensity: 18.1\n\nMeltingPoint: nan\n\nBoilingPoint: nan\n\nNumberOfIsotopes: nan\n\nDiscoverer: Ghiorso et al.\n\nYear: 1969.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: nan\n",
	Slug:            "elements/rutherfordium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Rutherfordium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -0.9712730994895802,
	Y:               -0.23346429457627563,
	Z:               0.0663900051255015,
}}
var TagElementsSamarium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"samarium\"><a class=\"anchor permalink p-4\" href=\"#samarium\">#</a> Samarium</h1>\n<p>AtomicNumber: 62</p>\n<p>Element: Samarium</p>\n<p>Symbol: Sm</p>\n<p>AtomicMass: 150.36</p>\n<p>NumberofNeutrons: 88</p>\n<p>NumberofProtons: 62</p>\n<p>NumberofElectrons: 62</p>\n<p>Period: 6</p>\n<p>Group: nan</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Lanthanide</p>\n<p>AtomicRadius: 2.6</p>\n<p>Electronegativity: 1.17</p>\n<p>FirstIonization: 5.6437</p>\n<p>Density: 7.52</p>\n<p>MeltingPoint: 1345.15</p>\n<p>BoilingPoint: 2067.0</p>\n<p>NumberOfIsotopes: 17.0</p>\n<p>Discoverer: Boisbaudran</p>\n<p>Year: 1879.0</p>\n<p>SpecificHeat: 0.197</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 48, 0, time.UTC),
	Description:     "Samarium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: samarium\n\naliases:\n  - Samarium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:48.000-06:00\n\ndescription: Samarium\n\ntitle: Samarium\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Samarium\n\nAtomicNumber: 62\n\nElement: Samarium\n\nSymbol: Sm\n\nAtomicMass: 150.36\n\nNumberofNeutrons: 88\n\nNumberofProtons: 62\n\nNumberofElectrons: 62\n\nPeriod: 6\n\nGroup: nan\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Lanthanide\n\nAtomicRadius: 2.6\n\nElectronegativity: 1.17\n\nFirstIonization: 5.6437\n\nDensity: 7.52\n\nMeltingPoint: 1345.15\n\nBoilingPoint: 2067.0\n\nNumberOfIsotopes: 17.0\n\nDiscoverer: Boisbaudran\n\nYear: 1879.0\n\nSpecificHeat: 0.197\n\nNumberofShells: 6\n\nNumberofValence: nan\n",
	Slug:            "elements/samarium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Samarium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -0.9239453235141832,
	Y:               -0.37881235290543214,
	Z:               0.7825123378956024,
}}
var TagElementsScandium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"scandium\"><a class=\"anchor permalink p-4\" href=\"#scandium\">#</a> Scandium</h1>\n<p>AtomicNumber: 21</p>\n<p>Element: Scandium</p>\n<p>Symbol: Sc</p>\n<p>AtomicMass: 44.956</p>\n<p>NumberofNeutrons: 24</p>\n<p>NumberofProtons: 21</p>\n<p>NumberofElectrons: 21</p>\n<p>Period: 4</p>\n<p>Group: 3.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 2.1</p>\n<p>Electronegativity: 1.36</p>\n<p>FirstIonization: 6.5615</p>\n<p>Density: 2.99</p>\n<p>MeltingPoint: 1812.15</p>\n<p>BoilingPoint: 3109.0</p>\n<p>NumberOfIsotopes: 15.0</p>\n<p>Discoverer: Nilson</p>\n<p>Year: 1878.0</p>\n<p>SpecificHeat: 0.568</p>\n<p>NumberofShells: 4</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 48, 0, time.UTC),
	Description:     "Scandium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: scandium\n\naliases:\n  - Scandium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:48.000-06:00\n\ndescription: Scandium\n\ntitle: Scandium\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Scandium\n\nAtomicNumber: 21\n\nElement: Scandium\n\nSymbol: Sc\n\nAtomicMass: 44.956\n\nNumberofNeutrons: 24\n\nNumberofProtons: 21\n\nNumberofElectrons: 21\n\nPeriod: 4\n\nGroup: 3.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 2.1\n\nElectronegativity: 1.36\n\nFirstIonization: 6.5615\n\nDensity: 2.99\n\nMeltingPoint: 1812.15\n\nBoilingPoint: 3109.0\n\nNumberOfIsotopes: 15.0\n\nDiscoverer: Nilson\n\nYear: 1878.0\n\nSpecificHeat: 0.568\n\nNumberofShells: 4\n\nNumberofValence: nan\n",
	Slug:            "elements/scandium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Scandium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -0.5900186855394742,
	Y:               -0.3567817931816949,
	Z:               0.5322053968920157,
}}
var TagElementsSelenium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"selenium\"><a class=\"anchor permalink p-4\" href=\"#selenium\">#</a> Selenium</h1>\n<p>AtomicNumber: 34</p>\n<p>Element: Selenium</p>\n<p>Symbol: Se</p>\n<p>AtomicMass: 78.96</p>\n<p>NumberofNeutrons: 45</p>\n<p>NumberofProtons: 34</p>\n<p>NumberofElectrons: 34</p>\n<p>Period: 4</p>\n<p>Group: 16.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: nan</p>\n<p>Nonmetal: yes</p>\n<p>Metalloid: nan</p>\n<p>Type: Nonmetal</p>\n<p>AtomicRadius: 1.2</p>\n<p>Electronegativity: 2.55</p>\n<p>FirstIonization: 9.7524</p>\n<p>Density: 4.81</p>\n<p>MeltingPoint: 494.15</p>\n<p>BoilingPoint: 958.0</p>\n<p>NumberOfIsotopes: 20.0</p>\n<p>Discoverer: Berzelius</p>\n<p>Year: 1817.0</p>\n<p>SpecificHeat: 0.321</p>\n<p>NumberofShells: 4</p>\n<p>NumberofValence: 6.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 48, 0, time.UTC),
	Description:     "Selenium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: selenium\n\naliases:\n  - Selenium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:48.000-06:00\n\ndescription: Selenium\n\ntitle: Selenium\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Selenium\n\nAtomicNumber: 34\n\nElement: Selenium\n\nSymbol: Se\n\nAtomicMass: 78.96\n\nNumberofNeutrons: 45\n\nNumberofProtons: 34\n\nNumberofElectrons: 34\n\nPeriod: 4\n\nGroup: 16.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: nan\n\nNonmetal: yes\n\nMetalloid: nan\n\nType: Nonmetal\n\nAtomicRadius: 1.2\n\nElectronegativity: 2.55\n\nFirstIonization: 9.7524\n\nDensity: 4.81\n\nMeltingPoint: 494.15\n\nBoilingPoint: 958.0\n\nNumberOfIsotopes: 20.0\n\nDiscoverer: Berzelius\n\nYear: 1817.0\n\nSpecificHeat: 0.321\n\nNumberofShells: 4\n\nNumberofValence: 6.0\n",
	Slug:            "elements/selenium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Selenium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -0.29404745391873405,
	Y:               -0.33887541515597863,
	Z:               0.1705004763463721,
}}
var TagElementsSeaborgium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"seaborgium\"><a class=\"anchor permalink p-4\" href=\"#seaborgium\">#</a> Seaborgium</h1>\n<p>AtomicNumber: 106</p>\n<p>Element: Seaborgium</p>\n<p>Symbol: Sg</p>\n<p>AtomicMass: 266.0</p>\n<p>NumberofNeutrons: 160</p>\n<p>NumberofProtons: 106</p>\n<p>NumberofElectrons: 106</p>\n<p>Period: 7</p>\n<p>Group: 6.0</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transactinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: nan</p>\n<p>FirstIonization: nan</p>\n<p>Density: 35.0</p>\n<p>MeltingPoint: nan</p>\n<p>BoilingPoint: nan</p>\n<p>NumberOfIsotopes: nan</p>\n<p>Discoverer: Ghiorso et al.</p>\n<p>Year: 1974.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 48, 0, time.UTC),
	Description:     "Seaborgium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: seaborgium\n\naliases:\n  - Seaborgium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:48.000-06:00\n\ndescription: Seaborgium\n\ntitle: Seaborgium\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Seaborgium\n\nAtomicNumber: 106\n\nElement: Seaborgium\n\nSymbol: Sg\n\nAtomicMass: 266.0\n\nNumberofNeutrons: 160\n\nNumberofProtons: 106\n\nNumberofElectrons: 106\n\nPeriod: 7\n\nGroup: 6.0\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transactinide\n\nAtomicRadius: nan\n\nElectronegativity: nan\n\nFirstIonization: nan\n\nDensity: 35.0\n\nMeltingPoint: nan\n\nBoilingPoint: nan\n\nNumberOfIsotopes: nan\n\nDiscoverer: Ghiorso et al.\n\nYear: 1974.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: nan\n",
	Slug:            "elements/seaborgium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Seaborgium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -1.2012557403618398,
	Y:               -0.18569193113408086,
	Z:               0.41811337918383085,
}}
var TagElementsPraseodymium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"praseodymium\"><a class=\"anchor permalink p-4\" href=\"#praseodymium\">#</a> Praseodymium</h1>\n<p>AtomicNumber: 59</p>\n<p>Element: Praseodymium</p>\n<p>Symbol: Pr</p>\n<p>AtomicMass: 140.908</p>\n<p>NumberofNeutrons: 82</p>\n<p>NumberofProtons: 59</p>\n<p>NumberofElectrons: 59</p>\n<p>Period: 6</p>\n<p>Group: nan</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Lanthanide</p>\n<p>AtomicRadius: 2.7</p>\n<p>Electronegativity: 1.13</p>\n<p>FirstIonization: 5.473</p>\n<p>Density: 6.77</p>\n<p>MeltingPoint: 1204.15</p>\n<p>BoilingPoint: 3793.0</p>\n<p>NumberOfIsotopes: 15.0</p>\n<p>Discoverer: von Welsbach</p>\n<p>Year: 1885.0</p>\n<p>SpecificHeat: 0.193</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 48, 0, time.UTC),
	Description:     "Praseodymium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: praseodymium\n\naliases:\n  - Praseodymium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:48.000-06:00\n\ndescription: Praseodymium\n\ntitle: Praseodymium\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Praseodymium\n\nAtomicNumber: 59\n\nElement: Praseodymium\n\nSymbol: Pr\n\nAtomicMass: 140.908\n\nNumberofNeutrons: 82\n\nNumberofProtons: 59\n\nNumberofElectrons: 59\n\nPeriod: 6\n\nGroup: nan\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Lanthanide\n\nAtomicRadius: 2.7\n\nElectronegativity: 1.13\n\nFirstIonization: 5.473\n\nDensity: 6.77\n\nMeltingPoint: 1204.15\n\nBoilingPoint: 3793.0\n\nNumberOfIsotopes: 15.0\n\nDiscoverer: von Welsbach\n\nYear: 1885.0\n\nSpecificHeat: 0.193\n\nNumberofShells: 6\n\nNumberofValence: nan\n",
	Slug:            "elements/praseodymium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Praseodymium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -1.0807700455564695,
	Y:               -0.2449625759354557,
	Z:               0.3410360510949486,
}}
var TagElementsSilicon = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"silicon\"><a class=\"anchor permalink p-4\" href=\"#silicon\">#</a> Silicon</h1>\n<p>AtomicNumber: 14</p>\n<p>Element: Silicon</p>\n<p>Symbol: Si</p>\n<p>AtomicMass: 28.086</p>\n<p>NumberofNeutrons: 14</p>\n<p>NumberofProtons: 14</p>\n<p>NumberofElectrons: 14</p>\n<p>Period: 3</p>\n<p>Group: 14.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: nan</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: yes</p>\n<p>Type: Metalloid</p>\n<p>AtomicRadius: 1.5</p>\n<p>Electronegativity: 1.9</p>\n<p>FirstIonization: 8.1517</p>\n<p>Density: 2.33</p>\n<p>MeltingPoint: 1683.15</p>\n<p>BoilingPoint: 3538.0</p>\n<p>NumberOfIsotopes: 8.0</p>\n<p>Discoverer: Berzelius</p>\n<p>Year: 1824.0</p>\n<p>SpecificHeat: 0.705</p>\n<p>NumberofShells: 3</p>\n<p>NumberofValence: 4.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 0, 59, 0, time.UTC),
	Description:     "Silicon",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: silicon\n\naliases:\n  - Silicon\n\ntags: []\n\ncreated_at: 2025-03-28T20:00:59.000-06:00\n\ndescription: Silicon\n\ntitle: Silicon\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Silicon\n\nAtomicNumber: 14\n\nElement: Silicon\n\nSymbol: Si\n\nAtomicMass: 28.086\n\nNumberofNeutrons: 14\n\nNumberofProtons: 14\n\nNumberofElectrons: 14\n\nPeriod: 3\n\nGroup: 14.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: nan\n\nNonmetal: nan\n\nMetalloid: yes\n\nType: Metalloid\n\nAtomicRadius: 1.5\n\nElectronegativity: 1.9\n\nFirstIonization: 8.1517\n\nDensity: 2.33\n\nMeltingPoint: 1683.15\n\nBoilingPoint: 3538.0\n\nNumberOfIsotopes: 8.0\n\nDiscoverer: Berzelius\n\nYear: 1824.0\n\nSpecificHeat: 0.705\n\nNumberofShells: 3\n\nNumberofValence: 4.0\n",
	Slug:            "elements/silicon",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Silicon",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -0.5878153132288959,
	Y:               -0.37193462901356994,
	Z:               0.03001112339946249,
}}
var TagElementsSilver = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"silver\"><a class=\"anchor permalink p-4\" href=\"#silver\">#</a> Silver</h1>\n<p>AtomicNumber: 47</p>\n<p>Element: Silver</p>\n<p>Symbol: Ag</p>\n<p>AtomicMass: 107.868</p>\n<p>NumberofNeutrons: 61</p>\n<p>NumberofProtons: 47</p>\n<p>NumberofElectrons: 47</p>\n<p>Period: 5</p>\n<p>Group: 11.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 1.8</p>\n<p>Electronegativity: 1.93</p>\n<p>FirstIonization: 7.5762</p>\n<p>Density: 10.5</p>\n<p>MeltingPoint: 1234.15</p>\n<p>BoilingPoint: 2435.0</p>\n<p>NumberOfIsotopes: 27.0</p>\n<p>Discoverer: Prehistoric</p>\n<p>Year: nan</p>\n<p>SpecificHeat: 0.235</p>\n<p>NumberofShells: 5</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 49, 0, time.UTC),
	Description:     "Silver",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: silver\n\naliases:\n  - Silver\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:49.000-06:00\n\ndescription: Silver\n\ntitle: Silver\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Silver\n\nAtomicNumber: 47\n\nElement: Silver\n\nSymbol: Ag\n\nAtomicMass: 107.868\n\nNumberofNeutrons: 61\n\nNumberofProtons: 47\n\nNumberofElectrons: 47\n\nPeriod: 5\n\nGroup: 11.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 1.8\n\nElectronegativity: 1.93\n\nFirstIonization: 7.5762\n\nDensity: 10.5\n\nMeltingPoint: 1234.15\n\nBoilingPoint: 2435.0\n\nNumberOfIsotopes: 27.0\n\nDiscoverer: Prehistoric\n\nYear: nan\n\nSpecificHeat: 0.235\n\nNumberofShells: 5\n\nNumberofValence: nan\n",
	Slug:            "elements/silver",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Silver",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -0.4257596901246251,
	Y:               -0.48071545860466025,
	Z:               0.10862688677632015,
}}
var TagElementsSulfur = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"sulfur\"><a class=\"anchor permalink p-4\" href=\"#sulfur\">#</a> Sulfur</h1>\n<p>AtomicNumber: 16</p>\n<p>Element: Sulfur</p>\n<p>Symbol: S</p>\n<p>AtomicMass: 32.065</p>\n<p>NumberofNeutrons: 16</p>\n<p>NumberofProtons: 16</p>\n<p>NumberofElectrons: 16</p>\n<p>Period: 3</p>\n<p>Group: 16.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: nan</p>\n<p>Nonmetal: yes</p>\n<p>Metalloid: nan</p>\n<p>Type: Nonmetal</p>\n<p>AtomicRadius: 1.1</p>\n<p>Electronegativity: 2.58</p>\n<p>FirstIonization: 10.36</p>\n<p>Density: 2.07</p>\n<p>MeltingPoint: 388.51</p>\n<p>BoilingPoint: 717.8</p>\n<p>NumberOfIsotopes: 10.0</p>\n<p>Discoverer: Prehistoric</p>\n<p>Year: nan</p>\n<p>SpecificHeat: 0.71</p>\n<p>NumberofShells: 3</p>\n<p>NumberofValence: 6.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 49, 0, time.UTC),
	Description:     "Sulfur",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: sulfur\n\naliases:\n  - Sulfur\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:49.000-06:00\n\ndescription: Sulfur\n\ntitle: Sulfur\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Sulfur\n\nAtomicNumber: 16\n\nElement: Sulfur\n\nSymbol: S\n\nAtomicMass: 32.065\n\nNumberofNeutrons: 16\n\nNumberofProtons: 16\n\nNumberofElectrons: 16\n\nPeriod: 3\n\nGroup: 16.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: nan\n\nNonmetal: yes\n\nMetalloid: nan\n\nType: Nonmetal\n\nAtomicRadius: 1.1\n\nElectronegativity: 2.58\n\nFirstIonization: 10.36\n\nDensity: 2.07\n\nMeltingPoint: 388.51\n\nBoilingPoint: 717.8\n\nNumberOfIsotopes: 10.0\n\nDiscoverer: Prehistoric\n\nYear: nan\n\nSpecificHeat: 0.71\n\nNumberofShells: 3\n\nNumberofValence: 6.0\n",
	Slug:            "elements/sulfur",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Sulfur",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -1.42844580882069,
	Y:               -0.4166751448018605,
	Z:               0.5240466331058352,
}}
var TagElementsStrontium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"strontium\"><a class=\"anchor permalink p-4\" href=\"#strontium\">#</a> Strontium</h1>\n<p>AtomicNumber: 38</p>\n<p>Element: Strontium</p>\n<p>Symbol: Sr</p>\n<p>AtomicMass: 87.62</p>\n<p>NumberofNeutrons: 50</p>\n<p>NumberofProtons: 38</p>\n<p>NumberofElectrons: 38</p>\n<p>Period: 5</p>\n<p>Group: 2.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Alkaline Earth Metal</p>\n<p>AtomicRadius: 2.5</p>\n<p>Electronegativity: 0.95</p>\n<p>FirstIonization: 5.6949</p>\n<p>Density: 2.64</p>\n<p>MeltingPoint: 1042.15</p>\n<p>BoilingPoint: 1655.0</p>\n<p>NumberOfIsotopes: 18.0</p>\n<p>Discoverer: Davy</p>\n<p>Year: 1808.0</p>\n<p>SpecificHeat: 0.301</p>\n<p>NumberofShells: 5</p>\n<p>NumberofValence: 2.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 49, 0, time.UTC),
	Description:     "Strontium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: strontium\n\naliases:\n  - Strontium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:49.000-06:00\n\ndescription: Strontium\n\ntitle: Strontium\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Strontium\n\nAtomicNumber: 38\n\nElement: Strontium\n\nSymbol: Sr\n\nAtomicMass: 87.62\n\nNumberofNeutrons: 50\n\nNumberofProtons: 38\n\nNumberofElectrons: 38\n\nPeriod: 5\n\nGroup: 2.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Alkaline Earth Metal\n\nAtomicRadius: 2.5\n\nElectronegativity: 0.95\n\nFirstIonization: 5.6949\n\nDensity: 2.64\n\nMeltingPoint: 1042.15\n\nBoilingPoint: 1655.0\n\nNumberOfIsotopes: 18.0\n\nDiscoverer: Davy\n\nYear: 1808.0\n\nSpecificHeat: 0.301\n\nNumberofShells: 5\n\nNumberofValence: 2.0\n",
	Slug:            "elements/strontium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Strontium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -1.3699465579001868,
	Y:               -0.8196914861264293,
	Z:               0.5718758357203313,
}}
var TagElementsTantalum = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"tantalum\"><a class=\"anchor permalink p-4\" href=\"#tantalum\">#</a> Tantalum</h1>\n<p>AtomicNumber: 73</p>\n<p>Element: Tantalum</p>\n<p>Symbol: Ta</p>\n<p>AtomicMass: 180.948</p>\n<p>NumberofNeutrons: 108</p>\n<p>NumberofProtons: 73</p>\n<p>NumberofElectrons: 73</p>\n<p>Period: 6</p>\n<p>Group: 5.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 2.1</p>\n<p>Electronegativity: 1.5</p>\n<p>FirstIonization: 7.5496</p>\n<p>Density: 16.7</p>\n<p>MeltingPoint: 3269.15</p>\n<p>BoilingPoint: 5731.0</p>\n<p>NumberOfIsotopes: 19.0</p>\n<p>Discoverer: Ekeberg</p>\n<p>Year: 1801.0</p>\n<p>SpecificHeat: 0.14</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 49, 0, time.UTC),
	Description:     "Tantalum",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: tantalum\n\naliases:\n  - Tantalum\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:49.000-06:00\n\ndescription: Tantalum\n\ntitle: Tantalum\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Tantalum\n\nAtomicNumber: 73\n\nElement: Tantalum\n\nSymbol: Ta\n\nAtomicMass: 180.948\n\nNumberofNeutrons: 108\n\nNumberofProtons: 73\n\nNumberofElectrons: 73\n\nPeriod: 6\n\nGroup: 5.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 2.1\n\nElectronegativity: 1.5\n\nFirstIonization: 7.5496\n\nDensity: 16.7\n\nMeltingPoint: 3269.15\n\nBoilingPoint: 5731.0\n\nNumberOfIsotopes: 19.0\n\nDiscoverer: Ekeberg\n\nYear: 1801.0\n\nSpecificHeat: 0.14\n\nNumberofShells: 6\n\nNumberofValence: nan\n",
	Slug:            "elements/tantalum",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Tantalum",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -1.074389315105843,
	Y:               -0.7945164427617903,
	Z:               0.12941829448344958,
}}
var TagElementsTechnetium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"technetium\"><a class=\"anchor permalink p-4\" href=\"#technetium\">#</a> Technetium</h1>\n<p>AtomicNumber: 43</p>\n<p>Element: Technetium</p>\n<p>Symbol: Tc</p>\n<p>AtomicMass: 98.0</p>\n<p>NumberofNeutrons: 55</p>\n<p>NumberofProtons: 43</p>\n<p>NumberofElectrons: 43</p>\n<p>Period: 5</p>\n<p>Group: 7.0</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 2.0</p>\n<p>Electronegativity: 1.9</p>\n<p>FirstIonization: 7.28</p>\n<p>Density: 11.5</p>\n<p>MeltingPoint: 2473.15</p>\n<p>BoilingPoint: 5150.0</p>\n<p>NumberOfIsotopes: 23.0</p>\n<p>Discoverer: Perrier and Segr�</p>\n<p>Year: 1937.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 5</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 49, 0, time.UTC),
	Description:     "Technetium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: technetium\n\naliases:\n  - Technetium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:49.000-06:00\n\ndescription: Technetium\n\ntitle: Technetium\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Technetium\n\nAtomicNumber: 43\n\nElement: Technetium\n\nSymbol: Tc\n\nAtomicMass: 98.0\n\nNumberofNeutrons: 55\n\nNumberofProtons: 43\n\nNumberofElectrons: 43\n\nPeriod: 5\n\nGroup: 7.0\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 2.0\n\nElectronegativity: 1.9\n\nFirstIonization: 7.28\n\nDensity: 11.5\n\nMeltingPoint: 2473.15\n\nBoilingPoint: 5150.0\n\nNumberOfIsotopes: 23.0\n\nDiscoverer: Perrier and Segr�\n\nYear: 1937.0\n\nSpecificHeat: nan\n\nNumberofShells: 5\n\nNumberofValence: nan\n",
	Slug:            "elements/technetium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Technetium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -1.3062080516989965,
	Y:               -0.5601649959674632,
	Z:               0.2913091799313981,
}}
var TagElementsTellurium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"tellurium\"><a class=\"anchor permalink p-4\" href=\"#tellurium\">#</a> Tellurium</h1>\n<p>AtomicNumber: 52</p>\n<p>Element: Tellurium</p>\n<p>Symbol: Te</p>\n<p>AtomicMass: 127.6</p>\n<p>NumberofNeutrons: 76</p>\n<p>NumberofProtons: 52</p>\n<p>NumberofElectrons: 52</p>\n<p>Period: 5</p>\n<p>Group: 16.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: nan</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: yes</p>\n<p>Type: Metalloid</p>\n<p>AtomicRadius: 1.4</p>\n<p>Electronegativity: 2.1</p>\n<p>FirstIonization: 9.0096</p>\n<p>Density: 6.23</p>\n<p>MeltingPoint: 722.8</p>\n<p>BoilingPoint: 1261.0</p>\n<p>NumberOfIsotopes: 29.0</p>\n<p>Discoverer: von Reichenstein</p>\n<p>Year: 1782.0</p>\n<p>SpecificHeat: 0.202</p>\n<p>NumberofShells: 5</p>\n<p>NumberofValence: 6.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 49, 0, time.UTC),
	Description:     "Tellurium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: tellurium\n\naliases:\n  - Tellurium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:49.000-06:00\n\ndescription: Tellurium\n\ntitle: Tellurium\n\nupdated_at: 2025-03-28T20:07:42.000-06:00\n---\n\n# Tellurium\n\nAtomicNumber: 52\n\nElement: Tellurium\n\nSymbol: Te\n\nAtomicMass: 127.6\n\nNumberofNeutrons: 76\n\nNumberofProtons: 52\n\nNumberofElectrons: 52\n\nPeriod: 5\n\nGroup: 16.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: nan\n\nNonmetal: nan\n\nMetalloid: yes\n\nType: Metalloid\n\nAtomicRadius: 1.4\n\nElectronegativity: 2.1\n\nFirstIonization: 9.0096\n\nDensity: 6.23\n\nMeltingPoint: 722.8\n\nBoilingPoint: 1261.0\n\nNumberOfIsotopes: 29.0\n\nDiscoverer: von Reichenstein\n\nYear: 1782.0\n\nSpecificHeat: 0.202\n\nNumberofShells: 5\n\nNumberofValence: 6.0\n",
	Slug:            "elements/tellurium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Tellurium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 42, 0, time.UTC),
	X:               -1.0265277561597632,
	Y:               -0.5867311352810269,
	Z:               0.4094160949490099,
}}
var TagElementsThorium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"thorium\"><a class=\"anchor permalink p-4\" href=\"#thorium\">#</a> Thorium</h1>\n<p>AtomicNumber: 90</p>\n<p>Element: Thorium</p>\n<p>Symbol: Th</p>\n<p>AtomicMass: 232.038</p>\n<p>NumberofNeutrons: 142</p>\n<p>NumberofProtons: 90</p>\n<p>NumberofElectrons: 90</p>\n<p>Period: 7</p>\n<p>Group: nan</p>\n<p>Phase: solid</p>\n<p>Radioactive: yes</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Actinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: 1.3</p>\n<p>FirstIonization: 6.3067</p>\n<p>Density: 11.7</p>\n<p>MeltingPoint: 2028.15</p>\n<p>BoilingPoint: 5061.0</p>\n<p>NumberOfIsotopes: 12.0</p>\n<p>Discoverer: Berzelius</p>\n<p>Year: 1828.0</p>\n<p>SpecificHeat: 0.113</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 49, 0, time.UTC),
	Description:     "Thorium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: thorium\n\naliases:\n  - Thorium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:49.000-06:00\n\ndescription: Thorium\n\ntitle: Thorium\n\nupdated_at: 2025-03-28T20:07:42.000-06:00\n---\n\n# Thorium\n\nAtomicNumber: 90\n\nElement: Thorium\n\nSymbol: Th\n\nAtomicMass: 232.038\n\nNumberofNeutrons: 142\n\nNumberofProtons: 90\n\nNumberofElectrons: 90\n\nPeriod: 7\n\nGroup: nan\n\nPhase: solid\n\nRadioactive: yes\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Actinide\n\nAtomicRadius: nan\n\nElectronegativity: 1.3\n\nFirstIonization: 6.3067\n\nDensity: 11.7\n\nMeltingPoint: 2028.15\n\nBoilingPoint: 5061.0\n\nNumberOfIsotopes: 12.0\n\nDiscoverer: Berzelius\n\nYear: 1828.0\n\nSpecificHeat: 0.113\n\nNumberofShells: 7\n\nNumberofValence: nan\n",
	Slug:            "elements/thorium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Thorium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 42, 0, time.UTC),
	X:               -0.8150408681596877,
	Y:               -0.6956990540427587,
	Z:               0.6664702048017974,
}}
var TagElementsThulium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"thulium\"><a class=\"anchor permalink p-4\" href=\"#thulium\">#</a> Thulium</h1>\n<p>AtomicNumber: 69</p>\n<p>Element: Thulium</p>\n<p>Symbol: Tm</p>\n<p>AtomicMass: 168.934</p>\n<p>NumberofNeutrons: 100</p>\n<p>NumberofProtons: 69</p>\n<p>NumberofElectrons: 69</p>\n<p>Period: 6</p>\n<p>Group: nan</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Lanthanide</p>\n<p>AtomicRadius: 2.4</p>\n<p>Electronegativity: 1.25</p>\n<p>FirstIonization: 6.1843</p>\n<p>Density: 9.32</p>\n<p>MeltingPoint: 1818.15</p>\n<p>BoilingPoint: 2223.0</p>\n<p>NumberOfIsotopes: 18.0</p>\n<p>Discoverer: Cleve</p>\n<p>Year: 1879.0</p>\n<p>SpecificHeat: 0.16</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 49, 0, time.UTC),
	Description:     "Thulium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: thulium\n\naliases:\n  - Thulium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:49.000-06:00\n\ndescription: Thulium\n\ntitle: Thulium\n\nupdated_at: 2025-03-28T20:07:42.000-06:00\n---\n\n# Thulium\n\nAtomicNumber: 69\n\nElement: Thulium\n\nSymbol: Tm\n\nAtomicMass: 168.934\n\nNumberofNeutrons: 100\n\nNumberofProtons: 69\n\nNumberofElectrons: 69\n\nPeriod: 6\n\nGroup: nan\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Lanthanide\n\nAtomicRadius: 2.4\n\nElectronegativity: 1.25\n\nFirstIonization: 6.1843\n\nDensity: 9.32\n\nMeltingPoint: 1818.15\n\nBoilingPoint: 2223.0\n\nNumberOfIsotopes: 18.0\n\nDiscoverer: Cleve\n\nYear: 1879.0\n\nSpecificHeat: 0.16\n\nNumberofShells: 6\n\nNumberofValence: nan\n",
	Slug:            "elements/thulium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Thulium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 42, 0, time.UTC),
	X:               -1.0009634067641053,
	Y:               -0.43899419582637283,
	Z:               0.6188651257198279,
}}
var TagElementsTennessine = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"tennessine\"><a class=\"anchor permalink p-4\" href=\"#tennessine\">#</a> Tennessine</h1>\n<p>AtomicNumber: 117</p>\n<p>Element: Tennessine</p>\n<p>Symbol: Ts</p>\n<p>AtomicMass: 295.0</p>\n<p>NumberofNeutrons: 178</p>\n<p>NumberofProtons: 117</p>\n<p>NumberofElectrons: 117</p>\n<p>Period: 7</p>\n<p>Group: 17.0</p>\n<p>Phase: artificial</p>\n<p>Radioactive: yes</p>\n<p>Natural: nan</p>\n<p>Metal: nan</p>\n<p>Nonmetal: yes</p>\n<p>Metalloid: nan</p>\n<p>Type: nan</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: nan</p>\n<p>FirstIonization: nan</p>\n<p>Density: nan</p>\n<p>MeltingPoint: nan</p>\n<p>BoilingPoint: nan</p>\n<p>NumberOfIsotopes: nan</p>\n<p>Discoverer: nan</p>\n<p>Year: 2010.0</p>\n<p>SpecificHeat: nan</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: 7.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 49, 0, time.UTC),
	Description:     "Tennessine",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: tennessine\n\naliases:\n  - Tennessine\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:49.000-06:00\n\ndescription: Tennessine\n\ntitle: Tennessine\n\nupdated_at: 2025-03-28T20:07:42.000-06:00\n---\n\n# Tennessine\n\nAtomicNumber: 117\n\nElement: Tennessine\n\nSymbol: Ts\n\nAtomicMass: 295.0\n\nNumberofNeutrons: 178\n\nNumberofProtons: 117\n\nNumberofElectrons: 117\n\nPeriod: 7\n\nGroup: 17.0\n\nPhase: artificial\n\nRadioactive: yes\n\nNatural: nan\n\nMetal: nan\n\nNonmetal: yes\n\nMetalloid: nan\n\nType: nan\n\nAtomicRadius: nan\n\nElectronegativity: nan\n\nFirstIonization: nan\n\nDensity: nan\n\nMeltingPoint: nan\n\nBoilingPoint: nan\n\nNumberOfIsotopes: nan\n\nDiscoverer: nan\n\nYear: 2010.0\n\nSpecificHeat: nan\n\nNumberofShells: 7\n\nNumberofValence: 7.0\n",
	Slug:            "elements/tennessine",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Tennessine",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 42, 0, time.UTC),
	X:               -1.549398594794967,
	Y:               -0.1984214437231871,
	Z:               0.3193919576749693,
}}
var TagElementsTitanium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"titanium\"><a class=\"anchor permalink p-4\" href=\"#titanium\">#</a> Titanium</h1>\n<p>AtomicNumber: 22</p>\n<p>Element: Titanium</p>\n<p>Symbol: Ti</p>\n<p>AtomicMass: 47.867</p>\n<p>NumberofNeutrons: 26</p>\n<p>NumberofProtons: 22</p>\n<p>NumberofElectrons: 22</p>\n<p>Period: 4</p>\n<p>Group: 4.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 2.0</p>\n<p>Electronegativity: 1.54</p>\n<p>FirstIonization: 6.8281</p>\n<p>Density: 4.54</p>\n<p>MeltingPoint: 1933.15</p>\n<p>BoilingPoint: 3560.0</p>\n<p>NumberOfIsotopes: 9.0</p>\n<p>Discoverer: Gregor</p>\n<p>Year: 1791.0</p>\n<p>SpecificHeat: 0.523</p>\n<p>NumberofShells: 4</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 49, 0, time.UTC),
	Description:     "Titanium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: titanium\n\naliases:\n  - Titanium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:49.000-06:00\n\ndescription: Titanium\n\ntitle: Titanium\n\nupdated_at: 2025-03-28T20:07:42.000-06:00\n---\n\n# Titanium\n\nAtomicNumber: 22\n\nElement: Titanium\n\nSymbol: Ti\n\nAtomicMass: 47.867\n\nNumberofNeutrons: 26\n\nNumberofProtons: 22\n\nNumberofElectrons: 22\n\nPeriod: 4\n\nGroup: 4.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 2.0\n\nElectronegativity: 1.54\n\nFirstIonization: 6.8281\n\nDensity: 4.54\n\nMeltingPoint: 1933.15\n\nBoilingPoint: 3560.0\n\nNumberOfIsotopes: 9.0\n\nDiscoverer: Gregor\n\nYear: 1791.0\n\nSpecificHeat: 0.523\n\nNumberofShells: 4\n\nNumberofValence: nan\n",
	Slug:            "elements/titanium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Titanium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 42, 0, time.UTC),
	X:               -0.6922586654826759,
	Y:               -0.5958655495866969,
	Z:               0.12622435162842227,
}}
var TagElementsTin = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"tin\"><a class=\"anchor permalink p-4\" href=\"#tin\">#</a> Tin</h1>\n<p>AtomicNumber: 50</p>\n<p>Element: Tin</p>\n<p>Symbol: Sn</p>\n<p>AtomicMass: 118.71</p>\n<p>NumberofNeutrons: 69</p>\n<p>NumberofProtons: 50</p>\n<p>NumberofElectrons: 50</p>\n<p>Period: 5</p>\n<p>Group: 14.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Metal</p>\n<p>AtomicRadius: 1.7</p>\n<p>Electronegativity: 1.96</p>\n<p>FirstIonization: 7.3439</p>\n<p>Density: 7.29</p>\n<p>MeltingPoint: 505.21</p>\n<p>BoilingPoint: 2875.0</p>\n<p>NumberOfIsotopes: 28.0</p>\n<p>Discoverer: Prehistoric</p>\n<p>Year: nan</p>\n<p>SpecificHeat: 0.228</p>\n<p>NumberofShells: 5</p>\n<p>NumberofValence: 4.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 19, 0, time.UTC),
	Description:     "Tin",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: tin\n\naliases:\n  - Tin\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:19.000-06:00\n\ndescription: Tin\n\ntitle: Tin\n\nupdated_at: 2025-03-28T20:07:42.000-06:00\n---\n\n# Tin\n\nAtomicNumber: 50\n\nElement: Tin\n\nSymbol: Sn\n\nAtomicMass: 118.71\n\nNumberofNeutrons: 69\n\nNumberofProtons: 50\n\nNumberofElectrons: 50\n\nPeriod: 5\n\nGroup: 14.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Metal\n\nAtomicRadius: 1.7\n\nElectronegativity: 1.96\n\nFirstIonization: 7.3439\n\nDensity: 7.29\n\nMeltingPoint: 505.21\n\nBoilingPoint: 2875.0\n\nNumberOfIsotopes: 28.0\n\nDiscoverer: Prehistoric\n\nYear: nan\n\nSpecificHeat: 0.228\n\nNumberofShells: 5\n\nNumberofValence: 4.0\n",
	Slug:            "elements/tin",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Tin",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 42, 0, time.UTC),
	X:               -1.4761622541724129,
	Y:               -0.4098586389328245,
	Z:               0.26503213578450474,
}}
var TagElementsWolfram = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"wolfram\"><a class=\"anchor permalink p-4\" href=\"#wolfram\">#</a> Wolfram</h1>\n<p>AtomicNumber: 74</p>\n<p>Element: Wolfram</p>\n<p>Symbol: W</p>\n<p>AtomicMass: 183.84</p>\n<p>NumberofNeutrons: 110</p>\n<p>NumberofProtons: 74</p>\n<p>NumberofElectrons: 74</p>\n<p>Period: 6</p>\n<p>Group: 6.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 2.0</p>\n<p>Electronegativity: 2.36</p>\n<p>FirstIonization: 7.864</p>\n<p>Density: 19.3</p>\n<p>MeltingPoint: 3680.15</p>\n<p>BoilingPoint: 5828.0</p>\n<p>NumberOfIsotopes: 22.0</p>\n<p>Discoverer: J. and F. d'Elhuyar</p>\n<p>Year: 1783.0</p>\n<p>SpecificHeat: 0.132</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 49, 0, time.UTC),
	Description:     "Wolfram",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: wolfram\n\naliases:\n  - Wolfram\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:49.000-06:00\n\ndescription: Wolfram\n\ntitle: Wolfram\n\nupdated_at: 2025-03-28T20:07:42.000-06:00\n---\n\n# Wolfram\n\nAtomicNumber: 74\n\nElement: Wolfram\n\nSymbol: W\n\nAtomicMass: 183.84\n\nNumberofNeutrons: 110\n\nNumberofProtons: 74\n\nNumberofElectrons: 74\n\nPeriod: 6\n\nGroup: 6.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 2.0\n\nElectronegativity: 2.36\n\nFirstIonization: 7.864\n\nDensity: 19.3\n\nMeltingPoint: 3680.15\n\nBoilingPoint: 5828.0\n\nNumberOfIsotopes: 22.0\n\nDiscoverer: J. and F. d'Elhuyar\n\nYear: 1783.0\n\nSpecificHeat: 0.132\n\nNumberofShells: 6\n\nNumberofValence: nan\n",
	Slug:            "elements/wolfram",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Wolfram",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 42, 0, time.UTC),
	X:               -1.0849307416190257,
	Y:               -0.19627936038198368,
	Z:               0.28671682732001097,
}}
var TagElementsVanadium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"vanadium\"><a class=\"anchor permalink p-4\" href=\"#vanadium\">#</a> Vanadium</h1>\n<p>AtomicNumber: 23</p>\n<p>Element: Vanadium</p>\n<p>Symbol: V</p>\n<p>AtomicMass: 50.942</p>\n<p>NumberofNeutrons: 28</p>\n<p>NumberofProtons: 23</p>\n<p>NumberofElectrons: 23</p>\n<p>Period: 4</p>\n<p>Group: 5.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 1.9</p>\n<p>Electronegativity: 1.63</p>\n<p>FirstIonization: 6.7462</p>\n<p>Density: 6.11</p>\n<p>MeltingPoint: 2175.15</p>\n<p>BoilingPoint: 3680.0</p>\n<p>NumberOfIsotopes: 9.0</p>\n<p>Discoverer: del Rio</p>\n<p>Year: 1801.0</p>\n<p>SpecificHeat: 0.489</p>\n<p>NumberofShells: 4</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 49, 0, time.UTC),
	Description:     "Vanadium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: vanadium\n\naliases:\n  - Vanadium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:49.000-06:00\n\ndescription: Vanadium\n\ntitle: Vanadium\n\nupdated_at: 2025-03-28T20:07:42.000-06:00\n---\n\n# Vanadium\n\nAtomicNumber: 23\n\nElement: Vanadium\n\nSymbol: V\n\nAtomicMass: 50.942\n\nNumberofNeutrons: 28\n\nNumberofProtons: 23\n\nNumberofElectrons: 23\n\nPeriod: 4\n\nGroup: 5.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 1.9\n\nElectronegativity: 1.63\n\nFirstIonization: 6.7462\n\nDensity: 6.11\n\nMeltingPoint: 2175.15\n\nBoilingPoint: 3680.0\n\nNumberOfIsotopes: 9.0\n\nDiscoverer: del Rio\n\nYear: 1801.0\n\nSpecificHeat: 0.489\n\nNumberofShells: 4\n\nNumberofValence: nan\n",
	Slug:            "elements/vanadium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Vanadium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 42, 0, time.UTC),
	X:               -1.0601772297617027,
	Y:               -0.23772248922349215,
	Z:               0.5518999869417397,
}}
var TagElementsThallium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"thallium\"><a class=\"anchor permalink p-4\" href=\"#thallium\">#</a> Thallium</h1>\n<p>AtomicNumber: 81</p>\n<p>Element: Thallium</p>\n<p>Symbol: Tl</p>\n<p>AtomicMass: 204.383</p>\n<p>NumberofNeutrons: 123</p>\n<p>NumberofProtons: 81</p>\n<p>NumberofElectrons: 81</p>\n<p>Period: 6</p>\n<p>Group: 13.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Metal</p>\n<p>AtomicRadius: 2.1</p>\n<p>Electronegativity: 2.04</p>\n<p>FirstIonization: 6.1082</p>\n<p>Density: 11.9</p>\n<p>MeltingPoint: 577.15</p>\n<p>BoilingPoint: 1746.0</p>\n<p>NumberOfIsotopes: 28.0</p>\n<p>Discoverer: Crookes</p>\n<p>Year: 1861.0</p>\n<p>SpecificHeat: 0.129</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: 3.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 49, 0, time.UTC),
	Description:     "Thallium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: thallium\n\naliases:\n  - Thallium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:49.000-06:00\n\ndescription: Thallium\n\ntitle: Thallium\n\nupdated_at: 2025-03-28T20:07:42.000-06:00\n---\n\n# Thallium\n\nAtomicNumber: 81\n\nElement: Thallium\n\nSymbol: Tl\n\nAtomicMass: 204.383\n\nNumberofNeutrons: 123\n\nNumberofProtons: 81\n\nNumberofElectrons: 81\n\nPeriod: 6\n\nGroup: 13.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Metal\n\nAtomicRadius: 2.1\n\nElectronegativity: 2.04\n\nFirstIonization: 6.1082\n\nDensity: 11.9\n\nMeltingPoint: 577.15\n\nBoilingPoint: 1746.0\n\nNumberOfIsotopes: 28.0\n\nDiscoverer: Crookes\n\nYear: 1861.0\n\nSpecificHeat: 0.129\n\nNumberofShells: 6\n\nNumberofValence: 3.0\n",
	Slug:            "elements/thallium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Thallium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 42, 0, time.UTC),
	X:               -0.7839727970966343,
	Y:               -0.37343926870511035,
	Z:               0.2329095621672448,
}}
var TagElementsXenon = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"xenon\"><a class=\"anchor permalink p-4\" href=\"#xenon\">#</a> Xenon</h1>\n<p>AtomicNumber: 54</p>\n<p>Element: Xenon</p>\n<p>Symbol: Xe</p>\n<p>AtomicMass: 131.293</p>\n<p>NumberofNeutrons: 77</p>\n<p>NumberofProtons: 54</p>\n<p>NumberofElectrons: 54</p>\n<p>Period: 5</p>\n<p>Group: 18.0</p>\n<p>Phase: gas</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: nan</p>\n<p>Nonmetal: yes</p>\n<p>Metalloid: nan</p>\n<p>Type: Noble Gas</p>\n<p>AtomicRadius: 1.2</p>\n<p>Electronegativity: nan</p>\n<p>FirstIonization: 12.1298</p>\n<p>Density: 0.00589</p>\n<p>MeltingPoint: 161.45</p>\n<p>BoilingPoint: 165.03</p>\n<p>NumberOfIsotopes: 31.0</p>\n<p>Discoverer: Ramsay and Travers</p>\n<p>Year: 1898.0</p>\n<p>SpecificHeat: 0.158</p>\n<p>NumberofShells: 5</p>\n<p>NumberofValence: 8.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 49, 0, time.UTC),
	Description:     "Xenon",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: xenon\n\naliases:\n  - Xenon\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:49.000-06:00\n\ndescription: Xenon\n\ntitle: Xenon\n\nupdated_at: 2025-03-28T20:07:42.000-06:00\n---\n\n# Xenon\n\nAtomicNumber: 54\n\nElement: Xenon\n\nSymbol: Xe\n\nAtomicMass: 131.293\n\nNumberofNeutrons: 77\n\nNumberofProtons: 54\n\nNumberofElectrons: 54\n\nPeriod: 5\n\nGroup: 18.0\n\nPhase: gas\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: nan\n\nNonmetal: yes\n\nMetalloid: nan\n\nType: Noble Gas\n\nAtomicRadius: 1.2\n\nElectronegativity: nan\n\nFirstIonization: 12.1298\n\nDensity: 0.00589\n\nMeltingPoint: 161.45\n\nBoilingPoint: 165.03\n\nNumberOfIsotopes: 31.0\n\nDiscoverer: Ramsay and Travers\n\nYear: 1898.0\n\nSpecificHeat: 0.158\n\nNumberofShells: 5\n\nNumberofValence: 8.0\n",
	Slug:            "elements/xenon",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Xenon",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 42, 0, time.UTC),
	X:               -1.4888521895908657,
	Y:               -0.3431916715023279,
	Z:               -0.10637216533743987,
}}
var TagElementsYtterbium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"ytterbium\"><a class=\"anchor permalink p-4\" href=\"#ytterbium\">#</a> Ytterbium</h1>\n<p>AtomicNumber: 70</p>\n<p>Element: Ytterbium</p>\n<p>Symbol: Yb</p>\n<p>AtomicMass: 173.054</p>\n<p>NumberofNeutrons: 103</p>\n<p>NumberofProtons: 70</p>\n<p>NumberofElectrons: 70</p>\n<p>Period: 6</p>\n<p>Group: nan</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Lanthanide</p>\n<p>AtomicRadius: 2.4</p>\n<p>Electronegativity: 1.1</p>\n<p>FirstIonization: 6.2542</p>\n<p>Density: 6.97</p>\n<p>MeltingPoint: 1097.15</p>\n<p>BoilingPoint: 1469.0</p>\n<p>NumberOfIsotopes: 16.0</p>\n<p>Discoverer: Marignac</p>\n<p>Year: 1878.0</p>\n<p>SpecificHeat: 0.155</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 49, 0, time.UTC),
	Description:     "Ytterbium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: ytterbium\n\naliases:\n  - Ytterbium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:49.000-06:00\n\ndescription: Ytterbium\n\ntitle: Ytterbium\n\nupdated_at: 2025-03-28T20:07:42.000-06:00\n---\n\n# Ytterbium\n\nAtomicNumber: 70\n\nElement: Ytterbium\n\nSymbol: Yb\n\nAtomicMass: 173.054\n\nNumberofNeutrons: 103\n\nNumberofProtons: 70\n\nNumberofElectrons: 70\n\nPeriod: 6\n\nGroup: nan\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Lanthanide\n\nAtomicRadius: 2.4\n\nElectronegativity: 1.1\n\nFirstIonization: 6.2542\n\nDensity: 6.97\n\nMeltingPoint: 1097.15\n\nBoilingPoint: 1469.0\n\nNumberOfIsotopes: 16.0\n\nDiscoverer: Marignac\n\nYear: 1878.0\n\nSpecificHeat: 0.155\n\nNumberofShells: 6\n\nNumberofValence: nan\n",
	Slug:            "elements/ytterbium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Ytterbium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 42, 0, time.UTC),
	X:               -0.9086066976836235,
	Y:               -1.1139040306879489,
	Z:               0.20851138106927125,
}}
var TagElementsZinc = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"zinc\"><a class=\"anchor permalink p-4\" href=\"#zinc\">#</a> Zinc</h1>\n<p>AtomicNumber: 30</p>\n<p>Element: Zinc</p>\n<p>Symbol: Zn</p>\n<p>AtomicMass: 65.38</p>\n<p>NumberofNeutrons: 35</p>\n<p>NumberofProtons: 30</p>\n<p>NumberofElectrons: 30</p>\n<p>Period: 4</p>\n<p>Group: 12.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 1.5</p>\n<p>Electronegativity: 1.65</p>\n<p>FirstIonization: 9.3942</p>\n<p>Density: 7.13</p>\n<p>MeltingPoint: 692.88</p>\n<p>BoilingPoint: 1180.0</p>\n<p>NumberOfIsotopes: 15.0</p>\n<p>Discoverer: Prehistoric</p>\n<p>Year: nan</p>\n<p>SpecificHeat: 0.388</p>\n<p>NumberofShells: 4</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 50, 0, time.UTC),
	Description:     "Zinc",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: zinc\n\naliases:\n  - Zinc\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:50.000-06:00\n\ndescription: Zinc\n\ntitle: Zinc\n\nupdated_at: 2025-03-28T20:14:59.000-06:00\n---\n\n# Zinc\n\nAtomicNumber: 30\n\nElement: Zinc\n\nSymbol: Zn\n\nAtomicMass: 65.38\n\nNumberofNeutrons: 35\n\nNumberofProtons: 30\n\nNumberofElectrons: 30\n\nPeriod: 4\n\nGroup: 12.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 1.5\n\nElectronegativity: 1.65\n\nFirstIonization: 9.3942\n\nDensity: 7.13\n\nMeltingPoint: 692.88\n\nBoilingPoint: 1180.0\n\nNumberOfIsotopes: 15.0\n\nDiscoverer: Prehistoric\n\nYear: nan\n\nSpecificHeat: 0.388\n\nNumberofShells: 4\n\nNumberofValence: nan\n",
	Slug:            "elements/zinc",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Zinc",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 14, 59, 0, time.UTC),
	X:               -0.5107156838525755,
	Y:               -0.2331873893708737,
	Z:               -0.2631363090033217,
}}
var TagFrameworkAstro = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"astro\"><a class=\"anchor permalink p-4\" href=\"#astro\">#</a> astro</h1>\n<p>Astro is a static site generator for building fast, accessible, and interactive websites.</p>\n<p><a href=\"https://astro.build/\">Learn more about Astro</a>.</p>\n",
	CreatedAt:       time.Date(2025, time.April, 9, 12, 3, 25, 0, time.UTC),
	Description:     "Astro is a static site generator for building fast, accessible, and interactive websites.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: astro\naliases:\n  - astro\ntags: []\ncreated_at: 2025-04-09T12:03:25.000-06:00\ndescription: Astro is a static site generator for building fast, accessible, and interactive websites.\ntitle: astro\nupdated_at: 2025-04-11T08:08:35.000-06:00\n---\n\n# astro\n\nAstro is a static site generator for building fast, accessible, and interactive websites.\n\n[Learn more about Astro](https://astro.build/).\n",
	Slug:            "framework/astro",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "astro",
	UpdatedAt:       time.Date(2025, time.April, 11, 8, 8, 35, 0, time.UTC),
	X:               -1.2987502701856353,
	Y:               0.17868832439182003,
	Z:               -0.06631302813276069,
}}
var TagFrameworkNextjs = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"nextjs\"><a class=\"anchor permalink p-4\" href=\"#nextjs\">#</a> NextJS</h1>\n<p>NextJS is a backend React framework for the web.</p>\n",
	CreatedAt:       time.Date(2025, time.April, 11, 8, 9, 13, 0, time.UTC),
	Description:     "NextJS is a React framework for the web.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: nextjs\naliases:\n  - NextJS\ntags: []\ncreated_at: 2025-04-11T08:09:13.000-06:00\ndescription: NextJS is a React framework for the web.\ntitle: NextJS\nupdated_at: 2025-04-11T08:09:45.000-06:00\n---\n\n# NextJS\n\nNextJS is a backend React framework for the web.\n",
	Slug:            "framework/nextjs",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "NextJS",
	UpdatedAt:       time.Date(2025, time.April, 11, 8, 9, 45, 0, time.UTC),
	X:               -1.8136048513525502,
	Y:               -0.7107992911735365,
	Z:               -0.4844622653791508,
}}
var TagElementsPotassium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"potassium\"><a class=\"anchor permalink p-4\" href=\"#potassium\">#</a> Potassium</h1>\n<p>AtomicNumber: 19</p>\n<p>Element: Potassium</p>\n<p>Symbol: K</p>\n<p>AtomicMass: 39.098</p>\n<p>NumberofNeutrons: 20</p>\n<p>NumberofProtons: 19</p>\n<p>NumberofElectrons: 19</p>\n<p>Period: 4</p>\n<p>Group: 1.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Alkali Metal</p>\n<p>AtomicRadius: 2.8</p>\n<p>Electronegativity: 0.82</p>\n<p>FirstIonization: 4.3407</p>\n<p>Density: 0.862</p>\n<p>MeltingPoint: 336.5</p>\n<p>BoilingPoint: 1032.0</p>\n<p>NumberOfIsotopes: 10.0</p>\n<p>Discoverer: Davy</p>\n<p>Year: 1807.0</p>\n<p>SpecificHeat: 0.757</p>\n<p>NumberofShells: 4</p>\n<p>NumberofValence: 1.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 48, 0, time.UTC),
	Description:     "Potassium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: potassium\n\naliases:\n  - Potassium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:48.000-06:00\n\ndescription: Potassium\n\ntitle: Potassium\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Potassium\n\nAtomicNumber: 19\n\nElement: Potassium\n\nSymbol: K\n\nAtomicMass: 39.098\n\nNumberofNeutrons: 20\n\nNumberofProtons: 19\n\nNumberofElectrons: 19\n\nPeriod: 4\n\nGroup: 1.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Alkali Metal\n\nAtomicRadius: 2.8\n\nElectronegativity: 0.82\n\nFirstIonization: 4.3407\n\nDensity: 0.862\n\nMeltingPoint: 336.5\n\nBoilingPoint: 1032.0\n\nNumberOfIsotopes: 10.0\n\nDiscoverer: Davy\n\nYear: 1807.0\n\nSpecificHeat: 0.757\n\nNumberofShells: 4\n\nNumberofValence: 1.0\n",
	Slug:            "elements/potassium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Potassium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -0.8761974518914006,
	Y:               -0.24573459168591028,
	Z:               0.24276031376006146,
}}
var TagElementsZirconium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"zirconium\"><a class=\"anchor permalink p-4\" href=\"#zirconium\">#</a> Zirconium</h1>\n<p>AtomicNumber: 40</p>\n<p>Element: Zirconium</p>\n<p>Symbol: Zr</p>\n<p>AtomicMass: 91.224</p>\n<p>NumberofNeutrons: 51</p>\n<p>NumberofProtons: 40</p>\n<p>NumberofElectrons: 40</p>\n<p>Period: 5</p>\n<p>Group: 4.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 2.2</p>\n<p>Electronegativity: 1.33</p>\n<p>FirstIonization: 6.6339</p>\n<p>Density: 6.51</p>\n<p>MeltingPoint: 2125.15</p>\n<p>BoilingPoint: 4682.0</p>\n<p>NumberOfIsotopes: 20.0</p>\n<p>Discoverer: Klaproth</p>\n<p>Year: 1789.0</p>\n<p>SpecificHeat: 0.278</p>\n<p>NumberofShells: 5</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 50, 0, time.UTC),
	Description:     "Zirconium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: zirconium\n\naliases:\n  - Zirconium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:50.000-06:00\n\ndescription: Zirconium\n\ntitle: Zirconium\n\nupdated_at: 2025-03-28T20:07:42.000-06:00\n---\n\n# Zirconium\n\nAtomicNumber: 40\n\nElement: Zirconium\n\nSymbol: Zr\n\nAtomicMass: 91.224\n\nNumberofNeutrons: 51\n\nNumberofProtons: 40\n\nNumberofElectrons: 40\n\nPeriod: 5\n\nGroup: 4.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 2.2\n\nElectronegativity: 1.33\n\nFirstIonization: 6.6339\n\nDensity: 6.51\n\nMeltingPoint: 2125.15\n\nBoilingPoint: 4682.0\n\nNumberOfIsotopes: 20.0\n\nDiscoverer: Klaproth\n\nYear: 1789.0\n\nSpecificHeat: 0.278\n\nNumberofShells: 5\n\nNumberofValence: nan\n",
	Slug:            "elements/zirconium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Zirconium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 42, 0, time.UTC),
	X:               -0.9193672532565811,
	Y:               -0.35636449259812225,
	Z:               0.017645537762974117,
}}
var TagFrameworkReact = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"react\"><a class=\"anchor permalink p-4\" href=\"#react\">#</a> React</h1>\n<p>React is a JavaScript library for building user interfaces.</p>\n<p>Learn more about React at <a href=\"https://reactjs.org/\">reactjs.org</a>.</p>\n",
	CreatedAt:       time.Date(2025, time.April, 11, 8, 7, 35, 0, time.UTC),
	Description:     "React is a JavaScript library for building user interfaces.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: react\naliases:\n  - React\ntags: []\ncreated_at: 2025-04-11T08:07:35.000-06:00\ndescription: React is a JavaScript library for building user interfaces.\ntitle: React\nupdated_at: 2025-04-11T08:08:43.000-06:00\n---\n\n# React\n\nReact is a JavaScript library for building user interfaces.\n\nLearn more about React at [reactjs.org](https://reactjs.org/).\n",
	Slug:            "framework/react",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "React",
	UpdatedAt:       time.Date(2025, time.April, 11, 8, 8, 43, 0, time.UTC),
	X:               -1.5073599323207483,
	Y:               -0.043860933489545506,
	Z:               -0.5166540915184099,
}}
var TagElementsTerbium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"terbium\"><a class=\"anchor permalink p-4\" href=\"#terbium\">#</a> Terbium</h1>\n<p>AtomicNumber: 65</p>\n<p>Element: Terbium</p>\n<p>Symbol: Tb</p>\n<p>AtomicMass: 158.925</p>\n<p>NumberofNeutrons: 94</p>\n<p>NumberofProtons: 65</p>\n<p>NumberofElectrons: 65</p>\n<p>Period: 6</p>\n<p>Group: nan</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Lanthanide</p>\n<p>AtomicRadius: 2.5</p>\n<p>Electronegativity: 1.2</p>\n<p>FirstIonization: 5.8638</p>\n<p>Density: 8.23</p>\n<p>MeltingPoint: 1630.15</p>\n<p>BoilingPoint: 3503.0</p>\n<p>NumberOfIsotopes: 24.0</p>\n<p>Discoverer: Mosander</p>\n<p>Year: 1843.0</p>\n<p>SpecificHeat: 0.182</p>\n<p>NumberofShells: 6</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 49, 0, time.UTC),
	Description:     "Terbium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: terbium\n\naliases:\n  - Terbium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:49.000-06:00\n\ndescription: Terbium\n\ntitle: Terbium\n\nupdated_at: 2025-03-28T20:07:42.000-06:00\n---\n\n# Terbium\n\nAtomicNumber: 65\n\nElement: Terbium\n\nSymbol: Tb\n\nAtomicMass: 158.925\n\nNumberofNeutrons: 94\n\nNumberofProtons: 65\n\nNumberofElectrons: 65\n\nPeriod: 6\n\nGroup: nan\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Lanthanide\n\nAtomicRadius: 2.5\n\nElectronegativity: 1.2\n\nFirstIonization: 5.8638\n\nDensity: 8.23\n\nMeltingPoint: 1630.15\n\nBoilingPoint: 3503.0\n\nNumberOfIsotopes: 24.0\n\nDiscoverer: Mosander\n\nYear: 1843.0\n\nSpecificHeat: 0.182\n\nNumberofShells: 6\n\nNumberofValence: nan\n",
	Slug:            "elements/terbium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Terbium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 42, 0, time.UTC),
	X:               -0.6934851345794316,
	Y:               -0.4023781278733611,
	Z:               0.2256406193711952,
}}
var TagFrameworkSvelte = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"svelte\"><a class=\"anchor permalink p-4\" href=\"#svelte\">#</a> Svelte</h1>\n<p>Svelte is a JavaScript framework for building user interfaces.</p>\n<p>Learn more about Svelte at <a href=\"https://svelte.dev/\">svelte.dev</a>.</p>\n",
	CreatedAt:       time.Date(2025, time.April, 11, 8, 7, 46, 0, time.UTC),
	Description:     "Svelte is a JavaScript framework for building user interfaces.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: svelte\naliases:\n  - Svelte\ntags: []\ncreated_at: 2025-04-11T08:07:46.000-06:00\ndescription: Svelte is a JavaScript framework for building user interfaces.\ntitle: Svelte\nupdated_at: 2025-04-11T08:08:48.000-06:00\n---\n\n# Svelte\n\nSvelte is a JavaScript framework for building user interfaces.\n\nLearn more about Svelte at [svelte.dev](https://svelte.dev/).\n",
	Slug:            "framework/svelte",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Svelte",
	UpdatedAt:       time.Date(2025, time.April, 11, 8, 8, 48, 0, time.UTC),
	X:               -1.450518766950625,
	Y:               -0.19445892389778147,
	Z:               -0.5065370719071436,
}}
var TagFrameworkTailwindcss = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"tailwindcss\"><a class=\"anchor permalink p-4\" href=\"#tailwindcss\">#</a> TailwindCSS</h1>\n<p>TailwindCSS is a utility-first CSS framework for rapidly building custom designs.</p>\n",
	CreatedAt:       time.Date(2025, time.April, 11, 15, 14, 30, 0, time.UTC),
	Description:     "TailwindCSS is a utility-first CSS framework for rapidly building custom designs.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: tailwindcss\naliases:\n  - TailwindCSS\ntags: []\ncreated_at: 2025-04-11T15:14:30.000-06:00\ndescription: TailwindCSS is a utility-first CSS framework for rapidly building custom designs.\ntitle: TailwindCSS\nupdated_at: 2025-04-11T15:14:44.000-06:00\n---\n\n# TailwindCSS\n\nTailwindCSS is a utility-first CSS framework for rapidly building custom designs.\n\n\n",
	Slug:            "framework/tailwindcss",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "TailwindCSS",
	UpdatedAt:       time.Date(2025, time.April, 11, 15, 14, 44, 0, time.UTC),
	X:               -1.769034196575645,
	Y:               -0.18538226766989818,
	Z:               -0.7581163538063505,
}}
var TagFrameworkVue = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"vue\"><a class=\"anchor permalink p-4\" href=\"#vue\">#</a> Vue</h1>\n<p>Vue is a JavaScript framework for building user interfaces.</p>\n<p>Learn more about Vue at <a href=\"https://vuejs.org/\">vuejs.org</a>.</p>\n",
	CreatedAt:       time.Date(2025, time.April, 11, 8, 7, 54, 0, time.UTC),
	Description:     "Vue is a JavaScript framework for building user interfaces.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: vue\naliases:\n  - Vue\ntags: []\ncreated_at: 2025-04-11T08:07:54.000-06:00\ndescription: Vue is a JavaScript framework for building user interfaces.\ntitle: Vue\nupdated_at: 2025-04-11T08:08:52.000-06:00\n---\n\n# Vue\n\nVue is a JavaScript framework for building user interfaces.\n\nLearn more about Vue at [vuejs.org](https://vuejs.org/).\n",
	Slug:            "framework/vue",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Vue",
	UpdatedAt:       time.Date(2025, time.April, 11, 8, 8, 52, 0, time.UTC),
	X:               -1.3154436829159506,
	Y:               -0.08752867538702291,
	Z:               0.0016711763414799796,
}}
var TagHdlVerilog = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<p>Verilog is a hardware description language (HDL) used for modeling, designing, and verifying digital circuits and systems.</p>\n<p>Originally developed in the 1980s by Gateway Design Automation, Verilog became an IEEE standard in 1995 (IEEE 1364) and is widely used for FPGA and ASIC development.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 15, 0, time.UTC),
	Description:     "Verilog is a hardware description language (HDL) used for modeling, designing, and verifying digital circuits and systems.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: verilog\naliases: []\ntags:\n  - hdl\ncreated_at: 2025-03-27T14:13:15.000-06:00\ndescription: Verilog is a hardware description language (HDL) used for modeling, designing, and verifying digital circuits and systems.\ntitle: Verilog\nupdated_at: 2025-03-28T20:07:42.000-06:00\n---\n\nVerilog is a hardware description language (HDL) used for modeling, designing, and verifying digital circuits and systems.\n\nOriginally developed in the 1980s by Gateway Design Automation, Verilog became an IEEE standard in 1995 (IEEE 1364) and is widely used for FPGA and ASIC development.\n",
	Slug:            "hdl/verilog",
	TagSlugs:        []string{"hdl"},
	Tags:            []*assets.Tag{},
	Title:           "Verilog",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 42, 0, time.UTC),
	X:               -1.2802320272573369,
	Y:               0.23180149938695088,
	Z:               -0.7361683263426902,
}}
var TagHdlVhdl = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"vhdl\"><a class=\"anchor permalink p-4\" href=\"#vhdl\">#</a> VHDL</h1>\n<p>VHDL (VHSIC Hardware Description Language) is a hardware description language used to model and simulate digital circuits and systems.</p>\n<p>Developed in the 1980s by the U.S. Department of Defense as part of the VHSIC (Very High-Speed Integrated Circuit) program, VHDL enables designers to describe the behavior and structure of electronic systems at multiple levels of abstraction.</p>\n<p>It supports concurrent execution, making it well-suited for hardware design, verification, and synthesis into FPGA and ASIC implementations.</p>\n<p>VHDL is strongly typed and allows for modular, reusable components, making it my favorite hardware description language.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 15, 0, time.UTC),
	Description:     "VHDL (VHSIC Hardware Description Language) is a hardware description language used to model and simulate digital circuits and systems.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: vhdl\naliases:\n  - VHDL\ntags:\n  - hdl\ncreated_at: 2025-03-27T14:13:15.000-06:00\ndescription: VHDL (VHSIC Hardware Description Language) is a hardware description language used to model and simulate digital circuits and systems.\ntitle: VHDL\nupdated_at: 2025-04-02T06:54:41.000-06:00\n---\n\n# VHDL\n\nVHDL (VHSIC Hardware Description Language) is a hardware description language used to model and simulate digital circuits and systems.\n\nDeveloped in the 1980s by the U.S. Department of Defense as part of the VHSIC (Very High-Speed Integrated Circuit) program, VHDL enables designers to describe the behavior and structure of electronic systems at multiple levels of abstraction.\n\nIt supports concurrent execution, making it well-suited for hardware design, verification, and synthesis into FPGA and ASIC implementations.\n\nVHDL is strongly typed and allows for modular, reusable components, making it my favorite hardware description language.\n",
	Slug:            "hdl/vhdl",
	TagSlugs:        []string{"hdl"},
	Tags:            []*assets.Tag{},
	Title:           "VHDL",
	UpdatedAt:       time.Date(2025, time.April, 2, 6, 54, 41, 0, time.UTC),
	X:               -1.2095057228433925,
	Y:               0.19181461347612294,
	Z:               -0.7123878493935053,
}}
var TagIdeJetbrains = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"jetbrains-ides\"><a class=\"anchor permalink p-4\" href=\"#jetbrains-ides\">#</a> JetBrains IDEs</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 15, 0, time.UTC),
	Description:     "Jetbrains provides a variety of IDEs for different languages but share the same core, which is the IntelliJ IDEA.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: jetbrains\naliases:\n  - JetBrains IDEs\ntags: []\ncreated_at: 2025-03-27T14:13:15.000-06:00\ndescription: Jetbrains provides a variety of IDEs for different languages but share the same core, which is the IntelliJ IDEA.\ntitle: JetBrains IDEs\nupdated_at: 2025-03-28T20:07:42.000-06:00\n---\n\n# JetBrains IDEs\n",
	Slug:            "ide/jetbrains",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "JetBrains IDEs",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 42, 0, time.UTC),
	X:               -1.7283572917859495,
	Y:               -0.45022477669410366,
	Z:               -0.6751741310691705,
}}
var TagIdeModelsim = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"modelsim\"><a class=\"anchor permalink p-4\" href=\"#modelsim\">#</a> Modelsim</h1>\n<p>Modelsim is a simulator for Verilog HDL.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 19, 49, 49, 0, time.UTC),
	Description:     "Modelsim is a simulator for Verilog HDL.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: modelsim\naliases:\n  - Modelsim\ntags: []\ncreated_at: 2025-03-28T19:49:49.000-06:00\ndescription: Modelsim is a simulator for Verilog HDL.\ntitle: Modelsim\nupdated_at: 2025-03-28T20:07:42.000-06:00\n---\n\n# Modelsim\n\nModelsim is a simulator for Verilog HDL.\n",
	Slug:            "ide/modelsim",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Modelsim",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 42, 0, time.UTC),
	X:               -1.6560595106216067,
	Y:               0.2666108185817064,
	Z:               -0.5836063759242303,
}}
var TagIdeNeovim = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"neovim\"><a class=\"anchor permalink p-4\" href=\"#neovim\">#</a> Neovim</h1>\n<p>My favorite editor, Neovim</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 15, 0, time.UTC),
	Description:     "My favorite editor, Neovim",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: neovim\naliases:\n  - Neovim\ntags:\n  - programming-language/vimscript\n  - programming-language/lua\n  - ide/vim\ncreated_at: 2025-03-27T14:13:15.000-06:00\ndescription: My favorite editor, Neovim\ntitle: Neovim\nupdated_at: 2025-04-11T14:49:07.000-06:00\n---\n\n# Neovim\n\nMy favorite editor, Neovim\n",
	Slug:            "ide/neovim",
	TagSlugs:        []string{"programming-language/vimscript", "programming-language/lua", "ide/vim"},
	Tags:            []*assets.Tag{&TagProgrammingLanguageVimscript, &TagProgrammingLanguageLua, &TagIdeVim},
	Title:           "Neovim",
	UpdatedAt:       time.Date(2025, time.April, 11, 14, 49, 7, 0, time.UTC),
	X:               -2.1390897984750357,
	Y:               0.42263199000223733,
	Z:               -0.21322176927978206,
}}
var TagElementsUranium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"uranium\"><a class=\"anchor permalink p-4\" href=\"#uranium\">#</a> Uranium</h1>\n<p>AtomicNumber: 92</p>\n<p>Element: Uranium</p>\n<p>Symbol: U</p>\n<p>AtomicMass: 238.029</p>\n<p>NumberofNeutrons: 146</p>\n<p>NumberofProtons: 92</p>\n<p>NumberofElectrons: 92</p>\n<p>Period: 7</p>\n<p>Group: nan</p>\n<p>Phase: solid</p>\n<p>Radioactive: yes</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Actinide</p>\n<p>AtomicRadius: nan</p>\n<p>Electronegativity: 1.38</p>\n<p>FirstIonization: 6.1941</p>\n<p>Density: 19.0</p>\n<p>MeltingPoint: 1405.15</p>\n<p>BoilingPoint: 4404.0</p>\n<p>NumberOfIsotopes: 15.0</p>\n<p>Discoverer: Peligot</p>\n<p>Year: 1841.0</p>\n<p>SpecificHeat: 0.116</p>\n<p>NumberofShells: 7</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 49, 0, time.UTC),
	Description:     "Uranium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: uranium\n\naliases:\n  - Uranium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:49.000-06:00\n\ndescription: Uranium\n\ntitle: Uranium\n\nupdated_at: 2025-03-28T20:07:42.000-06:00\n---\n\n# Uranium\n\nAtomicNumber: 92\n\nElement: Uranium\n\nSymbol: U\n\nAtomicMass: 238.029\n\nNumberofNeutrons: 146\n\nNumberofProtons: 92\n\nNumberofElectrons: 92\n\nPeriod: 7\n\nGroup: nan\n\nPhase: solid\n\nRadioactive: yes\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Actinide\n\nAtomicRadius: nan\n\nElectronegativity: 1.38\n\nFirstIonization: 6.1941\n\nDensity: 19.0\n\nMeltingPoint: 1405.15\n\nBoilingPoint: 4404.0\n\nNumberOfIsotopes: 15.0\n\nDiscoverer: Peligot\n\nYear: 1841.0\n\nSpecificHeat: 0.116\n\nNumberofShells: 7\n\nNumberofValence: nan\n",
	Slug:            "elements/uranium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Uranium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 42, 0, time.UTC),
	X:               -0.7538537549727425,
	Y:               -0.4627065432112341,
	Z:               0.47255079495572355,
}}
var TagIdeQuartus = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"quartus\"><a class=\"anchor permalink p-4\" href=\"#quartus\">#</a> Quartus</h1>\n<p>Quartus is a popular integrated development environment (IDE) for programming FPGAs.</p>\n",
	CreatedAt:       time.Date(2025, time.April, 5, 5, 39, 11, 0, time.UTC),
	Description:     "Quartus is a popular integrated development environment (IDE) for programming FPGAs.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: quartus\naliases:\n  - Quartus\ntags: []\ncreated_at: 2025-04-05T05:39:11.000-06:00\ndescription: Quartus is a popular integrated development environment (IDE) for programming FPGAs.\ntitle: Quartus\nupdated_at: 2025-04-05T05:39:33.000-06:00\n---\n# Quartus\nQuartus is a popular integrated development environment (IDE) for programming FPGAs.\n",
	Slug:            "ide/quartus",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Quartus",
	UpdatedAt:       time.Date(2025, time.April, 5, 5, 39, 33, 0, time.UTC),
	X:               -1.7701685931668392,
	Y:               -0.06931671601291844,
	Z:               0.02044603193982114,
}}
var TagIdeObsidian = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"obsidian\"><a class=\"anchor permalink p-4\" href=\"#obsidian\">#</a> Obsidian</h1>\n<p>Obsidian is a note-taking app for Markdown and LaTeX.</p>\n",
	CreatedAt:       time.Date(2025, time.April, 11, 15, 25, 51, 0, time.UTC),
	Description:     "Obsidian is a note-taking app for Markdown and LaTeX. It is a local-first app, with no online storage. Its like a integrated development environment for your mind.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: obsidian\naliases:\n  - Obsidian\ntags: []\ncreated_at: 2025-04-11T15:25:51.000-06:00\ndescription: Obsidian is a note-taking app for Markdown and LaTeX. It is a local-first app, with no online storage. Its like a integrated development environment for your mind.\ntitle: Obsidian\nupdated_at: 2025-04-12T16:02:52.000-06:00\n---\n\n# Obsidian\n\nObsidian is a note-taking app for Markdown and LaTeX.\n\n\n",
	Slug:            "ide/obsidian",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Obsidian",
	UpdatedAt:       time.Date(2025, time.April, 12, 16, 2, 52, 0, time.UTC),
	X:               -1.2791889839604744,
	Y:               -0.531344622956146,
	Z:               0.11657548803273737,
}}
var TagIdeVim = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"vim\"><a class=\"anchor permalink p-4\" href=\"#vim\">#</a> vim</h1>\n<p>vim is a text editor created by Bram Moolenaar in 1991 for UNIX systems.</p>\n",
	CreatedAt:       time.Date(2025, time.April, 11, 14, 46, 4, 0, time.UTC),
	Description:     "vim is a text editor created by Bram Moolenaar in 1991 for UNIX systems.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: vim\naliases:\n  - vim\ntags: []\ncreated_at: 2025-04-11T14:46:04.000-06:00\ndescription: vim is a text editor created by Bram Moolenaar in 1991 for UNIX systems.\ntitle: vim\nupdated_at: 2025-04-11T14:46:50.000-06:00\n---\n\n# vim\n\nvim is a text editor created by Bram Moolenaar in 1991 for UNIX systems.\n\n\n",
	Slug:            "ide/vim",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "vim",
	UpdatedAt:       time.Date(2025, time.April, 11, 14, 46, 50, 0, time.UTC),
	X:               -1.9808073304731038,
	Y:               0.28315877475030754,
	Z:               0.017361888062899122,
}}
var TagIdeVitis = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<p>Embedded software development environment for AMD FPGAs</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 15, 0, time.UTC),
	Description:     "Embedded software development environment for AMD FPGAs",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: vitis\naliases: []\ntags: []\ncreated_at: 2025-03-27T14:13:15.000-06:00\ndescription: Embedded software development environment for AMD FPGAs\ntitle: Vitis\nupdated_at: 2025-03-28T20:07:42.000-06:00\n---\n\nEmbedded software development environment for AMD FPGAs\n",
	Slug:            "ide/vitis",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Vitis",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 42, 0, time.UTC),
	X:               -1.6851940186516543,
	Y:               0.520891559466508,
	Z:               -0.09338563314080273,
}}
var TagIdeVscode = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"vscode\"><a class=\"anchor permalink p-4\" href=\"#vscode\">#</a> VSCode</h1>\n<p>Microsoft's Generally Adopted Developer Spyware.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 15, 0, time.UTC),
	Description:     "Microsoft Visual Studio Code",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: vscode\naliases:\n  - VSCode\ntags: []\ncreated_at: 2025-03-27T14:13:15.000-06:00\ndescription: Microsoft Visual Studio Code\ntitle: VSCode\nupdated_at: 2025-03-28T20:07:42.000-06:00\n---\n\n# VSCode\n\nMicrosoft's Generally Adopted Developer Spyware.\n",
	Slug:            "ide/vscode",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "VSCode",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 42, 0, time.UTC),
	X:               -1.1242306031158602,
	Y:               0.5522025860378529,
	Z:               -0.5636295060088518,
}}
var TagIdeologiesApi = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"api\"><a class=\"anchor permalink p-4\" href=\"#api\">#</a> api</h1>\n<p>An <strong>API</strong> (Application Programming Interface) is a set of rules and protocols that allow different software applications to communicate with each other.</p>\n",
	CreatedAt:       time.Date(2025, time.April, 1, 5, 55, 19, 0, time.UTC),
	Description:     "An API is a set of rules and protocols that allow different software applications to communicate with each other.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: api\naliases:\n  - api\ntags: []\ncreated_at: 2025-04-01T05:55:19.000-06:00\ndescription: An API is a set of rules and protocols that allow different software applications to communicate with each other.\ntitle: api\nupdated_at: 2025-04-01T05:55:35.000-06:00\n---\n\n# api\n\nAn **API** (Application Programming Interface) is a set of rules and protocols that allow different software applications to communicate with each other.\n",
	Slug:            "ideologies/api",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "api",
	UpdatedAt:       time.Date(2025, time.April, 1, 5, 55, 35, 0, time.UTC),
	X:               -1.7615814511453396,
	Y:               0.5013528033175585,
	Z:               -0.39671275915454046,
}}
var TagIdeologiesMagnitudeResponse = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"magnitude-response\"><a class=\"anchor permalink p-4\" href=\"#magnitude-response\">#</a> Magnitude Response</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 30, 17, 20, 21, 0, time.UTC),
	Description:     "Magnitude Response is an mathematical model of the response of a system to a change in its input.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: magnitude-response\naliases:\n  - Magnitude Response\ntags: []\ncreated_at: 2025-03-30T17:20:21.000-06:00\ndescription: Magnitude Response is an mathematical model of the response of a system to a change in its input.\ntitle: Magnitude Response\nupdated_at: 2025-03-30T17:20:38.000-06:00\n---\n\n# Magnitude Response\n",
	Slug:            "ideologies/magnitude-response",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Magnitude Response",
	UpdatedAt:       time.Date(2025, time.March, 30, 17, 20, 38, 0, time.UTC),
	X:               -0.526067743073031,
	Y:               0.6643504326471095,
	Z:               -0.07306636599810645,
}}
var TagIdeologiesLocality = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"locality-in-applications\"><a class=\"anchor permalink p-4\" href=\"#locality-in-applications\">#</a> Locality in Applications</h1>\n<p>Two types of locality</p>\n<p>Temporal locality: Recently accessed data items are likely to be accessed again soon.</p>\n<p>Spatial locality: Data items whose addresses are close to each other are likely to be accessed close in time.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 2, 34, 0, time.UTC),
	Description:     "Locality refers to the proximity of data items in memory.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: locality\naliases:\n  - Locality in Applications\ntags:\n  - ideologies/cache\ncreated_at: 2025-03-28T20:02:34.000-06:00\ndescription: Locality refers to the proximity of data items in memory.\ntitle: Locality\nupdated_at: 2025-03-30T17:18:43.000-06:00\n---\n\n# Locality in Applications\n\nTwo types of locality\n\nTemporal locality: Recently accessed data items are likely to be accessed again soon.\n\nSpatial locality: Data items whose addresses are close to each other are likely to be accessed close in time.\n",
	Slug:            "ideologies/locality",
	TagSlugs:        []string{"ideologies/cache"},
	Tags:            []*assets.Tag{&TagIdeologiesCache},
	Title:           "Locality",
	UpdatedAt:       time.Date(2025, time.March, 30, 17, 18, 43, 0, time.UTC),
	X:               -1.1384077648168112,
	Y:               0.15270573782592423,
	Z:               0.12022336520640635,
}}
var TagIdeologiesPhaseResponse = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"phase-response\"><a class=\"anchor permalink p-4\" href=\"#phase-response\">#</a> Phase Response</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 30, 17, 20, 41, 0, time.UTC),
	Description:     "Phase Response is an mathematical model of the response of a system to a change in its input in the frequency domain.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: phase-response\naliases:\n  - Phase Response\ntags: []\ncreated_at: 2025-03-30T17:20:41.000-06:00\ndescription: Phase Response is an mathematical model of the response of a system to a change in its input in the frequency domain.\ntitle: Phase Response\nupdated_at: 2025-03-30T17:20:55.000-06:00\n---\n\n# Phase Response\n",
	Slug:            "ideologies/phase-response",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Phase Response",
	UpdatedAt:       time.Date(2025, time.March, 30, 17, 20, 55, 0, time.UTC),
	X:               -0.7763080780264922,
	Y:               -0.0327506737729788,
	Z:               -0.40560919094350856,
}}
var TagFrameworkPytorch = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"pytorch\"><a class=\"anchor permalink p-4\" href=\"#pytorch\">#</a> PyTorch</h1>\n<p>PyTorch is an open-source machine learning library created by Facebook's AI Research lab.</p>\n<p>Learn more about PyTorch at <a href=\"https://pytorch.org/\">pytorch.org</a>.</p>\n",
	CreatedAt:       time.Date(2025, time.April, 11, 8, 8, 0, 0, time.UTC),
	Description:     "PyTorch is an open-source machine learning library created by Facebook's AI Research lab.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: pytorch\naliases:\n  - PyTorch\ntags: []\ncreated_at: 2025-04-11T08:08:00.000-06:00\ndescription: PyTorch is an open-source machine learning library created by Facebook's AI Research lab.\ntitle: PyTorch\nupdated_at: 2025-04-11T08:08:40.000-06:00\n---\n\n# PyTorch\n\nPyTorch is an open-source machine learning library created by Facebook's AI Research lab.\n\nLearn more about PyTorch at [pytorch.org](https://pytorch.org/).\n",
	Slug:            "framework/pytorch",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "PyTorch",
	UpdatedAt:       time.Date(2025, time.April, 11, 8, 8, 40, 0, time.UTC),
	X:               -1.7253677044079057,
	Y:               -0.13770017808926902,
	Z:               0.5288796841638995,
}}
var TagIdeologiesWindowManager = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"window-manager\"><a class=\"anchor permalink p-4\" href=\"#window-manager\">#</a> Window Manager</h1>\n<p>A <strong>window manager</strong> is a software application that manages the placement and appearance of windows on a user's desktop or laptop.</p>\n",
	CreatedAt:       time.Date(2025, time.April, 11, 14, 57, 25, 0, time.UTC),
	Description:     "A window manager is a software application that manages the placement and appearance of windows on a user's desktop or laptop.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: window-manager\naliases:\n  - Window Manager\ntags: []\ncreated_at: 2025-04-11T14:57:25.000-06:00\ndescription: A window manager is a software application that manages the placement and appearance of windows on a user's desktop or laptop.\ntitle: WM\nupdated_at: 2025-04-15T08:34:51.000-06:00\n---\n\n# Window Manager\n\nA **window manager** is a software application that manages the placement and appearance of windows on a user's desktop or laptop.\n",
	Slug:            "ideologies/window-manager",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "WM",
	UpdatedAt:       time.Date(2025, time.April, 15, 8, 34, 51, 0, time.UTC),
	X:               -1.5468980132481494,
	Y:               0.20266552696909368,
	Z:               -0.5386392636460237,
}}
var TagOsLinux = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"linux\"><a class=\"anchor permalink p-4\" href=\"#linux\">#</a> Linux</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 15, 0, time.UTC),
	Description:     "Linux is a Unix-like open-source operating system based on the Linux kernel created by Linus Torvalds.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "linux-plain",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: linux\naliases:\n  - Linux\ntags: []\ncreated_at: 2025-03-27T14:13:15.000-06:00\ndescription: Linux is a Unix-like open-source operating system based on the Linux kernel created by Linus Torvalds.\nicon: linux-plain\ntitle: Linux\nupdated_at: 2025-03-28T20:07:43.000-06:00\n---\n\n# Linux\n",
	Slug:            "os/linux",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Linux",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 43, 0, time.UTC),
	X:               -1.4327006089754966,
	Y:               -0.17960913155172942,
	Z:               -0.1341041143197777,
}}
var TagOsWindows = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"windows\"><a class=\"anchor permalink p-4\" href=\"#windows\">#</a> Windows</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 15, 0, time.UTC),
	Description:     "Microsoft's Operating System for PCs",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: windows\naliases:\n  - Windows\ntags: []\ncreated_at: 2025-03-27T14:13:15.000-06:00\ndescription: Microsoft's Operating System for PCs\ntitle: Windows\nupdated_at: 2025-03-28T20:07:43.000-06:00\n---\n\n# Windows\n",
	Slug:            "os/windows",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Windows",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 43, 0, time.UTC),
	X:               -1.2562474949549027,
	Y:               0.24793375719496108,
	Z:               -0.2545511627860512,
}}
var TagIdeologiesVimMotions = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"vim-motions-the-art-of-efficient-text-editing-and-their-widespread-adoption\"><a class=\"anchor permalink p-4\" href=\"#vim-motions-the-art-of-efficient-text-editing-and-their-widespread-adoption\">#</a> Vim Motions: The Art of Efficient Text Editing and Their Widespread Adoption</h1>\n<h2 id=\"the-power-and-philosophy-of-vim-motions\"><a class=\"anchor permalink p-4\" href=\"#the-power-and-philosophy-of-vim-motions\">#</a> The Power and Philosophy of Vim Motions</h2>\n<p>Vim motions represent a fundamentally different approach to text editing compared to conventional editors. Instead of relying on arrow keys or mouse movements, Vim provides a rich vocabulary of commands that let users express exactly where they want to go and what they want to do when they get there.</p>\n<p>The philosophy behind Vim is that your hands should never need to leave the home row of your keyboard. This dramatically increases editing speed once you've developed muscle memory for the commands. What might take several mouse clicks and keyboard combinations in other editors can often be accomplished with just a few keystrokes in Vim.</p>\n<h2 id=\"adoption-in-other-editors\"><a class=\"anchor permalink p-4\" href=\"#adoption-in-other-editors\">#</a> Adoption in Other Editors</h2>\n<p>The efficiency of Vim's motion system has led to its widespread adoption across the development ecosystem. Many modern code editors and IDEs now offer Vim emulation through extensions or built-in modes:</p>\n<p>Visual Studio Code includes a popular &ldquo;Vim&rdquo; extension that brings Vim's editing capabilities to Microsoft's editor, with over 3 million downloads. This allows developers to enjoy both VSCode's modern features and Vim's efficient editing model.</p>\n<p>JetBrains IDEs (including IntelliJ, PyCharm, and WebStorm) offer a robust &ldquo;IdeaVim&rdquo; plugin that implements Vim motions and commands within their development environments.</p>\n<p>Sublime Text features a Vintage Mode that provides basic Vim functionality, while the NeoVintageous package offers more complete Vim emulation.</p>\n<p>Even browser-based editors like CodeMirror (used by sites like CodePen and JSFiddle) and Monaco Editor (powering VS Code Web and GitHub's editor) provide Vim keybinding options.</p>\n<p>Modern terminal-based editors like Neovim and Helix have expanded on Vim's concepts, refining and extending the motion system while maintaining compatibility with traditional Vim commands.</p>\n<p>The popularity of Vim motions among developers has created an entire ecosystem of &ldquo;Vimiums&rdquo; and similar extensions for web browsers, file managers, and even music players, allowing users to navigate these applications using familiar Vim-style commands.</p>\n<p>This widespread adoption across diverse tools demonstrates the enduring value and efficiency of Vim's approach to text editing, with new generations of developers continuing to embrace these decades-old concepts.</p>\n",
	CreatedAt:       time.Date(2025, time.April, 11, 14, 44, 1, 0, time.UTC),
	Description:     "Vim motions are keyboard commands used in the Vim text editor that allow users to navigate, select, and manipulate text with speed and precision. These motions form a powerful, language-like system where commands can be combined to perform complex editing operations without ever touching the mouse.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: vim-motions\naliases:\n  - \"Vim Motions: The Art of Efficient Text Editing and Their Widespread Adoption\"\ntags:\n  - ide/neovim\n  - ide/vim\ncreated_at: 2025-04-11T14:44:01.000-06:00\ndescription: Vim motions are keyboard commands used in the Vim text editor that allow users to navigate, select, and manipulate text with speed and precision. These motions form a powerful, language-like system where commands can be combined to perform complex editing operations without ever touching the mouse.\ntitle: Vim Motions\nupdated_at: 2025-04-11T14:48:01.000-06:00\n---\n\n# Vim Motions: The Art of Efficient Text Editing and Their Widespread Adoption\n\n## The Power and Philosophy of Vim Motions\n\nVim motions represent a fundamentally different approach to text editing compared to conventional editors. Instead of relying on arrow keys or mouse movements, Vim provides a rich vocabulary of commands that let users express exactly where they want to go and what they want to do when they get there.\n\nThe philosophy behind Vim is that your hands should never need to leave the home row of your keyboard. This dramatically increases editing speed once you've developed muscle memory for the commands. What might take several mouse clicks and keyboard combinations in other editors can often be accomplished with just a few keystrokes in Vim.\n\n## Adoption in Other Editors\n\nThe efficiency of Vim's motion system has led to its widespread adoption across the development ecosystem. Many modern code editors and IDEs now offer Vim emulation through extensions or built-in modes:\n\nVisual Studio Code includes a popular \"Vim\" extension that brings Vim's editing capabilities to Microsoft's editor, with over 3 million downloads. This allows developers to enjoy both VSCode's modern features and Vim's efficient editing model.\n\nJetBrains IDEs (including IntelliJ, PyCharm, and WebStorm) offer a robust \"IdeaVim\" plugin that implements Vim motions and commands within their development environments.\n\nSublime Text features a Vintage Mode that provides basic Vim functionality, while the NeoVintageous package offers more complete Vim emulation.\n\nEven browser-based editors like CodeMirror (used by sites like CodePen and JSFiddle) and Monaco Editor (powering VS Code Web and GitHub's editor) provide Vim keybinding options.\n\nModern terminal-based editors like Neovim and Helix have expanded on Vim's concepts, refining and extending the motion system while maintaining compatibility with traditional Vim commands.\n\nThe popularity of Vim motions among developers has created an entire ecosystem of \"Vimiums\" and similar extensions for web browsers, file managers, and even music players, allowing users to navigate these applications using familiar Vim-style commands.\n\nThis widespread adoption across diverse tools demonstrates the enduring value and efficiency of Vim's approach to text editing, with new generations of developers continuing to embrace these decades-old concepts.\n",
	Slug:            "ideologies/vim-motions",
	TagSlugs:        []string{"ide/neovim", "ide/vim"},
	Tags:            []*assets.Tag{&TagIdeNeovim, &TagIdeVim},
	Title:           "Vim Motions",
	UpdatedAt:       time.Date(2025, time.April, 11, 14, 48, 1, 0, time.UTC),
	X:               -0.8790028252010644,
	Y:               0.7695347987474848,
	Z:               -0.6372097158863214,
}}
var TagProgrammingLanguageAsmMips = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"mips\"><a class=\"anchor permalink p-4\" href=\"#mips\">#</a> MIPS</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 15, 0, time.UTC),
	Description:     "MIPS Assembly is a low-level programming language for the MIPS architecture.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: asm-mips\naliases:\n  - MIPS\ntags: []\ncreated_at: 2025-03-27T14:13:15.000-06:00\ndescription: MIPS Assembly is a low-level programming language for the MIPS architecture.\ntitle: MIPS Assembly\nupdated_at: 2025-03-28T20:07:43.000-06:00\n---\n\n# MIPS\n",
	Slug:            "programming-language/asm-mips",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "MIPS Assembly",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 43, 0, time.UTC),
	X:               -1.1617838281299049,
	Y:               0.4524108381624785,
	Z:               0.31459612131908554,
}}
var TagIdeologiesFilterDesgn = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"filter-design\"><a class=\"anchor permalink p-4\" href=\"#filter-design\">#</a> Filter Design</h1>\n<p>Techniques and methodologies for designing digital and analog filters, including mathematical approaches for optimal frequency responses, FIR/IIR filter implementation with stability considerations, software tools for coefficient calculation and visualization, and real-world applications in communications, audio processing, and control systems.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 30, 17, 18, 6, 0, time.UTC),
	Description:     "Filter Design is the process of designing digital and analog filters, including mathematical approaches for optimal frequency responses, FIR/IIR filter implementation with stability considerations, software tools for coefficient calculation and visualization, and real-world applications in communications, audio processing, and control systems.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "filter",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: filter-desgn\naliases:\n  - Filter Design\ntags: []\ncreated_at: 2025-03-30T17:18:06.000-06:00\ndescription: Filter Design is the process of designing digital and analog filters, including mathematical approaches for optimal frequency responses, FIR/IIR filter implementation with stability considerations, software tools for coefficient calculation and visualization, and real-world applications in communications, audio processing, and control systems.\nicon: filter\ntitle: Filter Design\nupdated_at: 2025-03-30T18:23:38.000-06:00\n---\n\n# Filter Design\n\nTechniques and methodologies for designing digital and analog filters, including mathematical approaches for optimal frequency responses, FIR/IIR filter implementation with stability considerations, software tools for coefficient calculation and visualization, and real-world applications in communications, audio processing, and control systems.\n",
	Slug:            "ideologies/filter-desgn",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Filter Design",
	UpdatedAt:       time.Date(2025, time.March, 30, 18, 23, 38, 0, time.UTC),
	X:               -0.5243773667050874,
	Y:               -0.22258218977075292,
	Z:               -0.8114896838371097,
}}
var TagElementsSodium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"sodium\"><a class=\"anchor permalink p-4\" href=\"#sodium\">#</a> Sodium</h1>\n<p>AtomicNumber: 11</p>\n<p>Element: Sodium</p>\n<p>Symbol: Na</p>\n<p>AtomicMass: 22.99</p>\n<p>NumberofNeutrons: 12</p>\n<p>NumberofProtons: 11</p>\n<p>NumberofElectrons: 11</p>\n<p>Period: 3</p>\n<p>Group: 1.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Alkali Metal</p>\n<p>AtomicRadius: 2.2</p>\n<p>Electronegativity: 0.93</p>\n<p>FirstIonization: 5.1391</p>\n<p>Density: 0.971</p>\n<p>MeltingPoint: 371.15</p>\n<p>BoilingPoint: 1156.0</p>\n<p>NumberOfIsotopes: 7.0</p>\n<p>Discoverer: Davy</p>\n<p>Year: 1807.0</p>\n<p>SpecificHeat: 1.228</p>\n<p>NumberofShells: 3</p>\n<p>NumberofValence: 1.0</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 49, 0, time.UTC),
	Description:     "Sodium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: sodium\n\naliases:\n  - Sodium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:49.000-06:00\n\ndescription: Sodium\n\ntitle: Sodium\n\nupdated_at: 2025-03-28T20:07:41.000-06:00\n---\n\n# Sodium\n\nAtomicNumber: 11\n\nElement: Sodium\n\nSymbol: Na\n\nAtomicMass: 22.99\n\nNumberofNeutrons: 12\n\nNumberofProtons: 11\n\nNumberofElectrons: 11\n\nPeriod: 3\n\nGroup: 1.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Alkali Metal\n\nAtomicRadius: 2.2\n\nElectronegativity: 0.93\n\nFirstIonization: 5.1391\n\nDensity: 0.971\n\nMeltingPoint: 371.15\n\nBoilingPoint: 1156.0\n\nNumberOfIsotopes: 7.0\n\nDiscoverer: Davy\n\nYear: 1807.0\n\nSpecificHeat: 1.228\n\nNumberofShells: 3\n\nNumberofValence: 1.0\n",
	Slug:            "elements/sodium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Sodium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 41, 0, time.UTC),
	X:               -0.5253751974153321,
	Y:               0.01246147918922913,
	Z:               0.0023267703844330745,
}}
var TagProgrammingLanguageC = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<p>C is a general-purpose programming language.</p>\n<p>It is a multi-paradigm language that supports structured programming, subroutines, and procedural programming.</p>\n<p>It was created by Dennis Ritchie in 1972 at Bell Labs.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 15, 0, time.UTC),
	Description:     "C is a low-level general-purpose programming language.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "c-plain",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: c\naliases: []\ntags: []\ncreated_at: 2025-03-27T14:13:15.000-06:00\ndescription: C is a low-level general-purpose programming language.\nicon: c-plain\ntitle: C\nupdated_at: 2025-03-28T20:07:43.000-06:00\n---\n\nC is a general-purpose programming language.\n\nIt is a multi-paradigm language that supports structured programming, subroutines, and procedural programming.\n\nIt was created by Dennis Ritchie in 1972 at Bell Labs.\n",
	Slug:            "programming-language/c",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "C",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 43, 0, time.UTC),
	X:               -1.4987437224469176,
	Y:               0.2837054037401455,
	Z:               -0.3910392374312897,
}}
var TagElementsYttrium = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"yttrium\"><a class=\"anchor permalink p-4\" href=\"#yttrium\">#</a> Yttrium</h1>\n<p>AtomicNumber: 39</p>\n<p>Element: Yttrium</p>\n<p>Symbol: Y</p>\n<p>AtomicMass: 88.906</p>\n<p>NumberofNeutrons: 50</p>\n<p>NumberofProtons: 39</p>\n<p>NumberofElectrons: 39</p>\n<p>Period: 5</p>\n<p>Group: 3.0</p>\n<p>Phase: solid</p>\n<p>Radioactive: nan</p>\n<p>Natural: yes</p>\n<p>Metal: yes</p>\n<p>Nonmetal: nan</p>\n<p>Metalloid: nan</p>\n<p>Type: Transition Metal</p>\n<p>AtomicRadius: 2.3</p>\n<p>Electronegativity: 1.22</p>\n<p>FirstIonization: 6.2173</p>\n<p>Density: 4.47</p>\n<p>MeltingPoint: 1799.15</p>\n<p>BoilingPoint: 3609.0</p>\n<p>NumberOfIsotopes: 21.0</p>\n<p>Discoverer: Gadolin</p>\n<p>Year: 1794.0</p>\n<p>SpecificHeat: 0.298</p>\n<p>NumberofShells: 5</p>\n<p>NumberofValence: nan</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 6, 49, 0, time.UTC),
	Description:     "Yttrium",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: yttrium\n\naliases:\n  - Yttrium\n\ntags: []\n\ncreated_at: 2025-03-28T20:06:49.000-06:00\n\ndescription: Yttrium\n\ntitle: Yttrium\n\nupdated_at: 2025-03-28T20:07:42.000-06:00\n---\n\n# Yttrium\n\nAtomicNumber: 39\n\nElement: Yttrium\n\nSymbol: Y\n\nAtomicMass: 88.906\n\nNumberofNeutrons: 50\n\nNumberofProtons: 39\n\nNumberofElectrons: 39\n\nPeriod: 5\n\nGroup: 3.0\n\nPhase: solid\n\nRadioactive: nan\n\nNatural: yes\n\nMetal: yes\n\nNonmetal: nan\n\nMetalloid: nan\n\nType: Transition Metal\n\nAtomicRadius: 2.3\n\nElectronegativity: 1.22\n\nFirstIonization: 6.2173\n\nDensity: 4.47\n\nMeltingPoint: 1799.15\n\nBoilingPoint: 3609.0\n\nNumberOfIsotopes: 21.0\n\nDiscoverer: Gadolin\n\nYear: 1794.0\n\nSpecificHeat: 0.298\n\nNumberofShells: 5\n\nNumberofValence: nan\n",
	Slug:            "elements/yttrium",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Yttrium",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 42, 0, time.UTC),
	X:               -1.0404593145687584,
	Y:               -0.8485459867571217,
	Z:               0.46918995734673674,
}}
var TagProgrammingLanguageHtml = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<p>HTML (Hypertext Markup Language) is the standard markup language for creating web pages and web applications.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 19, 19, 12, 0, time.UTC),
	Description:     "HTML (Hypertext Markup Language) is the standard markup language for creating web pages and web applications.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: html\naliases: []\ntags: []\ncreated_at: 2025-03-28T19:19:12.000-06:00\ndescription: HTML (Hypertext Markup Language) is the standard markup language for creating web pages and web applications.\ntitle: HTML\nupdated_at: 2025-03-28T20:07:43.000-06:00\n---\n\nHTML (Hypertext Markup Language) is the standard markup language for creating web pages and web applications.\n",
	Slug:            "programming-language/html",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "HTML",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 43, 0, time.UTC),
	X:               -0.881819717402009,
	Y:               -0.0017812529785748432,
	Z:               -0.49684423805490185,
}}
var TagOsDarwin = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"darwin\"><a class=\"anchor permalink p-4\" href=\"#darwin\">#</a> Darwin</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 15, 0, time.UTC),
	Description:     "Apple's Operating System for Macintosh computers",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: darwin\naliases:\n  - Darwin\ntags: []\ncreated_at: 2025-03-27T14:13:15.000-06:00\ndescription: Apple's Operating System for Macintosh computers\ntitle: Darwin XOS\nupdated_at: 2025-03-28T20:07:43.000-06:00\n---\n\n# Darwin\n",
	Slug:            "os/darwin",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Darwin XOS",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 43, 0, time.UTC),
	X:               -1.8248484962674814,
	Y:               -0.10215380060770485,
	Z:               -0.6303405481009181,
}}
var TagProgrammingLanguageCpp = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<p>C++ is a high-performance, general-purpose programming language developed by <strong>Bjarne Stroustrup</strong> in the early 1980s as an extension of C, incorporating object-oriented features while maintaining efficiency and low-level control.</p>\n<p>Over the years, it has evolved with modern standards like C++11, C++14, C++17, and C++20, enhancing safety, usability, and performance.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 15, 0, time.UTC),
	Description:     "C++ is a high-performance, general-purpose programming language developed by Bjarne Stroustrup in the early 1980s as an extension of C, incorporating object-oriented features while maintaining efficiency and low-level control.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "cplusplus-plain",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: cpp\naliases: []\ntags:\n  - programming-language\ncreated_at: 2025-03-27T14:13:15.000-06:00\ndescription: C++ is a high-performance, general-purpose programming language developed by Bjarne Stroustrup in the early 1980s as an extension of C, incorporating object-oriented features while maintaining efficiency and low-level control.\nicon: cplusplus-plain\ntitle: C++\nupdated_at: 2025-03-28T20:07:43.000-06:00\n---\n\nC++ is a high-performance, general-purpose programming language developed by **Bjarne Stroustrup** in the early 1980s as an extension of C, incorporating object-oriented features while maintaining efficiency and low-level control.\n\nOver the years, it has evolved with modern standards like C++11, C++14, C++17, and C++20, enhancing safety, usability, and performance.\n",
	Slug:            "programming-language/cpp",
	TagSlugs:        []string{"programming-language"},
	Tags:            []*assets.Tag{},
	Title:           "C++",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 43, 0, time.UTC),
	X:               -1.678025284907262,
	Y:               0.2582285381206222,
	Z:               -0.5049624620188369,
}}
var TagIdeologiesOpenSource = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"open-source\"><a class=\"anchor permalink p-4\" href=\"#open-source\">#</a> Open Source</h1>\n<p><strong>Open Source</strong> refers to a collaborative and community-driven approach to software development, where the source code is freely available and can be modified and distributed by anyone.</p>\n",
	CreatedAt:       time.Date(2025, time.April, 1, 5, 55, 49, 0, time.UTC),
	Description:     "Open Source is a collaborative and community-driven approach to software development, where the source code is freely available and can be modified and distributed by anyone.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: open-source\naliases:\n  - Open Source\ntags: []\ncreated_at: 2025-04-01T05:55:49.000-06:00\ndescription: Open Source is a collaborative and community-driven approach to software development, where the source code is freely available and can be modified and distributed by anyone.\ntitle: Open Source\nupdated_at: 2025-04-01T05:55:54.000-06:00\n---\n\n# Open Source\n\n**Open Source** refers to a collaborative and community-driven approach to software development, where the source code is freely available and can be modified and distributed by anyone.\n",
	Slug:            "ideologies/open-source",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Open Source",
	UpdatedAt:       time.Date(2025, time.April, 1, 5, 55, 54, 0, time.UTC),
	X:               -0.7315589037423023,
	Y:               -0.017720503585710257,
	Z:               0.10180050504034874,
}}
var TagProgrammingLanguageCsharp = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"c\"><a class=\"anchor permalink p-4\" href=\"#c\">#</a> C#</h1>\n<p>C# is a modern, object-oriented programming language developed by Microsoft in the early 2000s as part of the .NET framework, designed to be simple, type-safe, and scalable.</p>\n<p>It integrates elements from C++ and Java, providing automatic memory management via garbage collection and a strong type system to reduce common programming errors.</p>\n<p>It supports features like asynchronous programming with async/await, LINQ for data manipulation, and advanced object-oriented principles, making it well-suited for large-scale software development.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 16, 0, time.UTC),
	Description:     "C# is a modern, object-oriented programming language developed by Microsoft in the early 2000s as part of the .NET framework, designed to be simple, type-safe, and scalable.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "csharp-plain",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: csharp\naliases:\n  - C#\ntags:\n  - programming-language\ncreated_at: 2025-03-27T14:13:16.000-06:00\ndescription: C# is a modern, object-oriented programming language developed by Microsoft in the early 2000s as part of the .NET framework, designed to be simple, type-safe, and scalable.\nicon: csharp-plain\ntitle: C#\nupdated_at: 2025-03-28T20:07:43.000-06:00\n---\n\n# C#\n\nC# is a modern, object-oriented programming language developed by Microsoft in the early 2000s as part of the .NET framework, designed to be simple, type-safe, and scalable.\n\nIt integrates elements from C++ and Java, providing automatic memory management via garbage collection and a strong type system to reduce common programming errors.\n\nIt supports features like asynchronous programming with async/await, LINQ for data manipulation, and advanced object-oriented principles, making it well-suited for large-scale software development.\n",
	Slug:            "programming-language/csharp",
	TagSlugs:        []string{"programming-language"},
	Tags:            []*assets.Tag{},
	Title:           "C#",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 43, 0, time.UTC),
	X:               -1.131040186456471,
	Y:               -0.4198808418367792,
	Z:               -0.5934361966545565,
}}
var TagProgrammingLanguageLatex = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<p>LaTeX is a document markup language.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 16, 0, time.UTC),
	Description:     "LaTeX is a document markup language.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: latex\naliases: []\ntags: []\ncreated_at: 2025-03-27T14:13:16.000-06:00\ndescription: LaTeX is a document markup language.\ntitle: LaTeX\nupdated_at: 2025-03-28T20:07:43.000-06:00\n---\n\nLaTeX is a document markup language.\n",
	Slug:            "programming-language/latex",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "LaTeX",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 43, 0, time.UTC),
	X:               -1.6841120099242675,
	Y:               0.6509715250903654,
	Z:               0.10203514948867054,
}}
var TagIdeVivado = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"vivado\"><a class=\"anchor permalink p-4\" href=\"#vivado\">#</a> Vivado</h1>\n<p>Embedded hardware design and verification tool for AMD FPGAs.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 15, 0, time.UTC),
	Description:     "Xilinx Vivado IDE",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: vivado\naliases:\n  - Vivado\ntags: []\ncreated_at: 2025-03-27T14:13:15.000-06:00\ndescription: Xilinx Vivado IDE\ntitle: Vivado\nupdated_at: 2025-03-28T20:07:42.000-06:00\n---\n\n# Vivado\n\nEmbedded hardware design and verification tool for AMD FPGAs.\n",
	Slug:            "ide/vivado",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Vivado",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 42, 0, time.UTC),
	X:               -1.013241915130806,
	Y:               0.5788806119505463,
	Z:               -0.8132524458746768,
}}
var TagProgrammingLanguageJavascript = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<p>JavaScript is a high-level, interpreted programming language that is primarily used for web development.</p>\n<p>It is a versatile language that can be used both on the client-side (in the browser) and on the server-side (with Node.js).</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 16, 0, time.UTC),
	Description:     "JavaScript is a high-level, interpreted programming language that is primarily used for web development.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "javascript-plain",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: javascript\naliases: []\ntags: []\ncreated_at: 2025-03-27T14:13:16.000-06:00\ndescription: JavaScript is a high-level, interpreted programming language that is primarily used for web development.\nicon: javascript-plain\ntitle: JavaScript\nupdated_at: 2025-03-28T20:07:43.000-06:00\n---\n\nJavaScript is a high-level, interpreted programming language that is primarily used for web development.\n\nIt is a versatile language that can be used both on the client-side (in the browser) and on the server-side (with Node.js).\n",
	Slug:            "programming-language/javascript",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "JavaScript",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 43, 0, time.UTC),
	X:               -1.5284354823547173,
	Y:               0.19434941572487474,
	Z:               -0.4013333927741708,
}}
var TagProgrammingLanguageProtobuf = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"protobuf\"><a class=\"anchor permalink p-4\" href=\"#protobuf\">#</a> Protobuf</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 16, 0, time.UTC),
	Description:     "Protobuf is a language-neutral, platform-neutral, extensible mechanism for serializing structured data.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: protobuf\naliases:\n  - Protobuf\ntags: []\ncreated_at: 2025-03-27T14:13:16.000-06:00\ndescription: Protobuf is a language-neutral, platform-neutral, extensible mechanism for serializing structured data.\ntitle: Protobuf\nupdated_at: 2025-03-28T20:07:43.000-06:00\n---\n\n# Protobuf\n",
	Slug:            "programming-language/protobuf",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Protobuf",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 43, 0, time.UTC),
	X:               -1.6410867105231755,
	Y:               -0.3219062370060938,
	Z:               -0.15191815224259703,
}}
var TagProgrammingLanguageNix = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<p>Nix is a purely functional package manager and build system designed for reproducibility, reliability, and declarative system configuration.</p>\n<p>Created in 2003 by Eelco Dolstra, Nix ensures package management without side effects by using a unique store and dependency isolation.</p>\n<p>It enables users to define entire system configurations using the Nix Expression Language, allowing for deterministic builds and rollback capabilities.</p>\n<p>Nix is widely used in the NixOS Linux distribution, where it provides atomic upgrades, declarative package management, and sandboxed builds.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 16, 0, time.UTC),
	Description:     "Nix is a purely functional package manager and build system designed for reproducibility, reliability, and declarative system configuration.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: nix\naliases: []\ntags: []\ncreated_at: 2025-03-27T14:13:16.000-06:00\ndescription: Nix is a purely functional package manager and build system designed for reproducibility, reliability, and declarative system configuration.\ntitle: Nix\nupdated_at: 2025-03-28T20:07:43.000-06:00\n---\n\nNix is a purely functional package manager and build system designed for reproducibility, reliability, and declarative system configuration.\n\nCreated in 2003 by Eelco Dolstra, Nix ensures package management without side effects by using a unique store and dependency isolation.\n\nIt enables users to define entire system configurations using the Nix Expression Language, allowing for deterministic builds and rollback capabilities.\n\nNix is widely used in the NixOS Linux distribution, where it provides atomic upgrades, declarative package management, and sandboxed builds.\n",
	Slug:            "programming-language/nix",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Nix",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 43, 0, time.UTC),
	X:               -1.3747555225889272,
	Y:               0.49094790754147005,
	Z:               -0.40698525797903756,
}}
var TagProgrammingLanguageMatlab = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<p>MATLAB (Matrix Laboratory) is a high-level programming language and computing environment developed by MathWorks, primarily used for numerical computing, data analysis, and algorithm development.</p>\n<p>It supports matrix operations, signal processing, machine learning, and control systems design, making it a preferred choice for system design in academia and industry.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 16, 0, time.UTC),
	Description:     "MATLAB (Matrix Laboratory) is a high-level programming language and computing environment developed by MathWorks.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: matlab\naliases: []\ntags: []\ncreated_at: 2025-03-27T14:13:16.000-06:00\ndescription: MATLAB (Matrix Laboratory) is a high-level programming language and computing environment developed by MathWorks.\ntitle: Matlab\nupdated_at: 2025-03-28T20:07:43.000-06:00\n---\n\nMATLAB (Matrix Laboratory) is a high-level programming language and computing environment developed by MathWorks, primarily used for numerical computing, data analysis, and algorithm development.\n\nIt supports matrix operations, signal processing, machine learning, and control systems design, making it a preferred choice for system design in academia and industry.\n",
	Slug:            "programming-language/matlab",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Matlab",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 43, 0, time.UTC),
	X:               -0.867689912010192,
	Y:               0.36859838527670075,
	Z:               -0.1608564289053926,
}}
var TagProgrammingLanguageRust = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h2 id=\"rust\"><a class=\"anchor permalink p-4\" href=\"#rust\">#</a> Rust</h2>\n<p>Rust is a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 16, 0, time.UTC),
	Description:     "Rust is a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread & memory safety.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: rust\naliases: []\ntags: []\ncreated_at: 2025-03-27T14:13:16.000-06:00\ndescription: Rust is a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread & memory safety.\ntitle: Rust\nupdated_at: 2025-03-28T20:07:43.000-06:00\n---\n\n## Rust\n\nRust is a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety.\n",
	Slug:            "programming-language/rust",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Rust",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 43, 0, time.UTC),
	X:               -1.1011603195371364,
	Y:               0.015754747269053015,
	Z:               -0.155465646829689,
}}
var TagProgrammingLanguageJava = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<p>Java is a high-level, object-oriented programming language developed by Sun Microsystems and released in 1995. Known for its &ldquo;write once, run anywhere&rdquo; philosophy, Java applications run on the Java Virtual Machine (JVM), making them platform-independent. It features automatic memory management via garbage collection, strong static typing, and an extensive standard library that supports networking, concurrency, and database interaction. Java is widely used for enterprise applications, web development (Spring framework), mobile development (Android), cloud computing, and large-scale distributed systems. Its ecosystem includes robust tools such as Maven and Gradle for build automation, JUnit for testing, and frameworks like Hibernate for database management. Java remains a dominant language in the software industry due to its scalability, security, and performance.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 16, 0, time.UTC),
	Description:     "Java is a high-level, object-oriented programming language developed by Sun Microsystems and released in 1995.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "java-plain",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: java\naliases: []\ntags:\n  - programming-language\ncreated_at: 2025-03-27T14:13:16.000-06:00\ndescription: Java is a high-level, object-oriented programming language developed by Sun Microsystems and released in 1995.\nicon: java-plain\ntitle: Java\nupdated_at: 2025-03-28T20:07:43.000-06:00\n---\n\nJava is a high-level, object-oriented programming language developed by Sun Microsystems and released in 1995. Known for its \"write once, run anywhere\" philosophy, Java applications run on the Java Virtual Machine (JVM), making them platform-independent. It features automatic memory management via garbage collection, strong static typing, and an extensive standard library that supports networking, concurrency, and database interaction. Java is widely used for enterprise applications, web development (Spring framework), mobile development (Android), cloud computing, and large-scale distributed systems. Its ecosystem includes robust tools such as Maven and Gradle for build automation, JUnit for testing, and frameworks like Hibernate for database management. Java remains a dominant language in the software industry due to its scalability, security, and performance.\n",
	Slug:            "programming-language/java",
	TagSlugs:        []string{"programming-language"},
	Tags:            []*assets.Tag{},
	Title:           "Java",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 43, 0, time.UTC),
	X:               -1.3122464237494254,
	Y:               0.06758756418969747,
	Z:               -0.22723626067994573,
}}
var TagIdeologiesCache = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h2 id=\"faq\"><a class=\"anchor permalink p-4\" href=\"#faq\">#</a> FAQ</h2>\n<p>What is the difference between write-allocate and write-no-allocate caches?</p>\n<p>When handling write misses (i.e., when the processor attempts to write to a memory location that is not currently in the cache).</p>\n<p>Write-allocate (also known as fetch-on-write):</p>\n<p>When a write miss occurs, the cache controller first fetches the corresponding block from the main memory and brings it into the cache.</p>\n<p>The write operation is then performed on the cached block.</p>\n<p>This policy is based on the assumption that if the processor is writing to a memory location, it is likely to access that location again in the near future.</p>\n<p>Write-allocate caches prioritize reducing future read misses by bringing the block into the cache.</p>\n<p>Write-no-allocate (also known as write-around or write-through):</p>\n<p>When a write miss occurs, the cache controller directly writes the data to the main memory without bringing the block into the cache.</p>\n<p>The cache is not updated with the new data.</p>\n<p>This policy avoids the overhead of fetching the block from memory and is beneficial when the written data is not expected to be accessed again soon.</p>\n<p>Write-no-allocate caches prioritize reducing the penalty of write misses by avoiding the additional memory access to fetch the block.</p>\n<h2 id=\"what-is-the-motivation-in-having-separate-instruction-and-data-caches\"><a class=\"anchor permalink p-4\" href=\"#what-is-the-motivation-in-having-separate-instruction-and-data-caches\">#</a> What is the motivation in having separate instruction and data caches?</h2>\n<ol>\n<li>Avoiding cache interference:</li>\n</ol>\n<p>Instructions and data compete for the same cache space in a unified cache. By separating them, interference between instruction and data accesses is eliminated. Instructions won't evict data and vice versa. 2. Allowing simultaneous access: With separate caches, the processor can fetch instructions and load/store data in the same cycle. This increases parallelism and performance compared to a unified cache where instructions and data accesses would be serialized. 3. Optimizing each cache independently: Instructions and data have different access patterns and locality characteristics. By using separate caches, each can be optimized based on their usage. For example: Instruction caches are typically read-only, so no write ports are needed. Data caches need to support both reads and writes. Instruction caches may use a larger block size than data caches to exploit spatial locality of code. The replacement policy can be tuned differently for each cache based on access patterns. 4. Simplifying cache coherency: With a unified cache, cache coherency is complicated by the need to keep instruction and data accesses coherent with respect to each other. Having separate caches simplifies the coherence mechanisms. 5. Security: Separating instructions and data provides a layer of protection against some security exploits that rely on the processor executing data or modifying instructions. – Why not just double the L1 cache size</p>\n<p>Doubling the size of the L1 cache instead of having separate instruction and data caches is a valid design option, but there are several reasons why most modern processors opt for the split cache architecture:</p>\n<ol start=\"2\">\n<li>Diminishing returns on cache size:</li>\n</ol>\n<p>Increasing the cache size provides diminishing performance returns due to the principle of locality. Doubling the cache size does not double the hit rate. The performance benefit from splitting the cache into instruction and data is often greater than simply doubling the size. 2. Increased latency: A larger cache typically has a longer access time due to the increased complexity of the addressing logic and the physical distance the signals need to travel. This can negate some of the benefits of the increased hit rate. Keeping each cache smaller by splitting them helps maintain low latency. 3. Power consumption: Larger caches consume more power, both in terms of leakage and dynamic power per access. Splitting the cache allows each one to be smaller and more power-efficient.4. Optimization limitations: As mentioned before, instructions and data have different characteristics. With a unified cache, any optimizations need to be a compromise between the two. Splitting the cache allows each to be optimized independently. 5. Pipeline balance: Fetching instructions and accessing data are typically separate stages in the processor pipeline. Having separate caches allows these stages to proceed in parallel without contention, providing a more balanced pipeline. 6. Cost: While the total cache size might be the same, having two separate caches does introduce some duplication in terms of the addressing logic and the peripheral circuitry. This makes the split cache design slightly more expensive in terms of chip area.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 20, 3, 41, 0, time.UTC),
	Description:     "Computer Caches",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: cache\naliases: []\ntags: []\ncreated_at: 2025-03-28T20:03:41.000-06:00\ndescription: Computer Caches\ntitle: Cache\nupdated_at: 2025-03-30T17:21:04.000-06:00\n---\n\n## FAQ\n\nWhat is the difference between write-allocate and write-no-allocate caches?\n\nWhen handling write misses (i.e., when the processor attempts to write to a memory location that is not currently in the cache).\n\nWrite-allocate (also known as fetch-on-write):\n\nWhen a write miss occurs, the cache controller first fetches the corresponding block from the main memory and brings it into the cache.\n\nThe write operation is then performed on the cached block.\n\nThis policy is based on the assumption that if the processor is writing to a memory location, it is likely to access that location again in the near future.\n\nWrite-allocate caches prioritize reducing future read misses by bringing the block into the cache.\n\nWrite-no-allocate (also known as write-around or write-through):\n\nWhen a write miss occurs, the cache controller directly writes the data to the main memory without bringing the block into the cache.\n\nThe cache is not updated with the new data.\n\nThis policy avoids the overhead of fetching the block from memory and is beneficial when the written data is not expected to be accessed again soon.\n\nWrite-no-allocate caches prioritize reducing the penalty of write misses by avoiding the additional memory access to fetch the block.\n\n## What is the motivation in having separate instruction and data caches?\n\n1. Avoiding cache interference:\n\nInstructions and data compete for the same cache space in a unified cache. By separating them, interference between instruction and data accesses is eliminated. Instructions won't evict data and vice versa. 2. Allowing simultaneous access: With separate caches, the processor can fetch instructions and load/store data in the same cycle. This increases parallelism and performance compared to a unified cache where instructions and data accesses would be serialized. 3. Optimizing each cache independently: Instructions and data have different access patterns and locality characteristics. By using separate caches, each can be optimized based on their usage. For example: Instruction caches are typically read-only, so no write ports are needed. Data caches need to support both reads and writes. Instruction caches may use a larger block size than data caches to exploit spatial locality of code. The replacement policy can be tuned differently for each cache based on access patterns. 4. Simplifying cache coherency: With a unified cache, cache coherency is complicated by the need to keep instruction and data accesses coherent with respect to each other. Having separate caches simplifies the coherence mechanisms. 5. Security: Separating instructions and data provides a layer of protection against some security exploits that rely on the processor executing data or modifying instructions. – Why not just double the L1 cache size\n\nDoubling the size of the L1 cache instead of having separate instruction and data caches is a valid design option, but there are several reasons why most modern processors opt for the split cache architecture:\n\n2. Diminishing returns on cache size:\n\nIncreasing the cache size provides diminishing performance returns due to the principle of locality. Doubling the cache size does not double the hit rate. The performance benefit from splitting the cache into instruction and data is often greater than simply doubling the size. 2. Increased latency: A larger cache typically has a longer access time due to the increased complexity of the addressing logic and the physical distance the signals need to travel. This can negate some of the benefits of the increased hit rate. Keeping each cache smaller by splitting them helps maintain low latency. 3. Power consumption: Larger caches consume more power, both in terms of leakage and dynamic power per access. Splitting the cache allows each one to be smaller and more power-efficient.4. Optimization limitations: As mentioned before, instructions and data have different characteristics. With a unified cache, any optimizations need to be a compromise between the two. Splitting the cache allows each to be optimized independently. 5. Pipeline balance: Fetching instructions and accessing data are typically separate stages in the processor pipeline. Having separate caches allows these stages to proceed in parallel without contention, providing a more balanced pipeline. 6. Cost: While the total cache size might be the same, having two separate caches does introduce some duplication in terms of the addressing logic and the peripheral circuitry. This makes the split cache design slightly more expensive in terms of chip area.\n",
	Slug:            "ideologies/cache",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Cache",
	UpdatedAt:       time.Date(2025, time.March, 30, 17, 21, 4, 0, time.UTC),
	X:               0.7293848134370208,
	Y:               -0.3863716164499376,
	Z:               -0.4487236563008602,
}}
var TagIdeologiesAbi = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"application-binary-interface-abi\"><a class=\"anchor permalink p-4\" href=\"#application-binary-interface-abi\">#</a> Application Binary Interface (ABI)</h1>\n<p>An <strong>Application Binary Interface (ABI)</strong> is a specification that defines the low-level interface between an application (or library) and the operating system (or another application). <strong>ABIs</strong> ensure compatibility between different software components, allowing them to work together seamlessly.</p>\n<h2 id=\"key-aspects-of-abis\"><a class=\"anchor permalink p-4\" href=\"#key-aspects-of-abis\">#</a> Key Aspects of ABIs</h2>\n<p><strong>ABIs</strong> cover various aspects of a software system, including:</p>\n<ol>\n<li><strong>Calling Convention</strong>: The standard method for calling functions, including how arguments are passed, registers are used, and how the call stack is maintained.</li>\n<li><strong>Data Representation</strong>: Defines the size, layout, and alignment of basic data types and structures used by the application.</li>\n<li><strong>System Calls</strong>: The interface that allows an application to request services from the kernel or operating system.</li>\n<li><strong>Binary Format</strong>: Specifies the format for executable files and shared libraries, such as ELF (Executable and Linkable Format) on Unix-like systems or PE (Portable Executable) on Windows.</li>\n<li><strong>Name Mangling</strong>: Describes how function and variable names are encoded in binary files to support features like function overloading and namespaces.</li>\n</ol>\n<h2 id=\"importance-of-abis\"><a class=\"anchor permalink p-4\" href=\"#importance-of-abis\">#</a> Importance of ABIs</h2>\n<p>ABIs play a crucial role in ensuring compatibility between different software components:</p>\n<ul>\n<li>They allow applications to use shared libraries without needing access to their source code.</li>\n<li>They enable developers to write applications in different programming languages that can still interact with each other.</li>\n<li>They simplify porting software across different platforms by providing a consistent interface for interaction.</li>\n</ul>\n<h2 id=\"examples-of-abis\"><a class=\"anchor permalink p-4\" href=\"#examples-of-abis\">#</a> Examples of ABIs</h2>\n<p>Some well-known examples of ABIs include:</p>\n<ul>\n<li><strong>System V ABI</strong>: A widely-used ABI for Unix-like systems that defines calling conventions, data representation, and binary formats for multiple processor architectures.</li>\n<li><strong>Microsoft x64 ABI</strong>: An <strong>ABI</strong> used on Windows operating systems for 64-bit x86 processors.</li>\n<li><strong>PowerPC ABI</strong>: An <strong>ABI</strong> designed for PowerPC processors, used in various systems such as IBM's AIX and classic Mac OS.</li>\n<li><strong>ARM ABI</strong>: An <strong>ABI</strong> for ARM processors, used in many embedded systems and mobile devices.</li>\n</ul>\n<h2 id=\"conclusion\"><a class=\"anchor permalink p-4\" href=\"#conclusion\">#</a> Conclusion</h2>\n<p>In summary, an Application Binary Interface (<strong>ABI</strong>) is a crucial component of a software system that ensures compatibility and seamless interaction between different software components. By defining calling conventions, data representation, system calls, binary formats, and name mangling, <strong>ABIs</strong> establish a consistent interface that enables applications to work together effectively.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 30, 17, 23, 8, 0, time.UTC),
	Description:     "Application Binary Interface (ABI) is a specification that defines the low-level interface between an application (or library) and the operating system (or another application).",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: abi\naliases:\n  - Application Binary Interface (ABI)\ntags: []\ncreated_at: 2025-03-30T17:23:08.000-06:00\ndescription: Application Binary Interface (ABI) is a specification that defines the low-level interface between an application (or library) and the operating system (or another application).\ntitle: ABI\nupdated_at: 2025-04-05T05:37:33.000-06:00\n---\n\n# Application Binary Interface (ABI)\n\nAn **Application Binary Interface (ABI)** is a specification that defines the low-level interface between an application (or library) and the operating system (or another application). **ABIs** ensure compatibility between different software components, allowing them to work together seamlessly.\n\n## Key Aspects of ABIs\n\n**ABIs** cover various aspects of a software system, including:\n\n1. **Calling Convention**: The standard method for calling functions, including how arguments are passed, registers are used, and how the call stack is maintained.\n2. **Data Representation**: Defines the size, layout, and alignment of basic data types and structures used by the application.\n3. **System Calls**: The interface that allows an application to request services from the kernel or operating system.\n4. **Binary Format**: Specifies the format for executable files and shared libraries, such as ELF (Executable and Linkable Format) on Unix-like systems or PE (Portable Executable) on Windows.\n5. **Name Mangling**: Describes how function and variable names are encoded in binary files to support features like function overloading and namespaces.\n\n## Importance of ABIs\n\nABIs play a crucial role in ensuring compatibility between different software components:\n\n- They allow applications to use shared libraries without needing access to their source code.\n- They enable developers to write applications in different programming languages that can still interact with each other.\n- They simplify porting software across different platforms by providing a consistent interface for interaction.\n\n## Examples of ABIs\n\nSome well-known examples of ABIs include:\n\n- **System V ABI**: A widely-used ABI for Unix-like systems that defines calling conventions, data representation, and binary formats for multiple processor architectures.\n- **Microsoft x64 ABI**: An **ABI** used on Windows operating systems for 64-bit x86 processors.\n- **PowerPC ABI**: An **ABI** designed for PowerPC processors, used in various systems such as IBM's AIX and classic Mac OS.\n- **ARM ABI**: An **ABI** for ARM processors, used in many embedded systems and mobile devices.\n\n## Conclusion\n\nIn summary, an Application Binary Interface (**ABI**) is a crucial component of a software system that ensures compatibility and seamless interaction between different software components. By defining calling conventions, data representation, system calls, binary formats, and name mangling, **ABIs** establish a consistent interface that enables applications to work together effectively.\n",
	Slug:            "ideologies/abi",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "ABI",
	UpdatedAt:       time.Date(2025, time.April, 5, 5, 37, 33, 0, time.UTC),
	X:               -0.07174013540644114,
	Y:               -0.4955015076175504,
	Z:               0.45707246012264635,
}}
var TagProgrammingLanguageSql = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"sql\"><a class=\"anchor permalink p-4\" href=\"#sql\">#</a> SQL</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 16, 0, time.UTC),
	Description:     "SQL is a language for managing data in relational databases.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: sql\naliases:\n  - SQL\ntags: []\ncreated_at: 2025-03-27T14:13:16.000-06:00\ndescription: SQL is a language for managing data in relational databases.\ntitle: SQL\nupdated_at: 2025-03-28T20:07:43.000-06:00\n---\n\n# SQL\n",
	Slug:            "programming-language/sql",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "SQL",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 43, 0, time.UTC),
	X:               -1.6273007004372122,
	Y:               0.438060052707587,
	Z:               -0.3897835332669768,
}}
var TagProgrammingLanguageLua = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<p>Lua is a lightweight, high-level, and embeddable scripting language designed for flexibility and efficiency. Created in 1993 by a team at PUC-Rio in Brazil, Lua is known for its simple syntax, fast execution speed, and ease of integration with other languages, making it widely used in game development, embedded systems, and scripting applications. It features dynamic typing, automatic memory management via garbage collection, and a powerful table-based data structure that supports object-oriented and functional programming paradigms. Lua is often embedded in larger software applications, such as game engines like Unity and Corona, as well as networking and automation tools. Its small footprint and performance efficiency make it a popular choice for applications requiring fast execution and low resource consumption.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 16, 0, time.UTC),
	Description:     "Lua is a lightweight, high-level, and embeddable scripting language designed for flexibility and efficiency.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "lua-plain",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: lua\naliases: []\ntags:\n  - programming-language\ncreated_at: 2025-03-27T14:13:16.000-06:00\ndescription: Lua is a lightweight, high-level, and embeddable scripting language designed for flexibility and efficiency.\nicon: lua-plain\ntitle: Lua\nupdated_at: 2025-03-28T20:07:43.000-06:00\n---\n\nLua is a lightweight, high-level, and embeddable scripting language designed for flexibility and efficiency. Created in 1993 by a team at PUC-Rio in Brazil, Lua is known for its simple syntax, fast execution speed, and ease of integration with other languages, making it widely used in game development, embedded systems, and scripting applications. It features dynamic typing, automatic memory management via garbage collection, and a powerful table-based data structure that supports object-oriented and functional programming paradigms. Lua is often embedded in larger software applications, such as game engines like Unity and Corona, as well as networking and automation tools. Its small footprint and performance efficiency make it a popular choice for applications requiring fast execution and low resource consumption.\n",
	Slug:            "programming-language/lua",
	TagSlugs:        []string{"programming-language"},
	Tags:            []*assets.Tag{},
	Title:           "Lua",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 43, 0, time.UTC),
	X:               -1.2601303774277783,
	Y:               0.8055625649454136,
	Z:               -0.266293099908259,
}}
var TagProgrammingLanguageVimscript = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"vimscript\"><a class=\"anchor permalink p-4\" href=\"#vimscript\">#</a> Vimscript</h1>\n<p>Vimscript is a scripting language for the Vim text editor created by Bram Moolenaar.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 16, 0, time.UTC),
	Description:     "Vimscript is a scripting language for the Vim text editor created by Bram Moolenaar.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: vimscript\naliases:\n  - Vimscript\ntags: []\ncreated_at: 2025-03-27T14:13:16.000-06:00\ndescription: Vimscript is a scripting language for the Vim text editor created by Bram Moolenaar.\ntitle: Vimscript\nupdated_at: 2025-03-28T20:07:43.000-06:00\n---\n\n# Vimscript\n\nVimscript is a scripting language for the Vim text editor created by Bram Moolenaar.\n",
	Slug:            "programming-language/vimscript",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Vimscript",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 43, 0, time.UTC),
	X:               -2.238823776428296,
	Y:               0.3273768445954619,
	Z:               -0.024565052817092398,
}}
var TagIdeCodeComposer = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"code-composer\"><a class=\"anchor permalink p-4\" href=\"#code-composer\">#</a> Code Composer</h1>\n<p>Texas Instruments&rsquo; Code Composer Studio (CCS) is a powerful integrated development environment (IDE) specifically designed for TI's microcontrollers and embedded processors. Based on my research, here's a detailed overview of this development platform:</p>\n<h2 id=\"core-functionality\"><a class=\"anchor permalink p-4\" href=\"#core-functionality\">#</a> Core Functionality</h2>\n<p>Code Composer Studio is &ldquo;an integrated development environment (IDE) for TI's microcontrollers and processors&rdquo; that provides a complete suite of tools for embedded application development. It supports TI's entire microcontroller and embedded processor portfolio, including Arm-based microcontrollers, digital signal processors (DSPs), and various specialized chips.</p>\n<h2 id=\"key-components-and-features\"><a class=\"anchor permalink p-4\" href=\"#key-components-and-features\">#</a> Key Components and Features</h2>\n<h3 id=\"development-tools\"><a class=\"anchor permalink p-4\" href=\"#development-tools\">#</a> Development Tools</h3>\n<ul>\n<li><strong>Optimizing C/C++ Compiler</strong>: CCS includes highly optimized compilers tailored for TI devices, with the TI Arm Clang compiler being particularly notable for &ldquo;exceptional code size for TI Arm-based microcontrollers&rdquo; through features like link-time optimization.</li>\n<li><strong>Source Code Editor</strong>: Provides comprehensive code editing capabilities with syntax highlighting and code completion.</li>\n<li><strong>Project Build Environment</strong>: Manages project settings, dependencies, and build configurations.</li>\n<li><strong>Debugger</strong>: Offers robust debugging capabilities for tracking down issues in embedded applications.</li>\n<li><strong>Profiler</strong>: Helps optimize application performance by identifying bottlenecks.</li>\n</ul>\n<h3 id=\"advanced-features\"><a class=\"anchor permalink p-4\" href=\"#advanced-features\">#</a> Advanced Features</h3>\n<ol>\n<li>\n<p><strong>SysConfig</strong>: This is &ldquo;an intuitive graphical user interface for configuring pins, peripherals, radios, software stacks, RTOS, clock tree and other components&rdquo; that automatically detects and resolves conflicts to accelerate development.</p>\n</li>\n<li>\n<p><strong>EnergyTrace™</strong>: A specialized &ldquo;power analyzer tool for Code Composer Studio that measures and displays the energy profile of an application and helps optimize it for ultra-low-power consumption&rdquo;. This is particularly valuable for battery-powered applications.</p>\n</li>\n<li>\n<p><strong>Advanced Debugging</strong>: CCS provides multiple trace capabilities, including:</p>\n<ul>\n<li>Core Trace: Records program execution history</li>\n<li>EnergyTrace™: Monitors power consumption</li>\n<li>Runtime Object View: For RTOS object status monitoring</li>\n</ul>\n</li>\n<li>\n<p><strong>Optimization Options</strong>: The compiler offers multiple optimization levels, from basic (-O0) to highly aggressive (-Ofast), with specialized options for:</p>\n<ul>\n<li>Size optimization (-Os, -Oz)</li>\n<li>Performance optimization (-O2, -O3)</li>\n<li>Debug-friendly optimization (-Og)</li>\n<li>Link-time optimization (LTO)</li>\n</ul>\n</li>\n<li>\n<p><strong>Resource Explorer</strong>: Provides quick access to examples, training materials, and documentation relevant to the target device.</p>\n</li>\n<li>\n<p><strong>Automation</strong>: Includes &ldquo;a complete scripting environment allowing for the automation of tasks such as testing and performance benchmarking&rdquo;.</p>\n</li>\n</ol>\n<h2 id=\"platform-support\"><a class=\"anchor permalink p-4\" href=\"#platform-support\">#</a> Platform Support</h2>\n<p>Code Composer Studio is available across multiple platforms, including:</p>\n<ul>\n<li>Windows</li>\n<li>Linux</li>\n<li>macOS</li>\n<li>Cloud-based version (eliminating the need for local installation)</li>\n</ul>\n<h2 id=\"framework-evolution\"><a class=\"anchor permalink p-4\" href=\"#framework-evolution\">#</a> Framework Evolution</h2>\n<p>The most recent versions of CCS have been transitioning from the Eclipse framework to the Theia application framework, providing a more modern, Visual Studio Code-like experience. During this transition period, both versions are available and maintained.</p>\n<h2 id=\"target-hardware-support\"><a class=\"anchor permalink p-4\" href=\"#target-hardware-support\">#</a> Target Hardware Support</h2>\n<p>Code Composer Studio supports a wide range of TI devices, including:</p>\n<ul>\n<li>SimpleLink™ wireless MCUs</li>\n<li>MSP430™ ultra-low-power MCUs</li>\n<li>C2000™ real-time control MCUs</li>\n<li>Arm® Cortex® processors</li>\n<li>TI DSPs</li>\n<li>Digital Power and Programmable Gain Amplifier devices</li>\n</ul>\n<p>This comprehensive toolset enables developers to efficiently create, debug, and optimize embedded applications for the entire range of Texas Instruments microcontrollers and processors.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 15, 0, time.UTC),
	Description:     "Intel Integrated Development Environment made by Texas Instruments.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: code-composer\naliases:\n  - Code Composer\ntags:\n  - companies/intel\n  - companies/ti\ncreated_at: 2025-03-27T14:13:15.000-06:00\ndescription: Intel Integrated Development Environment made by Texas Instruments.\ntitle: Code Composer\nupdated_at: 2025-03-28T20:07:42.000-06:00\n---\n\n# Code Composer\n\nTexas Instruments' Code Composer Studio (CCS) is a powerful integrated development environment (IDE) specifically designed for TI's microcontrollers and embedded processors. Based on my research, here's a detailed overview of this development platform:\n\n## Core Functionality\n\nCode Composer Studio is \"an integrated development environment (IDE) for TI's microcontrollers and processors\" that provides a complete suite of tools for embedded application development. It supports TI's entire microcontroller and embedded processor portfolio, including Arm-based microcontrollers, digital signal processors (DSPs), and various specialized chips.\n\n## Key Components and Features\n\n### Development Tools\n\n- **Optimizing C/C++ Compiler**: CCS includes highly optimized compilers tailored for TI devices, with the TI Arm Clang compiler being particularly notable for \"exceptional code size for TI Arm-based microcontrollers\" through features like link-time optimization.\n- **Source Code Editor**: Provides comprehensive code editing capabilities with syntax highlighting and code completion.\n- **Project Build Environment**: Manages project settings, dependencies, and build configurations.\n- **Debugger**: Offers robust debugging capabilities for tracking down issues in embedded applications.\n- **Profiler**: Helps optimize application performance by identifying bottlenecks.\n\n### Advanced Features\n\n1. **SysConfig**: This is \"an intuitive graphical user interface for configuring pins, peripherals, radios, software stacks, RTOS, clock tree and other components\" that automatically detects and resolves conflicts to accelerate development.\n\n2. **EnergyTrace™**: A specialized \"power analyzer tool for Code Composer Studio that measures and displays the energy profile of an application and helps optimize it for ultra-low-power consumption\". This is particularly valuable for battery-powered applications.\n\n3. **Advanced Debugging**: CCS provides multiple trace capabilities, including:\n\n   - Core Trace: Records program execution history\n   - EnergyTrace™: Monitors power consumption\n   - Runtime Object View: For RTOS object status monitoring\n\n4. **Optimization Options**: The compiler offers multiple optimization levels, from basic (-O0) to highly aggressive (-Ofast), with specialized options for:\n\n   - Size optimization (-Os, -Oz)\n   - Performance optimization (-O2, -O3)\n   - Debug-friendly optimization (-Og)\n   - Link-time optimization (LTO)\n\n5. **Resource Explorer**: Provides quick access to examples, training materials, and documentation relevant to the target device.\n\n6. **Automation**: Includes \"a complete scripting environment allowing for the automation of tasks such as testing and performance benchmarking\".\n\n## Platform Support\n\nCode Composer Studio is available across multiple platforms, including:\n\n- Windows\n- Linux\n- macOS\n- Cloud-based version (eliminating the need for local installation)\n\n## Framework Evolution\n\nThe most recent versions of CCS have been transitioning from the Eclipse framework to the Theia application framework, providing a more modern, Visual Studio Code-like experience. During this transition period, both versions are available and maintained.\n\n## Target Hardware Support\n\nCode Composer Studio supports a wide range of TI devices, including:\n\n- SimpleLink™ wireless MCUs\n- MSP430™ ultra-low-power MCUs\n- C2000™ real-time control MCUs\n- Arm® Cortex® processors\n- TI DSPs\n- Digital Power and Programmable Gain Amplifier devices\n\nThis comprehensive toolset enables developers to efficiently create, debug, and optimize embedded applications for the entire range of Texas Instruments microcontrollers and processors.\n",
	Slug:            "ide/code-composer",
	TagSlugs:        []string{"companies/intel", "companies/ti"},
	Tags:            []*assets.Tag{},
	Title:           "Code Composer",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 42, 0, time.UTC),
	X:               -0.23458334061780453,
	Y:               0.04642624970675535,
	Z:               0.43928037534365305,
}}
var TagProgrammingLanguageZig = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"zig\"><a class=\"anchor permalink p-4\" href=\"#zig\">#</a> zig</h1>\n<p>Zig is a general-purpose programming language and toolchain for maintaining robust, optimal, and reusable software.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 16, 0, time.UTC),
	Description:     "Zig is a general-purpose programming language and toolchain for maintaining robust, optimal, and reusable software.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: zig\naliases:\n  - zig\ntags: []\ncreated_at: 2025-03-27T14:13:16.000-06:00\ndescription: Zig is a general-purpose programming language and toolchain for maintaining robust, optimal, and reusable software.\ntitle: Zig\nupdated_at: 2025-03-30T12:40:16.000-06:00\n---\n\n# zig\n\nZig is a general-purpose programming language and toolchain for maintaining robust, optimal, and reusable software.\n",
	Slug:            "programming-language/zig",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Zig",
	UpdatedAt:       time.Date(2025, time.March, 30, 12, 40, 16, 0, time.UTC),
	X:               -1.2836981797756188,
	Y:               0.21224215378291178,
	Z:               -0.4643189189813662,
}}
var TagProtocolGrpc = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"grpc\"><a class=\"anchor permalink p-4\" href=\"#grpc\">#</a> gRPC</h1>\n<p>gRPC is a modern open source remote procedure call (RPC) framework that is designed from the ground up to be fast and scalable made by Google.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 16, 0, time.UTC),
	Description:     "gRPC is a modern open source remote procedure call (RPC) framework that is designed from the ground up to be fast and scalable.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: grpc\naliases:\n  - gRPC\ntags: []\ncreated_at: 2025-03-27T14:13:16.000-06:00\ndescription: gRPC is a modern open source remote procedure call (RPC) framework that is designed from the ground up to be fast and scalable.\ntitle: gRPC\nupdated_at: 2025-03-28T20:07:43.000-06:00\n---\n\n# gRPC\n\ngRPC is a modern open source remote procedure call (RPC) framework that is designed from the ground up to be fast and scalable made by Google.\n",
	Slug:            "protocol/grpc",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "gRPC",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 43, 0, time.UTC),
	X:               -1.2138655020758318,
	Y:               0.23300647450343664,
	Z:               0.032705586037819534,
}}
var TagProtocolRpc = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"rpc\"><a class=\"anchor permalink p-4\" href=\"#rpc\">#</a> RPC</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 16, 0, time.UTC),
	Description:     "Remote Procedure Call",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: rpc\naliases:\n  - RPC\ntags: []\ncreated_at: 2025-03-27T14:13:16.000-06:00\ndescription: Remote Procedure Call\ntitle: RPC\nupdated_at: 2025-03-28T20:07:44.000-06:00\n---\n\n# RPC\n",
	Slug:            "protocol/rpc",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "RPC",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 44, 0, time.UTC),
	X:               -1.8421947069714546,
	Y:               0.5619585483539591,
	Z:               0.03580297883486805,
}}
var TagProtocolSpi = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"spi\"><a class=\"anchor permalink p-4\" href=\"#spi\">#</a> SPI</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 16, 0, time.UTC),
	Description:     "Serial Peripheral Interface",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: spi\naliases:\n  - SPI\ntags: []\ncreated_at: 2025-03-27T14:13:16.000-06:00\ndescription: Serial Peripheral Interface\ntitle: SPI\nupdated_at: 2025-03-28T20:07:44.000-06:00\n---\n\n# SPI\n",
	Slug:            "protocol/spi",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "SPI",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 44, 0, time.UTC),
	X:               -1.2572236854648744,
	Y:               -0.1563992683181561,
	Z:               -0.37670242973069923,
}}
var TagProtocolUart = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"uart\"><a class=\"anchor permalink p-4\" href=\"#uart\">#</a> UART</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 16, 0, time.UTC),
	Description:     "UART is a protocol for serial communication.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: uart\naliases:\n  - UART\ntags: []\ncreated_at: 2025-03-27T14:13:16.000-06:00\ndescription: UART is a protocol for serial communication.\ntitle: UART\nupdated_at: 2025-04-10T12:15:34.000-06:00\n---\n\n# UART\n",
	Slug:            "protocol/uart",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "UART",
	UpdatedAt:       time.Date(2025, time.April, 10, 12, 15, 34, 0, time.UTC),
	X:               -1.4579519161817573,
	Y:               0.29840414790374437,
	Z:               -0.20031970427022286,
}}
var TagProtocolUdp = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"udp\"><a class=\"anchor permalink p-4\" href=\"#udp\">#</a> UDP</h1>\n<h2 id=\"description\"><a class=\"anchor permalink p-4\" href=\"#description\">#</a> Description</h2>\n<p>The UDP protocol is a connectionless, unreliable transport protocol for datagrams.</p>\n",
	CreatedAt:       time.Date(2025, time.April, 9, 15, 46, 42, 0, time.UTC),
	Description:     "UDP is a connectionless, unreliable transport protocol for datagrams.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: udp\naliases:\n  - UDP\ntags: []\ncreated_at: 2025-04-09T15:46:42.000-06:00\ndescription: UDP is a connectionless, unreliable transport protocol for datagrams.\ntitle: UDP\nupdated_at: 2025-04-09T15:46:57.000-06:00\n---\n\n# UDP\n\n## Description\n\nThe UDP protocol is a connectionless, unreliable transport protocol for datagrams.\n",
	Slug:            "protocol/udp",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "UDP",
	UpdatedAt:       time.Date(2025, time.April, 9, 15, 46, 57, 0, time.UTC),
	X:               -1.2992262417189597,
	Y:               0.4928406241762302,
	Z:               -0.3261948218267036,
}}
var TagProtocolUsb = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"usb\"><a class=\"anchor permalink p-4\" href=\"#usb\">#</a> usb</h1>\n",
	CreatedAt:       time.Date(2025, time.April, 10, 12, 15, 9, 0, time.UTC),
	Description:     "Universal Serial Bus is a standard for communication between devices.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: usb\naliases:\n  - usb\ntags: []\ncreated_at: 2025-04-10T12:15:09.000-06:00\ndescription: Universal Serial Bus is a standard for communication between devices.\ntitle: usb\nupdated_at: 2025-04-10T12:15:24.000-06:00\n---\n\n# usb\n",
	Slug:            "protocol/usb",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "usb",
	UpdatedAt:       time.Date(2025, time.April, 10, 12, 15, 24, 0, time.UTC),
	X:               -1.1754424983292613,
	Y:               0.05764264459193402,
	Z:               -0.5632628696707429,
}}
var TagProtocolLsp = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<p>The Language Server Protocol made open source by Microsoft.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 16, 0, time.UTC),
	Description:     "The Language Server Protocol made open source by Microsoft.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: lsp\naliases: []\ntags: []\ncreated_at: 2025-03-27T14:13:16.000-06:00\ndescription: The Language Server Protocol made open source by Microsoft.\ntitle: LSP\nupdated_at: 2025-03-28T20:07:44.000-06:00\n---\n\nThe Language Server Protocol made open source by Microsoft.\n",
	Slug:            "protocol/lsp",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "LSP",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 44, 0, time.UTC),
	X:               -2.2612183778838775,
	Y:               -0.2642102932827983,
	Z:               0.09511314269090476,
}}
var TagProtocolTcp = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"tcp\"><a class=\"anchor permalink p-4\" href=\"#tcp\">#</a> TCP</h1>\n<h2 id=\"description\"><a class=\"anchor permalink p-4\" href=\"#description\">#</a> Description</h2>\n<p>The TCP protocol is a connection-oriented protocol that provides reliable, ordered delivery of data between two endpoints.</p>\n",
	CreatedAt:       time.Date(2025, time.April, 9, 15, 46, 36, 0, time.UTC),
	Description:     "TCP is a connection-oriented protocol that provides reliable, ordered delivery of data between two endpoints.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: tcp\naliases:\n  - TCP\ntags: []\ncreated_at: 2025-04-09T15:46:36.000-06:00\ndescription: TCP is a connection-oriented protocol that provides reliable, ordered delivery of data between two endpoints.\ntitle: TCP\nupdated_at: 2025-04-09T15:47:05.000-06:00\n---\n\n# TCP\n\n## Description\n\nThe TCP protocol is a connection-oriented protocol that provides reliable, ordered delivery of data between two endpoints.\n",
	Slug:            "protocol/tcp",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "TCP",
	UpdatedAt:       time.Date(2025, time.April, 9, 15, 47, 5, 0, time.UTC),
	X:               -1.6333970324311022,
	Y:               0.15192008187679895,
	Z:               -0.6473949360553187,
}}
var TagProgrammingLanguageGo = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<p>Golang, also known as Go, is an open-source programming language designed by Google and first released in 2009.</p>\n<p>Created by Robert Griesemer, Rob Pike, and Ken Thompson, Go is known for its simplicity, efficiency, and strong concurrency model, making it well-suited for cloud computing, microservices, and distributed systems.</p>\n<p>It features a straightforward syntax, built-in concurrency support with goroutines and channels, high-performance native compilation, garbage collection, a robust standard library, static typing, and easy cross-compilation.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 16, 0, time.UTC),
	Description:     "Golang, also known as Go, is an open-source programming language designed by Google and first released in 2009.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: go\naliases: []\ntags:\n  - programming-language\ncreated_at: 2025-03-27T14:13:16.000-06:00\ndescription: Golang, also known as Go, is an open-source programming language designed by Google and first released in 2009.\ntitle: Go\nupdated_at: 2025-03-28T20:07:43.000-06:00\n---\n\nGolang, also known as Go, is an open-source programming language designed by Google and first released in 2009.\n\nCreated by Robert Griesemer, Rob Pike, and Ken Thompson, Go is known for its simplicity, efficiency, and strong concurrency model, making it well-suited for cloud computing, microservices, and distributed systems.\n\nIt features a straightforward syntax, built-in concurrency support with goroutines and channels, high-performance native compilation, garbage collection, a robust standard library, static typing, and easy cross-compilation.\n",
	Slug:            "programming-language/go",
	TagSlugs:        []string{"programming-language"},
	Tags:            []*assets.Tag{},
	Title:           "Go",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 43, 0, time.UTC),
	X:               -0.7738171788881467,
	Y:               0.14911884128825126,
	Z:               -0.13035262520954655,
}}
var TagToolsCmake = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"cmake\"><a class=\"anchor permalink p-4\" href=\"#cmake\">#</a> CMake</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 17, 0, time.UTC),
	Description:     "CMake is a cross-platform, open-source build system.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "cmake-plain",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: cmake\naliases:\n  - CMake\ntags: []\ncreated_at: 2025-03-27T14:13:17.000-06:00\ndescription: CMake is a cross-platform, open-source build system.\nicon: cmake-plain\ntitle: CMake\nupdated_at: 2025-03-28T20:07:44.000-06:00\n---\n\n# CMake\n",
	Slug:            "tools/cmake",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "CMake",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 44, 0, time.UTC),
	X:               -1.2469414241613301,
	Y:               0.010266935112058173,
	Z:               -0.09159739033197983,
}}
var TagToolsBasedpyright = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"basedpyright\"><a class=\"anchor permalink p-4\" href=\"#basedpyright\">#</a> Basedpyright</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 16, 0, time.UTC),
	Description:     "Basedpyright is a python language server that provides code completion, linting, and formatting for Python.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: basedpyright\naliases:\n  - Basedpyright\ntags: []\ncreated_at: 2025-03-27T14:13:16.000-06:00\ndescription: Basedpyright is a python language server that provides code completion, linting, and formatting for Python.\ntitle: basedpyright\nupdated_at: 2025-03-28T20:07:44.000-06:00\n---\n\n# Basedpyright\n",
	Slug:            "tools/basedpyright",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "basedpyright",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 44, 0, time.UTC),
	X:               -1.6973118001949352,
	Y:               0.40950297856830914,
	Z:               0.05738867547284765,
}}
var TagProtocolHttp = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"http\"><a class=\"anchor permalink p-4\" href=\"#http\">#</a> HTTP</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 16, 0, time.UTC),
	Description:     "HTTP",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{"conneroh-com"},
	Projects:        []*assets.Project{&ProjectConnerohCom},
	RawContent:      "---\nid: http\naliases:\n  - HTTP\ntags: []\ncreated_at: 2025-03-27T14:13:16.000-06:00\ndescription: HTTP\nprojects:\n  - conneroh-com\ntitle: HTTP\nupdated_at: 2025-04-09T08:15:38.000-06:00\n---\n\n# HTTP\n",
	Slug:            "protocol/http",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "HTTP",
	UpdatedAt:       time.Date(2025, time.April, 9, 8, 15, 38, 0, time.UTC),
	X:               -1.5598192486981572,
	Y:               -0.10131065677431539,
	Z:               0.17078745662193007,
}}
var TagVcsGit = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"git\"><a class=\"anchor permalink p-4\" href=\"#git\">#</a> Git</h1>\n<p>Version control system for tracking changes in source code made by Linus Torvalds.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 26, 0, time.UTC),
	Description:     "Version control system for tracking changes in source code made by Linus Torvalds.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "git-plain",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: git\naliases:\n  - Git\ntags: []\ncreated_at: 2025-03-27T14:13:26.000-06:00\ndescription: Version control system for tracking changes in source code made by Linus Torvalds.\nicon: git-plain\ntitle: Git\nupdated_at: 2025-03-28T20:07:48.000-06:00\n---\n\n# Git\n\nVersion control system for tracking changes in source code made by Linus Torvalds.\n",
	Slug:            "vcs/git",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Git",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 48, 0, time.UTC),
	X:               -0.6533020331007858,
	Y:               0.2579232323140299,
	Z:               -0.4547538069634604,
}}
var TagProgrammingLanguageTypescript = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<p>TypeScript is a superset of JavaScript that compiles to plain JavaScript.</p>\n<p>It adds optional static typing, classes, and modules to the language.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 16, 0, time.UTC),
	Description:     "TypeScript is a superset of JavaScript that compiles to plain JavaScript.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "typescript-plain",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: typescript\naliases: []\ntags: []\ncreated_at: 2025-03-27T14:13:16.000-06:00\ndescription: TypeScript is a superset of JavaScript that compiles to plain JavaScript.\nicon: typescript-plain\ntitle: TypeScript\nupdated_at: 2025-03-28T20:07:43.000-06:00\n---\n\nTypeScript is a superset of JavaScript that compiles to plain JavaScript.\n\nIt adds optional static typing, classes, and modules to the language.\n",
	Slug:            "programming-language/typescript",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "TypeScript",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 43, 0, time.UTC),
	X:               -1.7663241424331053,
	Y:               0.12781429940588035,
	Z:               -0.5253575458915675,
}}
var TagToolsMake = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"make\"><a class=\"anchor permalink p-4\" href=\"#make\">#</a> Make</h1>\n<p>Make is a build automation tool initially developed by Richard Stallman for the GNU operating system.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 17, 0, time.UTC),
	Description:     "Make is a build automation tool.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "gcc-plain",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: make\naliases:\n  - Make\ntags: []\ncreated_at: 2025-03-27T14:13:17.000-06:00\ndescription: Make is a build automation tool.\nicon: gcc-plain\ntitle: Make\nupdated_at: 2025-04-01T17:22:16.000-06:00\n---\n\n# Make\n\nMake is a build automation tool initially developed by Richard Stallman for the GNU operating system.\n",
	Slug:            "tools/make",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Make",
	UpdatedAt:       time.Date(2025, time.April, 1, 17, 22, 16, 0, time.UTC),
	X:               -1.0537793823694128,
	Y:               0.27915203584300624,
	Z:               0.03661002516865375,
}}
var TagToolsGcc = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"gcc\"><a class=\"anchor permalink p-4\" href=\"#gcc\">#</a> GCC</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 17, 0, time.UTC),
	Description:     "GCC is a compiler system that supports several programming languages.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "gcc-plain",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: gcc\naliases:\n  - GCC\ntags: []\ncreated_at: 2025-03-27T14:13:17.000-06:00\ndescription: GCC is a compiler system that supports several programming languages.\nicon: gcc-plain\ntitle: GCC\nupdated_at: 2025-03-28T20:07:44.000-06:00\n---\n\n# GCC\n",
	Slug:            "tools/gcc",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "GCC",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 44, 0, time.UTC),
	X:               -1.3953970052423106,
	Y:               -0.022722353726908007,
	Z:               0.09465359927223455,
}}
var TagProgrammingLanguagePython = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<p>Python is a high-level, interpreted programming language known for its simplicity, readability, and versatility. Created by Guido van Rossum and first released in 1991, Python emphasizes code readability with its indentation-based syntax and supports multiple programming paradigms, including procedural, object-oriented, and functional programming. It features dynamic typing, automatic memory management, and an extensive standard library that facilitates development in areas such as web development, data science, artificial intelligence, automation, and scientific computing. Python's ecosystem includes frameworks like Django and Flask for web development, TensorFlow and PyTorch for machine learning, and NumPy and Pandas for data analysis. Its cross-platform compatibility and ease of use make Python one of the most widely adopted programming languages in both industry and academia.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 16, 0, time.UTC),
	Description:     "Python is a high-level, interpreted programming language known for its simplicity, readability, and versatility.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: python\naliases: []\ntags: []\ncreated_at: 2025-03-27T14:13:16.000-06:00\ndescription: Python is a high-level, interpreted programming language known for its simplicity, readability, and versatility.\ntitle: Python\nupdated_at: 2025-03-28T20:07:43.000-06:00\n---\n\nPython is a high-level, interpreted programming language known for its simplicity, readability, and versatility. Created by Guido van Rossum and first released in 1991, Python emphasizes code readability with its indentation-based syntax and supports multiple programming paradigms, including procedural, object-oriented, and functional programming. It features dynamic typing, automatic memory management, and an extensive standard library that facilitates development in areas such as web development, data science, artificial intelligence, automation, and scientific computing. Python's ecosystem includes frameworks like Django and Flask for web development, TensorFlow and PyTorch for machine learning, and NumPy and Pandas for data analysis. Its cross-platform compatibility and ease of use make Python one of the most widely adopted programming languages in both industry and academia.\n",
	Slug:            "programming-language/python",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Python",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 43, 0, time.UTC),
	X:               -1.1936019710642272,
	Y:               0.8763196941646781,
	Z:               0.4074467162104595,
}}
var TagToolsPetalinuxTools = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"petalinux-tools\"><a class=\"anchor permalink p-4\" href=\"#petalinux-tools\">#</a> Petalinux Tools</h1>\n<p>Petalinux Tools is a set of tools for Petalinux.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 17, 0, time.UTC),
	Description:     "AMD Tooling for Petalinux",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: petalinux-tools\naliases:\n  - Petalinux Tools\ntags: []\ncreated_at: 2025-03-27T14:13:17.000-06:00\ndescription: AMD Tooling for Petalinux\ntitle: Petalinux Tools\nupdated_at: 2025-03-28T20:07:44.000-06:00\n---\n\n# Petalinux Tools\n\nPetalinux Tools is a set of tools for Petalinux.\n",
	Slug:            "tools/petalinux-tools",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Petalinux Tools",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 44, 0, time.UTC),
	X:               -1.319489872558591,
	Y:               0.027487255662118848,
	Z:               -0.6126961167812125,
}}
var TagProtocolI2c = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"i2c\"><a class=\"anchor permalink p-4\" href=\"#i2c\">#</a> I2C</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 16, 0, time.UTC),
	Description:     "I2C",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: i2c\naliases:\n  - I2C\ntags: []\ncreated_at: 2025-03-27T14:13:16.000-06:00\ndescription: I2C\ntitle: I2C\nupdated_at: 2025-03-28T20:07:44.000-06:00\n---\n\n# I2C\n",
	Slug:            "protocol/i2c",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "I2C",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 44, 0, time.UTC),
	X:               -1.613183737310129,
	Y:               -0.06777478478801269,
	Z:               0.41446451310941035,
}}
var TagToolsVerilator = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"verilator\"><a class=\"anchor permalink p-4\" href=\"#verilator\">#</a> Verilator</h1>\n<p>Verilator is a open source language server for Verilog HDL.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 17, 0, time.UTC),
	Description:     "Verilator is a open source language server for Verilog HDL.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: verilator\naliases:\n  - Verilator\ntags: []\ncreated_at: 2025-03-27T14:13:17.000-06:00\ndescription: Verilator is a open source language server for Verilog HDL.\ntitle: Verilator\nupdated_at: 2025-03-28T20:07:44.000-06:00\n---\n\n# Verilator\n\nVerilator is a open source language server for Verilog HDL.\n",
	Slug:            "tools/verilator",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Verilator",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 44, 0, time.UTC),
	X:               -2.1521610852040407,
	Y:               0.2526416777721602,
	Z:               -0.45957865529508485,
}}
var TagToolsBun = assets.Tag{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"bun\"><a class=\"anchor permalink p-4\" href=\"#bun\">#</a> bun</h1>\n<p>Bun is a JavaScript runtime and package manager.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 16, 0, time.UTC),
	Description:     "Bun is a JavaScript runtime and package manager.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: bun\naliases:\n  - bun\ntags: []\ncreated_at: 2025-03-27T14:13:16.000-06:00\ndescription: Bun is a JavaScript runtime and package manager.\ntitle: bun\nupdated_at: 2025-04-15T08:35:12.000-06:00\n---\n\n# bun\n\nBun is a JavaScript runtime and package manager.\n",
	Slug:            "tools/bun",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "bun",
	UpdatedAt:       time.Date(2025, time.April, 15, 8, 35, 12, 0, time.UTC),
	X:               -2.4096908019920273,
	Y:               0.38191745469575283,
	Z:               -0.0979126039193558,
}}
var AllTags = []*assets.Tag{&TagArchitecturesArm, &TagArchitecturesI386, &TagArchitecturesX8664, &TagArchitecturesMips, &TagCompanyFlyio, &TagCompanyGoogle, &TagCompanyAws, &TagCompanyMicrosoft, &TagCompanyTurso, &TagDatabaseMysql, &TagCompanyOracle, &TagDatabasePostgres, &TagDatabaseSqlite, &TagEduIastateArch321, &TagEduIastateCpre281, &TagEduIastateCpre288, &TagArchitecturesRiscV, &TagEduIastateCpre381, &TagEduIastateEcon101, &TagCompanyFreundVector, &TagEduIastateEe224, &TagEduIastateCpre488, &TagEduIastateEe324, &TagEduIastateEe332, &TagEduIastateEe201, &TagEduIastateEe322, &TagEduIastate, &TagEduIastateMath207, &TagEduIastateSoc134, &TagEduIastateEe491, &TagElementsActinium, &TagElementsAluminum, &TagEduIastateEe311, &TagElementsArsenic, &TagElementsAmericium, &TagElementsAstatine, &TagElementsBarium, &TagElementsAntimony, &TagElementsArgon, &TagElementsBeryllium, &TagElementsBismuth, &TagElementsBohrium, &TagElementsBoron, &TagElementsBromine, &TagElementsBerkelium, &TagElementsCadmium, &TagElementsCalcium, &TagElementsCalifornium, &TagElementsCerium, &TagElementsCarbon, &TagElementsCesium, &TagElementsChromium, &TagElementsChlorine, &TagElementsCopernicium, &TagElementsCobalt, &TagElementsDarmstadtium, &TagElementsCurium, &TagEduIastateEnglish314, &TagElementsEinsteinium, &TagElementsErbium, &TagElementsCopper, &TagElementsFlerovium, &TagElementsFermium, &TagElementsFluorine, &TagElementsDubnium, &TagElementsEuropium, &TagElementsGermanium, &TagElementsGadolinium, &TagElementsFrancium, &TagElementsGallium, &TagElementsGold, &TagEduIastateAgeds461, &TagElementsHelium, &TagElementsHafnium, &TagElementsHolmium, &TagElementsHassium, &TagElementsIndium, &TagElementsIodine, &TagElementsHydrogen, &TagElementsIron, &TagElementsLanthanum, &TagElementsLawrencium, &TagElementsIridium, &TagElementsLithium, &TagElementsLead, &TagElementsKrypton, &TagElementsLutetium, &TagElementsManganese, &TagElementsMeitnerium, &TagElementsLivermorium, &TagElementsMendelevium, &TagElementsMercury, &TagElementsMolybdenum, &TagElementsMoscovium, &TagElementsNeon, &TagElementsNeptunium, &TagElementsNihonium, &TagElementsNickel, &TagElementsMagnesium, &TagElementsNiobium, &TagElementsNitrogen, &TagElementsNeodymium, &TagElementsOsmium, &TagElementsOganesson, &TagElementsNobelium, &TagElementsPhosphorus, &TagElementsPolonium, &TagElementsDysprosium, &TagElementsPalladium, &TagElementsOxygen, &TagElementsProtactinium, &TagElementsPromethium, &TagElementsRadium, &TagElementsPlutonium, &TagEduIastateEe230, &TagElementsRadon, &TagElementsRhenium, &TagElementsPlatinum, &TagElementsRhodium, &TagElementsRubidium, &TagElementsRoentgenium, &TagElementsRuthenium, &TagElementsRutherfordium, &TagElementsSamarium, &TagElementsScandium, &TagElementsSelenium, &TagElementsSeaborgium, &TagElementsPraseodymium, &TagElementsSilicon, &TagElementsSilver, &TagElementsSulfur, &TagElementsStrontium, &TagElementsTantalum, &TagElementsTechnetium, &TagElementsTellurium, &TagElementsThorium, &TagElementsThulium, &TagElementsTennessine, &TagElementsTitanium, &TagElementsTin, &TagElementsWolfram, &TagElementsVanadium, &TagElementsThallium, &TagElementsXenon, &TagElementsYtterbium, &TagElementsZinc, &TagFrameworkAstro, &TagFrameworkNextjs, &TagElementsPotassium, &TagElementsZirconium, &TagFrameworkReact, &TagElementsTerbium, &TagFrameworkSvelte, &TagFrameworkTailwindcss, &TagFrameworkVue, &TagHdlVerilog, &TagHdlVhdl, &TagIdeJetbrains, &TagIdeModelsim, &TagIdeNeovim, &TagElementsUranium, &TagIdeQuartus, &TagIdeObsidian, &TagIdeVim, &TagIdeVitis, &TagIdeVscode, &TagIdeologiesApi, &TagIdeologiesMagnitudeResponse, &TagIdeologiesLocality, &TagIdeologiesPhaseResponse, &TagFrameworkPytorch, &TagIdeologiesWindowManager, &TagOsLinux, &TagOsWindows, &TagIdeologiesVimMotions, &TagProgrammingLanguageAsmMips, &TagIdeologiesFilterDesgn, &TagElementsSodium, &TagProgrammingLanguageC, &TagElementsYttrium, &TagProgrammingLanguageHtml, &TagOsDarwin, &TagProgrammingLanguageCpp, &TagIdeologiesOpenSource, &TagProgrammingLanguageCsharp, &TagProgrammingLanguageLatex, &TagIdeVivado, &TagProgrammingLanguageJavascript, &TagProgrammingLanguageProtobuf, &TagProgrammingLanguageNix, &TagProgrammingLanguageMatlab, &TagProgrammingLanguageRust, &TagProgrammingLanguageJava, &TagIdeologiesCache, &TagIdeologiesAbi, &TagProgrammingLanguageSql, &TagProgrammingLanguageLua, &TagProgrammingLanguageVimscript, &TagIdeCodeComposer, &TagProgrammingLanguageZig, &TagProtocolGrpc, &TagProtocolRpc, &TagProtocolSpi, &TagProtocolUart, &TagProtocolUdp, &TagProtocolUsb, &TagProtocolLsp, &TagProtocolTcp, &TagProgrammingLanguageGo, &TagToolsCmake, &TagToolsBasedpyright, &TagProtocolHttp, &TagVcsGit, &TagProgrammingLanguageTypescript, &TagToolsMake, &TagToolsGcc, &TagProgrammingLanguagePython, &TagToolsPetalinuxTools, &TagProtocolI2c, &TagToolsVerilator, &TagToolsBun}
var ProjectBufnrix = assets.Project{Embedded: assets.Embedded{
	BannerPath:      "projects/bufrnix.webp",
	Content:         "<h1 id=\"bufnrix\"><a class=\"anchor permalink p-4\" href=\"#bufnrix\">#</a> bufnrix</h1>\n<p>Nix powered protobuf tools</p>\n<h2 id=\"links\"><a class=\"anchor permalink p-4\" href=\"#links\">#</a> Links</h2>\n<ul>\n<li><a href=\"https://github.com/conneroisu/bufnrix\">GitHub</a></li>\n</ul>\n<p>TODO: document</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 10, 0, time.UTC),
	Description:     "Nix powered protobuf tools",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: bufnrix\naliases:\n  - bufnrix\ntags:\n  - programming-language/go\n  - programming-language/nix\n  - programming-language/protobuf\nbanner_path: projects/bufrnix.webp\ncreated_at: 2025-03-27T14:13:10.000-06:00\ndescription: Nix powered protobuf tools\ntitle: bufnrix\nupdated_at: 2025-04-14T19:06:57.000-06:00\n---\n\n# bufnrix\n\nNix powered protobuf tools\n\n## Links\n\n- [GitHub](https://github.com/conneroisu/bufnrix)\n\nTODO: document\n",
	Slug:            "bufnrix",
	TagSlugs:        []string{"programming-language/go", "programming-language/nix", "programming-language/protobuf"},
	Tags:            []*assets.Tag{&TagProgrammingLanguageGo, &TagProgrammingLanguageNix, &TagProgrammingLanguageProtobuf},
	Title:           "bufnrix",
	UpdatedAt:       time.Date(2025, time.April, 14, 19, 6, 57, 0, time.UTC),
	X:               -1.5690487797763573,
	Y:               -0.5768562514443268,
	Z:               0.05283880620463177,
}}
var ProjectConnerohCom = assets.Project{Embedded: assets.Embedded{
	BannerPath:      "projects/conneroh-com.webp",
	Content:         "<h1 id=\"connerohcom\"><a class=\"anchor permalink p-4\" href=\"#connerohcom\">#</a> conneroh.com</h1>\n<p>My personal website.</p>\n<h2 id=\"introduction\"><a class=\"anchor permalink p-4\" href=\"#introduction\">#</a> Introduction</h2>\n<p>Previously, I had a website that was made in <a href=\"https://astro.build/\">Astro</a> and <a href=\"https://tailwindcss.com/\">TailwindCSS</a> with a backend written in <a href=\"tags/programming-language/typescript.md\">Typescript</a>. I was using Vecel for the hosting.</p>\n<p>Now, I'm using <a href=\"https://alpinejs.dev/\">Alpine.js</a> and <a href=\"https://tailwindcss.com/\">TailwindCSS</a> for the frontend With <strong>Go</strong> for the backend.</p>\n",
	CreatedAt:       time.Date(2025, time.April, 9, 8, 15, 48, 0, time.UTC),
	Description:     "This site!",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: conneroh-com\naliases:\n  - conneroh.com\ntags:\n  - programming-language/go\n  - programming-language/javascript\n  - programming-language/typescript\n  - framework/astro\n  - framework/alpinejs\n  - framework/tailwindcss\n  - tools/bun\nbanner_path: projects/conneroh-com.webp\ncreated_at: 2025-04-09T08:15:48.000-06:00\ndescription: This site!\ntitle: conneroh.com\nupdated_at: 2025-04-14T20:04:53.000-06:00\n---\n\n# conneroh.com\n\nMy personal website.\n\n\n## Introduction\n\nPreviously, I had a website that was made in [Astro](https://astro.build/) and [TailwindCSS](https://tailwindcss.com/) with a backend written in [Typescript](tags/programming-language/typescript.md). I was using Vecel for the hosting.\n\nNow, I'm using [Alpine.js](https://alpinejs.dev/) and [TailwindCSS](https://tailwindcss.com/) for the frontend With **Go** for the backend.\n",
	Slug:            "conneroh-com",
	TagSlugs:        []string{"programming-language/go", "programming-language/javascript", "programming-language/typescript", "framework/astro", "framework/alpinejs", "framework/tailwindcss", "tools/bun"},
	Tags:            []*assets.Tag{&TagProgrammingLanguageGo, &TagProgrammingLanguageJavascript, &TagProgrammingLanguageTypescript, &TagFrameworkAstro, &TagFrameworkTailwindcss, &TagToolsBun},
	Title:           "conneroh.com",
	UpdatedAt:       time.Date(2025, time.April, 14, 20, 4, 53, 0, time.UTC),
	X:               -1.4760309500703863,
	Y:               -0.5250694294492584,
	Z:               -0.44174382432727033,
}}
var ProjectDotfiles = assets.Project{Embedded: assets.Embedded{
	BannerPath:      "projects/dotfiles.webp",
	Content:         "<p>Github: <a href=\"https://github.com/conneroisu/dotfiles\">https://github.com/conneroisu/dotfiles</a></p>\n<h1 id=\"personal-dotfiles\"><a class=\"anchor permalink p-4\" href=\"#personal-dotfiles\">#</a> Personal Dotfiles</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 10, 0, time.UTC),
	Description:     "My dotfiles, including my shell, tmux, nixos, nix-darwin, and neovim configurations.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: dotfiles\naliases:\n  - Personal Dotfiles\ntags:\n  - programming-language/nix\n  - ideologies/window-manager\nbanner_path: projects/dotfiles.webp\ncreated_at: 2025-03-27T14:13:10.000-06:00\ndescription: My dotfiles, including my shell, tmux, nixos, nix-darwin, and neovim configurations.\ntitle: Personal Dotfiles\nupdated_at: 2025-04-14T19:08:02.000-06:00\n---\n\nGithub: [https://github.com/conneroisu/dotfiles](https://github.com/conneroisu/dotfiles)\n\n# Personal Dotfiles\n",
	Slug:            "dotfiles",
	TagSlugs:        []string{"programming-language/nix", "ideologies/window-manager"},
	Tags:            []*assets.Tag{&TagProgrammingLanguageNix, &TagIdeologiesWindowManager},
	Title:           "Personal Dotfiles",
	UpdatedAt:       time.Date(2025, time.April, 14, 19, 8, 2, 0, time.UTC),
	X:               -1.3888619391929833,
	Y:               -0.007953639344699781,
	Z:               -0.5997866236080165,
}}
var ProjectGohard = assets.Project{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<p>Github: <a href=\"https://github.com/conneroisu/gohard\">https://github.com/conneroisu/gohard</a></p>\n<h1 id=\"gohard\"><a class=\"anchor permalink p-4\" href=\"#gohard\">#</a> GoHard</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 10, 0, time.UTC),
	Description:     "GoHard is a golang library and program that eases the design of hardware description languages using the power of go.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: gohard\naliases:\n  - GoHard\ntags:\n  - programming-language/go\n  - ideologies/open-source\ncreated_at: 2025-03-27T14:13:10.000-06:00\ndescription: GoHard is a golang library and program that eases the design of hardware description languages using the power of go.\ntitle: GoHard\nupdated_at: 2025-04-11T13:49:23.000-06:00\n---\n\nGithub: [https://github.com/conneroisu/gohard](https://github.com/conneroisu/gohard)\n\n# GoHard\n",
	Slug:            "gohard",
	TagSlugs:        []string{"programming-language/go", "ideologies/open-source"},
	Tags:            []*assets.Tag{&TagProgrammingLanguageGo, &TagIdeologiesOpenSource},
	Title:           "GoHard",
	UpdatedAt:       time.Date(2025, time.April, 11, 13, 49, 23, 0, time.UTC),
	X:               -1.236414920140431,
	Y:               -0.32370520327916674,
	Z:               0.006842606271661916,
}}
var ProjectKreativeDocuvet = assets.Project{Embedded: assets.Embedded{
	BannerPath:      "projects/kreative-docuvet.webp",
	Content:         "<p>During my tenure as the Founding Chief AI Officer at <a href=\"https://kreativedocuvet.com/\">Kreative DocuVet</a> from December 2023 to July 2024, I spearheaded initiatives that significantly advanced the integration of artificial intelligence within veterinary practices.</p>\n<p><strong>Innovations in Veterinary Documentation</strong></p>\n<p>Recognizing the challenges veterinarians face with time-consuming medical recordkeeping, I led the development of diarized transcription services and large language model (LLM) pipelines. These tools enabled hands-free capture of veterinary consultations, allowing practitioners to focus more on patient care while ensuring accurate and efficient documentation. The implementation of these AI-driven solutions reduced the time spent on medical records from 20 minutes to just 2 minutes per record. \ue200cite\ue202turn0search0\ue201</p>\n<p><strong>Enhancing LLM Response Exploration</strong></p>\n<p>To further support veterinary professionals, I developed tools that improved the exploration and interpretation of LLM-generated responses. These tools provided veterinarians with deeper insights and more reliable information, enhancing decision-making processes and overall patient outcomes.</p>\n<p><strong>Building a Comprehensive Veterinary Voice Corpus</strong></p>\n<p>Understanding the importance of diverse and extensive data for training robust AI models, I led the collection of the world's largest veterinary voice corpus. This endeavor involved gathering a vast array of audio recordings from veterinary consultations, which were then meticulously annotated and processed. The resulting large-scale dataset and accompanying scripts facilitated the training of more accurate and contextually relevant AI models tailored specifically to veterinary medicine.</p>\n<p><strong>Impact and Industry Recognition</strong></p>\n<p>The innovations introduced during my time at Kreative DocuVet have had a lasting impact on the veterinary field. By automating and streamlining the documentation process, veterinarians experienced increased efficiency, reduced stress, and improved work-life balance. The AI solutions developed have been recognized for their ability to transform veterinary workflows, setting new standards for the integration of technology in animal healthcare.</p>\n<p>My experience at Kreative DocuVet underscores the transformative potential of AI in specialized fields like veterinary medicine. By addressing specific challenges with tailored technological solutions, we can enhance professional practices and improve outcomes for both practitioners and their patients.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 19, 25, 22, 0, time.UTC),
	Description:     "A veterinary startup that aims to help veterinarians with their documentation needs.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: kreative-docuvet\naliases: []\ntags:\n  - programming-language/python\n  - programming-language/javascript\n  - programming-language/typescript\n  - programming-language/go\n  - framework/react\n  - framework/nextjs\n  - framework/pytorch\nbanner_path: projects/kreative-docuvet.webp\ncreated_at: 2025-03-28T19:25:22.000-06:00\ndescription: A veterinary startup that aims to help veterinarians with their documentation needs.\ntitle: Kreative DocuVet\nupdated_at: 2025-04-12T12:17:57.000-06:00\n---\n\nDuring my tenure as the Founding Chief AI Officer at [Kreative DocuVet](https://kreativedocuvet.com/) from December 2023 to July 2024, I spearheaded initiatives that significantly advanced the integration of artificial intelligence within veterinary practices.\n\n**Innovations in Veterinary Documentation**\n\nRecognizing the challenges veterinarians face with time-consuming medical recordkeeping, I led the development of diarized transcription services and large language model (LLM) pipelines. These tools enabled hands-free capture of veterinary consultations, allowing practitioners to focus more on patient care while ensuring accurate and efficient documentation. The implementation of these AI-driven solutions reduced the time spent on medical records from 20 minutes to just 2 minutes per record. \ue200cite\ue202turn0search0\ue201\n\n**Enhancing LLM Response Exploration**\n\nTo further support veterinary professionals, I developed tools that improved the exploration and interpretation of LLM-generated responses. These tools provided veterinarians with deeper insights and more reliable information, enhancing decision-making processes and overall patient outcomes.\n\n**Building a Comprehensive Veterinary Voice Corpus**\n\nUnderstanding the importance of diverse and extensive data for training robust AI models, I led the collection of the world's largest veterinary voice corpus. This endeavor involved gathering a vast array of audio recordings from veterinary consultations, which were then meticulously annotated and processed. The resulting large-scale dataset and accompanying scripts facilitated the training of more accurate and contextually relevant AI models tailored specifically to veterinary medicine.\n\n**Impact and Industry Recognition**\n\nThe innovations introduced during my time at Kreative DocuVet have had a lasting impact on the veterinary field. By automating and streamlining the documentation process, veterinarians experienced increased efficiency, reduced stress, and improved work-life balance. The AI solutions developed have been recognized for their ability to transform veterinary workflows, setting new standards for the integration of technology in animal healthcare.\n\nMy experience at Kreative DocuVet underscores the transformative potential of AI in specialized fields like veterinary medicine. By addressing specific challenges with tailored technological solutions, we can enhance professional practices and improve outcomes for both practitioners and their patients.\n",
	Slug:            "kreative-docuvet",
	TagSlugs:        []string{"programming-language/python", "programming-language/javascript", "programming-language/typescript", "programming-language/go", "framework/react", "framework/nextjs", "framework/pytorch"},
	Tags:            []*assets.Tag{&TagProgrammingLanguagePython, &TagProgrammingLanguageJavascript, &TagProgrammingLanguageTypescript, &TagProgrammingLanguageGo, &TagFrameworkReact, &TagFrameworkNextjs, &TagFrameworkPytorch},
	Title:           "Kreative DocuVet",
	UpdatedAt:       time.Date(2025, time.April, 12, 12, 17, 57, 0, time.UTC),
	X:               -0.19055313431205145,
	Y:               0.9354443264749632,
	Z:               -0.2588943933632287,
}}
var ProjectNeovimConfig = assets.Project{Embedded: assets.Embedded{
	BannerPath:      "projects/neovim-config.jpg",
	Content:         "<h1 id=\"neovim-config\"><a class=\"anchor permalink p-4\" href=\"#neovim-config\">#</a> Neovim Config</h1>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 10, 0, time.UTC),
	Description:     "My Neovim config",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: neovim-config\naliases:\n  - Neovim Config\ntags:\n  - ide/neovim\n  - programming-language/vimscript\n  - programming-language/lua\nbanner_path: projects/neovim-config.jpg\ncreated_at: 2025-03-27T14:13:10.000-06:00\ndescription: My Neovim config\ntitle: Neovim Config\nupdated_at: 2025-04-14T12:03:03.000-06:00\n---\n\n# Neovim Config\n",
	Slug:            "neovim-config",
	TagSlugs:        []string{"ide/neovim", "programming-language/vimscript", "programming-language/lua"},
	Tags:            []*assets.Tag{&TagIdeNeovim, &TagProgrammingLanguageVimscript, &TagProgrammingLanguageLua},
	Title:           "Neovim Config",
	UpdatedAt:       time.Date(2025, time.April, 14, 12, 3, 3, 0, time.UTC),
	X:               -1.535700286607664,
	Y:               0.24151645822296408,
	Z:               -0.6552521942984094,
}}
var ProjectOhnedrive = assets.Project{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<h1 id=\"ohnedrive\"><a class=\"anchor permalink p-4\" href=\"#ohnedrive\">#</a> OhneDrive</h1>\n<p>OhneDrive is a open source self-driving mini-bus system that can be used to transport people and goods with an underlying purposal of data collection.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 11, 0, time.UTC),
	Description:     "OhneDrive is a open source self-driving mini-bus system that can be used to transport people and goods with an underlying purposal of data collection.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: ohnedrive\naliases:\n  - OhneDrive\ntags:\n  - programming-language/c\n  - programming-language/python\n  - programming-language/cpp\ncreated_at: 2025-03-27T14:13:11.000-06:00\ndescription: OhneDrive is a open source self-driving mini-bus system that can be used to transport people and goods with an underlying purposal of data collection.\ntitle: OhneDrive\nupdated_at: 2025-03-28T20:07:30.000-06:00\n---\n\n# OhneDrive\n\nOhneDrive is a open source self-driving mini-bus system that can be used to transport people and goods with an underlying purposal of data collection.\n",
	Slug:            "ohnedrive",
	TagSlugs:        []string{"programming-language/c", "programming-language/python", "programming-language/cpp"},
	Tags:            []*assets.Tag{&TagProgrammingLanguageC, &TagProgrammingLanguagePython, &TagProgrammingLanguageCpp},
	Title:           "OhneDrive",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 30, 0, time.UTC),
	X:               -1.615842808592416,
	Y:               0.0923787122980338,
	Z:               -0.24820441020218884,
}}
var ProjectObsidianVimToggle = assets.Project{Embedded: assets.Embedded{
	BannerPath:      "projects/vim-toggle.webp",
	Content:         "<p>Github: <a href=\"https://github.com/conneroisu/vim-toggle\">link</a></p>\n<h1 id=\"vim-toggle\"><a class=\"anchor permalink p-4\" href=\"#vim-toggle\">#</a> vim-toggle</h1>\n<h2 id=\"introduction\"><a class=\"anchor permalink p-4\" href=\"#introduction\">#</a> Introduction</h2>\n<p>Toggle between vim and normal mode.</p>\n<h1 id=\"vim-toggle-plugin-obsidian\"><a class=\"anchor permalink p-4\" href=\"#vim-toggle-plugin-obsidian\">#</a> Vim Toggle Plugin Obsidian</h1>\n<blockquote>\n<blockquote>\n<p>Toggle the state of Vim inside of Obsidian, in response to Obsidian Canvas Core Plugin Functionality.<br>\n<img src=\"https://conneroh.fly.storage.tigris.dev/projects/vim-toggle.gif\"><br>\nThe new Canvas Plugin has prompted me to make a small plugin to toggle the state of use of the vim editor in obsidian.</p>\n</blockquote>\n</blockquote>\n<h1 id=\"wondering-what-vivim-is\"><a class=\"anchor permalink p-4\" href=\"#wondering-what-vivim-is\">#</a> Wondering what vi/vim is?</h1>\n<p><a href=\"https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;ved=2ahUKEwjM4-3Es6v8AhW1KX0KHYH4Bs8QtwJ6BAgOEAI&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D-txKSRn0qeA&amp;usg=AOvVaw0opUAcd4wCUwrJmBWm0zox\">Vim in 100 Seconds - YouTube https://www.youtube.com › watch </a></p>\n<p><a href=\"https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;ved=2ahUKEwjM4-3Es6v8AhW1KX0KHYH4Bs8QtwJ6BAgQEAI&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dnbph7RYWhwM&amp;usg=AOvVaw0WsJDH24HqQHumDJS09xYX\">Understanding Vi and Vim (Vi IMproved) in 10 Minutes https://www.youtube.com › watch </a></p>\n<h1 id=\"the-basics\"><a class=\"anchor permalink p-4\" href=\"#the-basics\">#</a> The Basics</h1>\n<p>This plugin is a simple plugin that allows for the toggling of vim mode in Obsidian with a command configurable to a hotkey. You can also turn off or on notifications for the plugin. That pretty much it for basic functionality.</p>\n<blockquote>\n<p>[!important]+ Main Offerings</p>\n<ul>\n<li>Toggle Vim mode</li>\n<li>Optional Notification when toggling</li>\n<li>Community Avaliability</li>\n</ul>\n</blockquote>\n<h1 id=\"usage\"><a class=\"anchor permalink p-4\" href=\"#usage\">#</a> Usage</h1>\n<p>Usage for this plugin is done through a settings tab accessible boolean variable and a command to run that toggles and untoggles vim inside of Obsidian. The command can be bound to a hotkey for quicker and more efficient use.</p>\n<p>To access the plugin settings, click on the settings cog in the top right corner of Obsidian or use a hotkey <!-- raw HTML omitted -->Ctrl<!-- raw HTML omitted -->+<!-- raw HTML omitted -->,<!-- raw HTML omitted -->From there, find the Vim Mode setting and toggle it to &ldquo;On&rdquo;. This will enable Vim Toggle within the current instance of obsidian.</p>\n<h2 id=\"basic-usage\"><a class=\"anchor permalink p-4\" href=\"#basic-usage\">#</a> Basic Usage</h2>\n<p>Once installed, you can toggle vim mode on and off with a command. You can configure this command to a hotkey of your choice in the settings. You can also turn off or on notifications for when vim mode is turned on or off.</p>\n<h3 id=\"normal-installation\"><a class=\"anchor permalink p-4\" href=\"#normal-installation\">#</a> Normal installation</h3>\n<p>To install this plugin normally, you can navigate within the obsidian app to the community plugins to view and install this plugin without even exiting the app! Hopefully you can find some use for it yourself! (You will be able to do this soon).</p>\n<h3 id=\"manual-installation\"><a class=\"anchor permalink p-4\" href=\"#manual-installation\">#</a> Manual Installation</h3>\n<p>To install this plugin manually, you'll need to download the source code from the <a href=\"https://github.com/nkomarn/obsidian-vim-mode\">GitHub repository</a> and place it in the <code>plugins</code> folder in your Obsidian data directory. Once that is done, restart Obsidian and you should be good to go.</p>\n<h1 id=\"use-case\"><a class=\"anchor permalink p-4\" href=\"#use-case\">#</a> Use Case</h1>\n<p>Writting inside of obsidian canvas mode can be feel alittle tedious using vim mode cause of the constant inserting, this plugin allows for the user to evade these difficulties by switching to regular typing from vim mode temporarily.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 11, 0, time.UTC),
	Description:     "Obsidian plugin to toggle between vim and normal mode.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: vim-toggle\naliases:\n  - vim-toggle\ntags:\n  - ide/obsidian\n  - ideology/vim-motions\n  - programming-language/typescript\n  - programming-language/javascript\nbanner_path: projects/vim-toggle.webp\ncreated_at: 2025-03-27T14:13:11.000-06:00\ndescription: Obsidian plugin to toggle between vim and normal mode.\ntitle: vim-toggle\nupdated_at: 2025-04-14T19:19:44.000-06:00\n---\n\nGithub: [link](https://github.com/conneroisu/vim-toggle)\n\n# vim-toggle\n\n## Introduction\n\nToggle between vim and normal mode.\n\n# Vim Toggle Plugin Obsidian\n\n> > Toggle the state of Vim inside of Obsidian, in response to Obsidian Canvas Core Plugin Functionality.\n> > ![[projects/vim-toggle.gif]]\n> > The new Canvas Plugin has prompted me to make a small plugin to toggle the state of use of the vim editor in obsidian.\n\n# Wondering what vi/vim is?\n\n[Vim in 100 Seconds - YouTube https://www.youtube.com › watch ](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwjM4-3Es6v8AhW1KX0KHYH4Bs8QtwJ6BAgOEAI&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D-txKSRn0qeA&usg=AOvVaw0opUAcd4wCUwrJmBWm0zox)\n\n[Understanding Vi and Vim (Vi IMproved) in 10 Minutes https://www.youtube.com › watch ](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwjM4-3Es6v8AhW1KX0KHYH4Bs8QtwJ6BAgQEAI&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dnbph7RYWhwM&usg=AOvVaw0WsJDH24HqQHumDJS09xYX)\n\n# The Basics\n\nThis plugin is a simple plugin that allows for the toggling of vim mode in Obsidian with a command configurable to a hotkey. You can also turn off or on notifications for the plugin. That pretty much it for basic functionality.\n\n> [!important]+ Main Offerings\n>\n> - Toggle Vim mode\n> - Optional Notification when toggling\n> - Community Avaliability\n\n# Usage\n\nUsage for this plugin is done through a settings tab accessible boolean variable and a command to run that toggles and untoggles vim inside of Obsidian. The command can be bound to a hotkey for quicker and more efficient use.\n\nTo access the plugin settings, click on the settings cog in the top right corner of Obsidian or use a hotkey <kbd>Ctrl<kbd>+</kbd>,</kbd>From there, find the Vim Mode setting and toggle it to \"On\". This will enable Vim Toggle within the current instance of obsidian.\n\n## Basic Usage\n\nOnce installed, you can toggle vim mode on and off with a command. You can configure this command to a hotkey of your choice in the settings. You can also turn off or on notifications for when vim mode is turned on or off.\n\n### Normal installation\n\nTo install this plugin normally, you can navigate within the obsidian app to the community plugins to view and install this plugin without even exiting the app! Hopefully you can find some use for it yourself! (You will be able to do this soon).\n\n### Manual Installation\n\nTo install this plugin manually, you'll need to download the source code from the [GitHub repository](https://github.com/nkomarn/obsidian-vim-mode) and place it in the `plugins` folder in your Obsidian data directory. Once that is done, restart Obsidian and you should be good to go.\n\n# Use Case\n\nWritting inside of obsidian canvas mode can be feel alittle tedious using vim mode cause of the constant inserting, this plugin allows for the user to evade these difficulties by switching to regular typing from vim mode temporarily.\n",
	Slug:            "obsidian-vim-toggle",
	TagSlugs:        []string{"ide/obsidian", "ideology/vim-motions", "programming-language/typescript", "programming-language/javascript"},
	Tags:            []*assets.Tag{&TagIdeObsidian, &TagProgrammingLanguageTypescript, &TagProgrammingLanguageJavascript},
	Title:           "vim-toggle",
	UpdatedAt:       time.Date(2025, time.April, 14, 19, 19, 44, 0, time.UTC),
	X:               -1.242447025741708,
	Y:               -0.006770692116225788,
	Z:               -0.6570616162640147,
}}
var ProjectPegwings = assets.Project{Embedded: assets.Embedded{
	BannerPath:      "projects/pegwings.webp",
	Content:         "<h1 id=\"pegwings\"><a class=\"anchor permalink p-4\" href=\"#pegwings\">#</a> Pegwings</h1>\n<p>Pegwings is a AI startup that aims to augment or provide an alternative ChatGPT, anthropic, and other AI models with a more human-like chatbot with a more open-source foundation.</p>\n<p>TODO: Add more information about the project, its features, and how it works.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 19, 22, 16, 0, time.UTC),
	Description:     "A AI startup that shares similiarities with ChatGPT, Anthropic, and other AI Models with more capable models",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: pegwings\naliases:\n  - Pegwings\ntags: []\nbanner_path: projects/pegwings.webp\ncreated_at: 2025-03-28T19:22:16.000-06:00\ndescription: A AI startup that shares similiarities with ChatGPT, Anthropic, and other AI Models with more capable models\ntitile: Pegwings\ntitle: Pegwings\nupdated_at: 2025-04-14T19:15:21.000-06:00\n---\n\n# Pegwings\n\nPegwings is a AI startup that aims to augment or provide an alternative ChatGPT, anthropic, and other AI models with a more human-like chatbot with a more open-source foundation.\n\nTODO: Add more information about the project, its features, and how it works.\n",
	Slug:            "pegwings",
	TagSlugs:        []string{},
	Tags:            []*assets.Tag{},
	Title:           "Pegwings",
	UpdatedAt:       time.Date(2025, time.April, 14, 19, 15, 21, 0, time.UTC),
	X:               -1.9312717230036802,
	Y:               0.10673166295164171,
	Z:               -0.5409769108397158,
}}
var ProjectTwerge = assets.Project{Embedded: assets.Embedded{
	BannerPath:      "projects/twerge.webp",
	Content:         "<p>Github: <a href=\"https://github.com/conneroisu/twerge\">https://github.com/conneroisu/twerge</a></p>\n<p>Public Docs: <a href=\"https://conneroisu.github.io/twerge/\">https://conneroisu.github.io/twerge/</a></p>\n<h1 id=\"introduction\"><a class=\"anchor permalink p-4\" href=\"#introduction\">#</a> Introduction</h1>\n<p>Twerge is a Go library designed to enhance your experience working with Tailwind CSS in Go applications. The name &ldquo;Twerge&rdquo; comes from &ldquo;Tailwind + Merge&rdquo;.</p>\n<h2 id=\"what-is-twerge\"><a class=\"anchor permalink p-4\" href=\"#what-is-twerge\">#</a> What is Twerge?</h2>\n<p>Twerge is a comprehensive Go library that performs four key functions for Tailwind CSS integration:</p>\n<ol>\n<li><strong>Intelligent Class Merging</strong> - Resolves conflicts between Tailwind CSS classes according to their specificity rules</li>\n<li><strong>Class Name Generation</strong> - Creates short, unique CSS class names based on hashes of the merged classes</li>\n<li><strong>Class Mapping Management</strong> - Maintains mappings between original class strings and generated class names, with code generation capabilities</li>\n<li><strong>Runtime Static Hashmap</strong> - Provides a fast runtime lookup for direct class name resolution without a generation step</li>\n</ol>\n<h2 id=\"why-use-twerge\"><a class=\"anchor permalink p-4\" href=\"#why-use-twerge\">#</a> Why Use Twerge?</h2>\n<p>If you're developing Go-based web applications with Tailwind CSS, Twerge offers significant advantages:</p>\n<ul>\n<li><strong>Smaller HTML output</strong> - By merging conflicting classes and generating short class names</li>\n<li><strong>Better performance</strong> - Through intelligent caching and efficient lookups</li>\n<li><strong>Build-time optimization</strong> - Via code generation capabilities</li>\n<li><strong>Runtime flexibility</strong> - Through the runtime static hashmap for dynamic class handling</li>\n<li><strong>Simplified workflow</strong> - By integrating seamlessly with Go templates, particularly <a href=\"https://github.com/a-h/templ\">templ</a></li>\n</ul>\n<h2 id=\"key-features\"><a class=\"anchor permalink p-4\" href=\"#key-features\">#</a> Key Features</h2>\n<ul>\n<li><strong>Intelligent class merging</strong> - Resolves conflicts according to Tailwind CSS specificity rules</li>\n<li><strong>Short class name generation</strong> - Creates compact, unique class names for reduced HTML size</li>\n<li><strong>Runtime class management</strong> - Provides a fast lookup system for dynamic applications</li>\n<li><strong>Code generation</strong> - Produces optimized Go code for class mappings</li>\n<li><strong>CSS integration</strong> - Works with Tailwind CLI and CSS build pipelines</li>\n<li><strong>Flexible configuration</strong> - Customizable caching, hash algorithms, and more</li>\n<li><strong>Nix integration</strong> - Reproducible development environment</li>\n</ul>\n<h2 id=\"target-use-cases\"><a class=\"anchor permalink p-4\" href=\"#target-use-cases\">#</a> Target Use Cases</h2>\n<p>Twerge is particularly well-suited for:</p>\n<ul>\n<li>Go web applications using Tailwind CSS</li>\n<li>Projects using the <a href=\"https://github.com/a-h/templ\">templ</a> templating language</li>\n<li>Applications requiring build-time CSS optimization</li>\n<li>Static site generators with Tailwind CSS integration</li>\n<li>Dynamic web applications needing runtime class management</li>\n</ul>\n",
	CreatedAt:       time.Date(2025, time.April, 11, 13, 54, 12, 0, time.UTC),
	Description:     "Twerge is a Go library designed to enhance your experience working with Tailwind CSS in Go applications. The name \"Twerge\" comes from \"Tailwind + Merge\".",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: twerge\naliases:\n  - Introduction\ntags:\n  - vcs/git\n  - programming-language/go\n  - programming-language/html\n  - framework/tailwindcss\n  - ideologies/open-source\nbanner_path: projects/twerge.webp\ncreated_at: 2025-04-11T13:54:12.000-06:00\ndescription: Twerge is a Go library designed to enhance your experience working with Tailwind CSS in Go applications. The name \"Twerge\" comes from \"Tailwind + Merge\".\ntitle: Twerge\nupdated_at: 2025-04-14T19:08:33.000-06:00\n---\n\nGithub: [https://github.com/conneroisu/twerge](https://github.com/conneroisu/twerge)\n\nPublic Docs: [https://conneroisu.github.io/twerge/](https://conneroisu.github.io/twerge/)\n\n# Introduction\n\nTwerge is a Go library designed to enhance your experience working with Tailwind CSS in Go applications. The name \"Twerge\" comes from \"Tailwind + Merge\".\n\n## What is Twerge?\n\nTwerge is a comprehensive Go library that performs four key functions for Tailwind CSS integration:\n\n1. **Intelligent Class Merging** - Resolves conflicts between Tailwind CSS classes according to their specificity rules\n2. **Class Name Generation** - Creates short, unique CSS class names based on hashes of the merged classes\n3. **Class Mapping Management** - Maintains mappings between original class strings and generated class names, with code generation capabilities\n4. **Runtime Static Hashmap** - Provides a fast runtime lookup for direct class name resolution without a generation step\n\n## Why Use Twerge?\n\nIf you're developing Go-based web applications with Tailwind CSS, Twerge offers significant advantages:\n\n- **Smaller HTML output** - By merging conflicting classes and generating short class names\n- **Better performance** - Through intelligent caching and efficient lookups\n- **Build-time optimization** - Via code generation capabilities\n- **Runtime flexibility** - Through the runtime static hashmap for dynamic class handling\n- **Simplified workflow** - By integrating seamlessly with Go templates, particularly [templ](https://github.com/a-h/templ)\n\n## Key Features\n\n- **Intelligent class merging** - Resolves conflicts according to Tailwind CSS specificity rules\n- **Short class name generation** - Creates compact, unique class names for reduced HTML size\n- **Runtime class management** - Provides a fast lookup system for dynamic applications\n- **Code generation** - Produces optimized Go code for class mappings\n- **CSS integration** - Works with Tailwind CLI and CSS build pipelines\n- **Flexible configuration** - Customizable caching, hash algorithms, and more\n- **Nix integration** - Reproducible development environment\n\n## Target Use Cases\n\nTwerge is particularly well-suited for:\n\n- Go web applications using Tailwind CSS\n- Projects using the [templ](https://github.com/a-h/templ) templating language\n- Applications requiring build-time CSS optimization\n- Static site generators with Tailwind CSS integration\n- Dynamic web applications needing runtime class management\n\n\n",
	Slug:            "twerge",
	TagSlugs:        []string{"vcs/git", "programming-language/go", "programming-language/html", "framework/tailwindcss", "ideologies/open-source"},
	Tags:            []*assets.Tag{&TagVcsGit, &TagProgrammingLanguageGo, &TagProgrammingLanguageHtml, &TagFrameworkTailwindcss, &TagIdeologiesOpenSource},
	Title:           "Twerge",
	UpdatedAt:       time.Date(2025, time.April, 14, 19, 8, 33, 0, time.UTC),
	X:               -0.40979577879585855,
	Y:               -0.33188373628510426,
	Z:               0.013934770929859452,
}}
var ProjectDopplerNvim = assets.Project{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<p>In the realm of modern development, managing environment secrets securely and efficiently is paramount. For Neovim users, seamlessly integrating these secrets into the editing environment can enhance productivity and security. Enter <strong>doppler.nvim</strong>, a plugin designed to bridge the gap between Doppler's secret management and Neovim's powerful editing capabilities.</p>\n<h2 id=\"understanding-dopplernvim\"><a class=\"anchor permalink p-4\" href=\"#understanding-dopplernvim\">#</a> Understanding doppler.nvim</h2>\n<p><strong>doppler.nvim</strong> is a Neovim plugin that injects Doppler secrets directly into your Neovim environment based on the Doppler configurations of your project. This integration ensures that environment-specific secrets are readily available within Neovim, streamlining workflows that depend on sensitive data.</p>\n<h2 id=\"key-features\"><a class=\"anchor permalink p-4\" href=\"#key-features\">#</a> Key Features</h2>\n<ul>\n<li>\n<p><strong>Seamless Secret Injection:</strong> Automatically injects Doppler-managed secrets into Neovim when editing within a Doppler-configured project.</p>\n</li>\n<li>\n<p><strong>On-Demand Loading:</strong> Utilizes plugin managers like <code>lazy.nvim</code> to load the plugin as needed, optimizing Neovim's performance.</p>\n</li>\n<li>\n<p><strong>Dependency Management:</strong> Relies on <code>nvim-lua/plenary.nvim</code> to ensure robust functionality.</p>\n</li>\n</ul>\n<h2 id=\"installation-guide\"><a class=\"anchor permalink p-4\" href=\"#installation-guide\">#</a> Installation Guide</h2>\n<p>To incorporate <strong>doppler.nvim</strong> into your Neovim setup using <code>lazy.nvim</code>, add the following configuration to your <code>init.lua</code>:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">return</span> {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#e6db74\">&#34;conneroisu/doppler.nvim&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>    dependencies <span style=\"color:#f92672\">=</span> {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#e6db74\">&#39;nvim-lua/plenary.nvim&#39;</span>,\n</span></span><span style=\"display:flex;\"><span>    },\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre><p>This setup ensures that <strong>doppler.nvim</strong> loads only when required, maintaining an efficient editing environment.</p>\n<h2 id=\"project-structure\"><a class=\"anchor permalink p-4\" href=\"#project-structure\">#</a> Project Structure</h2>\n<p>The <strong>doppler.nvim</strong> project is organized as follows:</p>\n<pre><code>.\n├── lua\n│   ├── doppler\n│   │   └── module.lua\n│   └── doppler.lua\n├── Makefile\n├── plugin\n│   └── doppler.lua\n├── README.md\n├── tests\n│   ├── minimal_init.lua\n│   └── doppler\n│       └── doppler_spec.lua\n</code></pre>\n<p>This structure delineates the core functionality (<code>lua/doppler/</code>), plugin initialization (<code>plugin/doppler.lua</code>), and testing framework (<code>tests/</code>).</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 19, 17, 42, 0, time.UTC),
	Description:     "A Neovim plugin that seamlessly integrates Doppler's secret management",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: doppler.nvim\naliases: []\ntags:\n  - programming-language/lua\n  - ide/neovim\ncreated_at: 2025-03-28T19:17:42.000-06:00\ndescription: A Neovim plugin that seamlessly integrates Doppler's secret management\ntitle: doppler.nvim\nupdated_at: 2025-04-10T12:49:09.000-06:00\n---\n\nIn the realm of modern development, managing environment secrets securely and efficiently is paramount. For Neovim users, seamlessly integrating these secrets into the editing environment can enhance productivity and security. Enter **doppler.nvim**, a plugin designed to bridge the gap between Doppler's secret management and Neovim's powerful editing capabilities.\n\n## Understanding doppler.nvim\n\n**doppler.nvim** is a Neovim plugin that injects Doppler secrets directly into your Neovim environment based on the Doppler configurations of your project. This integration ensures that environment-specific secrets are readily available within Neovim, streamlining workflows that depend on sensitive data.\n\n## Key Features\n\n- **Seamless Secret Injection:** Automatically injects Doppler-managed secrets into Neovim when editing within a Doppler-configured project.\n\n- **On-Demand Loading:** Utilizes plugin managers like `lazy.nvim` to load the plugin as needed, optimizing Neovim's performance.\n\n- **Dependency Management:** Relies on `nvim-lua/plenary.nvim` to ensure robust functionality.\n\n## Installation Guide\n\nTo incorporate **doppler.nvim** into your Neovim setup using `lazy.nvim`, add the following configuration to your `init.lua`:\n\n```lua\nreturn {\n    \"conneroisu/doppler.nvim\",\n    dependencies = {\n        'nvim-lua/plenary.nvim',\n    },\n}\n```\n\nThis setup ensures that **doppler.nvim** loads only when required, maintaining an efficient editing environment.\n\n## Project Structure\n\nThe **doppler.nvim** project is organized as follows:\n\n```\n.\n├── lua\n│   ├── doppler\n│   │   └── module.lua\n│   └── doppler.lua\n├── Makefile\n├── plugin\n│   └── doppler.lua\n├── README.md\n├── tests\n│   ├── minimal_init.lua\n│   └── doppler\n│       └── doppler_spec.lua\n```\n\nThis structure delineates the core functionality (`lua/doppler/`), plugin initialization (`plugin/doppler.lua`), and testing framework (`tests/`).\n\n",
	Slug:            "doppler.nvim",
	TagSlugs:        []string{"programming-language/lua", "ide/neovim"},
	Tags:            []*assets.Tag{&TagProgrammingLanguageLua, &TagIdeNeovim},
	Title:           "doppler.nvim",
	UpdatedAt:       time.Date(2025, time.April, 10, 12, 49, 9, 0, time.UTC),
	X:               -1.176920909464204,
	Y:               0.1409890669229276,
	Z:               0.21123949695526661,
}}
var ProjectGroqGo = assets.Project{Embedded: assets.Embedded{
	BannerPath:      "projects/groq-go.webp",
	Content:         "<p>Github: <a href=\"https://github.com/conneroisu/groq-go\">https://github.com/conneroisu/groq-go</a></p>\n<h1 id=\"groq-go\"><a class=\"anchor permalink p-4\" href=\"#groq-go\">#</a> groq-go</h1>\n<p>As a college student passionate about developing tools that bridge the gap between Go applications and advanced language models, I created <strong>groq-go</strong>—an unofficial Go client library for the Groq API. This project enables seamless integration with various language models hosted on Groq's platform, facilitating efficient and type-safe interactions.</p>\n<p><strong>Key Features of groq-go:</strong></p>\n<ul>\n<li>\n<p><strong>Comprehensive Model Support:</strong> groq-go supports all models available through the Groq API, ensuring type safety across interactions.</p>\n</li>\n<li>\n<p><strong>Streaming Capabilities:</strong> The library allows for real-time data processing through streaming, enhancing responsiveness in applications.</p>\n</li>\n<li>\n<p><strong>Moderation Tools:</strong> Integrated moderation features assist in maintaining content quality and safety within applications.</p>\n</li>\n<li>\n<p><strong>Audio Processing:</strong> groq-go provides functionalities for audio transcription and translation, expanding the scope of multimedia applications.</p>\n</li>\n<li>\n<p><strong>Advanced Functionality Support:</strong> The library includes support for tool usage and function calling, enabling complex operations and integrations.</p>\n</li>\n<li>\n<p><strong>JSON Schema Generation:</strong> It offers JSON Schema generation from structs, streamlining data validation and documentation processes.</p>\n</li>\n<li>\n<p><strong>Extensible Integrations:</strong> groq-go integrates with extensions such as Toolhouse, E2B, Composio, and Jigsaw Stack, providing a versatile foundation for diverse applications.</p>\n</li>\n</ul>\n<p><strong>Installation:</strong></p>\n<p>To incorporate groq-go into your Go project, use the following command:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>go get github.com/conneroisu/groq-go\n</span></span></code></pre><p><strong>Examples and Use Cases:</strong></p>\n<p>The repository includes an <code>examples</code> directory showcasing various applications of groq-go, such as:</p>\n<ul>\n<li>\n<p><strong>Audio Processing:</strong> Demonstrates audio transcription and translation capabilities.</p>\n</li>\n<li>\n<p><strong>JSON Handling:</strong> Illustrates JSON Schema generation and manipulation.</p>\n</li>\n<li>\n<p><strong>Moderation:</strong> Shows how to implement content moderation features.</p>\n</li>\n<li>\n<p><strong>Image Discussions:</strong> Utilizes models like <code>llava-v1.5-7b-4096-preview</code> to generate image-related dialogues.</p>\n</li>\n<li>\n<p><strong>Terminal-Based Chat Applications:</strong> Provides a foundation for building chat interfaces within the terminal.</p>\n</li>\n<li>\n<p><strong>VHDL File Documentation:</strong> Automates the documentation process for VHDL files.</p>\n</li>\n<li>\n<p><strong>Python Code Execution via Toolhouse:</strong> Demonstrates executing generated Python code using Toolhouse integration.</p>\n</li>\n<li>\n<p><strong>GitHub Repository Interactions using Composio:</strong> Showcases interactions with GitHub repositories through Composio integration.</p>\n</li>\n</ul>\n<p><strong>Development and Contribution:</strong></p>\n<p><code>groq-go</code> is developed with a focus on performance and ease of use, aiming to facilitate efficient querying of open-source large language models through Groq's specially designed hardware. The project is open-source and licensed under the MIT License, encouraging community involvement and collaboration.</p>\n<p>For more information, to explore the source code, or to contribute to the project, visit the GitHub repository: <a href=\"https://github.com/conneroisu/groq-go\">https://github.com/conneroisu/groq-go</a></p>\n<p>By developing groq-go, I aim to empower Go developers to harness the capabilities of advanced language models, fostering innovation and efficiency in application development.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 10, 0, time.UTC),
	Description:     "Golang library for interacting with the groq API.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: groq-go\naliases:\n  - groq-go\ntags:\n  - programming-language/go\n  - ideologies/open-source\n  - ideologies/api\nbanner_path: projects/groq-go.webp\ncreated_at: 2025-03-27T14:13:10.000-06:00\ndescription: Golang library for interacting with the groq API.\ntitle: groq-go\nupdated_at: 2025-04-11T08:30:00.000-06:00\n---\n\nGithub: [https://github.com/conneroisu/groq-go](https://github.com/conneroisu/groq-go)\n\n# groq-go\n\nAs a college student passionate about developing tools that bridge the gap between Go applications and advanced language models, I created **groq-go**—an unofficial Go client library for the Groq API. This project enables seamless integration with various language models hosted on Groq's platform, facilitating efficient and type-safe interactions.\n\n**Key Features of groq-go:**\n\n- **Comprehensive Model Support:** groq-go supports all models available through the Groq API, ensuring type safety across interactions.\n\n- **Streaming Capabilities:** The library allows for real-time data processing through streaming, enhancing responsiveness in applications.\n\n- **Moderation Tools:** Integrated moderation features assist in maintaining content quality and safety within applications.\n\n- **Audio Processing:** groq-go provides functionalities for audio transcription and translation, expanding the scope of multimedia applications.\n\n- **Advanced Functionality Support:** The library includes support for tool usage and function calling, enabling complex operations and integrations.\n\n- **JSON Schema Generation:** It offers JSON Schema generation from structs, streamlining data validation and documentation processes.\n\n- **Extensible Integrations:** groq-go integrates with extensions such as Toolhouse, E2B, Composio, and Jigsaw Stack, providing a versatile foundation for diverse applications.\n\n**Installation:**\n\nTo incorporate groq-go into your Go project, use the following command:\n\n```bash\ngo get github.com/conneroisu/groq-go\n```\n\n**Examples and Use Cases:**\n\nThe repository includes an `examples` directory showcasing various applications of groq-go, such as:\n\n- **Audio Processing:** Demonstrates audio transcription and translation capabilities.\n\n- **JSON Handling:** Illustrates JSON Schema generation and manipulation.\n\n- **Moderation:** Shows how to implement content moderation features.\n\n- **Image Discussions:** Utilizes models like `llava-v1.5-7b-4096-preview` to generate image-related dialogues.\n\n- **Terminal-Based Chat Applications:** Provides a foundation for building chat interfaces within the terminal.\n\n- **VHDL File Documentation:** Automates the documentation process for VHDL files.\n\n- **Python Code Execution via Toolhouse:** Demonstrates executing generated Python code using Toolhouse integration.\n\n- **GitHub Repository Interactions using Composio:** Showcases interactions with GitHub repositories through Composio integration.\n\n**Development and Contribution:**\n\n`groq-go` is developed with a focus on performance and ease of use, aiming to facilitate efficient querying of open-source large language models through Groq's specially designed hardware. The project is open-source and licensed under the MIT License, encouraging community involvement and collaboration.\n\nFor more information, to explore the source code, or to contribute to the project, visit the GitHub repository: [https://github.com/conneroisu/groq-go](https://github.com/conneroisu/groq-go)\n\nBy developing groq-go, I aim to empower Go developers to harness the capabilities of advanced language models, fostering innovation and efficiency in application development.\n",
	Slug:            "groq-go",
	TagSlugs:        []string{"programming-language/go", "ideologies/open-source", "ideologies/api"},
	Tags:            []*assets.Tag{&TagProgrammingLanguageGo, &TagIdeologiesOpenSource, &TagIdeologiesApi},
	Title:           "groq-go",
	UpdatedAt:       time.Date(2025, time.April, 11, 8, 30, 0, 0, time.UTC),
	X:               -0.2931722280688841,
	Y:               -0.012740127809478807,
	Z:               0.4218628973749538,
}}
var ProjectCpre488Mp1 = assets.Project{Embedded: assets.Embedded{
	BannerPath:      "projects/mp1.webp",
	Content:         "<h1 id=\"cpre488-mp1\"><a class=\"anchor permalink p-4\" href=\"#cpre488-mp1\">#</a> CPRE488 MP1</h1>\n<p>An embedded systems design lab with the goal of implementing and deploying a Positional Pulse Modulation (PPM) detection and generate circuit on a Zedboard FPGA using VHDL. This custom circuit had to be able to detect an incoming PPM signal from an HA-T6A RC controller and generate an identical signal. The final project features a C program that allows users to switch between a hardware relay mode, which relays the HA-T6A raw input, and a software relay mode, which relays the generated PPM output. This C program also allows users to debug the PPM detection circuit, record and play controller inputs for UAV flight, and ease flight controls through a filter mode.</p>\n<p>This report covers the work of section B3 of CPRE 488 and highlights the differences between subsections</p>\n<p><img src=\"https://conneroh.fly.storage.tigris.dev/projects/cpre488-mp1/13d0460f106df1a81243b5099ca32c28_MD5.jpg\"></p>\n<h2 id=\"2-in-your-writeup-describe-your-experiences-in-practicing-controlling-the-quad\"><a class=\"anchor permalink p-4\" href=\"#2-in-your-writeup-describe-your-experiences-in-practicing-controlling-the-quad\">#</a> 2. In your writeup, describe your experiences in practicing controlling the quad.</h2>\n<p>We found that flying the drone wasn't too hard, but rather, the hardware was the most problematic part of controlling the quadcopter. Trying to learn how to fly the drone with multiple quadcopters that had broken motors or battery problems turned out to be quite a task. Even at max throttle, most batteries we used couldn't lift the drone off the ground. It also took us too long of a time to realize that the trim of our right joystick was too high, preventing us from moving backward or keeping the drone stable.</p>\n<p>We also noticed that the trim values needed to be adjusted on almost every drone to make them hover properly. Though it took some time to fine-tune the trim, it allowed us to control the drones much easier.</p>\n<h2 id=\"3-in-your-writeup-describe-the-ppm-signals-what-do-each-of-the-channels-correspond-to-and-what-are-their-minimum-and-maximum-ranges-what-is-the-total-length-of-the-individual-ppm-frames-and-what-is-the-minimum-length-of-the-idle-pulse\"><a class=\"anchor permalink p-4\" href=\"#3-in-your-writeup-describe-the-ppm-signals-what-do-each-of-the-channels-correspond-to-and-what-are-their-minimum-and-maximum-ranges-what-is-the-total-length-of-the-individual-ppm-frames-and-what-is-the-minimum-length-of-the-idle-pulse\">#</a> 3. In your writeup, describe the PPM signals. What do each of the channels correspond to, and what are their minimum and maximum ranges? What is the total length of the individual PPM frames, and what is the minimum length of the idle pulse?</h2>\n<p>We were able to probe the HK-T6A controller with the Picoscope. Analysing the PPM wave form generated by the controller, we inferred the following;</p>\n<p><img src=\"https://conneroh.fly.storage.tigris.dev/projects/cpre488-mp1/20cf2bea8fc3e471b6a8b4d20f08a655_MD5.jpg\"></p>\n<p>From this observation, we measured the channels, interchannels, and overall frame. In general, we found that the interchannels were consistently around 400 us, the overall frame was roughly 20 ms , and each channel had a maximum pulse width of about 1.1 ms and a minimum pulse width of about 600 us. With all channels set to their maximum width, we would see an minimum idle pulse of 11 ms .</p>\n<p>Testing the controls, we found that each of the channels corresponded to the following controls:</p>\n<ul>\n<li>CH1: Right joystick (Horizontal)</li>\n<li>CH2: Right joystick (Vertical)</li>\n<li>CH3: Left joystick (Vertical)</li>\n<li>CH4: Left joystick (Horizontal)</li>\n<li>CH5: Pit Trim</li>\n<li>CH6: HOV Pit</li>\n</ul>\n<h2 id=\"4-based-on-the-zedboard-documentation-and-your-oscilloscope-measurement-of-the-trainer-port-what-concerns-do-you-have-about-making-this-connection\"><a class=\"anchor permalink p-4\" href=\"#4-based-on-the-zedboard-documentation-and-your-oscilloscope-measurement-of-the-trainer-port-what-concerns-do-you-have-about-making-this-connection\">#</a> 4. Based on the ZedBoard documentation and your oscilloscope measurement of the trainer port, what concerns do you have about making this connection?</h2>\n<p>The only real issue was VCC mismatch between the two systems - the HA-T6A controller had a 5 V VCC but the Zedboard had a 3.3V VCC. To avoid frying the Zedboard, we were provided a Sparkfun Logic Level Converter which down stepped from 5V to 3.3 V and upstepped from 3.3 V to 5 V .</p>\n<h2 id=\"5-in-your-write-up-provide-a-structural-diagram-of-the-axi-ppm-design-from-the-top-level-amba-axi-interface-down-to-where-you-user-logic-will-reside\"><a class=\"anchor permalink p-4\" href=\"#5-in-your-write-up-provide-a-structural-diagram-of-the-axi-ppm-design-from-the-top-level-amba-axi-interface-down-to-where-you-user-logic-will-reside\">#</a> 5. In your write up, provide a structural diagram of the axi_ppm design, from the top-level AMBA AXI interface down to where you user logic will reside.</h2>\n<p>Attached below is a figure that represents the structure of our custom AMBAAXI4-Lite IP for the axi_ppm design for subsection A. At the highest level, we instantiated our RTL for our PPM capture and generate FSMs. We also created probes that were accessible by ILAs on the main design. However, it should be noted that the probes were removed once the AXI was functioning as expected. Additional signals were used to connect the FSM outputs and inputs to the AXI slave instantiation. In the slave, FSM inputs are relayed to their respective slave registers, which in turn are configured to be accessed by software. An additional mux was described to switch between software and hardware relay modes.</p>\n<p>It should be noted that subsection B deviated in this design by instantiating their PPM capture and generate FSMs in the slave instantiation instead of at the top level. In hindsight, we believe this was the better approach as it eliminated the need for excess signals at the top level.</p>\n<p><img src=\"https://conneroh.fly.storage.tigris.dev/projects/cpre488-mp1/668e3735ce19f4a8823916f67fa11f10_MD5.jpg\"></p>\n<h1 id=\"how-does-an-address-on-the-amba-bus-generate-a-read-or-write-enable-signal-for-the-slave-registers-in-your-design-and-how-will-your-ppm-state-machine-get-access-to-the-ip-cores-memory-mapped-registers\"><a class=\"anchor permalink p-4\" href=\"#how-does-an-address-on-the-amba-bus-generate-a-read-or-write-enable-signal-for-the-slave-registers-in-your-design-and-how-will-your-ppm-state-machine-get-access-to-the-ip-cores-memory-mapped-registers\">#</a> How does an address on the AMBA bus generate a read or write enable signal for the slave registers in your design, and how will your PPM state machine get access to the IP core's Memory Mapped registers?</h1>\n<h2 id=\"6-address-decoding\"><a class=\"anchor permalink p-4\" href=\"#6-address-decoding\">#</a> 6. Address decoding</h2>\n<p>The design uses address bits [ADDR_LSB+OPT_MEM_ADDR_BITS:ADDR_LSB] to select which register to access:</p>\n<ul>\n<li>ADDR_LSB is set to ( C_S_AXI_DATA_WIDTH /32) + 1, which is typically 2 for 32-bit buses (addressing by words)</li>\n<li>OPT_MEM_ADDR_BITS is set to 3 , allowing for 16 registers <span class=\"math inline\">\\(\\left(2^{4}=16\\right)\\)</span></li>\n</ul>\n<p>The AMBAAXI IP is connected to the Zynq processor on the main design through an AXI interconnect. This connection allows for a base address to be mapped for the IP which enables software access to the 16 slave registers (slv_reg) instantiated in the slave AXI. In order to access the individual slave registers, we had to introduce an appropriate offset to the address. In our case, it was <span class=\"math inline\">\\(+0 \\times 4\\)</span> per register. We believed this to be the case as the slave register sizes were set to 32 bits, or 4 bytes. So, for our design, since the base address for the AXI IP was <span class=\"math inline\">\\(0 \\times 43 \\mathrm{C} 00000\\)</span>, our subsequent registers were mapped as such;<br>\nslv_reg0 = 0x43C00000<br>\nslv_reg1 = 0x43C00004<br>\nslv_reg2 <span class=\"math inline\">\\(=0 \\times 43 C 00008\\)</span><br>\nslv_regX <span class=\"math inline\">\\(=0 \\times 43 \\mathrm{C} 00000+(4\\)</span> * X<span class=\"math inline\">\\()\\)</span><br>\nFor example, with a 32-bit data bus, the design decodes address bits [5:2] to select among the 16 registers. The decoded value creates a 4-bit index (b&quot;0000&quot; to b&quot;1111&quot;) that selects registers slv_reg0 through slv_reg15.</p>\n<h2 id=\"7-how-does-the-ppm-state-machine-get-access-to-the-ip-cores-memory-mapped-registers\"><a class=\"anchor permalink p-4\" href=\"#7-how-does-the-ppm-state-machine-get-access-to-the-ip-cores-memory-mapped-registers\">#</a> 7. How does the PPM state machine get access to the IP core's Memory Mapped registers:</h2>\n<h2 id=\"8-write-enable-process\"><a class=\"anchor permalink p-4\" href=\"#8-write-enable-process\">#</a> 8. Write Enable Process</h2>\n<p>In AXI, a write transaction requires both address and data channels to be valid. The design generates a write enable signal ( slv_reg_wren ) when all the following conditions are met:</p>\n<ol>\n<li>The slave is ready to accept a write address (axi_awready = &lsquo;1&rsquo;)</li>\n<li>The master is presenting a valid write address (S_AXI_AWVALID = &lsquo;1&rsquo;)</li>\n<li>The slave is ready to accept write data (axi_wready = &lsquo;1&rsquo;)</li>\n<li>The master is presenting valid write data ( S_AXI_WVALID = &rsquo; 1 &lsquo;)</li>\n</ol>\n<p>This is implemented in the code with:</p>\n<p>1 slv_reg_wren &lt;= axi_wready AND S_AXI_WVALID AND axi_awready AND S_AXI_AWVALID;</p>\n<p>When this signal is asserted, the design decodes the address to determine which register to write to:</p>\n<ol>\n<li>The address comes from axi_awaddr, which latches the AXI address S_AXI_AWADDR when a valid address is presented</li>\n<li>The address is decoded by extracting the relevant bits:</li>\n</ol>\n<pre><code>1 loc_addr := axi_awaddr(ADDR_LSB + OPT_MEM_ADDR_BITS DOWNTO ADDR_LSB);\n</code></pre>\n<ol start=\"3\">\n<li>A CASE statement selects the appropriate register based on the decoded address</li>\n<li>Write strobes ( S_AXI_WSTRB ) enable byte-level granularity for writes</li>\n</ol>\n<h2 id=\"9-read-enable-process\"><a class=\"anchor permalink p-4\" href=\"#9-read-enable-process\">#</a> 9. Read Enable Process</h2>\n<p>The read enable signal ( slv_reg_rden ) is generated when:</p>\n<ol>\n<li>The slave is ready to accept a read address (axi_arready = &lsquo;1&rsquo;)</li>\n<li>The master is presenting a valid read address ( S_AXI_ARVALID = &lsquo;1&rsquo;)</li>\n<li>The read data channel is not already valid (NOT axi_rvalid)</li>\n</ol>\n<p>This is implemented with:</p>\n<p>1 slv_reg_rden &lt;= axi_arready AND S_AXI_ARVALID AND (NOT axi_rvalid);</p>\n<p>When a read is enabled:</p>\n<ol>\n<li>The address comes from axi_araddr, which latches S_AXI_ARADDR when presented</li>\n<li>The address is decoded similar to writes:</li>\n</ol>\n<p>1 loc_addr := axi_araddr(ADDR_LSB + OPT_MEM_ADDR_BITS DOWNTO ADDR_LSB);</p>\n<ol>\n<li>A CASE statement selects the appropriate register to output based on the decoded address</li>\n<li>The selected register value is placed in reg_data_out</li>\n<li>When slv_reg_rden is asserted, reg_data_out is loaded into axi_rdata to be sent to the master</li>\n</ol>\n<h2 id=\"10-starting-from-the-generic-fsms-in-your-hw-1-write-up-update-the-user-logic-module-such-that-the-design-can-appropriately-capture-and-generate-ppm-values-for-the-hobby-king-6ch-transmitter-as-described-above\"><a class=\"anchor permalink p-4\" href=\"#10-starting-from-the-generic-fsms-in-your-hw-1-write-up-update-the-user-logic-module-such-that-the-design-can-appropriately-capture-and-generate-ppm-values-for-the-hobby-king-6ch-transmitter-as-described-above\">#</a> 10. Starting from the generic FSMs in your HW-1 write-up, update the User Logic module such that the design can appropriately capture and generate PPM values for the Hobby King 6ch transmitter as described above.</h2>\n<p>Since both subsections worked individually on this lab, our approaches to finite state machines for PPM detection and generation design were relatively different. For that reason, we've decided to include both groups&rsquo; work in this report.</p>\n<h2 id=\"11-subsection-a\"><a class=\"anchor permalink p-4\" href=\"#11-subsection-a\">#</a> 11. Subsection A:</h2>\n<h2 id=\"12-ppm-capture-state-machine\"><a class=\"anchor permalink p-4\" href=\"#12-ppm-capture-state-machine\">#</a> 12. PPM Capture State Machine</h2>\n<p>The PPM detect state machine ( Capture_PPM_simp.vhd ) is instantiated in the AXI interface model and relayed into the AXI slave and the respective registers.</p>\n<pre><code>Capture_PPM_simp_inst : Capture_PPM_simp\n    port map (\n        PPM_Input =&gt; PPM_Input,\n        CLK =&gt; s00_axi_aclk,\n        CLR =&gt; s00_axi_aresetn,\n        out_channel_1 =&gt; PPM_capture_input_0,\n        out_channel_2 =&gt; PPM_capture_input_1,\n        out_channel_3 =&gt; PPM_capture_input_2,\n        out_channel_4 =&gt; PPM_capture_input_3,\n        out_channel_5 =&gt; PPM_capture_input_4,\n        out_channel_6 =&gt; PPM_capture_input_5,\n        probe_state =&gt; capture_state_probe,\n        probe_done =&gt; PPM_capture_done,\n        channel_counter_out =&gt; PPM_capture_channel_counter\n    );\n</code></pre>\n<p>This detector FSM receives a PPM signal from the controller inputs sent in from PPM_Input. The state machine will then parse the PPM signal assuming the idle segment of the signal is greater than 5 ms . In order to avoid debouncing errors, a shift register is used to ensure the PPM input has been high or low for 20 cycles. A 32-bit internal counter is used to measure channel widths. Individual channels are latched to individual output registers which are then relayed to their respective slave registers in the AMBAAXI slave (slv_reg10 through slv_reg15). Additionally, a done signal is produced when a frame is completed. This output is fed into slv_reg2 in the AMBA AXI slave. A probe for the current state and channel counter was implemented as well for real-time troubleshooting.</p>\n<p>For further technical details, this FSM is built with three processes. Two clocked processes for counters and register control, and a non-clocked process for the state machine. The state machine is as follows;</p>\n<h2 id=\"13-idle-detect\"><a class=\"anchor permalink p-4\" href=\"#13-idle-detect\">#</a> 13. IDLE_DETECT</h2>\n<p>This is the anti-mid-frame logic which counts to 5 ms during a consecutive high input before moving to the next state, IDLE.</p>\n<h2 id=\"14-idle\"><a class=\"anchor permalink p-4\" href=\"#14-idle\">#</a> 14. IDLE</h2>\n<p>The IDLE state indicates the that the current PPM signal is sitting at the idle segment where no channels are being communicated. This state looks for a stable low before continuing to the first interchannel.</p>\n<h2 id=\"15-interchannel\"><a class=\"anchor permalink p-4\" href=\"#15-interchannel\">#</a> 15. INTERCHANNEL</h2>\n<p>Depending on the number of channels that has been counted, the interchannel will look for a stable high before continuing to either the idle detection state if all 6 channels have been found, or the measure state if less than 6 channels have been found.</p>\n<h2 id=\"16-measure\"><a class=\"anchor permalink p-4\" href=\"#16-measure\">#</a> 16. MEASURE</h2>\n<p>Signaling to an internal counter, this state begins the measuring stage for a counter and looks for a valid low. Once that value is detected, the state machine moves to the storage state.</p>\n<h2 id=\"17-store\"><a class=\"anchor permalink p-4\" href=\"#17-store\">#</a> 17. STORE</h2>\n<p>This state takes a clock cycle to signal to the register control process to update registers. This state will return to the interchannel state.</p>\n<p>The file Capture_PPM_simp.vhd will have further comments on the functions of the register and counter control processes.</p>\n<p>Below is a diagram which illustrates the detector FSM.</p>\n<p><img src=\"https://conneroh.fly.storage.tigris.dev/projects/cpre488-mp1/4d15e99e04e61facd50c52710c5c2b11_MD5.jpg\"></p>\n<h2 id=\"18-ppm-generator-state-machine\"><a class=\"anchor permalink p-4\" href=\"#18-ppm-generator-state-machine\">#</a> 18. PPM Generator State Machine</h2>\n<p><img src=\"https://conneroh.fly.storage.tigris.dev/projects/cpre488-mp1/eb2a0c3ed7adedfc8970df40d3470085_MD5.jpg\"></p>\n<p>The Generate PPM works by running four different processes. The first one is the standard present state to new state logic. This state is used to move between states. The next process was the logic to determine that next state. This process ensured that the low pulses were <span class=\"math inline\">\\(400 \\mu \\mathrm{~s}\\)</span>, the high pulse output the duration of the intended register, and an idle pulse for the remainder of the duration of the 20 ms frame. This was all done in a non-clocked process, which used a data set in the next clocked process. This was where the main logic of the FSM was done. This clocked process incremented counters, reset values, and determined the output, all based on the current state. With the final process setting the register values of the output. This FSM received the output of the capture, the recorded values in play mode, and the filtered values in filter mode and outputted the 6-channel response over the PMOD.</p>\n<p>Subsection B:<br>\nPPM Detector State Machine<br>\nState Diagram<br>\nBelow is the state diagram for the PPM Detector FSM:<br>\n<img src=\"https://conneroh.fly.storage.tigris.dev/projects/cpre488-mp1/8fb8da0440037a90d78c9d01bde9e01c_MD5.jpg\"></p>\n<h2 id=\"19-output-descriptions\"><a class=\"anchor permalink p-4\" href=\"#19-output-descriptions\">#</a> 19. Output Descriptions</h2>\n<p>The outputs c_rst_n, c_en are the reset and enable signals respectively for the pulse counter. The pulse counter determines how long a PPM pulse lasts for in units of clock counts. The counter value is an output from the FSM that is provided to the registers that contain the PPM pulse widths. The chan_read output acts as the write enable for the registers that will store the PPM values.</p>\n<h2 id=\"20-input-descriptions\"><a class=\"anchor permalink p-4\" href=\"#20-input-descriptions\">#</a> 20. Input Descriptions</h2>\n<p>The input start determines when the FSM should leave the NOT_STARTED state. This allows the C program to control when the FSM runs. The input ppm is the current PPM value read from the RC controller. This is used to determine when a PPM pulse starts or ends. In the final design, the PPM input is driven by a counter that counts how many clock cycles the real PPM input has been high or low for. Then, the counter only outputs the PPM signal when the real PPM signal has been high or low for a certain amount of clock cycles. This helps combat noisy signals and makes sure the FSM doesn't transition when it should not. The input all_chan indicates when all 6 of the channels (or pulses) have been counted. Once we have counted all 6 , the FSM can return to its NOT_STARTED state since it has finished. Finally the idle input indicates when the idle pulse has been seen. To synchronize the channel reads, the circuit must identify where the idle pulse is. Once the idle pulse is identified it is know that the next seen pulse will be channel 1. To detect the idle pulse, the pulse counter is used, but there exists a special condition. The FSM input idle is only asserted when a pulse 5 ms or longer has been detected by the pulse counter.</p>\n<h2 id=\"21-state-descriptions\"><a class=\"anchor permalink p-4\" href=\"#21-state-descriptions\">#</a> 21. State Descriptions</h2>\n<p>There are seven states in this FSM: NOT_STARTED, WAIT_IDLE, COUNT_IDLE, DONE_IDLE, WAIT, COUNT, DONE.</p>\n<h2 id=\"22-not-started\"><a class=\"anchor permalink p-4\" href=\"#22-not-started\">#</a> 22. NOT_STARTED</h2>\n<p>This is the initial state that the FSM goes to upon a reset. All counters and registers are disabled in this state and the FSM will remain in this state until the start input is asserted.</p>\n<h2 id=\"23-wait-idle\"><a class=\"anchor permalink p-4\" href=\"#23-wait-idle\">#</a> 23. WAIT_IDLE</h2>\n<p>This state indicates that the FSM is waiting for a possible idle pulse to start. Once a PPM signal that has been high for a certain number of clock cycles is detected, the FSM leaves WAIT_IDLE</p>\n<h2 id=\"24-count-idle\"><a class=\"anchor permalink p-4\" href=\"#24-count-idle\">#</a> 24. COUNT_IDLE</h2>\n<p>This state indicates that the FSM is counting a possible idle pulse. The FSM will remain in this state until a low PPM signal has been detected for a certain number of clock cycles. While in this state, the pulse counter is counting the pulse width.</p>\n<h2 id=\"25-done-idle\"><a class=\"anchor permalink p-4\" href=\"#25-done-idle\">#</a> 25. DONE_IDLE</h2>\n<p>This state indicates that the FSM has finished reading a possible idle pulse. If the read pulse has a width greater than or equal to 5 ms , the FSM starts to count the channels. Otherwise, the idle pulse was not detected and the idle pulse detection process restarts.</p>\n<h2 id=\"26-wait\"><a class=\"anchor permalink p-4\" href=\"#26-wait\">#</a> 26. WAIT</h2>\n<p>This state is identical to WAIT_IDLE as it indicates that the FSM is waiting for a pulse to start. However, begin in this state implies that the idle pulse has been detected, so the current channel number is known.</p>\n<h2 id=\"27-count\"><a class=\"anchor permalink p-4\" href=\"#27-count\">#</a> 27. COUNT</h2>\n<p>This state is identical to COUNT_IDLE as it indicates that the FSM is counting a pulse. The pulse being counted is not an idle pulse however, the counted value will be saved to the channel width registers.</p>\n<h2 id=\"28-done\"><a class=\"anchor permalink p-4\" href=\"#28-done\">#</a> 28. DONE</h2>\n<p>This state is similar to DONE_IDLE as it indicates that the FSM is done counting a pulse. Upon transitioning to this state, the pulse width has been saved to an external register. A counter separate from the pulse counter is counting how many channels have been read. Once all the channels have been read, the FSM will go back to the NOT_STARTED state. If more channels need to be read, the entire channel reading process (minus detecting the idle pulse) will repeat.</p>\n<h2 id=\"29-brief-vhdl-description\"><a class=\"anchor permalink p-4\" href=\"#29-brief-vhdl-description\">#</a> 29. Brief VHDL Description</h2>\n<p>The PPM detector state machine (detect_fsm ) is instantiated in the AXI slave interface module and has its ports connected to signals/ports defined in the slave interface.</p>\n<pre><code>detect_fsm : ENTITY ppm.detect_fsm PORT MAP\n(\n    i_clk =&gt; S_AXI_ACLK,\n    i_rst_n =&gt; S_AXI_ARESETN,\n    i_ppm =&gt; i_ppm,\n    i_start =&gt; slv_reg0(1),\n    o_channel_read =&gt; s_channel_read,\n    o_state =&gt; s_detect_state,\n    o_count =&gt; s_ppm_count,\n    O_reg_sel =&gt; s_detect_reg_sel\n);\n</code></pre>\n<p>The detector FSM:</p>\n<ul>\n<li>Receives a start signal from slv_reg0 bit 1 (i_start =&gt; slv_reg0(1))</li>\n<li>Outputs the pulse counts via s_ppm_count</li>\n<li>Indicates which register to update via s_detect_reg_sel</li>\n<li>Signals when a channel has been read via s_channel_read, which acts as the write enable for slave registers 2 through 7.</li>\n</ul>\n<p>The results from the detector are then written to the appropriate registers ( slv_reg2 through slv_reg7 ) in a dedicated process:</p>\n<pre><code>DETECT_PPM_UPDATE : PROCESS (S_AXI_ACLK) IS\nBEGIN\n    IF (rising_edge(S_AXI_ACLK)) THEN\n        IF (S_AXI_ARESETN = '0') THEN\n            slv_reg2 &lt;= (OTHERS =&gt; '0');\n            slv_reg3 &lt;= (OTHERS =&gt; '0');\n        ELSE\n            IF (s_channel_read = '1') THEN\n                CASE(s_detect_reg_sel) IS\n                    WHEN B&quot;000&quot; =&gt;\n                    slv_reg2 &lt;= s_ppm_count;\n                    WHEN B&quot;001&quot; =&gt;\n                    slv_reg3 &lt;= s_ppm_count;\n                    -- ...\n                END CASE;\n            END IF;\n        END IF;\n    END IF;\nEND PROCESS DETECT_PPM_UPDATE;\n</code></pre>\n<p>Inside the detect_fsm module exists the FSM itself, the pulse counter, the channel counter, the PPM pulse start counter, and the PPM pulse end counter. As previously mentioned, the pulse counter is in charge of counting the pulse widths of the idle pulse and channel pulses. Then the channel counter is in charge of keeping track of which channel is being counted, which determines the s_detect_reg_sel value. Then the PPM pulse start counter is in charge of determining when a PPM pulse has started. Since the raw PPM signal is a bit messy, it is needed to see if the PPM signal is high for a certain number of clock cycles. Once this condition is true, we can confidently say that we have detected the start of a PPM pulse. Similar to the PPM pulse start counter, the PPM pulse end counter is in charge of determining when a PPM pulse has ended. This is achieved the same way as the PPM pulse start counter, but it looks for PPM being low instead of high.</p>\n<p>The VHDL for the pulse width counter and the channel counter is shown below:</p>\n<pre><code>2 PULSE_WIDTH_COUNTER : process(s_pulse_counter_rst_n, i_clk) is\n3 begin\n4 -- Async reset\n5 if(s_pulse_counter_rst_n = '0') then\n6 s_count &lt;= (others =&gt; '0');\n7 elsif(rising_edge(i_clk)) then\n8\n-- Channel counter\n    CHANNEL_COUNTER : process(i_rst_n, i_clk) is\n    begin\n        -- Async reset\n        if(i_rst_n = '0') then\n            s_chan &lt;= (others =&gt; '0');\n        elsif(rising_edge(i_clk)) then\n            -- If last channel has been counted, reset\n            if(s_chan = LAST_CHANNEL_CONDITION) then\n            s_chan &lt;= (others =&gt; '0');\n            elsif(s_channel_read = '1') then\n            s_chan &lt;= STD_LOGIC_VECTOR(UNSIGNED(s_chan) + 1);\n            end if;\n        end if;\n    end process CHANNEL_COUNTER;\n</code></pre>\n<p>The rest of the VHDL can be found in our submission. Many sections were left out here since they are quite large and would bloat this document.</p>\n<h2 id=\"30-ppm-generator-state-machine\"><a class=\"anchor permalink p-4\" href=\"#30-ppm-generator-state-machine\">#</a> 30. PPM Generator State Machine</h2>\n<p>The PPM generator state machine is similarly instantiated and connected:</p>\n<pre><code>generate_fsm : ENTITY ppm.generate_fsm\n    GENERIC MAP(\n    N =&gt; C_S_AXI_DATA_WIDTH\n    )\n    PORT MAPC\n    i_clk =&gt; S_AXI_ACLK,\n</code></pre>\n<pre><code>    i_rst =&gt; S_AXI_ARESETN,\n    i_slv_reg20 =&gt; s_gen_reg20,\n    i_slv_reg21 =&gt; s_gen_reg21,\n    --\n        o_done =&gt; s_gen_done,\n        o_ppm =&gt; o_ppm\n    );\n</code></pre>\n<p>The generator FSM receives its configuration values through intermediate signals ( s_gen_reg20 through s_gen_reg25). These signals are updated in a separate process that determines whether to source the values from:</p>\n<ol>\n<li>Software mode (slv_reg8 through slv_reg13) when slv_reg0(0) = &lsquo;1&rsquo;</li>\n<li>Hardware relay mode (slv_reg2 through slv_reg7) when slv_reg0(0) = &lsquo;0&rsquo;</li>\n</ol>\n<pre><code>GENERATE_PPM_UPDATE : PROCESS (S_AXI_ACLK) IS\nBEGIN\n    IF rising_edge(S_AXI_ACLK) THEN\n        IF slv_reg0(0) = '1' THEN\n            -- software relay mode\n            s_gen_reg20 &lt;= slv_reg8;\n            s_gen_reg21 &lt;= slv_reg9;\n        ELSE\n            -- hardware relay mode\n            s_gen_reg20 &lt;= slv_reg2;\n            s_gen_reg21 &lt;= slv_reg3;\n        END IF;\n    END IF;\nEND PROCESS GENERATE_PPM_UPDATE;\n</code></pre>\n<h2 id=\"31-key-architecture-points\"><a class=\"anchor permalink p-4\" href=\"#31-key-architecture-points\">#</a> 31. Key Architecture Points</h2>\n<ol>\n<li>No Direct Register Access: The FSMs don't directly read from or write to the AXI interface. Instead, they interface through signals and dedicated processes.</li>\n<li>Intermediary Signals: All communication between the AXI interface and the state machines occurs through intermediary signals (e.g., s_ppm_count, s_detect_reg_sel, etc.)</li>\n<li>Dedicated Update Processes: Separate processes handle the transfer of data between the state machines and registers, acting as a bridge between the AXI domain and the functional logic.</li>\n<li>Synchronous Updates: All updates happen synchronously with the AXI clock, ensuring consistent timing between the bus interface and the internal state machines.</li>\n</ol>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 10, 0, time.UTC),
	Description:     "The second Project from CPRE488 at Iowa State University",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: cpre488-mp1\naliases:\n  - CPRE488 MP1\ntags:\n  - hdl/vhdl\n  - ide/vivado\n  - programming-language/c\n  - protocol/uart\n  - edu/iastate\nbanner_path: projects/mp1.webp\ncreated_at: 2025-03-27T14:13:10.000-06:00\ndescription: The second Project from CPRE488 at Iowa State University\ntitle: CPRE488 MP1\nupdated_at: 2025-04-12T12:18:29.000-06:00\n---\n\n# CPRE488 MP1\n\nAn embedded systems design lab with the goal of implementing and deploying a Positional Pulse Modulation (PPM) detection and generate circuit on a Zedboard FPGA using VHDL. This custom circuit had to be able to detect an incoming PPM signal from an HA-T6A RC controller and generate an identical signal. The final project features a C program that allows users to switch between a hardware relay mode, which relays the HA-T6A raw input, and a software relay mode, which relays the generated PPM output. This C program also allows users to debug the PPM detection circuit, record and play controller inputs for UAV flight, and ease flight controls through a filter mode.\n\nThis report covers the work of section B3 of CPRE 488 and highlights the differences between subsections\n\n![[projects/cpre488-mp1/13d0460f106df1a81243b5099ca32c28_MD5.jpg]]\n\n## 2. In your writeup, describe your experiences in practicing controlling the quad.\n\nWe found that flying the drone wasn't too hard, but rather, the hardware was the most problematic part of controlling the quadcopter. Trying to learn how to fly the drone with multiple quadcopters that had broken motors or battery problems turned out to be quite a task. Even at max throttle, most batteries we used couldn't lift the drone off the ground. It also took us too long of a time to realize that the trim of our right joystick was too high, preventing us from moving backward or keeping the drone stable.\n\nWe also noticed that the trim values needed to be adjusted on almost every drone to make them hover properly. Though it took some time to fine-tune the trim, it allowed us to control the drones much easier.\n\n## 3. In your writeup, describe the PPM signals. What do each of the channels correspond to, and what are their minimum and maximum ranges? What is the total length of the individual PPM frames, and what is the minimum length of the idle pulse?\n\nWe were able to probe the HK-T6A controller with the Picoscope. Analysing the PPM wave form generated by the controller, we inferred the following;\n\n![[projects/cpre488-mp1/20cf2bea8fc3e471b6a8b4d20f08a655_MD5.jpg]]\n\nFrom this observation, we measured the channels, interchannels, and overall frame. In general, we found that the interchannels were consistently around 400 us, the overall frame was roughly 20 ms , and each channel had a maximum pulse width of about 1.1 ms and a minimum pulse width of about 600 us. With all channels set to their maximum width, we would see an minimum idle pulse of 11 ms .\n\nTesting the controls, we found that each of the channels corresponded to the following controls:\n\n- CH1: Right joystick (Horizontal)\n- CH2: Right joystick (Vertical)\n- CH3: Left joystick (Vertical)\n- CH4: Left joystick (Horizontal)\n- CH5: Pit Trim\n- CH6: HOV Pit\n\n## 4. Based on the ZedBoard documentation and your oscilloscope measurement of the trainer port, what concerns do you have about making this connection?\n\nThe only real issue was VCC mismatch between the two systems - the HA-T6A controller had a 5 V VCC but the Zedboard had a 3.3V VCC. To avoid frying the Zedboard, we were provided a Sparkfun Logic Level Converter which down stepped from 5V to 3.3 V and upstepped from 3.3 V to 5 V .\n\n## 5. In your write up, provide a structural diagram of the axi_ppm design, from the top-level AMBA AXI interface down to where you user logic will reside.\n\nAttached below is a figure that represents the structure of our custom AMBAAXI4-Lite IP for the axi_ppm design for subsection A. At the highest level, we instantiated our RTL for our PPM capture and generate FSMs. We also created probes that were accessible by ILAs on the main design. However, it should be noted that the probes were removed once the AXI was functioning as expected. Additional signals were used to connect the FSM outputs and inputs to the AXI slave instantiation. In the slave, FSM inputs are relayed to their respective slave registers, which in turn are configured to be accessed by software. An additional mux was described to switch between software and hardware relay modes.\n\nIt should be noted that subsection B deviated in this design by instantiating their PPM capture and generate FSMs in the slave instantiation instead of at the top level. In hindsight, we believe this was the better approach as it eliminated the need for excess signals at the top level.\n\n![[projects/cpre488-mp1/668e3735ce19f4a8823916f67fa11f10_MD5.jpg]]\n\n# How does an address on the AMBA bus generate a read or write enable signal for the slave registers in your design, and how will your PPM state machine get access to the IP core's Memory Mapped registers?\n\n## 6. Address decoding\n\nThe design uses address bits [ADDR_LSB+OPT_MEM_ADDR_BITS:ADDR_LSB] to select which register to access:\n\n- ADDR_LSB is set to ( C_S_AXI_DATA_WIDTH /32) + 1, which is typically 2 for 32-bit buses (addressing by words)\n- OPT_MEM_ADDR_BITS is set to 3 , allowing for 16 registers $\\left(2^{4}=16\\right)$\n\nThe AMBAAXI IP is connected to the Zynq processor on the main design through an AXI interconnect. This connection allows for a base address to be mapped for the IP which enables software access to the 16 slave registers (slv_reg) instantiated in the slave AXI. In order to access the individual slave registers, we had to introduce an appropriate offset to the address. In our case, it was $+0 \\times 4$ per register. We believed this to be the case as the slave register sizes were set to 32 bits, or 4 bytes. So, for our design, since the base address for the AXI IP was $0 \\times 43 \\mathrm{C} 00000$, our subsequent registers were mapped as such;\nslv_reg0 = 0x43C00000\nslv_reg1 = 0x43C00004\nslv_reg2 $=0 \\times 43 C 00008$\nslv_regX $=0 \\times 43 \\mathrm{C} 00000+(4$ \\* X$)$\nFor example, with a 32-bit data bus, the design decodes address bits [5:2] to select among the 16 registers. The decoded value creates a 4-bit index (b\"0000\" to b\"1111\") that selects registers slv_reg0 through slv_reg15.\n\n## 7. How does the PPM state machine get access to the IP core's Memory Mapped registers:\n\n## 8. Write Enable Process\n\nIn AXI, a write transaction requires both address and data channels to be valid. The design generates a write enable signal ( slv_reg_wren ) when all the following conditions are met:\n\n1. The slave is ready to accept a write address (axi_awready = '1')\n2. The master is presenting a valid write address (S_AXI_AWVALID = '1')\n3. The slave is ready to accept write data (axi_wready = '1')\n4. The master is presenting valid write data ( S_AXI_WVALID = ' 1 ')\n\nThis is implemented in the code with:\n\n1 slv_reg_wren <= axi_wready AND S_AXI_WVALID AND axi_awready AND S_AXI_AWVALID;\n\nWhen this signal is asserted, the design decodes the address to determine which register to write to:\n\n1. The address comes from axi_awaddr, which latches the AXI address S_AXI_AWADDR when a valid address is presented\n2. The address is decoded by extracting the relevant bits:\n\n```\n1 loc_addr := axi_awaddr(ADDR_LSB + OPT_MEM_ADDR_BITS DOWNTO ADDR_LSB);\n```\n\n3. A CASE statement selects the appropriate register based on the decoded address\n4. Write strobes ( S_AXI_WSTRB ) enable byte-level granularity for writes\n\n## 9. Read Enable Process\n\nThe read enable signal ( slv_reg_rden ) is generated when:\n\n1. The slave is ready to accept a read address (axi_arready = '1')\n2. The master is presenting a valid read address ( S_AXI_ARVALID = '1')\n3. The read data channel is not already valid (NOT axi_rvalid)\n\nThis is implemented with:\n\n1 slv_reg_rden <= axi_arready AND S_AXI_ARVALID AND (NOT axi_rvalid);\n\nWhen a read is enabled:\n\n1. The address comes from axi_araddr, which latches S_AXI_ARADDR when presented\n2. The address is decoded similar to writes:\n\n1 loc_addr := axi_araddr(ADDR_LSB + OPT_MEM_ADDR_BITS DOWNTO ADDR_LSB);\n\n1. A CASE statement selects the appropriate register to output based on the decoded address\n2. The selected register value is placed in reg_data_out\n3. When slv_reg_rden is asserted, reg_data_out is loaded into axi_rdata to be sent to the master\n\n## 10. Starting from the generic FSMs in your HW-1 write-up, update the User Logic module such that the design can appropriately capture and generate PPM values for the Hobby King 6ch transmitter as described above.\n\nSince both subsections worked individually on this lab, our approaches to finite state machines for PPM detection and generation design were relatively different. For that reason, we've decided to include both groups' work in this report.\n\n## 11. Subsection A:\n\n## 12. PPM Capture State Machine\n\nThe PPM detect state machine ( Capture_PPM_simp.vhd ) is instantiated in the AXI interface model and relayed into the AXI slave and the respective registers.\n\n```\nCapture_PPM_simp_inst : Capture_PPM_simp\n    port map (\n        PPM_Input => PPM_Input,\n        CLK => s00_axi_aclk,\n        CLR => s00_axi_aresetn,\n        out_channel_1 => PPM_capture_input_0,\n        out_channel_2 => PPM_capture_input_1,\n        out_channel_3 => PPM_capture_input_2,\n        out_channel_4 => PPM_capture_input_3,\n        out_channel_5 => PPM_capture_input_4,\n        out_channel_6 => PPM_capture_input_5,\n        probe_state => capture_state_probe,\n        probe_done => PPM_capture_done,\n        channel_counter_out => PPM_capture_channel_counter\n    );\n```\n\nThis detector FSM receives a PPM signal from the controller inputs sent in from PPM_Input. The state machine will then parse the PPM signal assuming the idle segment of the signal is greater than 5 ms . In order to avoid debouncing errors, a shift register is used to ensure the PPM input has been high or low for 20 cycles. A 32-bit internal counter is used to measure channel widths. Individual channels are latched to individual output registers which are then relayed to their respective slave registers in the AMBAAXI slave (slv_reg10 through slv_reg15). Additionally, a done signal is produced when a frame is completed. This output is fed into slv_reg2 in the AMBA AXI slave. A probe for the current state and channel counter was implemented as well for real-time troubleshooting.\n\nFor further technical details, this FSM is built with three processes. Two clocked processes for counters and register control, and a non-clocked process for the state machine. The state machine is as follows;\n\n## 13. IDLE_DETECT\n\nThis is the anti-mid-frame logic which counts to 5 ms during a consecutive high input before moving to the next state, IDLE.\n\n## 14. IDLE\n\nThe IDLE state indicates the that the current PPM signal is sitting at the idle segment where no channels are being communicated. This state looks for a stable low before continuing to the first interchannel.\n\n## 15. INTERCHANNEL\n\nDepending on the number of channels that has been counted, the interchannel will look for a stable high before continuing to either the idle detection state if all 6 channels have been found, or the measure state if less than 6 channels have been found.\n\n## 16. MEASURE\n\nSignaling to an internal counter, this state begins the measuring stage for a counter and looks for a valid low. Once that value is detected, the state machine moves to the storage state.\n\n## 17. STORE\n\nThis state takes a clock cycle to signal to the register control process to update registers. This state will return to the interchannel state.\n\nThe file Capture_PPM_simp.vhd will have further comments on the functions of the register and counter control processes.\n\nBelow is a diagram which illustrates the detector FSM.\n\n![[projects/cpre488-mp1/4d15e99e04e61facd50c52710c5c2b11_MD5.jpg]]\n\n## 18. PPM Generator State Machine\n\n![[projects/cpre488-mp1/eb2a0c3ed7adedfc8970df40d3470085_MD5.jpg]]\n\nThe Generate PPM works by running four different processes. The first one is the standard present state to new state logic. This state is used to move between states. The next process was the logic to determine that next state. This process ensured that the low pulses were $400 \\mu \\mathrm{~s}$, the high pulse output the duration of the intended register, and an idle pulse for the remainder of the duration of the 20 ms frame. This was all done in a non-clocked process, which used a data set in the next clocked process. This was where the main logic of the FSM was done. This clocked process incremented counters, reset values, and determined the output, all based on the current state. With the final process setting the register values of the output. This FSM received the output of the capture, the recorded values in play mode, and the filtered values in filter mode and outputted the 6-channel response over the PMOD.\n\nSubsection B:\nPPM Detector State Machine\nState Diagram\nBelow is the state diagram for the PPM Detector FSM:\n![[projects/cpre488-mp1/8fb8da0440037a90d78c9d01bde9e01c_MD5.jpg]]\n\n## 19. Output Descriptions\n\nThe outputs c_rst_n, c_en are the reset and enable signals respectively for the pulse counter. The pulse counter determines how long a PPM pulse lasts for in units of clock counts. The counter value is an output from the FSM that is provided to the registers that contain the PPM pulse widths. The chan_read output acts as the write enable for the registers that will store the PPM values.\n\n## 20. Input Descriptions\n\nThe input start determines when the FSM should leave the NOT_STARTED state. This allows the C program to control when the FSM runs. The input ppm is the current PPM value read from the RC controller. This is used to determine when a PPM pulse starts or ends. In the final design, the PPM input is driven by a counter that counts how many clock cycles the real PPM input has been high or low for. Then, the counter only outputs the PPM signal when the real PPM signal has been high or low for a certain amount of clock cycles. This helps combat noisy signals and makes sure the FSM doesn't transition when it should not. The input all_chan indicates when all 6 of the channels (or pulses) have been counted. Once we have counted all 6 , the FSM can return to its NOT_STARTED state since it has finished. Finally the idle input indicates when the idle pulse has been seen. To synchronize the channel reads, the circuit must identify where the idle pulse is. Once the idle pulse is identified it is know that the next seen pulse will be channel 1. To detect the idle pulse, the pulse counter is used, but there exists a special condition. The FSM input idle is only asserted when a pulse 5 ms or longer has been detected by the pulse counter.\n\n## 21. State Descriptions\n\nThere are seven states in this FSM: NOT_STARTED, WAIT_IDLE, COUNT_IDLE, DONE_IDLE, WAIT, COUNT, DONE.\n\n## 22. NOT_STARTED\n\nThis is the initial state that the FSM goes to upon a reset. All counters and registers are disabled in this state and the FSM will remain in this state until the start input is asserted.\n\n## 23. WAIT_IDLE\n\nThis state indicates that the FSM is waiting for a possible idle pulse to start. Once a PPM signal that has been high for a certain number of clock cycles is detected, the FSM leaves WAIT_IDLE\n\n## 24. COUNT_IDLE\n\nThis state indicates that the FSM is counting a possible idle pulse. The FSM will remain in this state until a low PPM signal has been detected for a certain number of clock cycles. While in this state, the pulse counter is counting the pulse width.\n\n## 25. DONE_IDLE\n\nThis state indicates that the FSM has finished reading a possible idle pulse. If the read pulse has a width greater than or equal to 5 ms , the FSM starts to count the channels. Otherwise, the idle pulse was not detected and the idle pulse detection process restarts.\n\n## 26. WAIT\n\nThis state is identical to WAIT_IDLE as it indicates that the FSM is waiting for a pulse to start. However, begin in this state implies that the idle pulse has been detected, so the current channel number is known.\n\n## 27. COUNT\n\nThis state is identical to COUNT_IDLE as it indicates that the FSM is counting a pulse. The pulse being counted is not an idle pulse however, the counted value will be saved to the channel width registers.\n\n## 28. DONE\n\nThis state is similar to DONE_IDLE as it indicates that the FSM is done counting a pulse. Upon transitioning to this state, the pulse width has been saved to an external register. A counter separate from the pulse counter is counting how many channels have been read. Once all the channels have been read, the FSM will go back to the NOT_STARTED state. If more channels need to be read, the entire channel reading process (minus detecting the idle pulse) will repeat.\n\n## 29. Brief VHDL Description\n\nThe PPM detector state machine (detect_fsm ) is instantiated in the AXI slave interface module and has its ports connected to signals/ports defined in the slave interface.\n\n```\ndetect_fsm : ENTITY ppm.detect_fsm PORT MAP\n(\n    i_clk => S_AXI_ACLK,\n    i_rst_n => S_AXI_ARESETN,\n    i_ppm => i_ppm,\n    i_start => slv_reg0(1),\n    o_channel_read => s_channel_read,\n    o_state => s_detect_state,\n    o_count => s_ppm_count,\n    O_reg_sel => s_detect_reg_sel\n);\n```\n\nThe detector FSM:\n\n- Receives a start signal from slv_reg0 bit 1 (i_start => slv_reg0(1))\n- Outputs the pulse counts via s_ppm_count\n- Indicates which register to update via s_detect_reg_sel\n- Signals when a channel has been read via s_channel_read, which acts as the write enable for slave registers 2 through 7.\n\nThe results from the detector are then written to the appropriate registers ( slv_reg2 through slv_reg7 ) in a dedicated process:\n\n```\nDETECT_PPM_UPDATE : PROCESS (S_AXI_ACLK) IS\nBEGIN\n    IF (rising_edge(S_AXI_ACLK)) THEN\n        IF (S_AXI_ARESETN = '0') THEN\n            slv_reg2 <= (OTHERS => '0');\n            slv_reg3 <= (OTHERS => '0');\n        ELSE\n            IF (s_channel_read = '1') THEN\n                CASE(s_detect_reg_sel) IS\n                    WHEN B\"000\" =>\n                    slv_reg2 <= s_ppm_count;\n                    WHEN B\"001\" =>\n                    slv_reg3 <= s_ppm_count;\n                    -- ...\n                END CASE;\n            END IF;\n        END IF;\n    END IF;\nEND PROCESS DETECT_PPM_UPDATE;\n```\n\nInside the detect_fsm module exists the FSM itself, the pulse counter, the channel counter, the PPM pulse start counter, and the PPM pulse end counter. As previously mentioned, the pulse counter is in charge of counting the pulse widths of the idle pulse and channel pulses. Then the channel counter is in charge of keeping track of which channel is being counted, which determines the s_detect_reg_sel value. Then the PPM pulse start counter is in charge of determining when a PPM pulse has started. Since the raw PPM signal is a bit messy, it is needed to see if the PPM signal is high for a certain number of clock cycles. Once this condition is true, we can confidently say that we have detected the start of a PPM pulse. Similar to the PPM pulse start counter, the PPM pulse end counter is in charge of determining when a PPM pulse has ended. This is achieved the same way as the PPM pulse start counter, but it looks for PPM being low instead of high.\n\nThe VHDL for the pulse width counter and the channel counter is shown below:\n\n```\n2 PULSE_WIDTH_COUNTER : process(s_pulse_counter_rst_n, i_clk) is\n3 begin\n4 -- Async reset\n5 if(s_pulse_counter_rst_n = '0') then\n6 s_count <= (others => '0');\n7 elsif(rising_edge(i_clk)) then\n8\n-- Channel counter\n    CHANNEL_COUNTER : process(i_rst_n, i_clk) is\n    begin\n        -- Async reset\n        if(i_rst_n = '0') then\n            s_chan <= (others => '0');\n        elsif(rising_edge(i_clk)) then\n            -- If last channel has been counted, reset\n            if(s_chan = LAST_CHANNEL_CONDITION) then\n            s_chan <= (others => '0');\n            elsif(s_channel_read = '1') then\n            s_chan <= STD_LOGIC_VECTOR(UNSIGNED(s_chan) + 1);\n            end if;\n        end if;\n    end process CHANNEL_COUNTER;\n```\n\nThe rest of the VHDL can be found in our submission. Many sections were left out here since they are quite large and would bloat this document.\n\n## 30. PPM Generator State Machine\n\nThe PPM generator state machine is similarly instantiated and connected:\n\n```\ngenerate_fsm : ENTITY ppm.generate_fsm\n    GENERIC MAP(\n    N => C_S_AXI_DATA_WIDTH\n    )\n    PORT MAPC\n    i_clk => S_AXI_ACLK,\n```\n\n```\n    i_rst => S_AXI_ARESETN,\n    i_slv_reg20 => s_gen_reg20,\n    i_slv_reg21 => s_gen_reg21,\n    --\n        o_done => s_gen_done,\n        o_ppm => o_ppm\n    );\n```\n\nThe generator FSM receives its configuration values through intermediate signals ( s_gen_reg20 through s_gen_reg25). These signals are updated in a separate process that determines whether to source the values from:\n\n1. Software mode (slv_reg8 through slv_reg13) when slv_reg0(0) = '1'\n2. Hardware relay mode (slv_reg2 through slv_reg7) when slv_reg0(0) = '0'\n\n```\nGENERATE_PPM_UPDATE : PROCESS (S_AXI_ACLK) IS\nBEGIN\n    IF rising_edge(S_AXI_ACLK) THEN\n        IF slv_reg0(0) = '1' THEN\n            -- software relay mode\n            s_gen_reg20 <= slv_reg8;\n            s_gen_reg21 <= slv_reg9;\n        ELSE\n            -- hardware relay mode\n            s_gen_reg20 <= slv_reg2;\n            s_gen_reg21 <= slv_reg3;\n        END IF;\n    END IF;\nEND PROCESS GENERATE_PPM_UPDATE;\n```\n\n## 31. Key Architecture Points\n\n1. No Direct Register Access: The FSMs don't directly read from or write to the AXI interface. Instead, they interface through signals and dedicated processes.\n2. Intermediary Signals: All communication between the AXI interface and the state machines occurs through intermediary signals (e.g., s_ppm_count, s_detect_reg_sel, etc.)\n3. Dedicated Update Processes: Separate processes handle the transfer of data between the state machines and registers, acting as a bridge between the AXI domain and the functional logic.\n4. Synchronous Updates: All updates happen synchronously with the AXI clock, ensuring consistent timing between the bus interface and the internal state machines.\n",
	Slug:            "cpre488-mp1",
	TagSlugs:        []string{"hdl/vhdl", "ide/vivado", "programming-language/c", "protocol/uart", "edu/iastate"},
	Tags:            []*assets.Tag{&TagHdlVhdl, &TagIdeVivado, &TagProgrammingLanguageC, &TagProtocolUart, &TagEduIastate},
	Title:           "CPRE488 MP1",
	UpdatedAt:       time.Date(2025, time.April, 12, 12, 18, 29, 0, time.UTC),
	X:               -0.06490048596335844,
	Y:               0.08287346220818181,
	Z:               -0.545055610972875,
}}
var ProjectObsidianTestDatasetAid = assets.Project{Embedded: assets.Embedded{
	BannerPath:      "projects/text-dataset-aid.webp",
	Content:         "<p>Github: <a href=\"https://github.com/conneroisu/Text-Dataset-Aid-Plugin\">link</a></p>\n<h1 id=\"text-dataset-aid-obsidian-plugin\"><a class=\"anchor permalink p-4\" href=\"#text-dataset-aid-obsidian-plugin\">#</a> Text Dataset Aid Obsidian Plugin</h1>\n<p>A plugin to aid in creating text datasets for language models in Obsidian.</p>\n<h2 id=\"personalize-your-second-brain-buddytext-generation-model\"><a class=\"anchor permalink p-4\" href=\"#personalize-your-second-brain-buddytext-generation-model\">#</a> Personalize your Second Brain Buddy(Text Generation Model)</h2>\n<p>Use a txt file to house your dataset. A feature to export your txt to a jsonl file will be added soon.</p>\n<h1 id=\"context\"><a class=\"anchor permalink p-4\" href=\"#context\">#</a> Context</h1>\n<h2 id=\"condition-fully-working\"><a class=\"anchor permalink p-4\" href=\"#condition-fully-working\">#</a> Condition: Fully Working</h2>\n<p>The creation of NLP and text generation datasets are extremely impactual and has the potential to allow for researchers to train models that can automatically generate text. However, the creation of custom datasets is a teadious and slow process.</p>\n<p>The text dataset aid is a helpful tool that can aid the creation of finetuning datasets for text generation models like GPT-3 by hand! This can make the text generated by your model after finetuning to be more personalized, detailed, or better formatted. Say no to dealing with menus through hotkey configurations!</p>\n<p>This plugin can be used to quickly generate training data for NLP and text generation models. This would speed up research in these areas, as well as make it easier for practitioners to train these models.</p>\n<p>The text dataset aid plugin is a helpful tool that can aid the creation of finetuning datasets for text generation models like GPT-3 by hand. This can make the text generated by your model after finetuning to be more personalized, detailed, or better formatted. Say no to dealing with menus through hotkey configurations!</p>\n<h2 id=\"context-within-your-second-brain\"><a class=\"anchor permalink p-4\" href=\"#context-within-your-second-brain\">#</a> Context within your second brain</h2>\n<p>Updating your own text generation model on your collected dataset whilst working in your second brain allows for your model to better fit your second brain's needs. This plugin fits in any creation or editing workflow because of the nature of commands within obsidian. Hope that you use this plugin as much as I do!</p>\n<h1 id=\"advantages-of-finetuning\"><a class=\"anchor permalink p-4\" href=\"#advantages-of-finetuning\">#</a> Advantages of Finetuning</h1>\n<p>Fintuning your text generation model allows for the creation of text that is more natural and expressive.</p>\n<ol>\n<li>increased accuracy in text prediction/generation</li>\n<li>increased fluency and coherence in text generation</li>\n<li>greater control over the style and content of generated text</li>\n<li>More control over the types of outputs the model produces</li>\n<li>Greater flexibility in the types of inputs the model can accept</li>\n<li>The ability to produce more human-like outputs</li>\n<li>Increased accuracy in the prediction of certain types of outputs</li>\n</ol>\n<p>An great resource for fine-tuning principles from <a href=\"https://learn.microsoft.com/en-us/azure/cognitive-services/openai/how-to/prepare-dataset\">microsoft</a></p>\n<h1 id=\"usage\"><a class=\"anchor permalink p-4\" href=\"#usage\">#</a> Usage</h1>\n<p>The core function of this plugin is made easier through the use of vim mode, but should work in either case.<br>\nThere are two commands offered currently:(Each of these commands has an acommpanying hotkey configureable from hotkeys)</p>\n<p>When you send the prompt to the dataset if there is already a prompt there, the plugin does nothing.</p>\n<p>When you send the completion to the dataset and there is already a prompt the text selection is sent to the dataset as a completion to that prompt.</p>\n<h2 id=\"open-ended-generation-support\"><a class=\"anchor permalink p-4\" href=\"#open-ended-generation-support\">#</a> Open Ended Generation Support!</h2>\n<p>When you send the completion to the dataset and there is not a prompt, the text selection is inserted into the dataset with a empty prompt prepended to the text selection.</p>\n<p>an example of this</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>{ <span style=\"color:#f92672\">&#34;prompt&#34;</span>: <span style=\"color:#e6db74\">&#34;&#34;</span>, <span style=\"color:#f92672\">&#34;completion&#34;</span>: <span style=\"color:#e6db74\">&#34;Hello can I help you?&#34;</span> }\n</span></span></code></pre><p>another example</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>{ <span style=\"color:#f92672\">&#34;prompt&#34;</span>: <span style=\"color:#e6db74\">&#34;&#34;</span>, <span style=\"color:#f92672\">&#34;completion&#34;</span>: <span style=\"color:#e6db74\">&#34;Hi, How can I help you today&#34;</span> }\n</span></span></code></pre><p>Send the Selection to send to your dataset file as prompt<br>\nSend the Selection to send to your dataset file as completion</p>\n<p>Example of finetuning dataset</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>{<span style=\"color:#f92672\">&#34;prompt&#34;</span>:<span style=\"color:#e6db74\">&#34;Company: BHFF insurance\\nProduct: allround insurance\\nAd:One stop shop for all your insurance needs!\\nSupported:&#34;</span>, <span style=\"color:#f92672\">&#34;completion&#34;</span>:<span style=\"color:#e6db74\">&#34; yes&#34;</span>}\n</span></span><span style=\"display:flex;\"><span>{<span style=\"color:#f92672\">&#34;prompt&#34;</span>:<span style=\"color:#e6db74\">&#34;Company: Loft conversion specialists\\nProduct: -\\nAd:Straight teeth in weeks!\\nSupported:&#34;</span>, <span style=\"color:#f92672\">&#34;completion&#34;</span>:<span style=\"color:#e6db74\">&#34; no&#34;</span>}\n</span></span></code></pre><h1 id=\"installation\"><a class=\"anchor permalink p-4\" href=\"#installation\">#</a> Installation</h1>\n<h2 id=\"installing-from-the-community-plugins-page-in-obsidian\"><a class=\"anchor permalink p-4\" href=\"#installing-from-the-community-plugins-page-in-obsidian\">#</a> Installing from the community plugins page in obsidian</h2>\n<ul>\n<li>Open Settings &gt; Third-party plugin</li>\n<li>Make sure Safe mode is\u00a0<strong>off</strong></li>\n<li>Click Browse community plugins</li>\n<li>Search for &ldquo;Dataset Finetuning Aid Plugin&rdquo;</li>\n<li>Click Install</li>\n<li>Once installed, close the community plugins window and activate the newly installed plugin</li>\n</ul>\n<h2 id=\"manually-installing-from-github\"><a class=\"anchor permalink p-4\" href=\"#manually-installing-from-github\">#</a> Manually Installing from github</h2>\n<ul>\n<li>Download the Latest Release from the Releases section of the GitHub Repository(if you can't find this it should be to the right while your viewing this)</li>\n<li>Extract the plugin folder from the zip to your vault's plugins folder:\u00a0<code>&lt;vault&gt;/.obsidian/plugins/</code><br>\nNote: On some machines the\u00a0<code>.obsidian</code>\u00a0folder may be hidden. On MacOS you should be able to press\u00a0<code>Command+Shift+Dot</code>\u00a0to show the folder in Finder.</li>\n<li>Reload Obsidian</li>\n</ul>\n<h1 id=\"settings\"><a class=\"anchor permalink p-4\" href=\"#settings\">#</a> Settings</h1>\n<p>There are four main settings that are configurable within the settings panel of the plugin, but the default values are set up for the popular format for datasets for text generation models called jsonl.</p>\n<table>\n<thead>\n<tr>\n<th>Setting Name</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Prefix for Prompts</td>\n<td>This is the string that is prepended to the prompt when sent to the dataset</td>\n<td><code>{&quot;prompt&quot;:</code></td>\n</tr>\n<tr>\n<td>Suffix for Prompts</td>\n<td>This is the string that is appended to the prompt when sent to the dataset</td>\n<td><code>,</code></td>\n</tr>\n<tr>\n<td>Prefix for Completion</td>\n<td>This is the string that is prepended to the completion when sent to the dataset</td>\n<td><code>&quot;completion&quot;:</code></td>\n</tr>\n<tr>\n<td>Suffix for Completion</td>\n<td>This is the string that is appended to the completion when sent to the dataset</td>\n<td><code>}\\n</code></td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://github.com/TfTHacker/obsidian42-text-transporter/blob/main/src/features/transporterFunctions.ts\">Help within development</a></p>\n<h2 id=\"development\"><a class=\"anchor permalink p-4\" href=\"#development\">#</a> Development</h2>\n<p>Creating a new version:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>git tag -a 1.0.1 -m <span style=\"color:#e6db74\">&#34;1.0.1&#34;</span>\n</span></span><span style=\"display:flex;\"><span>git push origin 1.0.1\n</span></span></code></pre><h1 id=\"inspiration\"><a class=\"anchor permalink p-4\" href=\"#inspiration\">#</a> Inspiration</h1>\n<p>Inspired by the efficiency and appeal of fine-tuning your own language model, this plugin allows for you to build datasets from your notes in the form of prompts and responses. Automatically formats the text to the specification of\u00a0<a href=\"https://openai.com/\">OpenAI</a>\u00a0for finetuning models like GPT3.</p>\n<p>This plugin shares simularities to the textTransporter Plugin made by <a href=\"https://github.com/TfTHacker/obsidian42-text-transporter/\">TfTHacker</a></p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 11, 0, time.UTC),
	Description:     "A plugin to aid in creating text datasets for language models in Obsidian.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: obsidian-test-dataset-aid\naliases:\n  - Text Dataset Aid Obsidian Plugin\ntags:\n  - ide/obsidian\n  - programming-language/javascript\n  - programming-language/typescript\nbanner_path: projects/text-dataset-aid.webp\ncreated_at: 2025-03-27T14:13:11.000-06:00\ndescription: A plugin to aid in creating text datasets for language models in Obsidian.\ntitle: Text Dataset Aid Obsidian Plugin\nupdated_at: 2025-04-14T19:22:38.000-06:00\n---\n\nGithub: [link](https://github.com/conneroisu/Text-Dataset-Aid-Plugin)\n\n# Text Dataset Aid Obsidian Plugin\n\nA plugin to aid in creating text datasets for language models in Obsidian.\n\n## Personalize your Second Brain Buddy(Text Generation Model)\n\nUse a txt file to house your dataset. A feature to export your txt to a jsonl file will be added soon.\n\n# Context\n\n## Condition: Fully Working\n\nThe creation of NLP and text generation datasets are extremely impactual and has the potential to allow for researchers to train models that can automatically generate text. However, the creation of custom datasets is a teadious and slow process.\n\nThe text dataset aid is a helpful tool that can aid the creation of finetuning datasets for text generation models like GPT-3 by hand! This can make the text generated by your model after finetuning to be more personalized, detailed, or better formatted. Say no to dealing with menus through hotkey configurations!\n\nThis plugin can be used to quickly generate training data for NLP and text generation models. This would speed up research in these areas, as well as make it easier for practitioners to train these models.\n\nThe text dataset aid plugin is a helpful tool that can aid the creation of finetuning datasets for text generation models like GPT-3 by hand. This can make the text generated by your model after finetuning to be more personalized, detailed, or better formatted. Say no to dealing with menus through hotkey configurations!\n\n## Context within your second brain\n\nUpdating your own text generation model on your collected dataset whilst working in your second brain allows for your model to better fit your second brain's needs. This plugin fits in any creation or editing workflow because of the nature of commands within obsidian. Hope that you use this plugin as much as I do!\n\n# Advantages of Finetuning\n\nFintuning your text generation model allows for the creation of text that is more natural and expressive.\n\n1. increased accuracy in text prediction/generation\n2. increased fluency and coherence in text generation\n3. greater control over the style and content of generated text\n4. More control over the types of outputs the model produces\n5. Greater flexibility in the types of inputs the model can accept\n6. The ability to produce more human-like outputs\n7. Increased accuracy in the prediction of certain types of outputs\n\nAn great resource for fine-tuning principles from [microsoft](https://learn.microsoft.com/en-us/azure/cognitive-services/openai/how-to/prepare-dataset)\n\n# Usage\n\nThe core function of this plugin is made easier through the use of vim mode, but should work in either case.\nThere are two commands offered currently:(Each of these commands has an acommpanying hotkey configureable from hotkeys)\n\nWhen you send the prompt to the dataset if there is already a prompt there, the plugin does nothing.\n\nWhen you send the completion to the dataset and there is already a prompt the text selection is sent to the dataset as a completion to that prompt.\n\n## Open Ended Generation Support!\n\nWhen you send the completion to the dataset and there is not a prompt, the text selection is inserted into the dataset with a empty prompt prepended to the text selection.\n\nan example of this\n\n```json\n{ \"prompt\": \"\", \"completion\": \"Hello can I help you?\" }\n```\n\nanother example\n\n```json\n{ \"prompt\": \"\", \"completion\": \"Hi, How can I help you today\" }\n```\n\nSend the Selection to send to your dataset file as prompt\nSend the Selection to send to your dataset file as completion\n\nExample of finetuning dataset\n\n```json\n{\"prompt\":\"Company: BHFF insurance\\nProduct: allround insurance\\nAd:One stop shop for all your insurance needs!\\nSupported:\", \"completion\":\" yes\"}\n{\"prompt\":\"Company: Loft conversion specialists\\nProduct: -\\nAd:Straight teeth in weeks!\\nSupported:\", \"completion\":\" no\"}\n```\n\n# Installation\n\n## Installing from the community plugins page in obsidian\n\n- Open Settings > Third-party plugin\n- Make sure Safe mode is\u00a0**off**\n- Click Browse community plugins\n- Search for \"Dataset Finetuning Aid Plugin\"\n- Click Install\n- Once installed, close the community plugins window and activate the newly installed plugin\n\n## Manually Installing from github\n\n- Download the Latest Release from the Releases section of the GitHub Repository(if you can't find this it should be to the right while your viewing this)\n- Extract the plugin folder from the zip to your vault's plugins folder:\u00a0`<vault>/.obsidian/plugins/`  \n  Note: On some machines the\u00a0`.obsidian`\u00a0folder may be hidden. On MacOS you should be able to press\u00a0`Command+Shift+Dot`\u00a0to show the folder in Finder.\n- Reload Obsidian\n\n# Settings\n\nThere are four main settings that are configurable within the settings panel of the plugin, but the default values are set up for the popular format for datasets for text generation models called jsonl.\n\n| Setting Name          | Description                                                                     | Default         |\n| --------------------- | ------------------------------------------------------------------------------- | --------------- |\n| Prefix for Prompts    | This is the string that is prepended to the prompt when sent to the dataset     | `{\"prompt\":`    |\n| Suffix for Prompts    | This is the string that is appended to the prompt when sent to the dataset      | `,`             |\n| Prefix for Completion | This is the string that is prepended to the completion when sent to the dataset | `\"completion\":` |\n| Suffix for Completion | This is the string that is appended to the completion when sent to the dataset  | `}\\n`           |\n\n[Help within development](https://github.com/TfTHacker/obsidian42-text-transporter/blob/main/src/features/transporterFunctions.ts)\n\n## Development\n\nCreating a new version:\n\n```bash\ngit tag -a 1.0.1 -m \"1.0.1\"\ngit push origin 1.0.1\n```\n\n# Inspiration\n\nInspired by the efficiency and appeal of fine-tuning your own language model, this plugin allows for you to build datasets from your notes in the form of prompts and responses. Automatically formats the text to the specification of\u00a0[OpenAI](https://openai.com/)\u00a0for finetuning models like GPT3.\n\nThis plugin shares simularities to the textTransporter Plugin made by [TfTHacker](https://github.com/TfTHacker/obsidian42-text-transporter/)\n",
	Slug:            "obsidian-test-dataset-aid",
	TagSlugs:        []string{"ide/obsidian", "programming-language/javascript", "programming-language/typescript"},
	Tags:            []*assets.Tag{&TagIdeObsidian, &TagProgrammingLanguageJavascript, &TagProgrammingLanguageTypescript},
	Title:           "Text Dataset Aid Obsidian Plugin",
	UpdatedAt:       time.Date(2025, time.April, 14, 19, 22, 38, 0, time.UTC),
	X:               -0.15027264279608368,
	Y:               0.13905739970808106,
	Z:               -0.36421631054845904,
}}
var ProjectVerilogSingleCycleMips = assets.Project{Embedded: assets.Embedded{
	BannerPath:      "projects/single-cycle-mips-verilog.webp",
	Content:         "<p>Github: <a href=\"https://github.com/conneroisu/single-cycle-mips-verilog\">https://github.com/conneroisu/single-cycle-mips-verilog</a></p>\n<h1 id=\"singe-cycle-mips-verilog\"><a class=\"anchor permalink p-4\" href=\"#singe-cycle-mips-verilog\">#</a> singe-cycle-mips-verilog</h1>\n<p>A single cycle mips processor implementation in verilog with reflections from writing a similar single-cycle<br>\nprocessor project in vhdl that can execute a subset of the MIPS<br>\ninstruction set and displays the current instruction on the seven segment displays present<br>\non the FPGA board.<br>\nThe processor is implemented in Verilog and tested using a<br>\ntest-bench to verify the functionality of the processor. Additionally, the processor<br>\nis tested on an FPGA board to verify the functionality of the processor.</p>\n<!-- raw HTML omitted -->\n<p>Assembly-Instructions-Architecture.png<img src=\"assets/Assembly-Instructions-Architecture.png\" alt=\"Assembly-Instructions-Architecture.png\" /></p>\n<!-- raw HTML omitted -->\n<p>different instructions are processed in the single-cycle MIPS<br>\narchitecture.<!-- raw HTML omitted --></p>\n<p>Single-Cycle-Staging.png<img src=\"assets/Single-Cycle-Staging.png\" alt=\"Single-Cycle-Staging.png\" /></p>\n<!-- raw HTML omitted -->\n",
	CreatedAt:       time.Date(2025, time.April, 12, 19, 35, 20, 0, time.UTC),
	Description:     "A single cycle mips processor implementation in verilog.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: verilog-single-cycle-mips\naliases:\n  - singe-cycle-mips-verilog\ntags:\n  - hdl/verilog\n  - edu/iastate/cpre281\nbanner_path: projects/single-cycle-mips-verilog.webp\ncreated_at: 2025-04-12T19:35:20.000-06:00\ndescription: A single cycle mips processor implementation in verilog.\ntitle: Verilog Single Cycle MIPS\nupdated_at: 2025-04-15T05:32:18.000-06:00\n---\n\nGithub: [https://github.com/conneroisu/single-cycle-mips-verilog](https://github.com/conneroisu/single-cycle-mips-verilog)\n\n# singe-cycle-mips-verilog\n\nA single cycle mips processor implementation in verilog with reflections from writing a similar single-cycle\nprocessor project in vhdl that can execute a subset of the MIPS\ninstruction set and displays the current instruction on the seven segment displays present\non the FPGA board.\nThe processor is implemented in Verilog and tested using a\ntest-bench to verify the functionality of the processor. Additionally, the processor\nis tested on an FPGA board to verify the functionality of the processor.\n\n<body>\n</div>\n</header>\n<nav id=\"TOC\" role=\"doc-toc\">\n<h2 id=\"toc-title\">Table of Contents</h2>\n<ul>\n<li><a href=\"#proposal\" id=\"toc-proposal\">Proposal</a></li>\n<li><a href=\"#introduction\" id=\"toc-introduction\">Introduction</a></li>\n<li><a href=\"#state-machines\" id=\"toc-state-machines\">State Machines</a>\n<ul>\n<li><a href=\"#single-cycle-mips-processor-staging\"\nid=\"toc-single-cycle-mips-processor-staging\">Single Cycle MIPS Processor\nStaging</a></li>\n<li><a href=\"#execution-diagram-for-each-instruction\"\nid=\"toc-execution-diagram-for-each-instruction\">Execution diagram for\neach instruction:</a></li>\n<li><a href=\"#add-r-type-instruction\"\nid=\"toc-add-r-type-instruction\">ADD (R-type instruction)</a></li>\n<li><a href=\"#addi-i-type-instruction\"\nid=\"toc-addi-i-type-instruction\">ADDI (I-type instruction)</a></li>\n<li><a href=\"#lw-load-word\" id=\"toc-lw-load-word\">LW (Load\nWord)</a></li>\n<li><a href=\"#beq-branch-if-equal\" id=\"toc-beq-branch-if-equal\">BEQ\n(Branch if Equal)</a></li>\n<li><a href=\"#j-jump\" id=\"toc-j-jump\">J (Jump)</a></li>\n<li><a href=\"#addu-add-unsigned\" id=\"toc-addu-add-unsigned\">ADDU (Add\nUnsigned)</a></li>\n<li><a href=\"#sub-subtract\" id=\"toc-sub-subtract\">SUB\n(Subtract)</a></li>\n<li><a href=\"#subu-subtract-unsigned\"\nid=\"toc-subu-subtract-unsigned\">SUBU (Subtract Unsigned)</a></li>\n<li><a href=\"#and-bitwise-and\" id=\"toc-and-bitwise-and\">AND (Bitwise\nAND)</a></li>\n<li><a href=\"#andi-and-immediate\" id=\"toc-andi-and-immediate\">ANDI (AND\nImmediate)</a></li>\n<li><a href=\"#or\" id=\"toc-or\">OR</a></li>\n<li><a href=\"#ori-or-immediate\" id=\"toc-ori-or-immediate\">ORI (OR\nImmediate)</a></li>\n<li><a href=\"#nor\" id=\"toc-nor\">NOR</a></li>\n</ul></li>\n<li><a href=\"#comparing-verilog-vs-vhdl\"\nid=\"toc-comparing-verilog-vs-vhdl\">Comparing Verilog vs VHDL</a>\n<ul>\n<li><a href=\"#interesting-notes-about-verilog\"\nid=\"toc-interesting-notes-about-verilog\">Interesting notes about\nverilog</a></li>\n<li><a href=\"#interesting-notes-about-vhdl\"\nid=\"toc-interesting-notes-about-vhdl\">Interesting notes about\nVHDL</a></li>\n<li><a href=\"#conclusion\" id=\"toc-conclusion\">Conclusion</a></li>\n</ul></li>\n<li><a href=\"#breaking-down-decoding-a-signal-to-7-segment-displays\"\nid=\"toc-breaking-down-decoding-a-signal-to-7-segment-displays\">Breaking\ndown decoding a signal to 7-segment displays</a>\n<ul>\n<li><a href=\"#schematics\" id=\"toc-schematics\">Schematics</a>\n<ul>\n<li><a href=\"#control-unit-schematic\"\nid=\"toc-control-unit-schematic\">Control Unit Schematic</a></li>\n<li><a href=\"#register-file\" id=\"toc-register-file\">Register\nFile</a></li>\n<li><a href=\"#data-memory\" id=\"toc-data-memory\">Data Memory</a></li>\n<li><a href=\"#alu-control\" id=\"toc-alu-control\">ALU Control</a></li>\n<li><a href=\"#program-counter-control\"\nid=\"toc-program-counter-control\">Program Counter Control</a></li>\n<li><a href=\"#alu\" id=\"toc-alu\">ALU</a></li>\n<li><a href=\"#instruction-memory\"\nid=\"toc-instruction-memory\">Instruction Memory</a></li>\n<li><a href=\"#program-counter\" id=\"toc-program-counter\">Program\nCounter</a></li>\n<li><a href=\"#waveform\" id=\"toc-waveform\">Waveform</a></li>\n</ul></li>\n</ul></li>\n<li><a href=\"#tooling\" id=\"toc-tooling\">Tooling</a>\n<ul>\n<li><a href=\"#components-and-explanations\"\nid=\"toc-components-and-explanations\">Components and\nExplanations</a></li>\n<li><a href=\"#verbose-components-code\"\nid=\"toc-verbose-components-code\">Verbose Components Code</a>\n<ul>\n<li><a href=\"#data-memory-2\" id=\"toc-data-memory-2\">Data Memory</a></li>\n<li><a href=\"#instruction-memory-2\"\nid=\"toc-instruction-memory-2\">Instruction Memory</a></li>\n<li><a href=\"#program-counter-1\" id=\"toc-program-counter-1\">Program\nCounter</a></li>\n<li><a href=\"#alu-2\" id=\"toc-alu-2\">ALU</a></li>\n<li><a href=\"#control-unit-1\" id=\"toc-control-unit-1\">Control\nUnit</a></li>\n<li><a href=\"#testbench\" id=\"toc-testbench\">Testbench</a></li>\n</ul></li>\n</ul></li>\n<li><a href=\"#conclusion-1\" id=\"toc-conclusion-1\">Conclusion</a></li>\n</ul>\n</nav>\n<p>The processor is able to execute the\nfollowing instructions: <strong>LW</strong> <strong>SW</strong>\n<strong>J</strong> <strong>ADD</strong> <strong>ADDI</strong>\n<strong>BEQ</strong> <strong>ADDU</strong> <strong>SUBU</strong>\n<strong>AND</strong> <strong>ANDI</strong> <strong>OR</strong>\n<strong>ORI</strong> <strong>SUB</strong> <strong>NOR</strong>\n<strong>BNE</strong> <strong>SLT</strong></p>\n<p>\nThe current instruction being executed will be displayed\non the seven segment displays present on the FPGA board. The processor\nwill be implemented in Verilog and tested using a test-bench.</p>\n<p>After the processor has been verified using the test-bench, the\nprocessor will be tested on an FPGA board to verify the functionality of\nthe processor.</p>\n<p>The comparison and contrast of the experience writing the same\nprocessor in both Verilog and VHDL will be also included in the final\nreport.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<p>The project is a single-cycle MIPS processor that can at a variable\nspeed execute a subset of the MIPS instruction set displaying the\ncurrent instruction on the seven segment displays present on\n<strong>EP4CE115F29C7</strong> FPGA board.</p>\n<div\nstyle=\"max-width: fit-content; margin-left: auto; margin-right: auto;\">\n<figure>\n<img src=\"assets/Circuit%20Diagram.png\" alt=\"Circuit Diagram.png\" />\n<figcaption aria-hidden=\"true\">Circuit Diagram.png</figcaption>\n</figure>\n</div>\n<p>As a result of this desired function (and it’s actualation into\nreality), the processor can technically be used to do\n<strong>all</strong> the other projects from other students in the\nclass. As I took this class whilst also taking CPRE381, I additionally\ndecided to compare and contrast the experience writing the same\nprocessor in both Verilog and VHDL.</p>\n<p>While the overall state machine will be broken down below, the main\nprocessor state machine has <strong>five</strong> states:</p>\n<p><strong>Fetch</strong>: In this state, the processor fetches the next\ninstruction from memory. <strong>Decode</strong>: In this state, the\nprocessor decodes the instruction to determine what operation to\nperform. <strong>Execute</strong>: In this state, the processor executes\nthe instruction. <strong>Memory</strong>: In this state, the processor\naccesses memory to read or write data. <strong>Write-back</strong>: In\nthis state, the processor writes the results of the instruction to a\nregister.</p>\n<p>Supported Instructions: LW SW J ADD ADDI BEQ ADDU SUBU AND ANDI OR\nORI SUB NOR BNE</p>\n<h2 id=\"state-machines\">State Machines</h2>\n\n![Assembly-Instructions-Architecture.png](assets/Assembly-Instructions-Architecture.png)\n\n<p>Each instruction type (R-type, I-type, J-type) generally follows a\nsimilar flow with variations primarily in the Execute and Memory Access\nstages depending on whether the instruction involves arithmetic, memory\naccess, or control flow.</p>\n<p>This model provides a consistent framework for understanding how\n\n\ndifferent instructions are processed in the single-cycle MIPS\narchitecture.</p>\n\n\n![Single-Cycle-Staging.png](assets/Single-Cycle-Staging.png)\n\n<h3 id=\"add-r-type-instruction\">ADD (R-type instruction)</h3>\n<p>Name (format, op, function): <code>add (R,0,32)</code></p>\n<p>Syntax: <code>add rd,rs,rt</code></p>\n<p>Operation: <code>reg(rd) := reg(rs) + reg(rt);</code></p>\n<h4 id=\"instruction-overview\">Instruction Overview:</h4>\n<p>The following is an overview of the operation of the <code>add</code>\ninstruction in a MIPS processor, focusing on the key stages of the\nprocessor pipeline.</p>\n<ul>\n<li><strong>IF:</strong> The instruction is fetched from memory using\nthe program counter (PC).</li>\n<li><strong>ID:</strong> The instruction bits are decoded to determine\nit is an ADD operation. Registers specified by the source register\nfields (<code>rs</code> and <code>rt</code>) are read.</li>\n<li><strong>EX:</strong> The ALU performs the addition of the two\nregister values.</li>\n<li><strong>MEM:</strong> No action (not used by ADD).</li>\n<li><strong>WB:</strong> The result from the ALU is written back to the\ndestination register (<code>rd</code>).</li>\n</ul>\n<h4 id=\"operation-breakdown\">Operation Breakdown:</h4>\n<p>The following provides a detailed breakdown of the operation of the\n<code>add</code> instruction in a MIPS processor, focusing on the key\nstages of the processor pipeline.</p>\n<h5 id=\"stages-of-the-add-instruction\">Stages of the <code>add</code>\nInstruction:</h5>\n<ol type=\"1\">\n<li><strong>Instruction Fetch (IF):</strong>\n<ul>\n<li><p>The instruction is fetched from memory using the Program Counter\n(PC).</p></li>\n<li><p>This stage corresponds to reading the instruction code from the\ninstruction memory. The address comes from the PC which points to the\nlocation of the next instruction to execute.</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>i_Instruction <span class=\"op\">=</span> Imem<span class=\"op\">[</span>i_Addr<span class=\"op\">&gt;&gt;</span><span class=\"dv\">2</span><span class=\"op\">];</span></span></code></pre></div></li>\n</ul></li>\n<li><strong>Instruction Decode (ID):</strong>\n<ul>\n<li><p>The fetched instruction is decoded to determine it is a\n<code>add</code> operation.</p></li>\n<li><p>The opcode part of the instruction (which is <code>000000</code>\nfor R-type instructions) is identified, and the source register\nidentifiers (<code>rs</code> and <code>rt</code>) are used to read the\nrespective registers.</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>rs <span class=\"op\">=</span> i_instruction<span class=\"op\">[</span><span class=\"dv\">25</span><span class=\"op\">:</span><span class=\"dv\">21</span><span class=\"op\">];</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>rt <span class=\"op\">=</span> i_instruction<span class=\"op\">[</span><span class=\"dv\">20</span><span class=\"op\">:</span><span class=\"dv\">16</span><span class=\"op\">];</span></span></code></pre></div></li>\n</ul></li>\n<li><strong>Execute (EX):</strong>\n<ul>\n<li><p>The ALU (Arithmetic Logic Unit) performs the addition of the\nvalues in the source registers (<code>rs</code> and\n<code>rt</code>).</p></li>\n<li><p>The values from these registers are fed into the ALU where the\naddition is performed based on the control signal (<code>ALUOp</code>)\nfrom the control unit.</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>o_ALUresult <span class=\"op\">=</span> i_data1 <span class=\"op\">+</span> i_data2<span class=\"op\">;</span></span></code></pre></div></li>\n</ul></li>\n<li><strong>Memory Access (MEM):</strong>\n<ul>\n<li><p>For the <code>add</code> instruction, this stage is not utilized\nas no memory access is required (i.e., no data is read from or written\nto the memory).</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// No memory operation required for &#39;add&#39;</span></span></code></pre></div></li>\n</ul></li>\n<li><strong>Write Back (WB):</strong>\n<ul>\n<li><p>The result from the ALU is written back into the destination\nregister (<code>rd</code>).</p></li>\n<li><p>This is where the output of the ALU operation is stored back into\nthe register file, specifically into the register indicated by the\n<code>rd</code> field of the instruction.</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>Reg<span class=\"op\">[</span>rd<span class=\"op\">]</span> <span class=\"op\">=</span> o_ALUresult<span class=\"op\">;</span></span></code></pre></div></li>\n</ul></li>\n</ol>\n<h5 id=\"example-code-snippet\">Example Code Snippet:</h5>\n<p>Here is a simplified Verilog snippet that captures the essence of the\n<code>add</code> instruction’s operation in a MIPS processor, focusing\non the key stages of the mips architecture (IF, ID, EX, MEM, WB).</p>\n<div class=\"sourceCode\" id=\"cb6\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb6-1\"><a href=\"#cb6-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> MIPS_Processor<span class=\"op\">(</span><span class=\"dt\">input</span> clk<span class=\"op\">,</span> <span class=\"dt\">input</span> reset<span class=\"op\">,</span> ...<span class=\"op\">);</span></span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Registers and other declarations here</span></span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> PC<span class=\"op\">,</span> ALUResult<span class=\"op\">,</span> Reg<span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">];</span></span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> InstructionRegister<span class=\"op\">,</span> ReadData1<span class=\"op\">,</span> ReadData2<span class=\"op\">;</span></span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">integer</span> rd<span class=\"op\">,</span> rs<span class=\"op\">,</span> rt<span class=\"op\">;</span></span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">always</span> <span class=\"op\">@(</span><span class=\"kw\">posedge</span> clk<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb6-7\"><a href=\"#cb6-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">if</span> <span class=\"op\">(</span>reset<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb6-8\"><a href=\"#cb6-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>            PC <span class=\"op\">&lt;=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>  <span class=\"co\">// Reset PC</span></span>\n<span id=\"cb6-9\"><a href=\"#cb6-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">end</span> <span class=\"kw\">else</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb6-10\"><a href=\"#cb6-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"co\">// Fetch Instruction</span></span>\n<span id=\"cb6-11\"><a href=\"#cb6-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>            InstructionRegister <span class=\"op\">&lt;=</span> Imem<span class=\"op\">[</span>PC<span class=\"op\">&gt;&gt;</span><span class=\"dv\">2</span><span class=\"op\">];</span></span>\n<span id=\"cb6-12\"><a href=\"#cb6-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>            PC <span class=\"op\">&lt;=</span> PC <span class=\"op\">+</span> <span class=\"dv\">4</span><span class=\"op\">;</span></span>\n<span id=\"cb6-13\"><a href=\"#cb6-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"co\">// Decode Instruction</span></span>\n<span id=\"cb6-14\"><a href=\"#cb6-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>            rs <span class=\"op\">=</span> InstructionRegister<span class=\"op\">[</span><span class=\"dv\">25</span><span class=\"op\">:</span><span class=\"dv\">21</span><span class=\"op\">];</span> <span class=\"co\">// Extract source register indices</span></span>\n<span id=\"cb6-15\"><a href=\"#cb6-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>            rt <span class=\"op\">=</span> InstructionRegister<span class=\"op\">[</span><span class=\"dv\">20</span><span class=\"op\">:</span><span class=\"dv\">16</span><span class=\"op\">];</span> <span class=\"co\">// Extract target register indices</span></span>\n<span id=\"cb6-16\"><a href=\"#cb6-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>            rd <span class=\"op\">=</span> InstructionRegister<span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">:</span><span class=\"dv\">11</span><span class=\"op\">];</span> <span class=\"co\">// Extract destination register index</span></span>\n<span id=\"cb6-17\"><a href=\"#cb6-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>            ReadData1 <span class=\"op\">&lt;=</span> Reg<span class=\"op\">[</span>rs<span class=\"op\">];</span></span>\n<span id=\"cb6-18\"><a href=\"#cb6-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>            ReadData2 <span class=\"op\">&lt;=</span> Reg<span class=\"op\">[</span>rt<span class=\"op\">];</span></span>\n<span id=\"cb6-19\"><a href=\"#cb6-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"co\">// Execute</span></span>\n<span id=\"cb6-20\"><a href=\"#cb6-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>            ALUResult <span class=\"op\">&lt;=</span> ReadData1 <span class=\"op\">+</span> ReadData2<span class=\"op\">;</span></span>\n<span id=\"cb6-21\"><a href=\"#cb6-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"co\">// Write Back</span></span>\n<span id=\"cb6-22\"><a href=\"#cb6-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>            Reg<span class=\"op\">[</span>rd<span class=\"op\">]</span> <span class=\"op\">&lt;=</span> ALUResult<span class=\"op\">;</span></span>\n<span id=\"cb6-23\"><a href=\"#cb6-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">end</span></span>\n<span id=\"cb6-24\"><a href=\"#cb6-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb6-25\"><a href=\"#cb6-25\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<p>The <code>add</code> instruction demonstrates the typical use of the\nR-type format in MIPS instruction set architecture, involving fetching\nthe instruction, decoding it, executing the operation in the ALU,\nskipping memory access, and finally writing back the result to the\nregister file.</p>\n<h3 id=\"addi-i-type-instruction\">ADDI (I-type instruction)</h3>\n<p>Name (format, op, function): <code>add immediate (I,8,na)</code></p>\n<p>Syntax: <code>addi rt,rs,imm</code></p>\n<p>Operation: <code>reg(rt) := reg(rs) + signext(imm);</code></p>\n<h4 id=\"instruction-overview-1\">Instruction Overview:</h4>\n<ul>\n<li><strong>IF:</strong> Fetch the instruction from memory.</li>\n<li><strong>ID:</strong> Decode the instruction; read the source\nregister (<code>rs</code>).</li>\n<li><strong>EX:</strong> ALU adds the value in the source register to\nthe immediate value (which is sign-extended).</li>\n<li><strong>MEM:</strong> No action.</li>\n<li><strong>WB:</strong> The result is written back to the target\nregister (<code>rt</code>).</li>\n</ul>\n<h4 id=\"operation-breakdown-1\">Operation Breakdown:</h4>\n<p>The following further breaks down the operation of the\n<code>ADDI</code> instruction in a MIPS processor across the various\nstages of the processor pipeline.</p>\n<h5 id=\"stages-of-the-addi-instruction\">Stages of the <code>ADDI</code>\nInstruction</h5>\n<ol type=\"1\">\n<li><strong>Instruction Fetch (IF):</strong>\n<ul>\n<li>The processor retrieves the <code>ADDI</code> instruction from\nmemory based on the current Program Counter (PC) value.</li>\n<li>The instruction is then forwarded to the next stage for\ndecoding.</li>\n</ul></li>\n<li><strong>Instruction Decode (ID):</strong>\n<ul>\n<li>The instruction is decoded to identify that it is a\n<code>ADDI</code> operation.</li>\n<li>The source register (<code>rs</code>) is read to obtain its value.\nThe immediate value (<code>imm</code>) is also extracted from the\ninstruction during this phase.</li>\n</ul></li>\n<li><strong>Execute (EX):</strong>\n<ul>\n<li>The Arithmetic Logic Unit (ALU) performs the addition operation. It\nadds the value retrieved from the source register (<code>reg(rs)</code>)\nto the sign-extended immediate value (<code>signext(imm)</code>).</li>\n<li>This computation involves extending the immediate value to match the\nregister size (typically 32 bits in MIPS), preserving its sign to handle\nnegative numbers correctly.</li>\n</ul></li>\n<li><strong>Memory Access (MEM):</strong>\n<ul>\n<li>The <code>ADDI</code> instruction does not involve any memory\naccess, so this stage is effectively a no-op (no operation) for this\ninstruction.</li>\n</ul></li>\n<li><strong>Write Back (WB):</strong>\n<ul>\n<li>The result of the addition from the ALU is written back to the\ndestination register (<code>reg(rt)</code>).</li>\n<li>This step updates the target register with the computed value,\ncompleting the execution of the instruction.</li>\n</ul></li>\n</ol>\n<h5 id=\"explanation-of-the-code-implementation\">Explanation of the Code\nImplementation</h5>\n<p>The operation of <code>ADDI</code> can be modeled in a simulated or\nactual MIPS processor using the following Verilog-like pseudocode:</p>\n<div class=\"sourceCode\" id=\"cb7\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb7-1\"><a href=\"#cb7-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> addi_instruction<span class=\"op\">(</span>rs<span class=\"op\">,</span> rt<span class=\"op\">,</span> imm<span class=\"op\">,</span> <span class=\"dt\">output</span> rt_value<span class=\"op\">);</span></span>\n<span id=\"cb7-2\"><a href=\"#cb7-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">4</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> rs<span class=\"op\">,</span> rt<span class=\"op\">;</span>       <span class=\"co\">// Source and target register indices (5 bits each)</span></span>\n<span id=\"cb7-3\"><a href=\"#cb7-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> imm<span class=\"op\">;</span>         <span class=\"co\">// 16-bit immediate value</span></span>\n<span id=\"cb7-4\"><a href=\"#cb7-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> rt_value<span class=\"op\">;</span>   <span class=\"co\">// Output to target register</span></span>\n<span id=\"cb7-5\"><a href=\"#cb7-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">wire</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> rs_value<span class=\"op\">;</span>     <span class=\"co\">// Value from source register</span></span>\n<span id=\"cb7-6\"><a href=\"#cb7-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">wire</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> extended_imm<span class=\"op\">;</span> <span class=\"co\">// Sign-extended immediate value</span></span>\n<span id=\"cb7-7\"><a href=\"#cb7-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">assign</span> extended_imm <span class=\"op\">=</span> <span class=\"op\">{</span></span>\n<span id=\"cb7-8\"><a href=\"#cb7-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"op\">{</span><span class=\"dv\">16</span><span class=\"op\">{</span>imm<span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">]}},</span> imm      <span class=\"co\">// Sign-extend the immediate value</span></span>\n<span id=\"cb7-9\"><a href=\"#cb7-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">};</span></span>\n<span id=\"cb7-10\"><a href=\"#cb7-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">assign</span> rt_value <span class=\"op\">=</span> rs_value <span class=\"op\">+</span> extended_imm<span class=\"op\">;</span></span>\n<span id=\"cb7-11\"><a href=\"#cb7-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<ul>\n<li><code>rs</code> and <code>rt</code> are inputs representing the\nsource and destination register indices.</li>\n<li><code>imm</code> is the 16-bit immediate value input.</li>\n<li>The immediate value is sign-extended to 32 bits using Verilog’s bit\nreplication and concatenation (<code>{{16{imm[15]}}, imm}</code>), where\n<code>imm[15]</code> is the most significant bit (MSB) of the immediate\nvalue, replicated 16 times to fill the upper half of a 32-bit word.</li>\n<li>The sum of the sign-extended immediate and the source register value\nis computed and assigned to <code>rt_value</code>, which would be\nwritten back to the register file in the actual processor hardware.</li>\n</ul>\n<h3 id=\"lw-load-word\">LW (Load Word)</h3>\n<p>Name (format, op, function): <code>load word (I,35,na)</code></p>\n<p>Syntax: <code>lw rt,imm(rs)</code></p>\n<p>Operation: <code>reg(rt) := mem[reg(rs) + signext(imm)];</code></p>\n<h4 id=\"instruction-overview-2\">Instruction Overview:</h4>\n<ul>\n<li><strong>IF:</strong> Fetch the instruction.</li>\n<li><strong>ID:</strong> Decode the instruction; read the base address\nregister (<code>rs</code>).</li>\n<li><strong>EX:</strong> Calculate the memory address by adding the\nimmediate value (offset) to the base register.</li>\n<li><strong>MEM:</strong> Access the memory at the computed address and\nread the word.</li>\n<li><strong>WB:</strong> Write the loaded word into the target register\n(<code>rt</code>).</li>\n</ul>\n<h4 id=\"operation-breakdown-2\">Operation Breakdown:</h4>\n<p>The following provides a detailed breakdown of the operation of the\n<code>lw</code> instruction in a MIPS processor, focusing on the key\nstages of the processor pipeline.</p>\n<h5 id=\"breakdown-of-lw-instruction-execution\">Breakdown of\n<code>lw</code> Instruction Execution</h5>\n<ol type=\"1\">\n<li><strong>Instruction Fetch (IF)</strong>:\n<ul>\n<li>The processor fetches the <code>lw</code> instruction from\ninstruction memory using the program counter (PC).</li>\n<li>Code snippet showing fetching the instruction from memory:</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb8\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb8-1\"><a href=\"#cb8-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>  i_Instruction <span class=\"op\">=</span> Imem<span class=\"op\">[</span>i_Addr<span class=\"op\">&gt;&gt;</span><span class=\"dv\">2</span><span class=\"op\">];</span></span></code></pre></div></li>\n<li><strong>Instruction Decode (ID)</strong>:\n<ul>\n<li>The fetched instruction is decoded to extract the opcode, source\nregister (<code>rs</code>), target register (<code>rt</code>), and the\nimmediate value.</li>\n<li>The base address (content of <code>rs</code>) is read from the\nregister file during this phase.</li>\n<li>Code snippet showing the decoding and reading of the base\naddress:</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb9\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb9-1\"><a href=\"#cb9-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>  read_data1 <span class=\"op\">=</span> RegData<span class=\"op\">[</span>i_rs<span class=\"op\">];</span>  <span class=\"co\">// Assume i_rs is the source register index</span></span></code></pre></div></li>\n<li><strong>Execute (EX)</strong>:\n<ul>\n<li>The effective memory address is calculated by adding the\nsign-extended immediate value to the base address read from\n<code>rs</code>.</li>\n<li>This calculation typically happens in the ALU.</li>\n<li>Code snippet that could represent the address calculation in ALU\n(not specifically shown in your snippets):</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb10\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb10-1\"><a href=\"#cb10-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>  address <span class=\"op\">=</span> read_data1 <span class=\"op\">+</span> sign_extend<span class=\"op\">(</span>imm<span class=\"op\">);</span>  <span class=\"co\">// Conceptual code</span></span></code></pre></div></li>\n<li><strong>Memory Access (MEM)</strong>:\n<ul>\n<li>The processor accesses the memory location computed in the Execute\nstage.</li>\n<li>The word at this memory address is read.</li>\n<li>Code snippet showing memory access to read data:</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb11\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb11-1\"><a href=\"#cb11-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">if</span> <span class=\"op\">(</span>i_MemRead <span class=\"op\">==</span> <span class=\"dv\">1</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb11-2\"><a href=\"#cb11-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_rData <span class=\"op\">=</span> Dmem<span class=\"op\">[</span>i_addr<span class=\"op\">];</span>  <span class=\"co\">// Read memory at calculated address</span></span>\n<span id=\"cb11-3\"><a href=\"#cb11-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">}</span></span></code></pre></div></li>\n<li><strong>Write Back (WB)</strong>:\n<ul>\n<li>The data retrieved from memory is written into the target register\n(<code>rt</code>).</li>\n<li>Code snippet showing the write-back to the register:</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb12\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb12-1\"><a href=\"#cb12-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>  RegData<span class=\"op\">[</span>i_rt<span class=\"op\">]</span> <span class=\"op\">&lt;=</span> i_wData<span class=\"op\">;</span>  <span class=\"co\">// Assume i_rt is the target register index and i_wData is data read from memory</span></span></code></pre></div></li>\n</ol>\n<h4 id=\"sw-store-word\">SW (Store Word)</h4>\n<p>Name (format, op, function): store word (I,43,na)</p>\n<p>Syntax: <code>sw rt,imm(rs)</code></p>\n<p>Operation: <code>mem[reg(rs) + signext(imm)] := reg(rt);</code></p>\n<h4 id=\"instruction-overview-3\">Instruction Overview:</h4>\n<ul>\n<li><strong>IF:</strong> Fetch the instruction.</li>\n<li><strong>ID:</strong> Decode the instruction; read the base address\nregister (<code>rs</code>) and the register to be stored\n(<code>rt</code>).</li>\n<li><strong>EX:</strong> Calculate the memory address by adding the\nimmediate value (offset) to the base register.</li>\n<li><strong>MEM:</strong> Write the value from <code>rt</code> into the\ncalculated memory address.</li>\n<li><strong>WB:</strong> No write-back step for store instructions.</li>\n</ul>\n<h4 id=\"operation-breakdown-3\">Operation Breakdown:</h4>\n<p>The <code>SW</code> instruction in the MIPS architecture is used to\nstore a 32-bit word from a register into memory. Here’s an in-depth\nbreakdown of how the <code>SW</code> instruction is executed across the\nvarious stages in a MIPS processor.</p>\n<h4 id=\"instruction-stages\">Instruction Stages:</h4>\n<ol type=\"1\">\n<li><strong>IF (Instruction Fetch):</strong>\n<ul>\n<li>The instruction is fetched from the instruction memory using the\ncurrent Program Counter (PC).</li>\n</ul></li>\n<li><strong>ID (Instruction Decode):</strong>\n<ul>\n<li>The instruction is decoded to identify it as a <code>SW</code>\ninstruction.</li>\n<li>The base address register (<code>rs</code>) and the register\ncontaining data to be stored (<code>rt</code>) are identified and\nread.</li>\n</ul></li>\n<li><strong>EX (Execute):</strong>\n<ul>\n<li>The effective memory address is calculated by adding the\nsign-extended immediate (offset) to the value in the base register\n(<code>rs</code>).</li>\n</ul></li>\n<li><strong>MEM (Memory Access):</strong>\n<ul>\n<li>The data in register <code>rt</code> is written to the calculated\nmemory address.</li>\n</ul></li>\n<li><strong>WB (Write Back):</strong>\n<ul>\n<li>No write-back is performed for the <code>SW</code> instruction, as\nthis instruction does not modify any register contents.</li>\n</ul></li>\n</ol>\n<h5 id=\"verilog-implementation\">Verilog Implementation:</h5>\n<p><strong>Data Memory Module (<code>DataMemory.v</code>):</strong></p>\n<p>Below is a simplified Verilog module for a data memory component that\ncan be used to store and retrieve data in a MIPS processor. This module\nincludes logic for both read and write operations.</p>\n<div class=\"sourceCode\" id=\"cb13\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb13-1\"><a href=\"#cb13-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> DataMemory <span class=\"op\">(</span></span>\n<span id=\"cb13-2\"><a href=\"#cb13-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> clk<span class=\"op\">,</span></span>\n<span id=\"cb13-3\"><a href=\"#cb13-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> memWrite<span class=\"op\">,</span></span>\n<span id=\"cb13-4\"><a href=\"#cb13-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> address<span class=\"op\">,</span></span>\n<span id=\"cb13-5\"><a href=\"#cb13-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> writeData<span class=\"op\">,</span></span>\n<span id=\"cb13-6\"><a href=\"#cb13-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> readData</span>\n<span id=\"cb13-7\"><a href=\"#cb13-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb13-8\"><a href=\"#cb13-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> memory <span class=\"op\">[</span><span class=\"dv\">0</span><span class=\"op\">:</span><span class=\"dv\">1023</span><span class=\"op\">];</span></span>\n<span id=\"cb13-9\"><a href=\"#cb13-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">always</span> <span class=\"op\">@(</span><span class=\"kw\">posedge</span> clk<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb13-10\"><a href=\"#cb13-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">if</span> <span class=\"op\">(</span>memWrite<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb13-11\"><a href=\"#cb13-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>            memory<span class=\"op\">[</span>address <span class=\"op\">&gt;&gt;</span> <span class=\"dv\">2</span><span class=\"op\">]</span> <span class=\"op\">&lt;=</span> writeData<span class=\"op\">;</span>  <span class=\"co\">// Write operation</span></span>\n<span id=\"cb13-12\"><a href=\"#cb13-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">end</span> <span class=\"kw\">else</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb13-13\"><a href=\"#cb13-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>            readData <span class=\"op\">&lt;=</span> memory<span class=\"op\">[</span>address <span class=\"op\">&gt;&gt;</span> <span class=\"dv\">2</span><span class=\"op\">];</span>   <span class=\"co\">// Read operation</span></span>\n<span id=\"cb13-14\"><a href=\"#cb13-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">end</span></span>\n<span id=\"cb13-15\"><a href=\"#cb13-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb13-16\"><a href=\"#cb13-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<p><strong>Processor Control Logic\n(<code>ProcessorControl.v</code>):</strong></p>\n<p>Below is an extract from the ProcessorControl module that controls\nthe behavior of the processor based on the opcode of the instruction\nbeing executed. This snippet shows how the control signals are set for\nthe <code>SW</code> instruction.</p>\n<div class=\"sourceCode\" id=\"cb14\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb14-1\"><a href=\"#cb14-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> ProcessorControl <span class=\"op\">(</span></span>\n<span id=\"cb14-2\"><a href=\"#cb14-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">5</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> opcode<span class=\"op\">,</span></span>\n<span id=\"cb14-3\"><a href=\"#cb14-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> memWrite<span class=\"op\">,</span></span>\n<span id=\"cb14-4\"><a href=\"#cb14-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> aluSrc<span class=\"op\">,</span></span>\n<span id=\"cb14-5\"><a href=\"#cb14-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> regDst<span class=\"op\">,</span></span>\n<span id=\"cb14-6\"><a href=\"#cb14-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> memToReg<span class=\"op\">,</span></span>\n<span id=\"cb14-7\"><a href=\"#cb14-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> regWrite</span>\n<span id=\"cb14-8\"><a href=\"#cb14-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb14-9\"><a href=\"#cb14-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">always</span> <span class=\"op\">@(</span>*<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb14-10\"><a href=\"#cb14-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">case</span> <span class=\"op\">(</span>opcode<span class=\"op\">)</span></span>\n<span id=\"cb14-11\"><a href=\"#cb14-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"bn\">6&#39;b101011</span><span class=\"op\">:</span> <span class=\"kw\">begin</span>  <span class=\"co\">// Opcode for SW</span></span>\n<span id=\"cb14-12\"><a href=\"#cb14-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>                memWrite <span class=\"op\">=</span> <span class=\"bn\">1&#39;b1</span><span class=\"op\">;</span></span>\n<span id=\"cb14-13\"><a href=\"#cb14-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>                aluSrc <span class=\"op\">=</span> <span class=\"bn\">1&#39;b1</span><span class=\"op\">;</span></span>\n<span id=\"cb14-14\"><a href=\"#cb14-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>                regDst <span class=\"op\">=</span> <span class=\"bn\">1&#39;b0</span><span class=\"op\">;</span></span>\n<span id=\"cb14-15\"><a href=\"#cb14-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>                memToReg <span class=\"op\">=</span> <span class=\"bn\">1&#39;b0</span><span class=\"op\">;</span></span>\n<span id=\"cb14-16\"><a href=\"#cb14-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>                regWrite <span class=\"op\">=</span> <span class=\"bn\">1&#39;b0</span><span class=\"op\">;</span></span>\n<span id=\"cb14-17\"><a href=\"#cb14-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"kw\">end</span></span>\n<span id=\"cb14-18\"><a href=\"#cb14-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"kw\">default</span><span class=\"op\">:</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb14-19\"><a href=\"#cb14-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>                memWrite <span class=\"op\">=</span> <span class=\"bn\">1&#39;b0</span><span class=\"op\">;</span></span>\n<span id=\"cb14-20\"><a href=\"#cb14-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>                aluSrc <span class=\"op\">=</span> <span class=\"bn\">1&#39;b0</span><span class=\"op\">;</span></span>\n<span id=\"cb14-21\"><a href=\"#cb14-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>                regDst <span class=\"op\">=</span> <span class=\"bn\">1&#39;b0</span><span class=\"op\">;</span></span>\n<span id=\"cb14-22\"><a href=\"#cb14-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>                memToReg <span class=\"op\">=</span> <span class=\"bn\">1&#39;b0</span><span class=\"op\">;</span></span>\n<span id=\"cb14-23\"><a href=\"#cb14-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>                regWrite <span class=\"op\">=</span> <span class=\"bn\">1&#39;b0</span><span class=\"op\">;</span></span>\n<span id=\"cb14-24\"><a href=\"#cb14-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"kw\">end</span></span>\n<span id=\"cb14-25\"><a href=\"#cb14-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">endcase</span></span>\n<span id=\"cb14-26\"><a href=\"#cb14-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb14-27\"><a href=\"#cb14-27\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<p><strong>Simplified Top-Level MIPS Module:</strong></p>\n<div class=\"sourceCode\" id=\"cb15\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb15-1\"><a href=\"#cb15-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> MIPSProcessor <span class=\"op\">(</span></span>\n<span id=\"cb15-2\"><a href=\"#cb15-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> clk<span class=\"op\">,</span></span>\n<span id=\"cb15-3\"><a href=\"#cb15-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> reset<span class=\"op\">,</span></span>\n<span id=\"cb15-4\"><a href=\"#cb15-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> pc<span class=\"op\">,</span></span>\n<span id=\"cb15-5\"><a href=\"#cb15-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> instruction<span class=\"op\">,</span></span>\n<span id=\"cb15-6\"><a href=\"#cb15-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> aluResult<span class=\"op\">,</span></span>\n<span id=\"cb15-7\"><a href=\"#cb15-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> writeData<span class=\"op\">,</span></span>\n<span id=\"cb15-8\"><a href=\"#cb15-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> readData</span>\n<span id=\"cb15-9\"><a href=\"#cb15-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb15-10\"><a href=\"#cb15-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">wire</span> <span class=\"op\">[</span><span class=\"dv\">5</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> opcode <span class=\"op\">=</span> instruction<span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">26</span><span class=\"op\">];</span></span>\n<span id=\"cb15-11\"><a href=\"#cb15-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">wire</span> <span class=\"op\">[</span><span class=\"dv\">4</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> rs <span class=\"op\">=</span> instruction<span class=\"op\">[</span><span class=\"dv\">25</span><span class=\"op\">:</span><span class=\"dv\">21</span><span class=\"op\">];</span></span>\n<span id=\"cb15-12\"><a href=\"#cb15-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">wire</span> <span class=\"op\">[</span><span class=\"dv\">4</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> rt <span class=\"op\">=</span> instruction<span class=\"op\">[</span><span class=\"dv\">20</span><span class=\"op\">:</span><span class=\"dv\">16</span><span class=\"op\">];</span></span>\n<span id=\"cb15-13\"><a href=\"#cb15-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">wire</span> <span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> imm <span class=\"op\">=</span> instruction<span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">];</span></span>\n<span id=\"cb15-14\"><a href=\"#cb15-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">wire</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> signExtImm <span class=\"op\">=</span> <span class=\"op\">{{</span><span class=\"dv\">16</span><span class=\"op\">{</span>imm<span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">]}},</span> imm<span class=\"op\">};</span></span>\n<span id=\"cb15-15\"><a href=\"#cb15-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">wire</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> regDataRs<span class=\"op\">,</span> regDataRt<span class=\"op\">;</span></span>\n<span id=\"cb15-16\"><a href=\"#cb15-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">wire</span> memWrite<span class=\"op\">,</span> aluSrc<span class=\"op\">,</span> regDst<span class=\"op\">,</span> memToReg<span class=\"op\">,</span> regWrite<span class=\"op\">;</span></span>\n<span id=\"cb15-17\"><a href=\"#cb15-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Instantiate control logic</span></span>\n<span id=\"cb15-18\"><a href=\"#cb15-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>    ProcessorControl control<span class=\"op\">(</span>opcode<span class=\"op\">,</span> memWrite<span class=\"op\">,</span> aluSrc<span class=\"op\">,</span> regDst<span class=\"op\">,</span> memToReg<span class=\"op\">,</span> regWrite<span class=\"op\">);</span></span>\n<span id=\"cb15-19\"><a href=\"#cb15-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// ALU operation (assuming already instantiated and connected)</span></span>\n<span id=\"cb15-20\"><a href=\"#cb15-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Data memory operation</span></span>\n<span id=\"cb15-21\"><a href=\"#cb15-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>    DataMemory dataMem<span class=\"op\">(</span>clk<span class=\"op\">,</span> memWrite<span class=\"op\">,</span> aluResult<span class=\"op\">,</span> regDataRt<span class=\"op\">,</span> readData<span class=\"op\">);</span></span>\n<span id=\"cb15-22\"><a href=\"#cb15-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Register file operations and other connections would be defined here</span></span>\n<span id=\"cb15-23\"><a href=\"#cb15-23\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<h3 id=\"beq-branch-if-equal\">BEQ (Branch if Equal)</h3>\n<p>Name (format, op, function):\n<code>branch on equal (I,4,na)</code></p>\n<p>Syntax: <code>beq rs,rt,label</code></p>\n<p>Operation: if reg(rs) == reg(rt) then PC = BTA else NOP;</p>\n<h4 id=\"instruction-overview-4\">Instruction Overview:</h4>\n<ul>\n<li><strong>IF:</strong> Fetch the instruction.</li>\n<li><strong>ID:</strong> Decode the instruction; read the two registers\n(<code>rs</code> and <code>rt</code>) and compare them.</li>\n<li><strong>EX:</strong> Calculate the branch target address if the\ncomparison is equal (by adding the sign-extended, shifted immediate to\nthe PC).</li>\n<li><strong>MEM:</strong> No memory access.</li>\n<li><strong>WB:</strong> No write-back; update the PC to the branch\naddress if the condition is met, otherwise increment the PC as\nusual.</li>\n</ul>\n<h4 id=\"operation-breakdown-4\">Operation Breakdown:</h4>\n<p>The following provides a detailed breakdown of the operation of the\n<code>BEQ</code> instruction in a MIPS processor, focusing on the key\nstages of the processor pipeline.</p>\n<p>The <code>BEQ</code> (Branch if Equal) instruction in the MIPS\narchitecture follows a specific flow through the processor stages.\nHere’s a step-by-step walkthrough of each stage using Verilog code\nexamples to illustrate how each part of the instruction’s lifecycle is\nhandled in hardware.</p>\n<h5 id=\"instruction-stages-for-beq\">Instruction Stages for\n<code>BEQ</code></h5>\n<ol type=\"1\">\n<li><strong>IF (Instruction Fetch) Stage</strong>:\n<ul>\n<li>The instruction is fetched from the instruction memory using the\ncurrent Program Counter (PC).</li>\n<li>The PC is incremented to point to the next instruction (PC = PC +\n4).</li>\n</ul></li>\n</ol>\n<div class=\"sourceCode\" id=\"cb16\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb16-1\"><a href=\"#cb16-1\" aria-hidden=\"true\" tabindex=\"-1\"></a> <span class=\"kw\">module</span> InstructionFetch<span class=\"op\">(</span></span>\n<span id=\"cb16-2\"><a href=\"#cb16-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"dt\">input</span> clk<span class=\"op\">,</span></span>\n<span id=\"cb16-3\"><a href=\"#cb16-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"dt\">input</span> reset<span class=\"op\">,</span></span>\n<span id=\"cb16-4\"><a href=\"#cb16-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> next_pc<span class=\"op\">,</span></span>\n<span id=\"cb16-5\"><a href=\"#cb16-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> instr<span class=\"op\">,</span></span>\n<span id=\"cb16-6\"><a href=\"#cb16-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> pc</span>\n<span id=\"cb16-7\"><a href=\"#cb16-7\" aria-hidden=\"true\" tabindex=\"-1\"></a> <span class=\"op\">);</span></span>\n<span id=\"cb16-8\"><a href=\"#cb16-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"kw\">always</span> <span class=\"op\">@(</span><span class=\"kw\">posedge</span> clk <span class=\"dt\">or</span> <span class=\"kw\">posedge</span> reset<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb16-9\"><a href=\"#cb16-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>         <span class=\"kw\">if</span> <span class=\"op\">(</span>reset<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb16-10\"><a href=\"#cb16-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>             pc <span class=\"op\">&lt;=</span> <span class=\"bn\">32&#39;h00000000</span><span class=\"op\">;</span> <span class=\"co\">// Reset PC to start</span></span>\n<span id=\"cb16-11\"><a href=\"#cb16-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>         <span class=\"kw\">end</span> <span class=\"kw\">else</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb16-12\"><a href=\"#cb16-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>             pc <span class=\"op\">&lt;=</span> next_pc<span class=\"op\">;</span> <span class=\"co\">// Update PC to next PC</span></span>\n<span id=\"cb16-13\"><a href=\"#cb16-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>             instr <span class=\"op\">&lt;=</span> instruction_memory<span class=\"op\">[</span>pc <span class=\"op\">&gt;&gt;</span> <span class=\"dv\">2</span><span class=\"op\">];</span> <span class=\"co\">// Fetch instruction from memory</span></span>\n<span id=\"cb16-14\"><a href=\"#cb16-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>         <span class=\"kw\">end</span></span>\n<span id=\"cb16-15\"><a href=\"#cb16-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"kw\">end</span></span>\n<span id=\"cb16-16\"><a href=\"#cb16-16\" aria-hidden=\"true\" tabindex=\"-1\"></a> <span class=\"kw\">endmodule</span></span></code></pre></div>\n<ol start=\"2\" type=\"1\">\n<li><strong>ID (Instruction Decode) Stage</strong>:\n<ul>\n<li>Decode the fetched instruction to identify it as\n<code>BEQ</code>.</li>\n<li>Read the two source registers (<code>rs</code> and <code>rt</code>)\nbased on the instruction fields.</li>\n<li>Set up the control signals for the ALU to perform a subtraction\n(<code>rs - rt</code>).</li>\n</ul></li>\n</ol>\n<div class=\"sourceCode\" id=\"cb17\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb17-1\"><a href=\"#cb17-1\" aria-hidden=\"true\" tabindex=\"-1\"></a> <span class=\"kw\">module</span> InstructionDecode<span class=\"op\">(</span></span>\n<span id=\"cb17-2\"><a href=\"#cb17-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> instr<span class=\"op\">,</span></span>\n<span id=\"cb17-3\"><a href=\"#cb17-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">4</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> rs<span class=\"op\">,</span></span>\n<span id=\"cb17-4\"><a href=\"#cb17-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">4</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> rt<span class=\"op\">,</span></span>\n<span id=\"cb17-5\"><a href=\"#cb17-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> immediate</span>\n<span id=\"cb17-6\"><a href=\"#cb17-6\" aria-hidden=\"true\" tabindex=\"-1\"></a> <span class=\"op\">);</span></span>\n<span id=\"cb17-7\"><a href=\"#cb17-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"kw\">always</span> <span class=\"op\">@(</span>*<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb17-8\"><a href=\"#cb17-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>         rs <span class=\"op\">=</span> instr<span class=\"op\">[</span><span class=\"dv\">25</span><span class=\"op\">:</span><span class=\"dv\">21</span><span class=\"op\">];</span></span>\n<span id=\"cb17-9\"><a href=\"#cb17-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>         rt <span class=\"op\">=</span> instr<span class=\"op\">[</span><span class=\"dv\">20</span><span class=\"op\">:</span><span class=\"dv\">16</span><span class=\"op\">];</span></span>\n<span id=\"cb17-10\"><a href=\"#cb17-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>         immediate <span class=\"op\">=</span> instr<span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">];</span> <span class=\"co\">// For branch offset</span></span>\n<span id=\"cb17-11\"><a href=\"#cb17-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"kw\">end</span></span>\n<span id=\"cb17-12\"><a href=\"#cb17-12\" aria-hidden=\"true\" tabindex=\"-1\"></a> <span class=\"kw\">endmodule</span></span></code></pre></div>\n<ol start=\"3\" type=\"1\">\n<li><strong>EX (Execute) Stage</strong>:\n<ul>\n<li>Compute the target address for branching by sign-extending the\nimmediate field and shifting left by 2 bits (since it’s word-aligned),\nthen adding this to the PC + 4 (already incremented PC from IF\nstage).</li>\n<li>ALU checks if <code>rs</code> and <code>rt</code> are equal by\nsubtracting and checking if the result is zero.</li>\n</ul></li>\n</ol>\n<div class=\"sourceCode\" id=\"cb18\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb18-1\"><a href=\"#cb18-1\" aria-hidden=\"true\" tabindex=\"-1\"></a> <span class=\"kw\">module</span> ALU<span class=\"op\">(</span></span>\n<span id=\"cb18-2\"><a href=\"#cb18-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> rs_val<span class=\"op\">,</span></span>\n<span id=\"cb18-3\"><a href=\"#cb18-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> rt_val<span class=\"op\">,</span></span>\n<span id=\"cb18-4\"><a href=\"#cb18-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> sign_ext_imm<span class=\"op\">,</span></span>\n<span id=\"cb18-5\"><a href=\"#cb18-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">2</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> alu_control<span class=\"op\">,</span></span>\n<span id=\"cb18-6\"><a href=\"#cb18-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"dt\">output</span> <span class=\"dt\">reg</span> zero<span class=\"op\">,</span></span>\n<span id=\"cb18-7\"><a href=\"#cb18-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> alu_result</span>\n<span id=\"cb18-8\"><a href=\"#cb18-8\" aria-hidden=\"true\" tabindex=\"-1\"></a> <span class=\"op\">);</span></span>\n<span id=\"cb18-9\"><a href=\"#cb18-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"dt\">wire</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> branch_target <span class=\"op\">=</span> <span class=\"op\">(</span>sign_ext_imm <span class=\"op\">&lt;&lt;</span> <span class=\"dv\">2</span><span class=\"op\">)</span> <span class=\"op\">+</span> pc_plus_4<span class=\"op\">;</span></span>\n<span id=\"cb18-10\"><a href=\"#cb18-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"kw\">always</span> <span class=\"op\">@(</span>*<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb18-11\"><a href=\"#cb18-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>         <span class=\"kw\">case</span><span class=\"op\">(</span>alu_control<span class=\"op\">)</span></span>\n<span id=\"cb18-12\"><a href=\"#cb18-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>             <span class=\"bn\">3&#39;b010</span><span class=\"op\">:</span> <span class=\"kw\">begin</span> <span class=\"co\">// Subtract for BEQ</span></span>\n<span id=\"cb18-13\"><a href=\"#cb18-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>                 alu_result <span class=\"op\">=</span> rs_val <span class=\"op\">-</span> rt_val<span class=\"op\">;</span></span>\n<span id=\"cb18-14\"><a href=\"#cb18-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>                 zero <span class=\"op\">=</span> <span class=\"op\">(</span>alu_result <span class=\"op\">==</span> <span class=\"dv\">0</span><span class=\"op\">)</span> <span class=\"op\">?</span> <span class=\"bn\">1&#39;b1</span> <span class=\"op\">:</span> <span class=\"bn\">1&#39;b0</span><span class=\"op\">;</span></span>\n<span id=\"cb18-15\"><a href=\"#cb18-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>             <span class=\"kw\">end</span></span>\n<span id=\"cb18-16\"><a href=\"#cb18-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>         <span class=\"kw\">endcase</span></span>\n<span id=\"cb18-17\"><a href=\"#cb18-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"kw\">end</span></span>\n<span id=\"cb18-18\"><a href=\"#cb18-18\" aria-hidden=\"true\" tabindex=\"-1\"></a> <span class=\"kw\">endmodule</span></span></code></pre></div>\n<ol start=\"4\" type=\"1\">\n<li><strong>MEM (Memory Access) Stage</strong>:\n<ul>\n<li>For <code>BEQ</code>, there is no memory access or data memory\noperation.</li>\n</ul></li>\n<li><strong>WB (Write-Back) Stage</strong>:\n<ul>\n<li>Update the PC to the branch target if <code>rs</code> ==\n<code>rt</code> (if zero flag from ALU is true).</li>\n<li>If <code>rs</code> != <code>rt</code>, increment the PC to the next\ninstruction (already done in IF).</li>\n</ul></li>\n</ol>\n<div class=\"sourceCode\" id=\"cb19\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb19-1\"><a href=\"#cb19-1\" aria-hidden=\"true\" tabindex=\"-1\"></a> <span class=\"kw\">always</span> <span class=\"op\">@(</span><span class=\"kw\">posedge</span> clk<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb19-2\"><a href=\"#cb19-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"kw\">if</span> <span class=\"op\">(</span>branch_taken<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb19-3\"><a href=\"#cb19-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>         pc <span class=\"op\">&lt;=</span> branch_target<span class=\"op\">;</span> <span class=\"co\">// Update PC if branch is taken</span></span>\n<span id=\"cb19-4\"><a href=\"#cb19-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"kw\">end</span></span>\n<span id=\"cb19-5\"><a href=\"#cb19-5\" aria-hidden=\"true\" tabindex=\"-1\"></a> <span class=\"kw\">endmodule</span></span></code></pre></div>\n<h5 id=\"example-verilog-for-complete-beq-control\">Example Verilog for\nComplete BEQ Control</h5>\n<p>Here’s how a simpler control unit might orchestrate these stages just\nfor the <code>BEQ</code> instruction in a MIPS processor:</p>\n<div class=\"sourceCode\" id=\"cb20\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb20-1\"><a href=\"#cb20-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> ControlUnit<span class=\"op\">(</span></span>\n<span id=\"cb20-2\"><a href=\"#cb20-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">5</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> opcode<span class=\"op\">,</span></span>\n<span id=\"cb20-3\"><a href=\"#cb20-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> branch<span class=\"op\">,</span></span>\n<span id=\"cb20-4\"><a href=\"#cb20-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> alu_src<span class=\"op\">,</span></span>\n<span id=\"cb20-5\"><a href=\"#cb20-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">2</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> alu_control</span>\n<span id=\"cb20-6\"><a href=\"#cb20-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb20-7\"><a href=\"#cb20-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">always</span> <span class=\"op\">@(</span>*<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb20-8\"><a href=\"#cb20-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">case</span><span class=\"op\">(</span>opcode<span class=\"op\">)</span></span>\n<span id=\"cb20-9\"><a href=\"#cb20-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"bn\">6&#39;b000100</span><span class=\"op\">:</span> <span class=\"kw\">begin</span> <span class=\"co\">// BEQ</span></span>\n<span id=\"cb20-10\"><a href=\"#cb20-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>                branch <span class=\"op\">=</span> <span class=\"bn\">1&#39;b1</span><span class=\"op\">;</span></span>\n<span id=\"cb20-11\"><a href=\"#cb20-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>                alu_src <span class=\"op\">=</span> <span class=\"bn\">1&#39;b0</span><span class=\"op\">;</span> <span class=\"co\">// Use rs, rt directly</span></span>\n<span id=\"cb20-12\"><a href=\"#cb20-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>                alu_control <span class=\"op\">=</span> <span class=\"bn\">3&#39;b010</span><span class=\"op\">;</span> <span class=\"co\">// Set ALU to subtract</span></span>\n<span id=\"cb20-13\"><a href=\"#cb20-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"kw\">end</span></span>\n<span id=\"cb20-14\"><a href=\"#cb20-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"kw\">default</span><span class=\"op\">:</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb20-15\"><a href=\"#cb20-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>                branch <span class=\"op\">=</span> <span class=\"bn\">1&#39;b0</span><span class=\"op\">;</span></span>\n<span id=\"cb20-16\"><a href=\"#cb20-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>                alu_src <span class=\"op\">=</span> <span class=\"bn\">1&#39;b0</span><span class=\"op\">;</span></span>\n<span id=\"cb20-17\"><a href=\"#cb20-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>                alu_control <span class=\"op\">=</span> <span class=\"bn\">3&#39;b000</span><span class=\"op\">;</span></span>\n<span id=\"cb20-18\"><a href=\"#cb20-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"kw\">end</span></span>\n<span id=\"cb20-19\"><a href=\"#cb20-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">endcase</span></span>\n<span id=\"cb20-20\"><a href=\"#cb20-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb20-21\"><a href=\"#cb20-21\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<h3 id=\"j-jump\">J (Jump)</h3>\n<p>Name (format, op, function): <code>jump (J,2,na)</code></p>\n<p>Syntax: <code>j</code></p>\n<p>Operation: <code>PC := JTA;</code></p>\n<h4 id=\"instruction-overview-5\">Instruction Overview:</h4>\n<ul>\n<li><strong>IF:</strong> Fetch the instruction.</li>\n<li><strong>ID:</strong> Decode the instruction.</li>\n<li><strong>EX:</strong> Calculate the jump target address from the\naddress field of the instruction.</li>\n<li><strong>MEM:</strong> No memory access.</li>\n<li><strong>WB:</strong> Update the PC to the jump address.</li>\n</ul>\n<h4 id=\"operation-breakdown-5\">Operation Breakdown:</h4>\n<p>The following provides a detailed breakdown of the operation of the\n<code>J</code> instruction in a MIPS processor, focusing on the key\nstages of the processor pipeline. The J instruction in MIPS is a jump\ninstruction that allows the program to continue execution from a\nspecified address. It is used to alter the flow of control\nunconditionally.</p>\n<h5 id=\"instruction-format-and-operation\">Instruction Format and\nOperation:</h5>\n<ul>\n<li><strong>Name (format, op, function):</strong>\n<code>jump (J,2,na)</code></li>\n<li><strong>Syntax:</strong> <code>j target</code></li>\n<li><strong>Operation:</strong> <code>PC := JTA;</code> where JTA (Jump\nTarget Address) is calculated from the instruction itself.</li>\n</ul>\n<h5 id=\"stages-of-j-instruction-execution\">Stages of J Instruction\nExecution</h5>\n<p>Here’s a breakdown of how the J instruction progresses through each\nstage of the MIPS pipeline:</p>\n<ol type=\"1\">\n<li><strong>IF (Instruction Fetch):</strong>\n<ul>\n<li>The instruction is fetched from the instruction memory at the\ncurrent program counter (PC) address.</li>\n<li>The PC is then incremented by 4 to point to the next sequential\ninstruction (though this increment will be overridden by the jump).</li>\n</ul></li>\n<li><strong>ID (Instruction Decode):</strong>\n<ul>\n<li>The opcode of the instruction is decoded to identify it as a jump\ninstruction.</li>\n<li>No registers are read in this stage because the jump instruction\ndoes not involve any registers.</li>\n</ul></li>\n<li><strong>EX (Execute):</strong>\n<ul>\n<li>The jump target address (JTA) is calculated from the address field\nof the instruction.</li>\n<li>JTA is formed by taking the upper 4 bits of the PC (from the\nincremented value that points to the next instruction) and concatenating\nthem with the 26-bit address field from the instruction, shifted left by\n2 bits (to word-align the address).</li>\n</ul></li>\n<li><strong>MEM (Memory Access):</strong>\n<ul>\n<li>There is no memory access for the jump instruction.</li>\n</ul></li>\n<li><strong>WB (Write Back):</strong>\n<ul>\n<li>The PC is updated to the new address calculated in the Execute\nstage. This is the jump target address where the program will continue\nexecuting.</li>\n</ul></li>\n</ol>\n<p>Verilog Module for Program Counter with just Jump:</p>\n<div class=\"sourceCode\" id=\"cb21\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb21-1\"><a href=\"#cb21-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> ProgramCounter<span class=\"op\">(</span></span>\n<span id=\"cb21-2\"><a href=\"#cb21-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> clk<span class=\"op\">,</span></span>\n<span id=\"cb21-3\"><a href=\"#cb21-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> reset<span class=\"op\">,</span></span>\n<span id=\"cb21-4\"><a href=\"#cb21-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> jump_address<span class=\"op\">,</span>  <span class=\"co\">// Jump target address input</span></span>\n<span id=\"cb21-5\"><a href=\"#cb21-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> jump<span class=\"op\">,</span>                <span class=\"co\">// Control signal to indicate a jump</span></span>\n<span id=\"cb21-6\"><a href=\"#cb21-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> pc       <span class=\"co\">// Program counter output</span></span>\n<span id=\"cb21-7\"><a href=\"#cb21-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb21-8\"><a href=\"#cb21-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">always</span> <span class=\"op\">@(</span><span class=\"kw\">posedge</span> clk <span class=\"dt\">or</span> <span class=\"kw\">posedge</span> reset<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb21-9\"><a href=\"#cb21-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">if</span> <span class=\"op\">(</span>reset<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb21-10\"><a href=\"#cb21-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>            pc <span class=\"op\">&lt;=</span> <span class=\"bn\">32&#39;b0</span><span class=\"op\">;</span>  <span class=\"co\">// Reset the PC to 0 on reset</span></span>\n<span id=\"cb21-11\"><a href=\"#cb21-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">end</span> <span class=\"kw\">else</span> <span class=\"kw\">if</span> <span class=\"op\">(</span>jump<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb21-12\"><a href=\"#cb21-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>            pc <span class=\"op\">&lt;=</span> jump_address<span class=\"op\">;</span>  <span class=\"co\">// Update PC to the jump address if jump is asserted</span></span>\n<span id=\"cb21-13\"><a href=\"#cb21-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">end</span> <span class=\"kw\">else</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb21-14\"><a href=\"#cb21-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>            pc <span class=\"op\">&lt;=</span> pc <span class=\"op\">+</span> <span class=\"dv\">4</span><span class=\"op\">;</span>  <span class=\"co\">// Increment PC by 4 on each clock cycle otherwise</span></span>\n<span id=\"cb21-15\"><a href=\"#cb21-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">end</span></span>\n<span id=\"cb21-16\"><a href=\"#cb21-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb21-17\"><a href=\"#cb21-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<h5 id=\"verilog-module-for-jump-address-calculation\">Verilog Module for\nJump Address Calculation:</h5>\n<p>While in this project, this function is done by\n<code>NextProgramCounter</code> module, here is a simplified version of\na module that calculates the jump address in a MIPS processor to further\nillustrate the concept of jump address calculation:</p>\n<div class=\"sourceCode\" id=\"cb22\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb22-1\"><a href=\"#cb22-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> JumpAddressCalculator<span class=\"op\">(</span></span>\n<span id=\"cb22-2\"><a href=\"#cb22-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">25</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> address_field<span class=\"op\">,</span>  <span class=\"co\">// Address field from the jump instruction</span></span>\n<span id=\"cb22-3\"><a href=\"#cb22-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> pc_plus_4<span class=\"op\">,</span>      <span class=\"co\">// PC + 4 (the incremented PC pointing to the next instruction)</span></span>\n<span id=\"cb22-4\"><a href=\"#cb22-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> jump_address   <span class=\"co\">// Calculated jump target address</span></span>\n<span id=\"cb22-5\"><a href=\"#cb22-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb22-6\"><a href=\"#cb22-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">assign</span> jump_address <span class=\"op\">=</span> <span class=\"op\">{</span>pc_plus_4<span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">28</span><span class=\"op\">],</span> address_field <span class=\"op\">&lt;&lt;</span> <span class=\"dv\">2</span><span class=\"op\">};</span></span>\n<span id=\"cb22-7\"><a href=\"#cb22-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<ul>\n<li>The <code>ProgramCounter</code> module handles updating the PC based\non whether a jump is taken. If a jump is taken, it sets the PC to the\njump address; otherwise, it simply increments the PC.</li>\n<li>The <code>JumpAddressCalculator</code> module calculates the full\n32-bit jump address by concatenating the upper 4 bits of the incremented\nPC (PC+4) with the left-shifted 26-bit address from the jump\ninstruction.</li>\n</ul>\n<p>These modules collectively illustrate how the J instruction’s effect\non the program counter can be implemented in hardware using Verilog.</p>\n<h3 id=\"addu-add-unsigned\">ADDU (Add Unsigned)</h3>\n<p>name (format, op, function): <code>add unsigned (R,0,33)</code></p>\n<p>Syntax: <code>addu rd,rs,rt</code></p>\n<p>Operation: <code>reg(rd) := reg(rs) + reg(rt);</code></p>\n<h4 id=\"instruction-overview-6\">Instruction Overview:</h4>\n<ul>\n<li><strong>IF (Instruction Fetch):</strong> The instruction is fetched\nfrom memory using the program counter (PC).</li>\n<li><strong>ID (Instruction Decode):</strong> The opcode is decoded;\nregisters rs and rt are read.</li>\n<li><strong>EX (Execute):</strong> The arithmetic logic unit (ALU) adds\nthe values from registers rs and rt.</li>\n<li><strong>MEM (Memory Access):</strong> No action needed\n(pass-through).</li>\n<li><strong>WB (Write Back):</strong> The result from the ALU is written\nback to the destination register rd.</li>\n</ul>\n<h4 id=\"operation-breakdown-6\">Operation Breakdown:</h4>\n<p>The following provides a detailed breakdown of the operation of the\n<code>ADDU</code> instruction in a MIPS processor, focusing on the key\nstages of the processor pipeline.</p>\n<p>The <code>ADDU</code> instruction in MIPS is an unsigned addition\noperation that does not raise exceptions on overflow. Here’s a detailed\nbreakdown of how the <code>ADDU</code> instruction is executed across\nthe various stages of the processor pipeline.</p>\n<h5 id=\"if-instruction-fetch\">IF (Instruction Fetch)</h5>\n<p>In this stage, the instruction is fetched from the instruction memory\nbased on the current value of the Program Counter (PC). Here’s how you\nmight see this operation in Verilog:</p>\n<div class=\"sourceCode\" id=\"cb23\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb23-1\"><a href=\"#cb23-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Instruction Fetch module</span></span>\n<span id=\"cb23-2\"><a href=\"#cb23-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> InstructionFetch<span class=\"op\">(</span></span>\n<span id=\"cb23-3\"><a href=\"#cb23-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_PC<span class=\"op\">,</span>            <span class=\"co\">// Program Counter</span></span>\n<span id=\"cb23-4\"><a href=\"#cb23-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_Instruction   <span class=\"co\">// Fetched instruction</span></span>\n<span id=\"cb23-5\"><a href=\"#cb23-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb23-6\"><a href=\"#cb23-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> instruction_memory<span class=\"op\">[</span><span class=\"dv\">255</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">];</span> <span class=\"co\">// Memory array</span></span>\n<span id=\"cb23-7\"><a href=\"#cb23-7\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-8\"><a href=\"#cb23-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Fetch the instruction</span></span>\n<span id=\"cb23-9\"><a href=\"#cb23-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">assign</span> o_Instruction <span class=\"op\">=</span> instruction_memory<span class=\"op\">[</span>i_PC <span class=\"op\">&gt;&gt;</span> <span class=\"dv\">2</span><span class=\"op\">];</span> <span class=\"co\">// Word aligned access</span></span>\n<span id=\"cb23-10\"><a href=\"#cb23-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<h5 id=\"id-instruction-decode\">ID (Instruction Decode)</h5>\n<p>During this stage, the opcode of the fetched instruction is decoded,\nand the register file is accessed to read the contents of registers\n<code>rs</code> and <code>rt</code>.</p>\n<div class=\"sourceCode\" id=\"cb24\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb24-1\"><a href=\"#cb24-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Instruction Decode module</span></span>\n<span id=\"cb24-2\"><a href=\"#cb24-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> InstructionDecode<span class=\"op\">(</span></span>\n<span id=\"cb24-3\"><a href=\"#cb24-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_Instruction<span class=\"op\">,</span>   <span class=\"co\">// Input from IF stage</span></span>\n<span id=\"cb24-4\"><a href=\"#cb24-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"op\">[</span><span class=\"dv\">4</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_rs<span class=\"op\">,</span> o_rt<span class=\"op\">,</span> o_rd <span class=\"co\">// Register specifiers</span></span>\n<span id=\"cb24-5\"><a href=\"#cb24-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb24-6\"><a href=\"#cb24-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Decode the instruction</span></span>\n<span id=\"cb24-7\"><a href=\"#cb24-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">assign</span> o_rs <span class=\"op\">=</span> i_Instruction<span class=\"op\">[</span><span class=\"dv\">25</span><span class=\"op\">:</span><span class=\"dv\">21</span><span class=\"op\">];</span></span>\n<span id=\"cb24-8\"><a href=\"#cb24-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">assign</span> o_rt <span class=\"op\">=</span> i_Instruction<span class=\"op\">[</span><span class=\"dv\">20</span><span class=\"op\">:</span><span class=\"dv\">16</span><span class=\"op\">];</span></span>\n<span id=\"cb24-9\"><a href=\"#cb24-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">assign</span> o_rd <span class=\"op\">=</span> i_Instruction<span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">:</span><span class=\"dv\">11</span><span class=\"op\">];</span></span>\n<span id=\"cb24-10\"><a href=\"#cb24-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<h5 id=\"ex-execute\">EX (Execute)</h5>\n<p>The ALU adds the values from registers <code>rs</code> and\n<code>rt</code>. Here’s a snippet of the ALU performing this\naddition:</p>\n<div class=\"sourceCode\" id=\"cb25\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb25-1\"><a href=\"#cb25-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Arithmetic Logic Unit (ALU) module</span></span>\n<span id=\"cb25-2\"><a href=\"#cb25-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> ALU<span class=\"op\">(</span></span>\n<span id=\"cb25-3\"><a href=\"#cb25-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_data1<span class=\"op\">,</span> i_data2<span class=\"op\">,</span>    <span class=\"co\">// Data from registers rs and rt</span></span>\n<span id=\"cb25-4\"><a href=\"#cb25-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">3</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_ALUControl<span class=\"op\">,</span>         <span class=\"co\">// Control signals</span></span>\n<span id=\"cb25-5\"><a href=\"#cb25-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_result        <span class=\"co\">// Result of the ALU operation</span></span>\n<span id=\"cb25-6\"><a href=\"#cb25-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb25-7\"><a href=\"#cb25-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">always</span> <span class=\"op\">@(</span>i_data1<span class=\"op\">,</span> i_data2<span class=\"op\">,</span> i_ALUControl<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb25-8\"><a href=\"#cb25-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">case</span> <span class=\"op\">(</span>i_ALUControl<span class=\"op\">)</span></span>\n<span id=\"cb25-9\"><a href=\"#cb25-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"bn\">4&#39;b0010</span><span class=\"op\">:</span> o_result <span class=\"op\">=</span> i_data1 <span class=\"op\">+</span> i_data2<span class=\"op\">;</span> <span class=\"co\">// ADDU operation</span></span>\n<span id=\"cb25-10\"><a href=\"#cb25-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"co\">// Other ALU operations...</span></span>\n<span id=\"cb25-11\"><a href=\"#cb25-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">endcase</span></span>\n<span id=\"cb25-12\"><a href=\"#cb25-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb25-13\"><a href=\"#cb25-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<h4 id=\"mem-memory-access\">MEM (Memory Access)</h4>\n<p>This stage is a pass-through for the ADDU instruction since it does\nnot involve memory access.</p>\n<div class=\"sourceCode\" id=\"cb26\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb26-1\"><a href=\"#cb26-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Memory Access Stage - No action needed for ADDU</span></span>\n<span id=\"cb26-2\"><a href=\"#cb26-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> MemoryAccess<span class=\"op\">(</span></span>\n<span id=\"cb26-3\"><a href=\"#cb26-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_ALUResult<span class=\"op\">,</span></span>\n<span id=\"cb26-4\"><a href=\"#cb26-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_MemOut</span>\n<span id=\"cb26-5\"><a href=\"#cb26-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb26-6\"><a href=\"#cb26-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">assign</span> o_MemOut <span class=\"op\">=</span> i_ALUResult<span class=\"op\">;</span>  <span class=\"co\">// Direct pass-through</span></span>\n<span id=\"cb26-7\"><a href=\"#cb26-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<h4 id=\"wb-write-back\">WB (Write Back)</h4>\n<p>The result from the ALU is written back to the destination register\n<code>rd</code>.</p>\n<div class=\"sourceCode\" id=\"cb27\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb27-1\"><a href=\"#cb27-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Write Back stage</span></span>\n<span id=\"cb27-2\"><a href=\"#cb27-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> WriteBack<span class=\"op\">(</span></span>\n<span id=\"cb27-3\"><a href=\"#cb27-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_ALUResult<span class=\"op\">,</span>       <span class=\"co\">// Result from ALU</span></span>\n<span id=\"cb27-4\"><a href=\"#cb27-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">4</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_rd<span class=\"op\">,</span>               <span class=\"co\">// Destination register</span></span>\n<span id=\"cb27-5\"><a href=\"#cb27-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_WriteData   <span class=\"co\">// Data to write back</span></span>\n<span id=\"cb27-6\"><a href=\"#cb27-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb27-7\"><a href=\"#cb27-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Write the data back to the register file</span></span>\n<span id=\"cb27-8\"><a href=\"#cb27-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">always</span> <span class=\"op\">@(</span>i_ALUResult<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb27-9\"><a href=\"#cb27-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_WriteData <span class=\"op\">=</span> i_ALUResult<span class=\"op\">;</span></span>\n<span id=\"cb27-10\"><a href=\"#cb27-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb27-11\"><a href=\"#cb27-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<h3 id=\"sub-subtract\">SUB (Subtract)</h3>\n<p>Name (format, op, function): <code>subtract (R,0,34)</code></p>\n<p>Syntax: <code>sub rd,rs,rt</code></p>\n<p>Operation: <code>reg(rd) := reg(rs) [ reg(rt);</code></p>\n<h4 id=\"instruction-overview-7\">Instruction Overview:</h4>\n<ul>\n<li><strong>IF:</strong> Fetch the instruction using the PC.</li>\n<li><strong>ID:</strong> Decode the instruction; read registers rs and\nrt.</li>\n<li><strong>EX:</strong> The ALU subtracts the value in rt from rs.</li>\n<li><strong>MEM:</strong> No action needed (pass-through).</li>\n<li><strong>WB:</strong> The ALU result is written back to register\nrd.</li>\n</ul>\n<h4 id=\"operation-breakdown-7\">Operation Breakdown:</h4>\n<p>The following provides a detailed breakdown of the operation of the\n<code>SUB</code> instruction in a MIPS processor, focusing on the key\nstages of the processor pipeline.</p>\n<ol type=\"1\">\n<li><strong>Instruction Fetch (IF) Stage:</strong> In this stage, the\nprocessor fetches the instruction from instruction memory using the\nProgram Counter (PC).</li>\n</ol>\n<div class=\"sourceCode\" id=\"cb28\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb28-1\"><a href=\"#cb28-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Instruction Fetch (IF) stage</span></span>\n<span id=\"cb28-2\"><a href=\"#cb28-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> InstructionFetch<span class=\"op\">(</span></span>\n<span id=\"cb28-3\"><a href=\"#cb28-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_pc<span class=\"op\">,</span></span>\n<span id=\"cb28-4\"><a href=\"#cb28-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_instruction</span>\n<span id=\"cb28-5\"><a href=\"#cb28-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb28-6\"><a href=\"#cb28-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Assume IMem is an array storing instructions</span></span>\n<span id=\"cb28-7\"><a href=\"#cb28-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> IMem<span class=\"op\">[</span><span class=\"dv\">0</span><span class=\"op\">:</span><span class=\"dv\">1023</span><span class=\"op\">];</span></span>\n<span id=\"cb28-8\"><a href=\"#cb28-8\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb28-9\"><a href=\"#cb28-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Fetch instruction</span></span>\n<span id=\"cb28-10\"><a href=\"#cb28-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">always</span> <span class=\"op\">@(</span>i_pc<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb28-11\"><a href=\"#cb28-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_instruction <span class=\"op\">=</span> IMem<span class=\"op\">[</span>i_pc <span class=\"op\">&gt;&gt;</span> <span class=\"dv\">2</span><span class=\"op\">];</span> <span class=\"co\">// Word aligned fetch</span></span>\n<span id=\"cb28-12\"><a href=\"#cb28-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb28-13\"><a href=\"#cb28-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<ol start=\"2\" type=\"1\">\n<li><strong>Instruction Decode (ID) Stage:</strong> Here, the\ninstruction is decoded, and the relevant registers are read. The\noperation is identified, and signals are prepared for the execution\nstage.</li>\n</ol>\n<div class=\"sourceCode\" id=\"cb29\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb29-1\"><a href=\"#cb29-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Instruction Decode (ID) stage</span></span>\n<span id=\"cb29-2\"><a href=\"#cb29-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> InstructionDecode<span class=\"op\">(</span></span>\n<span id=\"cb29-3\"><a href=\"#cb29-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_instruction<span class=\"op\">,</span></span>\n<span id=\"cb29-4\"><a href=\"#cb29-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">4</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_rs<span class=\"op\">,</span> o_rt<span class=\"op\">,</span> o_rd<span class=\"op\">,</span></span>\n<span id=\"cb29-5\"><a href=\"#cb29-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">5</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_opcode<span class=\"op\">,</span> o_funct</span>\n<span id=\"cb29-6\"><a href=\"#cb29-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb29-7\"><a href=\"#cb29-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">always</span> <span class=\"op\">@(</span>i_instruction<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb29-8\"><a href=\"#cb29-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_opcode <span class=\"op\">=</span> i_instruction<span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">26</span><span class=\"op\">];</span></span>\n<span id=\"cb29-9\"><a href=\"#cb29-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_rs <span class=\"op\">=</span> i_instruction<span class=\"op\">[</span><span class=\"dv\">25</span><span class=\"op\">:</span><span class=\"dv\">21</span><span class=\"op\">];</span></span>\n<span id=\"cb29-10\"><a href=\"#cb29-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_rt <span class=\"op\">=</span> i_instruction<span class=\"op\">[</span><span class=\"dv\">20</span><span class=\"op\">:</span><span class=\"dv\">16</span><span class=\"op\">];</span></span>\n<span id=\"cb29-11\"><a href=\"#cb29-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_rd <span class=\"op\">=</span> i_instruction<span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">:</span><span class=\"dv\">11</span><span class=\"op\">];</span></span>\n<span id=\"cb29-12\"><a href=\"#cb29-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_funct <span class=\"op\">=</span> i_instruction<span class=\"op\">[</span><span class=\"dv\">5</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">];</span></span>\n<span id=\"cb29-13\"><a href=\"#cb29-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb29-14\"><a href=\"#cb29-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<ol start=\"3\" type=\"1\">\n<li><strong>Execution (EX) Stage:</strong> The ALU performs the\nsubtraction based on the decoded instruction. The operands are taken\nfrom the registers identified in the ID stage.</li>\n</ol>\n<div class=\"sourceCode\" id=\"cb30\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb30-1\"><a href=\"#cb30-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Execution (EX) stage - ALU for SUB operation</span></span>\n<span id=\"cb30-2\"><a href=\"#cb30-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> ALU<span class=\"op\">(</span></span>\n<span id=\"cb30-3\"><a href=\"#cb30-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_data1<span class=\"op\">,</span> i_data2<span class=\"op\">,</span></span>\n<span id=\"cb30-4\"><a href=\"#cb30-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">3</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_ALUcontrol<span class=\"op\">,</span></span>\n<span id=\"cb30-5\"><a href=\"#cb30-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_result</span>\n<span id=\"cb30-6\"><a href=\"#cb30-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb30-7\"><a href=\"#cb30-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">always</span> <span class=\"op\">@(</span>*<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb30-8\"><a href=\"#cb30-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">case</span><span class=\"op\">(</span>i_ALUcontrol<span class=\"op\">)</span></span>\n<span id=\"cb30-9\"><a href=\"#cb30-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"bn\">4&#39;b0110</span><span class=\"op\">:</span> o_result <span class=\"op\">=</span> i_data1 <span class=\"op\">-</span> i_data2<span class=\"op\">;</span> <span class=\"co\">// SUB operation</span></span>\n<span id=\"cb30-10\"><a href=\"#cb30-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"co\">// Additional cases for other ALU operations</span></span>\n<span id=\"cb30-11\"><a href=\"#cb30-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">endcase</span></span>\n<span id=\"cb30-12\"><a href=\"#cb30-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb30-13\"><a href=\"#cb30-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<ol start=\"4\" type=\"1\">\n<li><strong>Memory (MEM) Stage:</strong> For the <code>SUB</code>\ninstruction, there is no memory operation needed. This stage can be\npassed through or handled with a control signal that disables memory\noperations.</li>\n</ol>\n<div class=\"sourceCode\" id=\"cb31\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb31-1\"><a href=\"#cb31-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Memory (MEM) stage pass-through for SUB</span></span>\n<span id=\"cb31-2\"><a href=\"#cb31-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> MemoryStage<span class=\"op\">(</span></span>\n<span id=\"cb31-3\"><a href=\"#cb31-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> i_MemRead<span class=\"op\">,</span> i_MemWrite<span class=\"op\">,</span></span>\n<span id=\"cb31-4\"><a href=\"#cb31-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_address<span class=\"op\">,</span> i_writeData<span class=\"op\">,</span></span>\n<span id=\"cb31-5\"><a href=\"#cb31-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_readData</span>\n<span id=\"cb31-6\"><a href=\"#cb31-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb31-7\"><a href=\"#cb31-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Memory array</span></span>\n<span id=\"cb31-8\"><a href=\"#cb31-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> DMem<span class=\"op\">[</span><span class=\"dv\">0</span><span class=\"op\">:</span><span class=\"dv\">1023</span><span class=\"op\">];</span></span>\n<span id=\"cb31-9\"><a href=\"#cb31-9\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb31-10\"><a href=\"#cb31-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">always</span> <span class=\"op\">@(</span>*<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb31-11\"><a href=\"#cb31-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">if</span> <span class=\"op\">(</span>i_MemWrite<span class=\"op\">)</span> DMem<span class=\"op\">[</span>i_address <span class=\"op\">&gt;&gt;</span> <span class=\"dv\">2</span><span class=\"op\">]</span> <span class=\"op\">=</span> i_writeData<span class=\"op\">;</span></span>\n<span id=\"cb31-12\"><a href=\"#cb31-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">if</span> <span class=\"op\">(</span>i_MemRead<span class=\"op\">)</span> o_readData <span class=\"op\">=</span> DMem<span class=\"op\">[</span>i_address <span class=\"op\">&gt;&gt;</span> <span class=\"dv\">2</span><span class=\"op\">];</span></span>\n<span id=\"cb31-13\"><a href=\"#cb31-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb31-14\"><a href=\"#cb31-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<ol start=\"5\" type=\"1\">\n<li><strong>Write Back (WB) Stage:</strong> The result of the ALU\noperation is written back to the register file, particularly in the\nregister specified by <code>rd</code>.</li>\n</ol>\n<div class=\"sourceCode\" id=\"cb32\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb32-1\"><a href=\"#cb32-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Write Back (WB) Stage</span></span>\n<span id=\"cb32-2\"><a href=\"#cb32-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> WriteBack<span class=\"op\">(</span></span>\n<span id=\"cb32-3\"><a href=\"#cb32-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_ALUresult<span class=\"op\">,</span></span>\n<span id=\"cb32-4\"><a href=\"#cb32-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">4</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_rd<span class=\"op\">,</span></span>\n<span id=\"cb32-5\"><a href=\"#cb32-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> i_RegWrite<span class=\"op\">,</span></span>\n<span id=\"cb32-6\"><a href=\"#cb32-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_writeData</span>\n<span id=\"cb32-7\"><a href=\"#cb32-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb32-8\"><a href=\"#cb32-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">always</span> <span class=\"op\">@(</span>i_ALUresult<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb32-9\"><a href=\"#cb32-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">if</span> <span class=\"op\">(</span>i_RegWrite<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb32-10\"><a href=\"#cb32-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>            o_writeData <span class=\"op\">=</span> i_ALUresult<span class=\"op\">;</span></span>\n<span id=\"cb32-11\"><a href=\"#cb32-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">end</span></span>\n<span id=\"cb32-12\"><a href=\"#cb32-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb32-13\"><a href=\"#cb32-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<h3 id=\"subu-subtract-unsigned\">SUBU (Subtract Unsigned)</h3>\n<p>Name (format, op, function):\n<code>subtract unsigned (R,0,35)</code></p>\n<p>Syntax: <code>subu rd,rs,rt</code></p>\n<p>Operation: <code>reg(rd) := reg(rs) [ reg(rt);</code></p>\n<h4 id=\"instruction-overview-8\">Instruction Overview:</h4>\n<ul>\n<li><strong>IF:</strong> Fetch the instruction using the PC.</li>\n<li><strong>ID:</strong> Decode the instruction; read registers rs and\nrt.</li>\n<li><strong>EX:</strong> The ALU subtracts the value in rt from rs.</li>\n<li><strong>MEM:</strong> No action needed (pass-through).</li>\n<li><strong>WB:</strong> The ALU result is written back to register\nrd.</li>\n</ul>\n<h4 id=\"operation-breakdown-8\">Operation Breakdown:</h4>\n<ol type=\"1\">\n<li><strong>Instruction Fetch (IF)</strong>\n<ul>\n<li>The instruction is fetched from the instruction memory using the\nProgram Counter (PC).</li>\n<li>Verilog snippet:</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb33\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb33-1\"><a href=\"#cb33-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">// IF Stage</span></span>\n<span id=\"cb33-2\"><a href=\"#cb33-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">always</span> <span class=\"op\">@(</span><span class=\"kw\">posedge</span> clk<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb33-3\"><a href=\"#cb33-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">if</span> <span class=\"op\">(</span>reset<span class=\"op\">)</span></span>\n<span id=\"cb33-4\"><a href=\"#cb33-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>          pc <span class=\"op\">&lt;=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb33-5\"><a href=\"#cb33-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">else</span> <span class=\"kw\">if</span> <span class=\"op\">(</span>pc_src<span class=\"op\">)</span></span>\n<span id=\"cb33-6\"><a href=\"#cb33-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>          pc <span class=\"op\">&lt;=</span> pc_next<span class=\"op\">;</span></span>\n<span id=\"cb33-7\"><a href=\"#cb33-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">else</span></span>\n<span id=\"cb33-8\"><a href=\"#cb33-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>          pc <span class=\"op\">&lt;=</span> pc <span class=\"op\">+</span> <span class=\"dv\">4</span><span class=\"op\">;</span></span>\n<span id=\"cb33-9\"><a href=\"#cb33-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span></code></pre></div></li>\n<li><strong>Instruction Decode (ID)</strong>\n<ul>\n<li>The fetched instruction is decoded to identify the operation as\n<code>SUBU</code> and the source (<code>rs</code>, <code>rt</code>) and\ndestination (<code>rd</code>) registers are identified.</li>\n<li>Verilog snippet:</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb34\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb34-1\"><a href=\"#cb34-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">// ID Stage</span></span>\n<span id=\"cb34-2\"><a href=\"#cb34-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> instruction<span class=\"op\">;</span></span>\n<span id=\"cb34-3\"><a href=\"#cb34-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">wire</span> <span class=\"op\">[</span><span class=\"dv\">4</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> rs<span class=\"op\">,</span> rt<span class=\"op\">,</span> rd<span class=\"op\">;</span></span>\n<span id=\"cb34-4\"><a href=\"#cb34-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">assign</span> rs <span class=\"op\">=</span> instruction<span class=\"op\">[</span><span class=\"dv\">25</span><span class=\"op\">:</span><span class=\"dv\">21</span><span class=\"op\">];</span></span>\n<span id=\"cb34-5\"><a href=\"#cb34-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">assign</span> rt <span class=\"op\">=</span> instruction<span class=\"op\">[</span><span class=\"dv\">20</span><span class=\"op\">:</span><span class=\"dv\">16</span><span class=\"op\">];</span></span>\n<span id=\"cb34-6\"><a href=\"#cb34-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">assign</span> rd <span class=\"op\">=</span> instruction<span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">:</span><span class=\"dv\">11</span><span class=\"op\">];</span></span></code></pre></div></li>\n<li><strong>Execution (EX)</strong>\n<ul>\n<li>The actual subtraction of the contents of the registers\n<code>rs</code> and <code>rt</code> is performed. The result does not\naccount for overflow because it is unsigned.</li>\n<li>Verilog snippet:</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb35\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb35-1\"><a href=\"#cb35-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">// EX Stage</span></span>\n<span id=\"cb35-2\"><a href=\"#cb35-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> reg_data<span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">];</span>  <span class=\"co\">// Register file</span></span>\n<span id=\"cb35-3\"><a href=\"#cb35-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">wire</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> rs_value<span class=\"op\">,</span> rt_value<span class=\"op\">,</span> result<span class=\"op\">;</span></span>\n<span id=\"cb35-4\"><a href=\"#cb35-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">assign</span> rs_value <span class=\"op\">=</span> reg_data<span class=\"op\">[</span>rs<span class=\"op\">];</span></span>\n<span id=\"cb35-5\"><a href=\"#cb35-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">assign</span> rt_value <span class=\"op\">=</span> reg_data<span class=\"op\">[</span>rt<span class=\"op\">];</span></span>\n<span id=\"cb35-6\"><a href=\"#cb35-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">assign</span> result <span class=\"op\">=</span> rs_value <span class=\"op\">-</span> rt_value<span class=\"op\">;</span></span></code></pre></div></li>\n<li><strong>Memory Access (MEM)</strong>\n<ul>\n<li><code>SUBU</code> does not require a memory operation, so this stage\ncan be considered a pass-through.</li>\n<li>No action required for SUBU</li>\n</ul></li>\n<li><strong>Write Back (WB)</strong>\n<ul>\n<li>The result of the subtraction is written back to the destination\nregister <code>rd</code>.</li>\n<li>Verilog snippet:</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb36\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb36-1\"><a href=\"#cb36-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">// WB Stage</span></span>\n<span id=\"cb36-2\"><a href=\"#cb36-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">always</span> <span class=\"op\">@(</span><span class=\"kw\">posedge</span> clk<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb36-3\"><a href=\"#cb36-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">if</span> <span class=\"op\">(</span>reg_write<span class=\"op\">)</span></span>\n<span id=\"cb36-4\"><a href=\"#cb36-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>          reg_data<span class=\"op\">[</span>rd<span class=\"op\">]</span> <span class=\"op\">&lt;=</span> result<span class=\"op\">;</span></span>\n<span id=\"cb36-5\"><a href=\"#cb36-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span></code></pre></div></li>\n</ol>\n<div class=\"sourceCode\" id=\"cb37\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb37-1\"><a href=\"#cb37-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> MIPS_Processor<span class=\"op\">(</span><span class=\"dt\">input</span> clk<span class=\"op\">,</span> <span class=\"dt\">input</span> reset<span class=\"op\">,</span> <span class=\"dt\">output</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> pc<span class=\"op\">);</span></span>\n<span id=\"cb37-2\"><a href=\"#cb37-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> pc<span class=\"op\">,</span> next_pc<span class=\"op\">;</span></span>\n<span id=\"cb37-3\"><a href=\"#cb37-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> reg_file<span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">];</span>  <span class=\"co\">// Register file</span></span>\n<span id=\"cb37-4\"><a href=\"#cb37-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb37-5\"><a href=\"#cb37-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Instruction Fetch</span></span>\n<span id=\"cb37-6\"><a href=\"#cb37-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">always</span> <span class=\"op\">@(</span><span class=\"kw\">posedge</span> clk<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb37-7\"><a href=\"#cb37-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">if</span> <span class=\"op\">(</span>reset<span class=\"op\">)</span></span>\n<span id=\"cb37-8\"><a href=\"#cb37-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>            pc <span class=\"op\">&lt;=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb37-9\"><a href=\"#cb37-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">else</span></span>\n<span id=\"cb37-10\"><a href=\"#cb37-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>            pc <span class=\"op\">&lt;=</span> next_pc<span class=\"op\">;</span></span>\n<span id=\"cb37-11\"><a href=\"#cb37-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb37-12\"><a href=\"#cb37-12\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb37-13\"><a href=\"#cb37-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Instruction Decode</span></span>\n<span id=\"cb37-14\"><a href=\"#cb37-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> instruction<span class=\"op\">;</span></span>\n<span id=\"cb37-15\"><a href=\"#cb37-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">wire</span> <span class=\"op\">[</span><span class=\"dv\">4</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> rs<span class=\"op\">,</span> rt<span class=\"op\">,</span> rd<span class=\"op\">;</span></span>\n<span id=\"cb37-16\"><a href=\"#cb37-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">wire</span> <span class=\"op\">[</span><span class=\"dv\">5</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> opcode<span class=\"op\">;</span></span>\n<span id=\"cb37-17\"><a href=\"#cb37-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">assign</span> opcode <span class=\"op\">=</span> instruction<span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">26</span><span class=\"op\">];</span></span>\n<span id=\"cb37-18\"><a href=\"#cb37-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">assign</span> rs <span class=\"op\">=</span> instruction<span class=\"op\">[</span><span class=\"dv\">25</span><span class=\"op\">:</span><span class=\"dv\">21</span><span class=\"op\">];</span></span>\n<span id=\"cb37-19\"><a href=\"#cb37-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">assign</span> rt <span class=\"op\">=</span> instruction<span class=\"op\">[</span><span class=\"dv\">20</span><span class=\"op\">:</span><span class=\"dv\">16</span><span class=\"op\">];</span></span>\n<span id=\"cb37-20\"><a href=\"#cb37-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">assign</span> rd <span class=\"op\">=</span> instruction<span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">:</span><span class=\"dv\">11</span><span class=\"op\">];</span></span>\n<span id=\"cb37-21\"><a href=\"#cb37-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Execute</span></span>\n<span id=\"cb37-22\"><a href=\"#cb37-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">wire</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> rs_value<span class=\"op\">,</span> rt_value<span class=\"op\">,</span> alu_result<span class=\"op\">;</span></span>\n<span id=\"cb37-23\"><a href=\"#cb37-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">assign</span> rs_value <span class=\"op\">=</span> reg_file<span class=\"op\">[</span>rs<span class=\"op\">];</span></span>\n<span id=\"cb37-24\"><a href=\"#cb37-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">assign</span> rt_value <span class=\"op\">=</span> reg_file<span class=\"op\">[</span>rt<span class=\"op\">];</span></span>\n<span id=\"cb37-25\"><a href=\"#cb37-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">assign</span> alu_result <span class=\"op\">=</span> <span class=\"op\">(</span>opcode <span class=\"op\">==</span> <span class=\"bn\">6&#39;b000000</span><span class=\"op\">)</span> <span class=\"op\">?</span> <span class=\"op\">(</span>rs_value <span class=\"op\">-</span> rt_value<span class=\"op\">)</span> <span class=\"op\">:</span> <span class=\"bn\">32&#39;b0</span><span class=\"op\">;</span>  <span class=\"co\">// SUBU Opcode assumed</span></span>\n<span id=\"cb37-26\"><a href=\"#cb37-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Memory Access</span></span>\n<span id=\"cb37-27\"><a href=\"#cb37-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// No memory access for SUBU</span></span>\n<span id=\"cb37-28\"><a href=\"#cb37-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Write Back</span></span>\n<span id=\"cb37-29\"><a href=\"#cb37-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">always</span> <span class=\"op\">@(</span><span class=\"kw\">posedge</span> clk<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb37-30\"><a href=\"#cb37-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">if</span> <span class=\"op\">(</span>opcode <span class=\"op\">==</span> <span class=\"bn\">6&#39;b100011</span><span class=\"op\">)</span>  <span class=\"co\">// SUBU Opcode</span></span>\n<span id=\"cb37-31\"><a href=\"#cb37-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>            reg_file<span class=\"op\">[</span>rd<span class=\"op\">]</span> <span class=\"op\">&lt;=</span> alu_result<span class=\"op\">;</span></span>\n<span id=\"cb37-32\"><a href=\"#cb37-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb37-33\"><a href=\"#cb37-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Program Counter Update</span></span>\n<span id=\"cb37-34\"><a href=\"#cb37-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">always</span> <span class=\"op\">@(</span>*<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb37-35\"><a href=\"#cb37-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>        next_pc <span class=\"op\">=</span> pc <span class=\"op\">+</span> <span class=\"dv\">4</span><span class=\"op\">;</span>  <span class=\"co\">// Simple sequential execution</span></span>\n<span id=\"cb37-36\"><a href=\"#cb37-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb37-37\"><a href=\"#cb37-37\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<p>In this example, <code>opcode == 6'b100011'</code> is the actual\nopcode for <code>SUBU</code>.</p>\n<h3 id=\"and-bitwise-and\">AND (Bitwise AND)</h3>\n<ul>\n<li><strong>IF:</strong> Instruction is fetched.</li>\n<li><strong>ID:</strong> Instruction is decoded. For AND, rs and rt are\nread;</li>\n<li><strong>EX:</strong> The ALU performs an AND operation between\noperands.</li>\n<li><strong>MEM:</strong> No action needed.</li>\n<li><strong>WB:</strong> Result is written back to rd (AND)</li>\n</ul>\n<h4 id=\"instruction-breakdown\">Instruction Breakdown</h4>\n<p>The AND instruction performs a bitwise AND operation between two\noperands and stores the result in a destination register.</p>\n<ol type=\"1\">\n<li><strong>Instruction Fetch (IF) stage:</strong>\n<ul>\n<li>The Program Counter (PC) contains the address of the AND\ninstruction.</li>\n<li>The Instruction Memory module (<code>InstructionMemory.v</code>)\nfetches the instruction from the memory location pointed to by the\nPC.</li>\n<li>The fetched instruction is passed to the next stage.</li>\n</ul></li>\n<li><strong>Instruction Decode (ID) stage:</strong>\n<ul>\n<li>The Control Unit module (<code>ControlUnit.v</code>) decodes the\nopcode of the AND instruction.</li>\n<li>Based on the opcode, the Control Unit generates the appropriate\ncontrol signals for the data-path components.</li>\n<li>The Register File module reads the values of the source registers\nspecified in the AND instruction.</li>\n</ul></li>\n<li><strong>Execution (EX) stage:</strong>\n<ul>\n<li>The ALU module (<code>ALU.v</code>) performs the bitwise AND\noperation between the values of the source registers.</li>\n<li>The ALU control signal generated by the Control Unit determines the\nspecific operation to be performed (AND in this case).</li>\n</ul></li>\n<li><strong>Memory Access (MEM) stage:</strong>\n<ul>\n<li>The AND instruction does not require any memory access, so this\nstage is a pass-through.</li>\n</ul></li>\n<li><strong>Write Back (WB) stage:</strong>\n<ul>\n<li>The result of the AND operation from the ALU is written back to the\ndestination register specified in the AND instruction.</li>\n<li>The RegWrite control signal generated by the Control Unit enables\nthe writing of the result to the Register File.</li>\n</ul></li>\n</ol>\n<p>Within the control unit, the AND instruction is identified by its\nopcode, and the appropriate control signals are set to execute the AND\noperation.</p>\n<p>The ALU module performs the bitwise AND operation between the source\nregister values, and the result is written back to the destination\nregister.</p>\n<p>Here’s an example of how the AND instruction flows through the\ndifferent stages of the single-cycle MIPS processor starting within the\ncontrol unit.</p>\n<div class=\"sourceCode\" id=\"cb38\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb38-1\"><a href=\"#cb38-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Control Unit</span></span>\n<span id=\"cb38-2\"><a href=\"#cb38-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">always</span> <span class=\"op\">@(</span>i_instruction<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb38-3\"><a href=\"#cb38-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">case</span> <span class=\"op\">(</span>i_instruction<span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">26</span><span class=\"op\">])</span></span>\n<span id=\"cb38-4\"><a href=\"#cb38-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// ...</span></span>\n<span id=\"cb38-5\"><a href=\"#cb38-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bn\">6&#39;b001100</span><span class=\"op\">:</span> <span class=\"kw\">begin</span>   <span class=\"co\">// andi</span></span>\n<span id=\"cb38-6\"><a href=\"#cb38-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_RegDst <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>    <span class=\"co\">// Destination register is rt</span></span>\n<span id=\"cb38-7\"><a href=\"#cb38-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span>    <span class=\"co\">// Second operand is immediate value</span></span>\n<span id=\"cb38-8\"><a href=\"#cb38-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>  <span class=\"co\">// ALU result is written to register</span></span>\n<span id=\"cb38-9\"><a href=\"#cb38-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span>  <span class=\"co\">// Write to register file</span></span>\n<span id=\"cb38-10\"><a href=\"#cb38-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_MemRead <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>   <span class=\"co\">// No memory read</span></span>\n<span id=\"cb38-11\"><a href=\"#cb38-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>  <span class=\"co\">// No memory write</span></span>\n<span id=\"cb38-12\"><a href=\"#cb38-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_Branch <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>    <span class=\"co\">// No branch</span></span>\n<span id=\"cb38-13\"><a href=\"#cb38-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_Bne <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>       <span class=\"co\">// No branch if not equal</span></span>\n<span id=\"cb38-14\"><a href=\"#cb38-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b11</span><span class=\"op\">;</span> <span class=\"co\">// ALU operation is AND</span></span>\n<span id=\"cb38-15\"><a href=\"#cb38-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_Jump <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>      <span class=\"co\">// No jump</span></span>\n<span id=\"cb38-16\"><a href=\"#cb38-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"co\">// ...</span></span>\n<span id=\"cb38-17\"><a href=\"#cb38-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb38-18\"><a href=\"#cb38-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// ...</span></span>\n<span id=\"cb38-19\"><a href=\"#cb38-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">endcase</span></span>\n<span id=\"cb38-20\"><a href=\"#cb38-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">end</span></span>\n<span id=\"cb38-21\"><a href=\"#cb38-21\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb38-22\"><a href=\"#cb38-22\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// ALU</span></span>\n<span id=\"cb38-23\"><a href=\"#cb38-23\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">always</span> <span class=\"op\">@(</span>i_data1<span class=\"op\">,</span> data2<span class=\"op\">,</span> i_ALUcontrol<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb38-24\"><a href=\"#cb38-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">case</span> <span class=\"op\">(</span>i_ALUcontrol<span class=\"op\">)</span></span>\n<span id=\"cb38-25\"><a href=\"#cb38-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// ...</span></span>\n<span id=\"cb38-26\"><a href=\"#cb38-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bn\">4&#39;b0000</span><span class=\"op\">:</span>  <span class=\"co\">// AND</span></span>\n<span id=\"cb38-27\"><a href=\"#cb38-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_ALUresult <span class=\"op\">=</span> i_data1 <span class=\"op\">&amp;</span> data2<span class=\"op\">;</span></span>\n<span id=\"cb38-28\"><a href=\"#cb38-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// ...</span></span>\n<span id=\"cb38-29\"><a href=\"#cb38-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">endcase</span></span>\n<span id=\"cb38-30\"><a href=\"#cb38-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">// ...</span></span>\n<span id=\"cb38-31\"><a href=\"#cb38-31\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">end</span></span></code></pre></div>\n<p>In the Control Unit module, when the opcode of the instruction\nmatches the AND opcode (<code>6'b001100</code> in this case), the\nappropriate control signals are set.</p>\n<p>The <code>ALUSrc</code> signal is set to 1 to select the immediate\nvalue as the second operand, and the <code>ALUOp</code> signal is set to\nindicate an AND operation.</p>\n<p>In the ALU module, when the <code>ALUcontrol</code> signal matches\nthe AND operation (4’b0000), the bitwise AND operation is performed\nbetween the two input operands (i_data1 and data2), and the result is\nassigned to <code>o_ALUresult</code>.</p>\n<h3 id=\"andi-and-immediate\">ANDI (AND Immediate)</h3>\n<p><code>and immediate (I,12,na)</code></p>\n<p><code>andi rt,rs,imm</code></p>\n<p><code>reg(rt) := reg(rs) &amp; zeroext(imm);</code></p>\n<h4 id=\"instruction-overview-9\">Instruction Overview:</h4>\n<ul>\n<li><strong>IF:</strong> Instruction is fetched.</li>\n<li><strong>ID:</strong> Opcode decoded. Registers rs and immediate for\nANDI are read.</li>\n<li><strong>EX:</strong> ALU performs an AND operation.</li>\n<li><strong>MEM:</strong> No memory access.</li>\n<li><strong>WB:</strong> Result written to or rt (ANDI).</li>\n</ul>\n<h4 id=\"instruction-breakdown-1\">Instruction Breakdown</h4>\n<p>The ANDI (AND Immediate) instruction performs a bitwise AND operation\nbetween a register value and an immediate value.</p>\n<p>Here’s an explanation of how the ANDI instruction goes through each\nstage of the MIPS processor pipeline:</p>\n<ol type=\"1\">\n<li><strong>Instruction Fetch (IF):</strong>\n<ul>\n<li>The Program Counter (PC) contains the address of the ANDI\ninstruction in the Instruction Memory.</li>\n<li>The instruction is fetched from the Instruction Memory using the PC\nvalue.</li>\n<li>Example code in the Instruction Memory module\n(<code>InstructionMemory.v</code>):</li>\n</ul></li>\n</ol>\n<div class=\"sourceCode\" id=\"cb39\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb39-1\"><a href=\"#cb39-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"kw\">always</span> <span class=\"op\">@(</span>i_Addr<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb39-2\"><a href=\"#cb39-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>       <span class=\"kw\">if</span> <span class=\"op\">(</span>i_Addr <span class=\"op\">==</span> <span class=\"op\">-</span><span class=\"dv\">4</span><span class=\"op\">)</span> <span class=\"kw\">begin</span>         <span class=\"co\">// init</span></span>\n<span id=\"cb39-3\"><a href=\"#cb39-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>         i_Instruction <span class=\"op\">=</span> <span class=\"bn\">32&#39;b11111100000000000000000000000000</span><span class=\"op\">;</span></span>\n<span id=\"cb39-4\"><a href=\"#cb39-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>       <span class=\"kw\">end</span> <span class=\"kw\">else</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb39-5\"><a href=\"#cb39-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>         i_Instruction <span class=\"op\">=</span> Imem<span class=\"op\">[</span>i_Addr<span class=\"op\">&gt;&gt;</span><span class=\"dv\">2</span><span class=\"op\">];</span></span>\n<span id=\"cb39-6\"><a href=\"#cb39-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>       <span class=\"kw\">end</span></span>\n<span id=\"cb39-7\"><a href=\"#cb39-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>       i_Ctr <span class=\"op\">=</span> i_Instruction<span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">26</span><span class=\"op\">];</span></span>\n<span id=\"cb39-8\"><a href=\"#cb39-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>       i_Funcode <span class=\"op\">=</span> i_Instruction<span class=\"op\">[</span><span class=\"dv\">5</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">];</span></span>\n<span id=\"cb39-9\"><a href=\"#cb39-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"kw\">end</span></span></code></pre></div>\n<ol start=\"2\" type=\"1\">\n<li><strong>Instruction Decode (ID):</strong>\n<ul>\n<li>The fetched instruction is decoded to determine the operation to be\nperformed.</li>\n<li>The Control Unit generates the necessary control signals based on\nthe opcode and function code of the instruction.</li>\n<li>The register to be read (rs) is determined from the instruction, and\nthe immediate value is sign-extended.</li>\n<li>Example code in the Control Unit module\n(<code>ControlUnit.v</code>):</li>\n</ul></li>\n</ol>\n<div class=\"sourceCode\" id=\"cb40\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb40-1\"><a href=\"#cb40-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"bn\">6&#39;b001100</span><span class=\"op\">:</span> <span class=\"kw\">begin</span>  <span class=\"co\">// andi</span></span>\n<span id=\"cb40-2\"><a href=\"#cb40-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>       o_RegDst <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb40-3\"><a href=\"#cb40-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>       o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb40-4\"><a href=\"#cb40-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>       o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb40-5\"><a href=\"#cb40-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>       o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb40-6\"><a href=\"#cb40-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>       o_MemRead <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb40-7\"><a href=\"#cb40-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>       o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb40-8\"><a href=\"#cb40-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>       o_Branch <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb40-9\"><a href=\"#cb40-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>       o_Bne <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb40-10\"><a href=\"#cb40-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>       o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b11</span><span class=\"op\">;</span></span>\n<span id=\"cb40-11\"><a href=\"#cb40-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>       o_Jump <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb40-12\"><a href=\"#cb40-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>       <span class=\"co\">// ...</span></span>\n<span id=\"cb40-13\"><a href=\"#cb40-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"kw\">end</span></span></code></pre></div>\n<ol start=\"3\" type=\"1\">\n<li><strong>Execute (EX):</strong>\n<ul>\n<li>The ALU performs the bitwise AND operation between the value of\nregister rs and the sign-extended immediate value.</li>\n<li>The result of the AND operation is stored in a temporary\nregister.</li>\n<li>Example code in the ALU module (<code>ALU.v</code>):</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb41\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb41-1\"><a href=\"#cb41-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">always</span> <span class=\"op\">@(</span>i_data1<span class=\"op\">,</span> data2<span class=\"op\">,</span> i_ALUcontrol<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb41-2\"><a href=\"#cb41-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">case</span> <span class=\"op\">(</span>i_ALUcontrol<span class=\"op\">)</span></span>\n<span id=\"cb41-3\"><a href=\"#cb41-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"co\">// ...</span></span>\n<span id=\"cb41-4\"><a href=\"#cb41-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">4&#39;b0000</span><span class=\"op\">:</span>  <span class=\"co\">// AND</span></span>\n<span id=\"cb41-5\"><a href=\"#cb41-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUresult <span class=\"op\">=</span> i_data1 <span class=\"op\">&amp;</span> data2<span class=\"op\">;</span> <span class=\"co\">// bitwise AND</span></span>\n<span id=\"cb41-6\"><a href=\"#cb41-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"co\">// ...</span></span>\n<span id=\"cb41-7\"><a href=\"#cb41-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">endcase</span></span>\n<span id=\"cb41-8\"><a href=\"#cb41-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// ...</span></span>\n<span id=\"cb41-9\"><a href=\"#cb41-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span></code></pre></div></li>\n<li><strong>Memory Access (MEM):</strong>\n<ul>\n<li>The ANDI instruction does not involve memory access, so no action is\nneeded in this stage.</li>\n<li>The result from the Execute stage is simply passed through to the\nnext stage.</li>\n</ul></li>\n<li><strong>Write Back (WB):</strong>\n<ul>\n<li>The result of the AND operation, stored in the temporary register,\nis written back to the destination register (rt) in the Register\nFile.</li>\n<li>Example code in the Register File module\n(<code>RegisterFile.v</code>):</li>\n</ul></li>\n</ol>\n<div class=\"sourceCode\" id=\"cb42\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb42-1\"><a href=\"#cb42-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"kw\">always</span> <span class=\"op\">@(</span><span class=\"kw\">posedge</span> i_Clk <span class=\"dt\">or</span> <span class=\"kw\">posedge</span> i_Rst<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb42-2\"><a href=\"#cb42-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>       <span class=\"kw\">if</span> <span class=\"op\">(</span>i_Rst<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb42-3\"><a href=\"#cb42-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>         <span class=\"co\">// Reset all registers to zero</span></span>\n<span id=\"cb42-4\"><a href=\"#cb42-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>         <span class=\"kw\">for</span> <span class=\"op\">(</span>j <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span> j <span class=\"op\">&lt;</span> <span class=\"dv\">32</span><span class=\"op\">;</span> j <span class=\"op\">=</span> j <span class=\"op\">+</span> <span class=\"dv\">1</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb42-5\"><a href=\"#cb42-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>           RegData<span class=\"op\">[</span>j<span class=\"op\">]</span> <span class=\"op\">=</span> <span class=\"bn\">32&#39;b0</span><span class=\"op\">;</span></span>\n<span id=\"cb42-6\"><a href=\"#cb42-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>         <span class=\"kw\">end</span></span>\n<span id=\"cb42-7\"><a href=\"#cb42-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>       <span class=\"kw\">end</span> <span class=\"kw\">else</span> <span class=\"kw\">if</span> <span class=\"op\">(</span>i_RegWrite<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb42-8\"><a href=\"#cb42-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>         <span class=\"co\">// Write data to the specified register</span></span>\n<span id=\"cb42-9\"><a href=\"#cb42-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>         RegData<span class=\"op\">[</span>i_wReg<span class=\"op\">]</span> <span class=\"op\">=</span> i_wData<span class=\"op\">;</span></span>\n<span id=\"cb42-10\"><a href=\"#cb42-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>       <span class=\"kw\">end</span></span>\n<span id=\"cb42-11\"><a href=\"#cb42-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"kw\">end</span></span></code></pre></div>\n<p>Here’s an example of how the ANDI instruction would look in machine\ncode:</p>\n<pre><code>001100 01000 01010 0000000000001111</code></pre>\n<p>In this example: - <code>001100</code> is the opcode for the ANDI\ninstruction. - <code>01000</code> represents the source register (rs),\nwhich is $8 in this case. - <code>01010</code> represents the\ndestination register (rt), which is $10 in this case. -\n<code>0000000000001111</code> is the immediate value, which is 15 in\ndecimal.</p>\n<h3 id=\"or\">OR</h3>\n<ul>\n<li><strong>IF:</strong> Instruction is fetched.</li>\n<li><strong>ID:</strong> Opcode decoded. Registers rs and rt are read\nfor OR; rs and immediate for ORI.</li>\n<li><strong>EX:</strong> ALU performs an OR operation.</li>\n<li><strong>MEM:</strong> No action needed.</li>\n<li><strong>WB:</strong> Result written to rd (OR) or rt (ORI).</li>\n</ul>\n<h4 id=\"instruction-breakdown-2\">Instruction Breakdown</h4>\n<p>The <code>OR</code> instruction in the MIPS architecture performs a\nbitwise OR operation on two register values and stores the result in a\ndestination register.</p>\n<ol type=\"1\">\n<li><p><strong>Instruction Fetch (IF) Stage:</strong></p>\n<ul>\n<li>The Program Counter (PC) holds the address of the <code>OR</code>\ninstruction to be fetched.</li>\n<li>The Instruction Memory module (<code>InstructionMemory.v</code>)\nretrieves the instruction from the memory based on the PC value.</li>\n<li>The fetched instruction is passed to the next stage.</li>\n</ul>\n<p>Example code from <code>InstructionMemory.v</code>:\n<code>verilog always @(i_Addr) begin   if (i_Addr == -4) begin     i_Instruction = 32'b11111100000000000000000000000000;   end else begin     i_Instruction = Imem[i_Addr&gt;&gt;2];   end   i_Ctr = i_Instruction[31:26];   i_Funcode = i_Instruction[5:0]; end</code></p></li>\n<li><p><strong>Instruction Decode (ID) Stage:</strong></p></li>\n</ol>\n<ul>\n<li>The fetched instruction is decoded to identify the opcode and\nregister operands.</li>\n<li>The Control Unit module (<code>ControlUnit.v</code>) sets the\nappropriate control signals based on the opcode.</li>\n<li>For the <code>OR</code> instruction, the <code>ALUOp</code> control\nsignal is set to indicate an OR operation.</li>\n<li>The register operands (<code>rs</code> and <code>rt</code>) are read\nfrom the Register File.</li>\n</ul>\n<p>Example code from <code>ControlUnit.v</code>:</p>\n<div class=\"sourceCode\" id=\"cb44\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb44-1\"><a href=\"#cb44-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">always</span> <span class=\"op\">@(</span>i_instruction<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb44-2\"><a href=\"#cb44-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">case</span> <span class=\"op\">(</span>i_instruction<span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">26</span><span class=\"op\">])</span></span>\n<span id=\"cb44-3\"><a href=\"#cb44-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// ...</span></span>\n<span id=\"cb44-4\"><a href=\"#cb44-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bn\">6&#39;b000000</span><span class=\"op\">:</span> <span class=\"kw\">begin</span>  <span class=\"co\">// ARITHMETIC</span></span>\n<span id=\"cb44-5\"><a href=\"#cb44-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_RegDst <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb44-6\"><a href=\"#cb44-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb44-7\"><a href=\"#cb44-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb44-8\"><a href=\"#cb44-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb44-9\"><a href=\"#cb44-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_MemRead <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb44-10\"><a href=\"#cb44-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb44-11\"><a href=\"#cb44-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_Branch <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb44-12\"><a href=\"#cb44-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_Bne <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb44-13\"><a href=\"#cb44-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b10</span><span class=\"op\">;</span></span>\n<span id=\"cb44-14\"><a href=\"#cb44-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_Jump <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb44-15\"><a href=\"#cb44-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"co\">// ...</span></span>\n<span id=\"cb44-16\"><a href=\"#cb44-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb44-17\"><a href=\"#cb44-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// ...</span></span>\n<span id=\"cb44-18\"><a href=\"#cb44-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">endcase</span></span>\n<span id=\"cb44-19\"><a href=\"#cb44-19\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">end</span></span></code></pre></div>\n<ol start=\"3\" type=\"1\">\n<li><strong>Execute (EX) Stage:</strong></li>\n</ol>\n<ul>\n<li>The ALU module (<code>ALU.v</code>) performs the bitwise OR\noperation on the values of <code>rs</code> and <code>rt</code> based on\nthe <code>ALUOp</code> control signal.</li>\n<li>The result of the OR operation is stored in a temporary\nregister.</li>\n</ul>\n<p>Example code from <code>ALU.v</code>:</p>\n<div class=\"sourceCode\" id=\"cb45\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb45-1\"><a href=\"#cb45-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">always</span> <span class=\"op\">@(</span>i_data1<span class=\"op\">,</span> data2<span class=\"op\">,</span> i_ALUcontrol<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb45-2\"><a href=\"#cb45-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">case</span> <span class=\"op\">(</span>i_ALUcontrol<span class=\"op\">)</span></span>\n<span id=\"cb45-3\"><a href=\"#cb45-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// ...</span></span>\n<span id=\"cb45-4\"><a href=\"#cb45-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bn\">4&#39;b0001</span><span class=\"op\">:</span>  <span class=\"co\">// OR</span></span>\n<span id=\"cb45-5\"><a href=\"#cb45-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_ALUresult <span class=\"op\">=</span> i_data1 <span class=\"op\">|</span> data2<span class=\"op\">;</span> <span class=\"co\">// bitwise OR</span></span>\n<span id=\"cb45-6\"><a href=\"#cb45-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// ...</span></span>\n<span id=\"cb45-7\"><a href=\"#cb45-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">endcase</span></span>\n<span id=\"cb45-8\"><a href=\"#cb45-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">// ...</span></span>\n<span id=\"cb45-9\"><a href=\"#cb45-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">end</span></span></code></pre></div>\n<ol start=\"4\" type=\"1\">\n<li><strong>Memory Access (MEM) Stage:</strong>\n<ul>\n<li>For the <code>OR</code> instruction, no memory access is needed, so\nthis stage is a pass-through.</li>\n</ul></li>\n<li><strong>Write Back (WB) Stage:</strong></li>\n</ol>\n<ul>\n<li>The ALU result, which is the result of the OR operation, is written\nback to the destination register (<code>rd</code>) in the Register\nFile.</li>\n</ul>\n<p>Example code for writing back to the Register File:</p>\n<div class=\"sourceCode\" id=\"cb46\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb46-1\"><a href=\"#cb46-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">always</span> <span class=\"op\">@(</span><span class=\"kw\">posedge</span> i_clk<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb46-2\"><a href=\"#cb46-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">if</span> <span class=\"op\">(</span>i_RegWrite<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb46-3\"><a href=\"#cb46-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    RegData<span class=\"op\">[</span>i_wReg<span class=\"op\">]</span> <span class=\"op\">=</span> i_wData<span class=\"op\">;</span></span>\n<span id=\"cb46-4\"><a href=\"#cb46-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb46-5\"><a href=\"#cb46-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">end</span></span></code></pre></div>\n<p>Throughout the execution of the <code>OR</code> instruction, the\ncontrol signals generated by the Control Unit module\n(<code>ControlUnit.v</code>) orchestrate the flow of data and the\noperations performed in each stage.</p>\n<p>The ALU Control module (<code>ALUControl.v</code>) decodes the\n<code>ALUOp</code> signal and the function code of the instruction to\ngenerate the appropriate <code>ALUControl</code> signal for the ALU\nmodule (<code>ALU.v</code>) to perform the OR operation.</p>\n<h3 id=\"ori-or-immediate\">ORI (OR Immediate)</h3>\n<ul>\n<li><strong>IF:</strong> Instruction is fetched.</li>\n<li><strong>ID:</strong> Opcode is decoded. Registers rs and rt are read\nfor OR; rs and immediate for ORI.</li>\n<li><strong>EX:</strong> ALU performs an OR operation.</li>\n<li><strong>MEM:</strong> No action needed.</li>\n<li><strong>WB:</strong> Result is written to rd (OR) or rt (ORI).</li>\n</ul>\n<h4 id=\"instruction-breakdown-3\">Instruction Breakdown</h4>\n<p>The <code>ORI</code> (OR Immediate) instruction in MIPS is an I-type\ninstruction that performs a bitwise OR operation between a register and\na zero-extended immediate value.</p>\n<p>Instruction Format:</p>\n<pre><code>ORI rt, rs, immediate</code></pre>\n<ul>\n<li><code>rt</code>: The destination register where the result will be\nstored.</li>\n<li><code>rs</code>: The source register containing one of the\noperands.</li>\n<li><code>immediate</code>: A 16-bit immediate value that will be\nzero-extended to 32 bits.</li>\n</ul>\n<p>Instruction Encoding:</p>\n<pre><code>| opcode (6 bits) | rs (5 bits) | rt (5 bits) | immediate (16 bits) |</code></pre>\n<p>Processor Stages: 1. Instruction Fetch (IF): - The instruction is\nfetched from the instruction memory using the PC (Program Counter). -\nThe PC is incremented by 4 to point to the next instruction.</p>\n<ol start=\"2\" type=\"1\">\n<li>Instruction Decode (ID):\n<ul>\n<li>The instruction is decoded by the control unit.</li>\n<li>The register file is accessed to read the values of the source\nregister <code>rs</code> and the destination register\n<code>rt</code>.</li>\n<li>The 16-bit immediate value is zero-extended to 32 bits.</li>\n</ul></li>\n</ol>\n<p>Verilog code for the instruction decode stage:</p>\n<div class=\"sourceCode\" id=\"cb49\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb49-1\"><a href=\"#cb49-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Control Unit</span></span>\n<span id=\"cb49-2\"><a href=\"#cb49-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">always</span> <span class=\"op\">@(</span>i_instruction<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb49-3\"><a href=\"#cb49-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">case</span> <span class=\"op\">(</span>i_instruction<span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">26</span><span class=\"op\">])</span></span>\n<span id=\"cb49-4\"><a href=\"#cb49-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// ...</span></span>\n<span id=\"cb49-5\"><a href=\"#cb49-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bn\">6&#39;b001101</span><span class=\"op\">:</span> <span class=\"kw\">begin</span>  <span class=\"co\">// ORI</span></span>\n<span id=\"cb49-6\"><a href=\"#cb49-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_RegDst <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb49-7\"><a href=\"#cb49-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb49-8\"><a href=\"#cb49-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb49-9\"><a href=\"#cb49-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb49-10\"><a href=\"#cb49-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_MemRead <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb49-11\"><a href=\"#cb49-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb49-12\"><a href=\"#cb49-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_Branch <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb49-13\"><a href=\"#cb49-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b11</span><span class=\"op\">;</span>  <span class=\"co\">// ALU control for OR operation</span></span>\n<span id=\"cb49-14\"><a href=\"#cb49-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_Jump <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb49-15\"><a href=\"#cb49-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb49-16\"><a href=\"#cb49-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// ...</span></span>\n<span id=\"cb49-17\"><a href=\"#cb49-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">endcase</span></span>\n<span id=\"cb49-18\"><a href=\"#cb49-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">end</span></span></code></pre></div>\n<ol start=\"3\" type=\"1\">\n<li>Execute (EX):\n<ul>\n<li>The ALU performs the bitwise OR operation between the value in the\nsource register <code>rs</code> and the zero-extended immediate\nvalue.</li>\n<li>The ALU control unit generates the appropriate control signal for\nthe OR operation based on the <code>ALUOp</code> signal from the control\nunit.</li>\n</ul></li>\n</ol>\n<p>Verilog code for the ALU control unit:</p>\n<div class=\"sourceCode\" id=\"cb50\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb50-1\"><a href=\"#cb50-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// ALU Control</span></span>\n<span id=\"cb50-2\"><a href=\"#cb50-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">always</span> <span class=\"op\">@(</span>i_ALUOp <span class=\"dt\">or</span> i_Funcode<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb50-3\"><a href=\"#cb50-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">case</span> <span class=\"op\">(</span>i_ALUOp<span class=\"op\">)</span></span>\n<span id=\"cb50-4\"><a href=\"#cb50-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// ...</span></span>\n<span id=\"cb50-5\"><a href=\"#cb50-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bn\">2&#39;b11</span><span class=\"op\">:</span> <span class=\"kw\">begin</span>  <span class=\"co\">// ORI</span></span>\n<span id=\"cb50-6\"><a href=\"#cb50-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_ALUcontrol <span class=\"op\">=</span> <span class=\"bn\">4&#39;b0001</span><span class=\"op\">;</span>  <span class=\"co\">// ALU control for OR operation</span></span>\n<span id=\"cb50-7\"><a href=\"#cb50-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb50-8\"><a href=\"#cb50-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// ...</span></span>\n<span id=\"cb50-9\"><a href=\"#cb50-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">endcase</span></span>\n<span id=\"cb50-10\"><a href=\"#cb50-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">end</span></span></code></pre></div>\n<ol start=\"4\" type=\"1\">\n<li>Memory (MEM):\n<ul>\n<li>No memory access is needed for the <code>ORI</code> instruction, so\nthis stage is a pass-through.</li>\n</ul></li>\n<li>Write Back (WB):\n<ul>\n<li>The ALU result is written back to the destination register\n<code>rt</code> in the register file.</li>\n</ul></li>\n</ol>\n<p>Verilog code for the write-back stage:</p>\n<div class=\"sourceCode\" id=\"cb51\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb51-1\"><a href=\"#cb51-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Register File</span></span>\n<span id=\"cb51-2\"><a href=\"#cb51-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">always</span> <span class=\"op\">@(</span><span class=\"kw\">posedge</span> i_clk<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb51-3\"><a href=\"#cb51-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">if</span> <span class=\"op\">(</span>i_RegWrite<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb51-4\"><a href=\"#cb51-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    RegData<span class=\"op\">[</span>i_writeReg<span class=\"op\">]</span> <span class=\"op\">&lt;=</span> i_writeData<span class=\"op\">;</span></span>\n<span id=\"cb51-5\"><a href=\"#cb51-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb51-6\"><a href=\"#cb51-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">end</span></span></code></pre></div>\n<p>Here’s an example of how the <code>ORI</code> instruction would be\nprocessed in the single-cycle MIPS processor:</p>\n<pre class=\"assembly\"><code>ORI $t0, $s0, 0xFFFF</code></pre>\n<p>This instruction performs a bitwise OR operation between the value in\nregister <code>$s0</code> and the immediate value <code>0xFFFF</code>\n(16 bits), and stores the result in register <code>$t0</code>.</p>\n<p>In the IF stage, the instruction is fetched from the instruction\nmemory using the PC.</p>\n<p>In the ID stage, the instruction is decoded, and the values of\n<code>$s0</code> and <code>$t0</code> are read from the register file.\nThe immediate value <code>0xFFFF</code> is zero-extended to 32 bits.</p>\n<p>In the EX stage, the ALU performs the bitwise OR operation between\nthe value in <code>$s0</code> and the zero-extended immediate value. The\nALU control unit generates the appropriate control signal for the OR\noperation based on the <code>ALUOp</code> signal from the control\nunit.</p>\n<h3 id=\"nor\">NOR</h3>\n<h4 id=\"intruction-overview\">Intruction Overview</h4>\n<ul>\n<li><strong>IF:</strong> Fetch instruction.</li>\n<li><strong>ID:</strong> Decode opcode; read rs and rt.</li>\n<li><strong>EX:</strong> ALU performs NOR operation on rs and rt.</li>\n<li><strong>MEM:</strong> No action needed.</li>\n<li><strong>WB:</strong> Result is written back to rd.</li>\n</ul>\n<h4 id=\"instruction-breakdown-4\">Instruction Breakdown</h4>\n<p>The NOR instruction in the MIPS architecture performs a bitwise NOR\noperation on the values of two registers and stores the result in a\ndestination register.</p>\n<ol type=\"1\">\n<li><strong>Instruction Fetch (IF) Stage:</strong>\n<ul>\n<li>The instruction is fetched from the instruction memory using the\nprogram counter (PC).</li>\n<li>The instruction memory module (<code>InstructionMemory.v</code>)\nretrieves the instruction based on the address provided by the PC.</li>\n</ul></li>\n</ol>\n<div class=\"sourceCode\" id=\"cb53\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb53-1\"><a href=\"#cb53-1\" aria-hidden=\"true\" tabindex=\"-1\"></a> <span class=\"co\">// Inside the InstructionMemory module</span></span>\n<span id=\"cb53-2\"><a href=\"#cb53-2\" aria-hidden=\"true\" tabindex=\"-1\"></a> <span class=\"kw\">always</span> <span class=\"op\">@(</span>i_Addr<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb53-3\"><a href=\"#cb53-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>   <span class=\"kw\">if</span> <span class=\"op\">(</span>i_Addr <span class=\"op\">==</span> <span class=\"op\">-</span><span class=\"dv\">4</span><span class=\"op\">)</span> <span class=\"kw\">begin</span>         <span class=\"co\">// init</span></span>\n<span id=\"cb53-4\"><a href=\"#cb53-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>     i_Instruction <span class=\"op\">=</span> <span class=\"bn\">32&#39;b11111100000000000000000000000000</span><span class=\"op\">;</span></span>\n<span id=\"cb53-5\"><a href=\"#cb53-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>   <span class=\"kw\">end</span> <span class=\"kw\">else</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb53-6\"><a href=\"#cb53-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>     i_Instruction <span class=\"op\">=</span> Imem<span class=\"op\">[</span>i_Addr<span class=\"op\">&gt;&gt;</span><span class=\"dv\">2</span><span class=\"op\">];</span></span>\n<span id=\"cb53-7\"><a href=\"#cb53-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>   <span class=\"kw\">end</span></span>\n<span id=\"cb53-8\"><a href=\"#cb53-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>   i_Ctr <span class=\"op\">=</span> i_Instruction<span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">26</span><span class=\"op\">];</span></span>\n<span id=\"cb53-9\"><a href=\"#cb53-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>   i_Funcode <span class=\"op\">=</span> i_Instruction<span class=\"op\">[</span><span class=\"dv\">5</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">];</span></span>\n<span id=\"cb53-10\"><a href=\"#cb53-10\" aria-hidden=\"true\" tabindex=\"-1\"></a> <span class=\"kw\">end</span></span></code></pre></div>\n<ol start=\"2\" type=\"1\">\n<li><strong>Instruction Decode (ID) Stage:</strong>\n<ul>\n<li>The fetched instruction is decoded by the control unit\n(<code>ControlUnit.v</code>).</li>\n<li>The opcode of the instruction (bits [31:26]) is used to determine\nthe type of instruction.</li>\n<li>For the NOR instruction, the opcode is 6’b100111 (binary\nrepresentation of 39).</li>\n</ul></li>\n</ol>\n<div class=\"sourceCode\" id=\"cb54\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb54-1\"><a href=\"#cb54-1\" aria-hidden=\"true\" tabindex=\"-1\"></a> <span class=\"co\">// Inside the ControlUnit module</span></span>\n<span id=\"cb54-2\"><a href=\"#cb54-2\" aria-hidden=\"true\" tabindex=\"-1\"></a> <span class=\"kw\">always</span> <span class=\"op\">@(</span>i_instruction<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb54-3\"><a href=\"#cb54-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>   <span class=\"kw\">case</span> <span class=\"op\">(</span>i_instruction<span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">26</span><span class=\"op\">])</span></span>\n<span id=\"cb54-4\"><a href=\"#cb54-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"co\">// ...</span></span>\n<span id=\"cb54-5\"><a href=\"#cb54-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"bn\">6&#39;b100111</span><span class=\"op\">:</span> <span class=\"kw\">begin</span>  <span class=\"co\">// NOR</span></span>\n<span id=\"cb54-6\"><a href=\"#cb54-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>       o_RegDst <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb54-7\"><a href=\"#cb54-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>       o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb54-8\"><a href=\"#cb54-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>       o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb54-9\"><a href=\"#cb54-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>       o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb54-10\"><a href=\"#cb54-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>       o_MemRead <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb54-11\"><a href=\"#cb54-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>       o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb54-12\"><a href=\"#cb54-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>       o_Branch <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb54-13\"><a href=\"#cb54-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>       o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b11</span><span class=\"op\">;</span></span>\n<span id=\"cb54-14\"><a href=\"#cb54-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>       o_Jump <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb54-15\"><a href=\"#cb54-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>       <span class=\"co\">// ...</span></span>\n<span id=\"cb54-16\"><a href=\"#cb54-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"kw\">end</span></span>\n<span id=\"cb54-17\"><a href=\"#cb54-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"co\">// ...</span></span>\n<span id=\"cb54-18\"><a href=\"#cb54-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>   <span class=\"kw\">endcase</span></span>\n<span id=\"cb54-19\"><a href=\"#cb54-19\" aria-hidden=\"true\" tabindex=\"-1\"></a> <span class=\"kw\">end</span></span></code></pre></div>\n<ol start=\"3\" type=\"1\">\n<li><strong>Execute (EX) Stage:</strong>\n<ul>\n<li>The ALU performs the bitwise NOR operation on the values of the\nsource registers (rs and rt).</li>\n<li>The ALU control unit generates the appropriate control signal\n(4’b1100) for the NOR operation based on the ALUOp bits from the control\nunit.</li>\n</ul></li>\n</ol>\n<div class=\"sourceCode\" id=\"cb55\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb55-1\"><a href=\"#cb55-1\" aria-hidden=\"true\" tabindex=\"-1\"></a> <span class=\"co\">// Inside the ALU module</span></span>\n<span id=\"cb55-2\"><a href=\"#cb55-2\" aria-hidden=\"true\" tabindex=\"-1\"></a> <span class=\"kw\">always</span> <span class=\"op\">@(</span>i_data1<span class=\"op\">,</span> data2<span class=\"op\">,</span> i_ALUcontrol<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb55-3\"><a href=\"#cb55-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>   <span class=\"kw\">case</span> <span class=\"op\">(</span>i_ALUcontrol<span class=\"op\">)</span></span>\n<span id=\"cb55-4\"><a href=\"#cb55-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"co\">// ...</span></span>\n<span id=\"cb55-5\"><a href=\"#cb55-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"bn\">4&#39;b1100</span><span class=\"op\">:</span>  <span class=\"co\">// NOR</span></span>\n<span id=\"cb55-6\"><a href=\"#cb55-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>       o_ALUresult <span class=\"op\">=</span> i_data1 <span class=\"op\">|</span> <span class=\"op\">~</span>data2<span class=\"op\">;</span></span>\n<span id=\"cb55-7\"><a href=\"#cb55-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"co\">// ...</span></span>\n<span id=\"cb55-8\"><a href=\"#cb55-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>   <span class=\"kw\">endcase</span></span>\n<span id=\"cb55-9\"><a href=\"#cb55-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>   <span class=\"co\">// ...</span></span>\n<span id=\"cb55-10\"><a href=\"#cb55-10\" aria-hidden=\"true\" tabindex=\"-1\"></a> <span class=\"kw\">end</span></span></code></pre></div>\n<ol start=\"4\" type=\"1\">\n<li><strong>Memory (MEM) Stage:</strong>\n<ul>\n<li>For the NOR instruction, no memory access is required, so this stage\nis a pass-through.</li>\n</ul></li>\n<li><strong>Write Back (WB) Stage:</strong>\n<ul>\n<li>The result of the NOR operation from the ALU is written back to the\ndestination register (rd) in the register file.</li>\n</ul></li>\n</ol>\n<div class=\"sourceCode\" id=\"cb56\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb56-1\"><a href=\"#cb56-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Inside the RegisterFile module</span></span>\n<span id=\"cb56-2\"><a href=\"#cb56-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">always</span> <span class=\"op\">@(</span><span class=\"kw\">posedge</span> i_clk<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb56-3\"><a href=\"#cb56-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">if</span> <span class=\"op\">(</span>i_wEn <span class=\"op\">==</span> <span class=\"dv\">1</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb56-4\"><a href=\"#cb56-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    RegData<span class=\"op\">[</span>i_wDst<span class=\"op\">]</span> <span class=\"op\">&lt;=</span> i_wData<span class=\"op\">;</span></span>\n<span id=\"cb56-5\"><a href=\"#cb56-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb56-6\"><a href=\"#cb56-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">end</span></span></code></pre></div>\n<p>Here’s an example of how the NOR instruction would be encoded in MIPS\nassembly and its corresponding machine code:</p>\n<pre class=\"assembly\"><code># MIPS Assembly\nnor $t0, $s1, $s2   # Perform bitwise NOR of $s1 and $s2 and store the result in $t0</code></pre>\n<pre><code># Machine Code (in binary)\n000000 10001 10010 01000 00000 100111</code></pre>\n<p>In the machine code, the bits are organized as follows: - Bits\n[31:26]: Opcode (000000 for R-type instructions) - Bits [25:21]: Source\nregister 1 (rs) - Bits [20:16]: Source register 2 (rt) - Bits [15:11]:\nDestination register (rd) BNE (Branch Not Equal)</p>\n<ul>\n<li><strong>IF:</strong> Fetch instruction.</li>\n<li><strong>ID:</strong> Decode instruction; read registers rs and\nrt.</li>\n<li><strong>EX:</strong> Compare values of rs and rt.</li>\n<li><strong>MEM:</strong> No action needed.</li>\n<li><strong>WB:</strong> If rs != rt, PC is updated to branch address\n(PC + offset); otherwise, move to next sequential instruction.</li>\n</ul>\n<h4 id=\"instruction-breakdown-5\">Instruction Breakdown</h4>\n<p>The BNE (Branch Not Equal) instruction is a conditional branch\ninstruction in the MIPS architecture.</p>\n<p>It compares the values of two registers and transfers control to a\ntarget address if the values are not equal.</p>\n<ol type=\"1\">\n<li><strong>Instruction Fetch (IF) Stage:</strong> In the IF stage, the\ninstruction is fetched from the Instruction Memory using the Program\nCounter (PC).</li>\n</ol>\n<div class=\"sourceCode\" id=\"cb59\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb59-1\"><a href=\"#cb59-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Fetch the instruction from the Instruction Memory</span></span>\n<span id=\"cb59-2\"><a href=\"#cb59-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>i_Instruction <span class=\"op\">=</span> Imem<span class=\"op\">[</span>i_Addr<span class=\"op\">&gt;&gt;</span><span class=\"dv\">2</span><span class=\"op\">];</span></span></code></pre></div>\n<ol start=\"2\" type=\"1\">\n<li><strong>Instruction Decode (ID) Stage:</strong> In the ID stage, the\ninstruction is decoded, and the registers rs and rt are read from the\nRegister File.</li>\n</ol>\n<div class=\"sourceCode\" id=\"cb60\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb60-1\"><a href=\"#cb60-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Decode the instruction</span></span>\n<span id=\"cb60-2\"><a href=\"#cb60-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>i_Ctr <span class=\"op\">=</span> i_Instruction<span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">26</span><span class=\"op\">];</span></span>\n<span id=\"cb60-3\"><a href=\"#cb60-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>i_Funcode <span class=\"op\">=</span> i_Instruction<span class=\"op\">[</span><span class=\"dv\">5</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">];</span></span>\n<span id=\"cb60-4\"><a href=\"#cb60-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb60-5\"><a href=\"#cb60-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Read registers rs and rt from the Register File</span></span>\n<span id=\"cb60-6\"><a href=\"#cb60-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">wire</span> <span class=\"op\">[</span><span class=\"dv\">4</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> rs <span class=\"op\">=</span> i_Instruction<span class=\"op\">[</span><span class=\"dv\">25</span><span class=\"op\">:</span><span class=\"dv\">21</span><span class=\"op\">];</span></span>\n<span id=\"cb60-7\"><a href=\"#cb60-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">wire</span> <span class=\"op\">[</span><span class=\"dv\">4</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> rt <span class=\"op\">=</span> i_Instruction<span class=\"op\">[</span><span class=\"dv\">20</span><span class=\"op\">:</span><span class=\"dv\">16</span><span class=\"op\">];</span></span>\n<span id=\"cb60-8\"><a href=\"#cb60-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">wire</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> rs_data <span class=\"op\">=</span> RegData<span class=\"op\">[</span>rs<span class=\"op\">];</span></span>\n<span id=\"cb60-9\"><a href=\"#cb60-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">wire</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> rt_data <span class=\"op\">=</span> RegData<span class=\"op\">[</span>rt<span class=\"op\">];</span></span></code></pre></div>\n<ol start=\"3\" type=\"1\">\n<li><strong>Execution (EX) Stage:</strong> In the EX stage, the values\nof rs and rt are compared using the ALU.</li>\n</ol>\n<div class=\"sourceCode\" id=\"cb61\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb61-1\"><a href=\"#cb61-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Compare the values of rs and rt using the ALU</span></span>\n<span id=\"cb61-2\"><a href=\"#cb61-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">wire</span> ALU_zero<span class=\"op\">;</span></span>\n<span id=\"cb61-3\"><a href=\"#cb61-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>ALU alu <span class=\"op\">(</span></span>\n<span id=\"cb61-4\"><a href=\"#cb61-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    .i_data1<span class=\"op\">(</span>rs_data<span class=\"op\">),</span></span>\n<span id=\"cb61-5\"><a href=\"#cb61-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    .i_read2<span class=\"op\">(</span>rt_data<span class=\"op\">),</span></span>\n<span id=\"cb61-6\"><a href=\"#cb61-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    .i_ALUcontrol<span class=\"op\">(</span>ALU_control<span class=\"op\">),</span></span>\n<span id=\"cb61-7\"><a href=\"#cb61-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    .o_Zero<span class=\"op\">(</span>ALU_zero<span class=\"op\">),</span></span>\n<span id=\"cb61-8\"><a href=\"#cb61-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    .o_ALUresult<span class=\"op\">(</span>ALU_result<span class=\"op\">)</span></span>\n<span id=\"cb61-9\"><a href=\"#cb61-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span></code></pre></div>\n<ol start=\"4\" type=\"1\">\n<li><strong>Memory Access (MEM) Stage:</strong></li>\n</ol>\n<p>The BNE instruction does not require any memory access, so this stage\nis a pass-through.</p>\n<ol start=\"5\" type=\"1\">\n<li><strong>Write Back (WB) Stage:</strong></li>\n</ol>\n<p>In the WB stage, if the values of rs and rt are not equal (ALU_zero\nis 0), the Program Counter (PC) is updated to the branch target address\n(PC + offset). Otherwise, the PC moves to the next sequential\ninstruction.</p>\n<div class=\"sourceCode\" id=\"cb62\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb62-1\"><a href=\"#cb62-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Update the PC based on the branch condition</span></span>\n<span id=\"cb62-2\"><a href=\"#cb62-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">wire</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> branch_target <span class=\"op\">=</span> PC <span class=\"op\">+</span> <span class=\"op\">{{</span><span class=\"dv\">14</span><span class=\"op\">{</span>i_Instruction<span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">]}},</span> i_Instruction<span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">],</span> <span class=\"bn\">2&#39;b00</span><span class=\"op\">};</span></span>\n<span id=\"cb62-3\"><a href=\"#cb62-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">wire</span> branch_taken <span class=\"op\">=</span> i_Branch <span class=\"op\">&amp;</span> <span class=\"op\">~</span>ALU_zero<span class=\"op\">;</span></span>\n<span id=\"cb62-4\"><a href=\"#cb62-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">assign</span> PC_next <span class=\"op\">=</span> branch_taken <span class=\"op\">?</span> branch_target <span class=\"op\">:</span> PC <span class=\"op\">+</span> <span class=\"dv\">4</span><span class=\"op\">;</span></span></code></pre></div>\n<p>Here’s an example of how the BNE instruction can be represented in\nVerilog:</p>\n<div class=\"sourceCode\" id=\"cb63\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb63-1\"><a href=\"#cb63-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> BNE_example <span class=\"op\">(</span></span>\n<span id=\"cb63-2\"><a href=\"#cb63-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> rs_data<span class=\"op\">,</span></span>\n<span id=\"cb63-3\"><a href=\"#cb63-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> rt_data<span class=\"op\">,</span></span>\n<span id=\"cb63-4\"><a href=\"#cb63-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> offset<span class=\"op\">,</span></span>\n<span id=\"cb63-5\"><a href=\"#cb63-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> PC<span class=\"op\">,</span></span>\n<span id=\"cb63-6\"><a href=\"#cb63-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> PC_next</span>\n<span id=\"cb63-7\"><a href=\"#cb63-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb63-8\"><a href=\"#cb63-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">wire</span> ALU_zero<span class=\"op\">;</span></span>\n<span id=\"cb63-9\"><a href=\"#cb63-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">wire</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> branch_target <span class=\"op\">=</span> PC <span class=\"op\">+</span> <span class=\"op\">{{</span><span class=\"dv\">14</span><span class=\"op\">{</span>offset<span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">]}},</span> offset<span class=\"op\">,</span> <span class=\"bn\">2&#39;b00</span><span class=\"op\">};</span></span>\n<span id=\"cb63-10\"><a href=\"#cb63-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Compare rs and rt using ALU</span></span>\n<span id=\"cb63-11\"><a href=\"#cb63-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">assign</span> ALU_zero <span class=\"op\">=</span> <span class=\"op\">(</span>rs_data <span class=\"op\">==</span> rt_data<span class=\"op\">)</span> <span class=\"op\">?</span> <span class=\"dv\">1</span> <span class=\"op\">:</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb63-12\"><a href=\"#cb63-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Update PC based on branch condition</span></span>\n<span id=\"cb63-13\"><a href=\"#cb63-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">always</span> <span class=\"op\">@(</span>*<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb63-14\"><a href=\"#cb63-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">if</span> <span class=\"op\">(~</span>ALU_zero<span class=\"op\">)</span></span>\n<span id=\"cb63-15\"><a href=\"#cb63-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>            PC_next <span class=\"op\">=</span> branch_target<span class=\"op\">;</span></span>\n<span id=\"cb63-16\"><a href=\"#cb63-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">else</span></span>\n<span id=\"cb63-17\"><a href=\"#cb63-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>            PC_next <span class=\"op\">=</span> PC <span class=\"op\">+</span> <span class=\"dv\">4</span><span class=\"op\">;</span></span>\n<span id=\"cb63-18\"><a href=\"#cb63-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb63-19\"><a href=\"#cb63-19\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<p>In this example, the <code>BNE_example</code> module takes the values\nof rs and rt (<code>rs_data</code> and <code>rt_data</code>), the branch\noffset (<code>offset</code>), and the current Program Counter\n(<code>PC</code>) as inputs.</p>\n<p>It compares rs and rt using the ALU and updates the\n<code>PC_next</code> output based on the branch condition.</p>\n<p>If rs and rt are not equal (<code>ALU_zero</code> is 0),\n<code>PC_next</code> is set to the branch target address\n(<code>branch_target</code>).</p>\n<p>Otherwise, <code>PC_next</code> is set to the next sequential\ninstruction address (<code>PC + 4</code>).</p>\n<h1 id=\"comparing-verilog-vs-vhdl\">Comparing Verilog vs VHDL</h1>\n<p>The following section will compare the experience of developing a\nsingle-cycle processor in Verilog vs VHDL.</p>\n<h2 id=\"interesting-notes-about-verilog\">Interesting notes about\nverilog</h2>\n<p>The loose typing of Verilog can lead to some useful modules that can\nbe defined in small amounts of code.</p>\n<p>Additionally, in verilog, you do not have to declare your components\nin the component that uses them which also decreases the amount of code\nthat is needed to be written.</p>\n<p>For example, the following module is the mux module that is used in\nthe processor to select between two inputs based on a control\nsignal.</p>\n<div class=\"sourceCode\" id=\"cb64\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb64-1\"><a href=\"#cb64-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> mux #<span class=\"op\">(</span><span class=\"dt\">parameter</span> size <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">)</span> <span class=\"op\">(</span></span>\n<span id=\"cb64-2\"><a href=\"#cb64-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">input</span> select<span class=\"op\">,</span></span>\n<span id=\"cb64-3\"><a href=\"#cb64-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">input</span> <span class=\"op\">[</span>size <span class=\"op\">-</span> <span class=\"dv\">1</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> in_0<span class=\"op\">,</span></span>\n<span id=\"cb64-4\"><a href=\"#cb64-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">input</span> <span class=\"op\">[</span>size <span class=\"op\">-</span> <span class=\"dv\">1</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> in_1<span class=\"op\">,</span></span>\n<span id=\"cb64-5\"><a href=\"#cb64-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">output</span> <span class=\"op\">[</span>size <span class=\"op\">-</span> <span class=\"dv\">1</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> out</span>\n<span id=\"cb64-6\"><a href=\"#cb64-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb64-7\"><a href=\"#cb64-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">assign</span> out <span class=\"op\">=</span> <span class=\"op\">(</span>select<span class=\"op\">)</span> <span class=\"op\">?</span> in_1 <span class=\"op\">:</span> in_0<span class=\"op\">;</span></span>\n<span id=\"cb64-8\"><a href=\"#cb64-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<p>Another example of this is the sign extender module that is used to\nextend the sign of a 16-bit number to a 32-bit number.</p>\n<div class=\"sourceCode\" id=\"cb65\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb65-1\"><a href=\"#cb65-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> signextender <span class=\"op\">(</span></span>\n<span id=\"cb65-2\"><a href=\"#cb65-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> in<span class=\"op\">,</span></span>\n<span id=\"cb65-3\"><a href=\"#cb65-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">output</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> out</span>\n<span id=\"cb65-4\"><a href=\"#cb65-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb65-5\"><a href=\"#cb65-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">assign</span> out <span class=\"op\">=</span> <span class=\"op\">{{</span><span class=\"dv\">16</span><span class=\"op\">{</span>in<span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">]}},</span> <span class=\"op\">{</span>in<span class=\"op\">}};</span></span>\n<span id=\"cb65-6\"><a href=\"#cb65-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<p>Additionally, the fact that in Verilog you do not need to\npreemptively define components before using them allows for a more\nflexible design and faster development.</p>\n<p>Another nice feature of Verilog (specifically VerilogHDL) is the\nability to print out the values of signals without having to worry about\ntheir types in the waveform viewer inside modelsim/questasim.</p>\n<p>This is a feature that is not present in VHDL and is very useful for\ndebugging and understanding the behavior of the processor.</p>\n<h2 id=\"interesting-notes-about-vhdl\">Interesting notes about VHDL</h2>\n<p>While you can do this “print debugging” in VHDL, it is not as easy as\nit is in Verilog because in VHDL you must deal with the typings of the\nsignals and the fact that you must declare the signals before you can\nuse them.</p>\n<p>As an example, the following is the code in VHDL that prints out the\nvalues of the signals in the waveform viewer for an n-bit register which\nwas used in a project for CPRE381.</p>\n<p>The following test-bench shows the code that can be executed inside\nmodelsim/questasim to print out the values of the signals in the\nwaveform viewer.</p>\n<p>It displays the additional hurdles that must be overcome in VHDL to\nprint out the values of the signals in the waveform viewer because of\nthe strict typing of the language.</p>\n<div class=\"sourceCode\" id=\"cb66\"><pre\nclass=\"sourceCode vhdl\"><code class=\"sourceCode vhdl\"><span id=\"cb66-1\"><a href=\"#cb66-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">LIBRARY</span> IEEE;</span>\n<span id=\"cb66-2\"><a href=\"#cb66-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">USE</span> IEEE<span class=\"ot\">.</span>std_logic_1164<span class=\"ot\">.</span><span class=\"kw\">ALL</span>;</span>\n<span id=\"cb66-3\"><a href=\"#cb66-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">ENTITY</span> <span class=\"dv\">tb_nbitregister</span> <span class=\"kw\">IS</span></span>\n<span id=\"cb66-4\"><a href=\"#cb66-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">GENERIC</span> (</span>\n<span id=\"cb66-5\"><a href=\"#cb66-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    gCLK_HPER <span class=\"ot\">:</span> <span class=\"dt\">TIME</span> <span class=\"ot\">:=</span> <span class=\"dv\">50</span> <span class=\"dt\">ns</span>;</span>\n<span id=\"cb66-6\"><a href=\"#cb66-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    N <span class=\"ot\">:</span> <span class=\"dt\">INTEGER</span> <span class=\"ot\">:=</span> <span class=\"dv\">32</span>);</span>\n<span id=\"cb66-7\"><a href=\"#cb66-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">END tb_nbitregister;</span></span>\n<span id=\"cb66-8\"><a href=\"#cb66-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">ARCHITECTURE</span> <span class=\"dv\">behavior</span> <span class=\"kw\">OF</span> <span class=\"fu\">tb_nbitregister</span> <span class=\"kw\">IS</span></span>\n<span id=\"cb66-9\"><a href=\"#cb66-9\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb66-10\"><a href=\"#cb66-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">-- Calculate the clock period as twice the half-period</span></span>\n<span id=\"cb66-11\"><a href=\"#cb66-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"ot\">CONSTANT</span> cCLK_PER <span class=\"ot\">:</span> <span class=\"dt\">TIME</span> <span class=\"ot\">:=</span> gCLK_HPER <span class=\"ot\">*</span> <span class=\"dv\">2</span>;</span>\n<span id=\"cb66-12\"><a href=\"#cb66-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">COMPONENT</span> <span class=\"dv\">nbitregister</span></span>\n<span id=\"cb66-13\"><a href=\"#cb66-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">PORT</span> (</span>\n<span id=\"cb66-14\"><a href=\"#cb66-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>      i_CLK <span class=\"ot\">:</span> <span class=\"kw\">IN</span> <span class=\"dt\">STD_LOGIC</span>; <span class=\"co\">-- Clock input</span></span>\n<span id=\"cb66-15\"><a href=\"#cb66-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>      i_RST <span class=\"ot\">:</span> <span class=\"kw\">IN</span> <span class=\"dt\">STD_LOGIC</span>; <span class=\"co\">-- Reset input</span></span>\n<span id=\"cb66-16\"><a href=\"#cb66-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>      i_WE <span class=\"ot\">:</span> <span class=\"kw\">IN</span> <span class=\"dt\">STD_LOGIC</span>; <span class=\"co\">-- Write enable input</span></span>\n<span id=\"cb66-17\"><a href=\"#cb66-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>      i_D <span class=\"ot\">:</span> <span class=\"kw\">IN</span> <span class=\"dt\">STD_LOGIC_VECTOR</span>(N <span class=\"ot\">-</span> <span class=\"dv\">1</span> <span class=\"ot\">DOWNTO</span> <span class=\"dv\">0</span>); <span class=\"co\">-- Data value input</span></span>\n<span id=\"cb66-18\"><a href=\"#cb66-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_Q <span class=\"ot\">:</span> <span class=\"kw\">OUT</span> <span class=\"dt\">STD_LOGIC_VECTOR</span>(N <span class=\"ot\">-</span> <span class=\"dv\">1</span> <span class=\"ot\">DOWNTO</span> <span class=\"dv\">0</span>) <span class=\"co\">-- Data value output</span></span>\n<span id=\"cb66-19\"><a href=\"#cb66-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>    );</span>\n<span id=\"cb66-20\"><a href=\"#cb66-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">END COMPONENT;</span></span>\n<span id=\"cb66-21\"><a href=\"#cb66-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">-- Temporary Signals to connect to the nbitregister component.</span></span>\n<span id=\"cb66-22\"><a href=\"#cb66-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"ot\">SIGNAL</span> s_CLK<span class=\"ot\">,</span> s_RST<span class=\"ot\">,</span> s_WE <span class=\"ot\">:</span> <span class=\"dt\">STD_LOGIC</span>;</span>\n<span id=\"cb66-23\"><a href=\"#cb66-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"ot\">SIGNAL</span> s_D<span class=\"ot\">,</span> s_Q <span class=\"ot\">:</span> <span class=\"dt\">STD_LOGIC_VECTOR</span>(N <span class=\"ot\">-</span> <span class=\"dv\">1</span> <span class=\"ot\">DOWNTO</span> <span class=\"dv\">0</span>);</span>\n<span id=\"cb66-24\"><a href=\"#cb66-24\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">BEGIN</span></span>\n<span id=\"cb66-25\"><a href=\"#cb66-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dv\">DUT</span> <span class=\"ot\">:</span> <span class=\"fu\">nbitregister</span></span>\n<span id=\"cb66-26\"><a href=\"#cb66-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">PORT MAP</span>(</span>\n<span id=\"cb66-27\"><a href=\"#cb66-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>    i_CLK <span class=\"ot\">=&gt;</span> s_CLK<span class=\"ot\">,</span></span>\n<span id=\"cb66-28\"><a href=\"#cb66-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>    i_RST <span class=\"ot\">=&gt;</span> s_RST<span class=\"ot\">,</span></span>\n<span id=\"cb66-29\"><a href=\"#cb66-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>    i_WE <span class=\"ot\">=&gt;</span> s_WE<span class=\"ot\">,</span></span>\n<span id=\"cb66-30\"><a href=\"#cb66-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>    i_D <span class=\"ot\">=&gt;</span> s_D<span class=\"ot\">,</span></span>\n<span id=\"cb66-31\"><a href=\"#cb66-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_Q <span class=\"ot\">=&gt;</span> s_Q</span>\n<span id=\"cb66-32\"><a href=\"#cb66-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>  );</span>\n<span id=\"cb66-33\"><a href=\"#cb66-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dv\">P_CLK</span> <span class=\"ot\">:</span> <span class=\"sc\">PROCESS</span></span>\n<span id=\"cb66-34\"><a href=\"#cb66-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"sc\">BEGIN</span></span>\n<span id=\"cb66-35\"><a href=\"#cb66-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>    s_CLK <span class=\"ot\">&lt;=</span> <span class=\"bn\">&#39;0&#39;</span>;</span>\n<span id=\"cb66-36\"><a href=\"#cb66-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">WAIT</span> <span class=\"kw\">FOR</span> gCLK_HPER;</span>\n<span id=\"cb66-37\"><a href=\"#cb66-37\" aria-hidden=\"true\" tabindex=\"-1\"></a>    s_CLK <span class=\"ot\">&lt;=</span> <span class=\"bn\">&#39;1&#39;</span>;</span>\n<span id=\"cb66-38\"><a href=\"#cb66-38\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">WAIT</span> <span class=\"kw\">FOR</span> gCLK_HPER;</span>\n<span id=\"cb66-39\"><a href=\"#cb66-39\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"sc\">END PROCESS;</span></span>\n<span id=\"cb66-40\"><a href=\"#cb66-40\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dv\">P_TB</span> <span class=\"ot\">:</span> <span class=\"sc\">PROCESS</span></span>\n<span id=\"cb66-41\"><a href=\"#cb66-41\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"sc\">BEGIN</span></span>\n<span id=\"cb66-42\"><a href=\"#cb66-42\" aria-hidden=\"true\" tabindex=\"-1\"></a>    s_RST <span class=\"ot\">&lt;=</span> <span class=\"bn\">&#39;1&#39;</span>;</span>\n<span id=\"cb66-43\"><a href=\"#cb66-43\" aria-hidden=\"true\" tabindex=\"-1\"></a>    s_WE <span class=\"ot\">&lt;=</span> <span class=\"bn\">&#39;0&#39;</span>;</span>\n<span id=\"cb66-44\"><a href=\"#cb66-44\" aria-hidden=\"true\" tabindex=\"-1\"></a>    s_D <span class=\"ot\">&lt;=</span> <span class=\"st\">&quot;00000000000000000000000000000000&quot;</span>;</span>\n<span id=\"cb66-45\"><a href=\"#cb66-45\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">WAIT</span> <span class=\"kw\">FOR</span> cCLK_PER;</span>\n<span id=\"cb66-46\"><a href=\"#cb66-46\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">-- </span><span class=\"al\">TEST</span><span class=\"co\"> CASE 1 - STORE &#39;1&#39;</span></span>\n<span id=\"cb66-47\"><a href=\"#cb66-47\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">-- DESCRIPTION: The register should store the new data value</span></span>\n<span id=\"cb66-48\"><a href=\"#cb66-48\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">-- EXPECTED RESULT: The new data value should be stored in the register</span></span>\n<span id=\"cb66-49\"><a href=\"#cb66-49\" aria-hidden=\"true\" tabindex=\"-1\"></a>    s_RST <span class=\"ot\">&lt;=</span> <span class=\"bn\">&#39;0&#39;</span>;</span>\n<span id=\"cb66-50\"><a href=\"#cb66-50\" aria-hidden=\"true\" tabindex=\"-1\"></a>    s_WE <span class=\"ot\">&lt;=</span> <span class=\"bn\">&#39;1&#39;</span>;</span>\n<span id=\"cb66-51\"><a href=\"#cb66-51\" aria-hidden=\"true\" tabindex=\"-1\"></a>    s_D <span class=\"ot\">&lt;=</span> <span class=\"st\">&quot;11111111111111111111111111111111&quot;</span>;</span>\n<span id=\"cb66-52\"><a href=\"#cb66-52\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">WAIT</span> <span class=\"kw\">FOR</span> cCLK_PER;</span>\n<span id=\"cb66-53\"><a href=\"#cb66-53\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">IF</span> (s_Q <span class=\"ot\">/=</span> <span class=\"st\">&quot;11111111111111111111111111111111&quot;</span>) <span class=\"cf\">THEN</span></span>\n<span id=\"cb66-54\"><a href=\"#cb66-54\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">REPORT</span> <span class=\"st\">&quot;Test 1 failed&quot;</span>;</span>\n<span id=\"cb66-55\"><a href=\"#cb66-55\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">REPORT</span> <span class=\"st\">&quot;Expected: 11111111111111111111111111111111&quot;</span>;</span>\n<span id=\"cb66-56\"><a href=\"#cb66-56\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">REPORT</span> <span class=\"st\">&quot;Actual:  &quot;</span> <span class=\"ot\">&amp;</span> STD_LOGIC_VECTOR<span class=\"bn\">&#39;image(s_Q)</span>;</span>\n<span id=\"cb66-57\"><a href=\"#cb66-57\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">ELSE</span></span>\n<span id=\"cb66-58\"><a href=\"#cb66-58\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">REPORT</span> <span class=\"st\">&quot;TEST 1 PASSED - STORE &#39;1&#39;&quot;</span>;</span>\n<span id=\"cb66-59\"><a href=\"#cb66-59\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">END IF;</span></span>\n<span id=\"cb66-60\"><a href=\"#cb66-60\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"ot\">//</span> <span class=\"ot\">...</span></span>\n<span id=\"cb66-61\"><a href=\"#cb66-61\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"sc\">END behavior;</span></span></code></pre></div>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>I think that VHDL actually provides more flexibility within the\ndevelopment of the processor.</p>\n<p>While the language is more verbose because you must reinstantiate a\ncomponent within another component to use it, it is more type-safe, and\nallows for more control over the design of the processor.</p>\n<p>Verilog is more concise and easier to read, but I think that VHDL is\nmore powerful and allows for more control over the design of the\nprocessor because of it’s type-safety.</p>\n<p>To support this, I present the result of the actual lines of code\nthat were written for the processor in VHDL and Verilog.</p>\n<h4 id=\"vhdl-single-cycle-mips-processor-code-statistics\">VHDL Single\nCycle MIPS Processor Code Statistics:</h4>\n<pre><code>Language                         files          blank        comment           code\n-----------------------------------------------------------------------------------\nVHDL                                65            694           1085           4677</code></pre>\n<h4 id=\"verilog-single-cycle-mips-processor-code-statistics\">Verilog\nSingle Cycle MIPS Processor Code Statistics:</h4>\n<pre><code>Language                         files          blank        comment           code\n-----------------------------------------------------------------------------------\nVerilog-SystemVerilog               10              0              9            555</code></pre>\n<p>As you can see, the VHDL processor has almost <strong>10</strong>\ntimes the amount of code as the Verilog processor.</p>\n<p>Furthermore, I think that the fact that the name of a file in verilog\nmust match the module name is a limitation that VHDL does not have\n(atleast in our Quartus simulator).</p>\n<p>To summarize, I think that VHDL is more suited for larger projects\nand more complex designs where the type-safety and , while Verilog is\nmore suited for smaller projects and simpler designs.</p>\n<h1 id=\"breaking-down-decoding-a-signal-to-7-segment-displays\">Breaking\ndown decoding a signal to 7-segment displays</h1>\n<p>As the signal representing the instruction is 5 bits long inside the\n<code>controller.v</code> file, we need to decode this signal to display\nthe current instruction on the 7-segment displays.</p>\n<p>This means that we need to decode a 5-bit signal to a 35-bit signal\nthat will be used to display the current instruction on the 7-segment\ndisplays.</p>\n<p>If 5-bits are used to represent the instruction, and 7-bits are\nneeded to represent a character on a 7-segment display, then 35-bits are\nneeded to represent the current instruction on 5 7-segment displays as 7\n* 5 = 35.</p>\n<p>Furthermore, the longest word that can be displayed on the 7-segment\ndisplays is 5 characters long, so 5 * 7 = 35 bits are needed to\nrepresent the current instruction on the 7-segment displays.</p>\n<table>\n<colgroup>\n<col style=\"width: 25%\" />\n<col style=\"width: 25%\" />\n<col style=\"width: 25%\" />\n<col style=\"width: 25%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Func_in</th>\n<th style=\"text-align: center;\">O_out</th>\n<th style=\"text-align: center;\">Operation</th>\n<th style=\"text-align: center;\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">1000</td>\n<td style=\"text-align: center;\">ox</td>\n<td style=\"text-align: center;\"><span\nclass=\"math inline\">(<em>A</em>+<em>B</em>)</span></td>\n<td style=\"text-align: center;\">ADD</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">1000</td>\n<td style=\"text-align: center;\"><span class=\"math inline\">1X</span></td>\n<td style=\"text-align: center;\"><span\nclass=\"math inline\">(A−B)</span></td>\n<td style=\"text-align: center;\">SuB</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">1001</td>\n<td style=\"text-align: center;\">00</td>\n<td style=\"text-align: center;\"><span\nclass=\"math inline\">(<em>A</em>&amp;<em>B</em>)</span></td>\n<td style=\"text-align: center;\">AND</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">1001</td>\n<td style=\"text-align: center;\">01</td>\n<td style=\"text-align: center;\"><span\nclass=\"math inline\">(<em>A</em>∣<em>B</em>)</span></td>\n<td style=\"text-align: center;\">OR</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">1001</td>\n<td style=\"text-align: center;\"><span\nclass=\"math inline\"><em>π</em></span></td>\n<td style=\"text-align: center;\"><span\nclass=\"math inline\">\u2004∼\u2004(A∣B)</span></td>\n<td style=\"text-align: center;\">NOR</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">101</td>\n<td style=\"text-align: center;\"><span\nclass=\"math inline\">xx0</span></td>\n<td style=\"text-align: center;\">signed <span\nclass=\"math inline\">(<em>A</em>)\u2004&lt;\u2004signed\u2006(<em>B</em>)</span></td>\n<td style=\"text-align: center;\">Set-Less-Than signed</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">101</td>\n<td style=\"text-align: center;\"><span\nclass=\"math inline\"><em>x</em><em>x</em>1</span></td>\n<td style=\"text-align: center;\"><span\nclass=\"math inline\"><em>A</em>\u2004&lt;\u2004<em>B</em></span></td>\n<td style=\"text-align: center;\">Set-Less-Than unsigned</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">111</td>\n<td style=\"text-align: center;\">000</td>\n<td style=\"text-align: center;\">A</td>\n<td style=\"text-align: center;\">BLTZ (Branch if Less Than Zero)</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">111</td>\n<td style=\"text-align: center;\">001</td>\n<td style=\"text-align: center;\">A</td>\n<td style=\"text-align: center;\">BGEZ (Branch if Greater or Equal to\nZero)</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">111</td>\n<td style=\"text-align: center;\">010</td>\n<td style=\"text-align: center;\">A</td>\n<td style=\"text-align: center;\">J/AL (Jump and Link)</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">111</td>\n<td style=\"text-align: center;\">011</td>\n<td style=\"text-align: center;\">A</td>\n<td style=\"text-align: center;\">JR/AL (Jump Register and Link)</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">111</td>\n<td style=\"text-align: center;\">100</td>\n<td style=\"text-align: center;\">A</td>\n<td style=\"text-align: center;\"><span class=\"math inline\">BEQ(</span>\n(Branch if Equal)</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">111</td>\n<td style=\"text-align: center;\">101</td>\n<td style=\"text-align: center;\">A</td>\n<td style=\"text-align: center;\">BNE (Branch if Not Equal)</td>\n</tr>\n</tbody>\n</table>\n<p>The following is the wave-diagram from modelsim/questasim for my\ntest-bench of my processor without the added seven segment displays.</p>\n<figure>\n<img src=\"assets/WaveDiagramWithoutSevenSegment.png\"\nalt=\"WaveDiagramWithoutSevenSegment.png\" />\n<figcaption\naria-hidden=\"true\">WaveDiagramWithoutSevenSegment.png</figcaption>\n</figure>\n<p>Below is the captured wave-diagram from modelsim/questasim with the\nseven segment ports included:</p>\n<figure>\n<img src=\"assets/SevenSegmentWaveDiagram.png\"\nalt=\"SevenSegmentWaveDiagram.png\" />\n<figcaption aria-hidden=\"true\">SevenSegmentWaveDiagram.png</figcaption>\n</figure>\n<p>The wave-forms show the output of the following test-bench,\n<code>mips_tb.v</code>, which is used to test the single-cycle MIPS\nprocessor, <code>mips.v</code>.</p>\n<div class=\"sourceCode\" id=\"cb69\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb69-1\"><a href=\"#cb69-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ot\">`timescale 1ns / 1ps</span></span>\n<span id=\"cb69-2\"><a href=\"#cb69-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ot\">`define CYCLE_TIME 20</span></span>\n<span id=\"cb69-3\"><a href=\"#cb69-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> mips_tb<span class=\"op\">;</span></span>\n<span id=\"cb69-4\"><a href=\"#cb69-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">reg</span> clk<span class=\"op\">;</span></span>\n<span id=\"cb69-5\"><a href=\"#cb69-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">reg</span> rst<span class=\"op\">;</span></span>\n<span id=\"cb69-6\"><a href=\"#cb69-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">// segments for the 7-segment displays</span></span>\n<span id=\"cb69-7\"><a href=\"#cb69-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">wire</span> <span class=\"op\">[</span><span class=\"dv\">6</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> seg_first<span class=\"op\">,</span> seg_second<span class=\"op\">,</span> seg_third<span class=\"op\">,</span> seg_fourth<span class=\"op\">,</span> seg_fifth<span class=\"op\">;</span></span>\n<span id=\"cb69-8\"><a href=\"#cb69-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">integer</span> i<span class=\"op\">;</span></span>\n<span id=\"cb69-9\"><a href=\"#cb69-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">always</span> #<span class=\"op\">(</span><span class=\"ot\">`CYCLE_TIME</span> <span class=\"op\">/</span> <span class=\"dv\">2</span><span class=\"op\">)</span> clk <span class=\"op\">=</span> <span class=\"op\">~</span>clk<span class=\"op\">;</span></span>\n<span id=\"cb69-10\"><a href=\"#cb69-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>  mips uut <span class=\"op\">(</span></span>\n<span id=\"cb69-11\"><a href=\"#cb69-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>      .i_Clk<span class=\"op\">(</span>clk<span class=\"op\">),</span></span>\n<span id=\"cb69-12\"><a href=\"#cb69-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>      .i_Rst<span class=\"op\">(</span>rst<span class=\"op\">),</span></span>\n<span id=\"cb69-13\"><a href=\"#cb69-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>      .o_Seg_first<span class=\"op\">(</span>seg_first<span class=\"op\">),</span></span>\n<span id=\"cb69-14\"><a href=\"#cb69-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>      .o_Seg_second<span class=\"op\">(</span>seg_second<span class=\"op\">),</span></span>\n<span id=\"cb69-15\"><a href=\"#cb69-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>      .o_Seg_third<span class=\"op\">(</span>seg_third<span class=\"op\">),</span></span>\n<span id=\"cb69-16\"><a href=\"#cb69-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>      .o_Seg_fourth<span class=\"op\">(</span>seg_fourth<span class=\"op\">),</span></span>\n<span id=\"cb69-17\"><a href=\"#cb69-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>      .o_Seg_fifth<span class=\"op\">(</span>seg_fifth<span class=\"op\">)</span></span>\n<span id=\"cb69-18\"><a href=\"#cb69-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">);</span></span>\n<span id=\"cb69-19\"><a href=\"#cb69-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">initial</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb69-20\"><a href=\"#cb69-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Initialize data memory</span></span>\n<span id=\"cb69-21\"><a href=\"#cb69-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">for</span> <span class=\"op\">(</span>i <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span> i <span class=\"op\">&lt;</span> <span class=\"dv\">32</span><span class=\"op\">;</span> i <span class=\"op\">=</span> i <span class=\"op\">+</span> <span class=\"dv\">1</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb69-22\"><a href=\"#cb69-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>      uut.inst_DataMemory.Dmem<span class=\"op\">[</span>i<span class=\"op\">]</span> <span class=\"op\">=</span> <span class=\"bn\">32&#39;b0</span><span class=\"op\">;</span></span>\n<span id=\"cb69-23\"><a href=\"#cb69-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb69-24\"><a href=\"#cb69-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Initialize Register File</span></span>\n<span id=\"cb69-25\"><a href=\"#cb69-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">for</span> <span class=\"op\">(</span>i <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span> i <span class=\"op\">&lt;</span> <span class=\"dv\">32</span><span class=\"op\">;</span> i <span class=\"op\">=</span> i <span class=\"op\">+</span> <span class=\"dv\">1</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb69-26\"><a href=\"#cb69-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>      uut.inst_RegisterFile.RegData<span class=\"op\">[</span>i<span class=\"op\">]</span> <span class=\"op\">=</span> <span class=\"bn\">32&#39;b0</span><span class=\"op\">;</span></span>\n<span id=\"cb69-27\"><a href=\"#cb69-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb69-28\"><a href=\"#cb69-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>    clk <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb69-29\"><a href=\"#cb69-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb69-30\"><a href=\"#cb69-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">initial</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb69-31\"><a href=\"#cb69-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bn\">#1800</span> <span class=\"dt\">$finish</span><span class=\"op\">;</span></span>\n<span id=\"cb69-32\"><a href=\"#cb69-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb69-33\"><a href=\"#cb69-33\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<p>The given Verilog code represents my test-bench module that was used\nfor testing the single-cycle MIPS processor, <code>mips.v</code>.</p>\n<ol type=\"1\">\n<li><p>The test-bench module is named <code>mips_tb</code> (titled\n<code>mips_tb.v</code>), and it operates on a timescale of\n1ns/1ps.</p></li>\n<li><p>The module declares two reg variables:</p>\n<ul>\n<li><code>clk</code>: Represents the clock signal for the\nprocessor.</li>\n<li><code>rst</code>: Represents the reset signal for the\nprocessor.</li>\n</ul></li>\n<li><p>It also declares five wire variables (<code>seg_first</code>,\n<code>seg_second</code>, <code>seg_third</code>,\n<code>seg_fourth</code>, <code>seg_fifth</code>) to represent the\nsegments for the 7-segment displays. These wires are used to display the\ncurrent instruction being executed by the processor.</p></li>\n<li><p>The <code>integer</code> variable <code>i</code> is declared as a\nloop variable for initializing memory.</p></li>\n<li><p>The <code>always</code> block generates the clock signal by\ntoggling the <code>clk</code> variable every half of the clock cycle\ntime (<code>CYCLE_TIME/2</code>).</p></li>\n<li><p>The <code>mips</code> module (the actual MIPS processor) is\ninstantiated as <code>uut</code> (unit under test) with the following\nconnections:</p></li>\n</ol>\n<ul>\n<li><code>i_Clk</code> is connected to the <code>clk</code> signal.</li>\n<li><code>i_Rst</code> is connected to the <code>rst</code> signal.</li>\n<li>The 7-segment display outputs (<code>o_Seg_first</code>,\n<code>o_Seg_second</code>, <code>o_Seg_third</code>,\n<code>o_Seg_fourth</code>, <code>o_Seg_fifth</code>) are connected to\nthe corresponding wires in the test-bench.</li>\n</ul>\n<ol start=\"7\" type=\"1\">\n<li>The first <code>initial</code> block is used to initialize the data\nmemory and the register file of the MIPS processor:\n<ul>\n<li>It uses a <code>for</code> loop to iterate over the first 32\nlocations of the data memory (<code>Dmem</code>) and initializes each\nlocation to zero.</li>\n<li>Similarly, it initializes the first 32 registers in the register\nfile (<code>RegData</code>) to zero.</li>\n<li>Finally, it sets the <code>clk</code> variable to 0.</li>\n</ul></li>\n<li>The second <code>initial</code> block is used to specify the\nduration of the simulation. It uses the <code>$finish</code> system task\nto terminate the simulation after 1800 time units.</li>\n</ol>\n<p>The purpose of this test-bench is to provide a simulation environment\nfor the MIPS processor. It initializes the necessary components (data\nmemory and register file), generates the clock signal, and instantiates\nthe MIPS processor module. The testbench also specifies the duration of\nthe simulation.</p>\n<p>The test-bench interacts with other components of the processor\nthrough the instantiated <code>mips</code> module (<code>uut</code>). It\nprovides the clock and reset signals to the processor and observes the\noutput signals for the 7-segment displays.</p>\n<p>Overall, this test-bench serves as a framework to verify the\nfunctionality of the single-cycle MIPS processor by providing the\nnecessary inputs, initializing the memory, and specifying the simulation\nduration.</p>\n<h2 id=\"schematics\">Schematics</h2>\n<p>The following section will include the schematics for the various\ncomponents of the MIPS processor as written in verilog.</p>\n<h3 id=\"control-unit-schematic\">Control Unit Schematic</h3>\n<p>The following is the schematic for the control unit of the MIPS\nprocessor.</p>\n<p>[[Pasted image 20240503123506.png]]</p>\n<h3 id=\"register-file\">Register File</h3>\n<p>The following is the schematic for the register file of the MIPS\nprocessor.</p>\n<p>[[RegisterFile.png]]</p>\n<h3 id=\"data-memory\">Data Memory</h3>\n<p>The following is the schematic for the data memory of the MIPS\nprocessor.</p>\n<figure>\n<img src=\"assets/SchematicDataMemory.png\" alt=\"SchematicDataMemory.png\" />\n<figcaption aria-hidden=\"true\">SchematicDataMemory.png</figcaption>\n</figure>\n<h3 id=\"alu-control\">ALU Control</h3>\n<p>The following is the schematic for the ALU control of the MIPS\nprocessor.</p>\n<figure>\n<img src=\"assets/SchematicALUControl.png\" alt=\"SchematicALUControl.png\" />\n<figcaption aria-hidden=\"true\">SchematicALUControl.png</figcaption>\n</figure>\n<h3 id=\"program-counter-control\">Program Counter Control</h3>\n<p>The following is the schematic for the program counter control of the\nMIPS processor.</p>\n<figure>\n<img src=\"assets/SchematicNextProgramCounter.png\"\nalt=\"SchematicNextProgramCounter.png\" />\n<figcaption\naria-hidden=\"true\">SchematicNextProgramCounter.png</figcaption>\n</figure>\n<h3 id=\"alu\">ALU</h3>\n<p>The following is the schematic for the ALU of the MIPS processor.</p>\n<figure>\n<img src=\"assets/SchematicALU.png\" alt=\"SchematicALU.png\" />\n<figcaption aria-hidden=\"true\">SchematicALU.png</figcaption>\n</figure>\n<h3 id=\"instruction-memory\">Instruction Memory</h3>\n<p>The following is the schematic for the instruction memory of the MIPS\nprocessor.</p>\n<figure>\n<img src=\"assets/SchematicInstructionMemory.png\"\nalt=\"SchematicInstructionMemory.png\" />\n<figcaption\naria-hidden=\"true\">SchematicInstructionMemory.png</figcaption>\n</figure>\n<h3 id=\"program-counter\">Program Counter</h3>\n<p>The following is the schematic for the program counter of the MIPS\nprocessor.</p>\n<figure>\n<img src=\"assets/SchematicProgramCounter.png\"\nalt=\"SchematicProgramCounter.png\" />\n<figcaption aria-hidden=\"true\">SchematicProgramCounter.png</figcaption>\n</figure>\n<h3 id=\"waveform\">Waveform</h3>\n<p>The following is the wave form of the Processor from\nmodelsim/questasim:</p>\n<figure>\n<img src=\"assets/TestbenchWaveform.png\" alt=\"TestbenchWaveform.png\" />\n<figcaption aria-hidden=\"true\">TestbenchWaveform.png</figcaption>\n</figure>\n<h1 id=\"tooling\">Tooling</h1>\n<p>First, as learned in CPRE381, I enjoy having test-benches for my\ncode.</p>\n<p>Test-benches allow for faster debugging and more efficient\ndevelopment by allowing you to test your code without having to run it\non the FPGA board, directly seeing the signals, how they interact with\none another, and allows for testing to make sure that progress is being\nmade.</p>\n<p>I used a test-bench to test my processor and ensure that it was\nworking correctly.</p>\n<p>The following is the main test-bench that I used to test my\nprocessor, <code>mips_tb.v</code>.</p>\n<div class=\"sourceCode\" id=\"cb70\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb70-1\"><a href=\"#cb70-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ot\">`timescale 1ns / 1ps</span></span>\n<span id=\"cb70-2\"><a href=\"#cb70-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ot\">`define CYCLE_TIME 20</span></span>\n<span id=\"cb70-3\"><a href=\"#cb70-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> mips_tb<span class=\"op\">;</span></span>\n<span id=\"cb70-4\"><a href=\"#cb70-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">reg</span> clk<span class=\"op\">;</span></span>\n<span id=\"cb70-5\"><a href=\"#cb70-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">reg</span> rst<span class=\"op\">;</span></span>\n<span id=\"cb70-6\"><a href=\"#cb70-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">wire</span> <span class=\"op\">[</span><span class=\"dv\">6</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> seg_first<span class=\"op\">,</span> seg_second<span class=\"op\">,</span> seg_third<span class=\"op\">,</span> seg_fourth<span class=\"op\">,</span> seg_fifth<span class=\"op\">;</span></span>\n<span id=\"cb70-7\"><a href=\"#cb70-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">integer</span> i<span class=\"op\">;</span></span>\n<span id=\"cb70-8\"><a href=\"#cb70-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">always</span> #<span class=\"op\">(</span><span class=\"ot\">`CYCLE_TIME</span> <span class=\"op\">/</span> <span class=\"dv\">2</span><span class=\"op\">)</span> clk <span class=\"op\">=</span> <span class=\"op\">~</span>clk<span class=\"op\">;</span></span>\n<span id=\"cb70-9\"><a href=\"#cb70-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>  mips uut <span class=\"op\">(</span></span>\n<span id=\"cb70-10\"><a href=\"#cb70-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>      .i_Clk<span class=\"op\">(</span>clk<span class=\"op\">),</span></span>\n<span id=\"cb70-11\"><a href=\"#cb70-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>      .i_Rst<span class=\"op\">(</span>rst<span class=\"op\">),</span></span>\n<span id=\"cb70-12\"><a href=\"#cb70-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>      .o_Seg_first<span class=\"op\">(</span>seg_first<span class=\"op\">),</span></span>\n<span id=\"cb70-13\"><a href=\"#cb70-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>      .o_Seg_second<span class=\"op\">(</span>seg_second<span class=\"op\">),</span></span>\n<span id=\"cb70-14\"><a href=\"#cb70-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>      .o_Seg_third<span class=\"op\">(</span>seg_third<span class=\"op\">),</span></span>\n<span id=\"cb70-15\"><a href=\"#cb70-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>      .o_Seg_fourth<span class=\"op\">(</span>seg_fourth<span class=\"op\">),</span></span>\n<span id=\"cb70-16\"><a href=\"#cb70-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>      .o_Seg_fifth<span class=\"op\">(</span>seg_fifth<span class=\"op\">)</span></span>\n<span id=\"cb70-17\"><a href=\"#cb70-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">);</span></span>\n<span id=\"cb70-18\"><a href=\"#cb70-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">initial</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb70-19\"><a href=\"#cb70-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Initialize data memory</span></span>\n<span id=\"cb70-20\"><a href=\"#cb70-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">for</span> <span class=\"op\">(</span>i <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span> i <span class=\"op\">&lt;</span> <span class=\"dv\">32</span><span class=\"op\">;</span> i <span class=\"op\">=</span> i <span class=\"op\">+</span> <span class=\"dv\">1</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb70-21\"><a href=\"#cb70-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>      uut.inst_DataMemory.Dmem<span class=\"op\">[</span>i<span class=\"op\">]</span> <span class=\"op\">=</span> <span class=\"bn\">32&#39;b0</span><span class=\"op\">;</span></span>\n<span id=\"cb70-22\"><a href=\"#cb70-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb70-23\"><a href=\"#cb70-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Initialize Register File</span></span>\n<span id=\"cb70-24\"><a href=\"#cb70-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">for</span> <span class=\"op\">(</span>i <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span> i <span class=\"op\">&lt;</span> <span class=\"dv\">32</span><span class=\"op\">;</span> i <span class=\"op\">=</span> i <span class=\"op\">+</span> <span class=\"dv\">1</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb70-25\"><a href=\"#cb70-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>      uut.inst_RegisterFile.RegData<span class=\"op\">[</span>i<span class=\"op\">]</span> <span class=\"op\">=</span> <span class=\"bn\">32&#39;b0</span><span class=\"op\">;</span></span>\n<span id=\"cb70-26\"><a href=\"#cb70-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb70-27\"><a href=\"#cb70-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>    clk <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb70-28\"><a href=\"#cb70-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb70-29\"><a href=\"#cb70-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">initial</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb70-30\"><a href=\"#cb70-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bn\">#1800</span> <span class=\"dt\">$finish</span><span class=\"op\">;</span></span>\n<span id=\"cb70-31\"><a href=\"#cb70-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb70-32\"><a href=\"#cb70-32\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<p>I used do files to more easily compile and run my code.</p>\n<p>The following is the main <code>.do</code> file, <code>run.do</code>\nthat I used to compile and run my code.</p>\n<div class=\"sourceCode\" id=\"cb71\"><pre\nclass=\"sourceCode do\"><code class=\"sourceCode stata\"><span id=\"cb71-1\"><a href=\"#cb71-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">set</span> target <span class=\"st\">&quot;mips_tb&quot;</span></span>\n<span id=\"cb71-2\"><a href=\"#cb71-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">set</span> file <span class=\"st\">&quot;proj/${target}.v&quot;</span></span>\n<span id=\"cb71-3\"><a href=\"#cb71-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">if</span> { [file exists <span class=\"st\">&quot;work&quot;</span>] } {</span>\n<span id=\"cb71-4\"><a href=\"#cb71-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    vdel -<span class=\"ot\">all</span></span>\n<span id=\"cb71-5\"><a href=\"#cb71-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>}</span>\n<span id=\"cb71-6\"><a href=\"#cb71-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>vlog *.v</span>\n<span id=\"cb71-7\"><a href=\"#cb71-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>vsim -voptargs=+acc -debugDB <span class=\"ot\">$target</span></span>\n<span id=\"cb71-8\"><a href=\"#cb71-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">force</span> -freeze sim:/<span class=\"ot\">$target</span>/clk 1 0, 0 {5 ps} -<span class=\"fu\">r</span> 10</span>\n<span id=\"cb71-9\"><a href=\"#cb71-9\" aria-hidden=\"true\" tabindex=\"-1\"></a># <span class=\"kw\">force</span> -freeze sim:/<span class=\"ot\">$target</span>/rst 0 0, 1 {80 ps} -<span class=\"fu\">r</span> 100</span>\n<span id=\"cb71-10\"><a href=\"#cb71-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>add wave -<span class=\"bn\">position</span> insertpoint \\ ../<span class=\"ot\">$target</span><span class=\"co\">/*</span></span>\n<span id=\"cb71-11\"><a href=\"#cb71-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">run 1200</span></span></code></pre></div>\n<p>In addition to the tooling already mentioned, I used\nmodelsim/questasim to simulate my processor and test-bench.</p>\n<p>Furthermore, I used the Quartus Prime software to compile my code and\nprogram my FPGA board.</p>\n<p>Even further, I used tools like <a\nhref=\"https://git-scm.com/\">git</a>, <a\nhref=\"https://github.com\">GitHub</a>, and <a\nhref=\"https://www.markdownguide.org/\">markdown</a> to manage my code,\nversion control, and documentation.</p>\n<p>For editor tooling, I used <a href=\"https://neovim.io/\">NeoVim</a>\nwith a combination of popular language servers that are used for\nVerilogHDL.</p>\n<p>These language servers that I used for development include <a\nhref=\"https://github.com/chipsalliance/verible\">verible</a>, <a\nhref=\"https://tree-sitter.github.io/tree-sitter/\">Tree-Sitter</a>, <a\nhref=\"https://github.com/vivekmalneedi/veridian\">veridian</a>, and more\nto provide completion, syntax highlighting, code actions, linting, and\nmore.</p>\n<p>I think that using these language servers and tools in combination\nwith NeoVim (my personal open-sourced config has a startup time of\n&lt;80ms) allowed me to develop my processor more efficiently and\neffectively.</p>\n<h2 id=\"components-and-explanations\">Components and Explanations</h2>\n<p>The following section explains the components of the MIPS processor\nand their functionalities.</p>\n<p>This is done by providing the Verilog code for each component and\nexplaining its role in the processor.</p>\n<h4 id=\"alu-1\">ALU</h4>\n<p>The following is the code for the ALU module of the MIPS processor\ncalled <code>ALU.v</code>. (It can be found in the <code>./proj/</code>\ndirectory)</p>\n<div class=\"sourceCode\" id=\"cb72\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb72-1\"><a href=\"#cb72-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ot\">`timescale 1ns / 1ps</span></span>\n<span id=\"cb72-2\"><a href=\"#cb72-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> ALU <span class=\"op\">(</span></span>\n<span id=\"cb72-3\"><a href=\"#cb72-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span>      <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_data1<span class=\"op\">,</span>        <span class=\"co\">// data 1</span></span>\n<span id=\"cb72-4\"><a href=\"#cb72-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span>      <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_read2<span class=\"op\">,</span>        <span class=\"co\">// data 2 from MUX</span></span>\n<span id=\"cb72-5\"><a href=\"#cb72-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span>      <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_Instruction<span class=\"op\">,</span>  <span class=\"co\">// used for sign-extension</span></span>\n<span id=\"cb72-6\"><a href=\"#cb72-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span>             i_ALUSrc<span class=\"op\">,</span></span>\n<span id=\"cb72-7\"><a href=\"#cb72-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span>      <span class=\"op\">[</span> <span class=\"dv\">3</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_ALUcontrol<span class=\"op\">,</span></span>\n<span id=\"cb72-8\"><a href=\"#cb72-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span>        o_Zero<span class=\"op\">,</span></span>\n<span id=\"cb72-9\"><a href=\"#cb72-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_ALUresult</span>\n<span id=\"cb72-10\"><a href=\"#cb72-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb72-11\"><a href=\"#cb72-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> data2<span class=\"op\">;</span></span>\n<span id=\"cb72-12\"><a href=\"#cb72-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">always</span> <span class=\"op\">@(</span>i_ALUSrc<span class=\"op\">,</span> i_read2<span class=\"op\">,</span> i_Instruction<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb72-13\"><a href=\"#cb72-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">if</span> <span class=\"op\">(</span>i_ALUSrc <span class=\"op\">==</span> <span class=\"dv\">0</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb72-14\"><a href=\"#cb72-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>      data2 <span class=\"op\">=</span> i_read2<span class=\"op\">;</span></span>\n<span id=\"cb72-15\"><a href=\"#cb72-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span> <span class=\"kw\">else</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb72-16\"><a href=\"#cb72-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">if</span> <span class=\"op\">(</span>i_Instruction<span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">]</span> <span class=\"op\">==</span> <span class=\"bn\">1&#39;b0</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb72-17\"><a href=\"#cb72-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>        data2 <span class=\"op\">=</span> <span class=\"op\">{</span><span class=\"bn\">16&#39;b0</span><span class=\"op\">,</span> i_Instruction<span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]};</span></span>\n<span id=\"cb72-18\"><a href=\"#cb72-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span> <span class=\"kw\">else</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb72-19\"><a href=\"#cb72-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>        data2 <span class=\"op\">=</span> <span class=\"op\">{{</span><span class=\"dv\">16</span><span class=\"op\">{</span><span class=\"bn\">1&#39;b1</span><span class=\"op\">}},</span> i_Instruction<span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]};</span></span>\n<span id=\"cb72-20\"><a href=\"#cb72-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span></span>\n<span id=\"cb72-21\"><a href=\"#cb72-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb72-22\"><a href=\"#cb72-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb72-23\"><a href=\"#cb72-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">always</span> <span class=\"op\">@(</span>i_data1<span class=\"op\">,</span> data2<span class=\"op\">,</span> i_ALUcontrol<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb72-24\"><a href=\"#cb72-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">case</span> <span class=\"op\">(</span>i_ALUcontrol<span class=\"op\">)</span></span>\n<span id=\"cb72-25\"><a href=\"#cb72-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">4&#39;b0000</span><span class=\"op\">:</span>  <span class=\"co\">// AND</span></span>\n<span id=\"cb72-26\"><a href=\"#cb72-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_ALUresult <span class=\"op\">=</span> i_data1 <span class=\"op\">&amp;</span> data2<span class=\"op\">;</span> <span class=\"co\">// bitwise AND</span></span>\n<span id=\"cb72-27\"><a href=\"#cb72-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">4&#39;b0001</span><span class=\"op\">:</span>  <span class=\"co\">// OR</span></span>\n<span id=\"cb72-28\"><a href=\"#cb72-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_ALUresult <span class=\"op\">=</span> i_data1 <span class=\"op\">|</span> data2<span class=\"op\">;</span> <span class=\"co\">// bitwise OR</span></span>\n<span id=\"cb72-29\"><a href=\"#cb72-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">4&#39;b0010</span><span class=\"op\">:</span>  <span class=\"co\">// ADD</span></span>\n<span id=\"cb72-30\"><a href=\"#cb72-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_ALUresult <span class=\"op\">=</span> i_data1 <span class=\"op\">+</span> data2<span class=\"op\">;</span> <span class=\"co\">// addition</span></span>\n<span id=\"cb72-31\"><a href=\"#cb72-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">4&#39;b0110</span><span class=\"op\">:</span>  <span class=\"co\">// SUB</span></span>\n<span id=\"cb72-32\"><a href=\"#cb72-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_ALUresult <span class=\"op\">=</span> i_data1 <span class=\"op\">-</span> data2<span class=\"op\">;</span> <span class=\"co\">// subtraction</span></span>\n<span id=\"cb72-33\"><a href=\"#cb72-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">4&#39;b0111</span><span class=\"op\">:</span>  <span class=\"co\">// SLT</span></span>\n<span id=\"cb72-34\"><a href=\"#cb72-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_ALUresult <span class=\"op\">=</span> <span class=\"op\">(</span>i_data1 <span class=\"op\">&lt;</span> data2<span class=\"op\">)</span> <span class=\"op\">?</span> <span class=\"dv\">1</span> <span class=\"op\">:</span> <span class=\"dv\">0</span><span class=\"op\">;</span> <span class=\"co\">// set-on-less-than</span></span>\n<span id=\"cb72-35\"><a href=\"#cb72-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">4&#39;b1100</span><span class=\"op\">:</span>  <span class=\"co\">// NOR</span></span>\n<span id=\"cb72-36\"><a href=\"#cb72-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_ALUresult <span class=\"op\">=</span> i_data1 <span class=\"op\">|</span> <span class=\"op\">~</span>data2<span class=\"op\">;</span> <span class=\"co\">// bitwise NOR</span></span>\n<span id=\"cb72-37\"><a href=\"#cb72-37\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">default</span><span class=\"op\">:</span> <span class=\"op\">;</span></span>\n<span id=\"cb72-38\"><a href=\"#cb72-38\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">endcase</span></span>\n<span id=\"cb72-39\"><a href=\"#cb72-39\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">if</span> <span class=\"op\">(</span>o_ALUresult <span class=\"op\">==</span> <span class=\"dv\">0</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb72-40\"><a href=\"#cb72-40\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_Zero <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb72-41\"><a href=\"#cb72-41\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span> <span class=\"kw\">else</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb72-42\"><a href=\"#cb72-42\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_Zero <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb72-43\"><a href=\"#cb72-43\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb72-44\"><a href=\"#cb72-44\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb72-45\"><a href=\"#cb72-45\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<p>The above code represents the ALU (Arithmetic Logic Unit) module of\nthe single-cycle MIPS processor.</p>\n<p>The ALU is responsible for performing arithmetic and logical\noperations on the input data based on the ALU control signal.</p>\n<p>Inputs: - <code>i_data1</code> (32-bit): The first input data for the\nALU operation. - <code>i_read2</code> (32-bit): The second input data\nfrom the MUX. - <code>i_Instruction</code> (32-bit): The instruction\nused for sign-extension. - <code>i_ALUSrc</code> (1-bit): A control\nsignal indicating whether to use the second input data from the MUX or\nthe sign-extended immediate value. - <code>i_ALUcontrol</code> (4-bit):\nThe ALU control signal that determines the specific operation to be\nperformed.</p>\n<p>Outputs: - <code>o_Zero</code> (1-bit): A flag indicating whether the\nALU result is zero. - <code>o_ALUresult</code> (32-bit): The result of\nthe ALU operation.</p>\n<p>Functionality: 1. Data Selection: - The module first determines the\nsecond input data for the ALU operation based on the\n<code>i_ALUSrc</code> control signal. - If <code>i_ALUSrc</code> is 0,\nthe second input data is taken directly from <code>i_read2</code>. - If\n<code>i_ALUSrc</code> is 1, the second input data is obtained by\nsign-extending the 16-bit immediate value from the\n<code>i_Instruction</code>.</p>\n<ol start=\"2\" type=\"1\">\n<li>ALU Operation:\n<ul>\n<li>Based on the <code>i_ALUcontrol</code> signal, the module performs\nthe corresponding ALU operation on <code>i_data1</code> and the selected\nsecond input data (<code>data2</code>).</li>\n<li>The supported ALU operations include AND, OR, ADD, SUB (subtract),\nSLT (set-on-less-than), and NOR.</li>\n<li>The result of the ALU operation is stored in\n<code>o_ALUresult</code>.</li>\n</ul></li>\n<li>Zero Flag:\n<ul>\n<li>After performing the ALU operation, the module checks if the result\nis zero.</li>\n<li>If the result is zero, the <code>o_Zero</code> flag is set to 1;\notherwise, it is set to 0.</li>\n</ul></li>\n</ol>\n<p>Significance in the MIPS Processor: - The ALU is a crucial component\nin the MIPS processor’s data-path. - It performs arithmetic and logical\noperations on the input data based on the instructions being executed. -\nThe ALU receives input data from the register file or the immediate\nvalue in the instruction, depending on the <code>i_ALUSrc</code> control\nsignal. - The ALU control signal (<code>i_ALUcontrol</code>) determines\nthe specific operation to be performed, which is decoded by the ALU\ncontrol module based on the instruction opcode and function code. - The\nresult of the ALU operation is used for various purposes, such as\nstoring it back to the register file, using it as a memory address, or\nmaking branching decisions based on the zero flag.</p>\n<p>Interaction with Other Components: - The ALU receives input data from\nthe register file (<code>i_data1</code> and <code>i_read2</code>) and\nthe instruction (<code>i_Instruction</code>). - The ALU control module\ngenerates the <code>i_ALUcontrol</code> signal based on the instruction\nopcode and function code, which determines the ALU operation to be\nperformed. - The ALU result (<code>o_ALUresult</code>) is used by other\ncomponents, such as the data memory for memory operations or the\nregister file for storing the result. - The zero flag\n(<code>o_Zero</code>) is used by the control unit to make branching\ndecisions based on the comparison result.</p>\n<p>Overall, the ALU module performs the necessary arithmetic and logical\noperations in the MIPS processor based on the instruction being\nexecuted.</p>\n<p>The ALU allows the processor to execute instructions and produce the\ndesired results.</p>\n<h4 id=\"control-unit\">Control Unit</h4>\n<p>The following is the code for the control unit of the MIPS processor\ncalled <code>ControlUnit.v</code>. (It can be found in the\n<code>./proj/</code> directory)</p>\n<p>As named, the <code>ControlUnit</code>, <code>ControlUnit.v</code> is\nresponsible for decoding the instruction and generating the control\nsignals for the various components of the processor.</p>\n<div class=\"sourceCode\" id=\"cb73\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb73-1\"><a href=\"#cb73-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ot\">`timescale 1ns / 1ps</span></span>\n<span id=\"cb73-2\"><a href=\"#cb73-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> ControlUnit <span class=\"op\">(</span></span>\n<span id=\"cb73-3\"><a href=\"#cb73-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_instruction<span class=\"op\">,</span></span>\n<span id=\"cb73-4\"><a href=\"#cb73-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> o_RegDst<span class=\"op\">,</span></span>\n<span id=\"cb73-5\"><a href=\"#cb73-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> o_Jump<span class=\"op\">,</span></span>\n<span id=\"cb73-6\"><a href=\"#cb73-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> o_Branch<span class=\"op\">,</span></span>\n<span id=\"cb73-7\"><a href=\"#cb73-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> o_Bne<span class=\"op\">,</span></span>\n<span id=\"cb73-8\"><a href=\"#cb73-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> o_MemRead<span class=\"op\">,</span></span>\n<span id=\"cb73-9\"><a href=\"#cb73-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> o_MemtoReg<span class=\"op\">,</span></span>\n<span id=\"cb73-10\"><a href=\"#cb73-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">1</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_ALUOp<span class=\"op\">,</span></span>\n<span id=\"cb73-11\"><a href=\"#cb73-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> o_MemWrite<span class=\"op\">,</span></span>\n<span id=\"cb73-12\"><a href=\"#cb73-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> o_ALUSrc<span class=\"op\">,</span></span>\n<span id=\"cb73-13\"><a href=\"#cb73-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> o_RegWrite<span class=\"op\">,</span></span>\n<span id=\"cb73-14\"><a href=\"#cb73-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">6</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_seg_first<span class=\"op\">,</span></span>\n<span id=\"cb73-15\"><a href=\"#cb73-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">6</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_seg_second<span class=\"op\">,</span></span>\n<span id=\"cb73-16\"><a href=\"#cb73-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">6</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_seg_third<span class=\"op\">,</span></span>\n<span id=\"cb73-17\"><a href=\"#cb73-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">6</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_seg_fourth<span class=\"op\">,</span></span>\n<span id=\"cb73-18\"><a href=\"#cb73-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">6</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_seg_fifth</span>\n<span id=\"cb73-19\"><a href=\"#cb73-19\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb73-20\"><a href=\"#cb73-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">initial</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb73-21\"><a href=\"#cb73-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_RegDst <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-22\"><a href=\"#cb73-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_Jump <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-23\"><a href=\"#cb73-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_Branch <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-24\"><a href=\"#cb73-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_MemRead <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-25\"><a href=\"#cb73-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-26\"><a href=\"#cb73-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b00</span><span class=\"op\">;</span></span>\n<span id=\"cb73-27\"><a href=\"#cb73-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-28\"><a href=\"#cb73-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-29\"><a href=\"#cb73-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-30\"><a href=\"#cb73-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_seg_first <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-31\"><a href=\"#cb73-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_seg_second <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-32\"><a href=\"#cb73-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_seg_third <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-33\"><a href=\"#cb73-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_seg_fourth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-34\"><a href=\"#cb73-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_seg_fifth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-35\"><a href=\"#cb73-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb73-36\"><a href=\"#cb73-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">always</span> <span class=\"op\">@(</span>i_instruction<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb73-37\"><a href=\"#cb73-37\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">case</span> <span class=\"op\">(</span>i_instruction<span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">26</span><span class=\"op\">])</span></span>\n<span id=\"cb73-38\"><a href=\"#cb73-38\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">6&#39;b000000</span><span class=\"op\">:</span> <span class=\"kw\">begin</span>  <span class=\"co\">// ARITHMETIC</span></span>\n<span id=\"cb73-39\"><a href=\"#cb73-39\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegDst <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb73-40\"><a href=\"#cb73-40\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-41\"><a href=\"#cb73-41\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-42\"><a href=\"#cb73-42\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb73-43\"><a href=\"#cb73-43\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemRead <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-44\"><a href=\"#cb73-44\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-45\"><a href=\"#cb73-45\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Branch <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-46\"><a href=\"#cb73-46\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Bne <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-47\"><a href=\"#cb73-47\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b10</span><span class=\"op\">;</span></span>\n<span id=\"cb73-48\"><a href=\"#cb73-48\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Jump <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-49\"><a href=\"#cb73-49\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_first <span class=\"op\">=</span>  <span class=\"bn\">7&#39;b0001000</span><span class=\"op\">;</span>  <span class=\"co\">// A</span></span>\n<span id=\"cb73-50\"><a href=\"#cb73-50\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_second <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111010</span><span class=\"op\">;</span>  <span class=\"co\">// R</span></span>\n<span id=\"cb73-51\"><a href=\"#cb73-51\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_third <span class=\"op\">=</span>  <span class=\"bn\">7&#39;b1111001</span><span class=\"op\">;</span>  <span class=\"co\">// I</span></span>\n<span id=\"cb73-52\"><a href=\"#cb73-52\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fourth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b0001111</span><span class=\"op\">;</span>  <span class=\"co\">// T</span></span>\n<span id=\"cb73-53\"><a href=\"#cb73-53\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fifth <span class=\"op\">=</span>  <span class=\"bn\">7&#39;b0001001</span><span class=\"op\">;</span>  <span class=\"co\">// H</span></span>\n<span id=\"cb73-54\"><a href=\"#cb73-54\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span></span>\n<span id=\"cb73-55\"><a href=\"#cb73-55\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">6&#39;b001000</span><span class=\"op\">:</span> <span class=\"kw\">begin</span>  <span class=\"co\">// addi</span></span>\n<span id=\"cb73-56\"><a href=\"#cb73-56\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegDst <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-57\"><a href=\"#cb73-57\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb73-58\"><a href=\"#cb73-58\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-59\"><a href=\"#cb73-59\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb73-60\"><a href=\"#cb73-60\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemRead <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-61\"><a href=\"#cb73-61\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-62\"><a href=\"#cb73-62\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Branch <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-63\"><a href=\"#cb73-63\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Bne <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-64\"><a href=\"#cb73-64\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b00</span><span class=\"op\">;</span></span>\n<span id=\"cb73-65\"><a href=\"#cb73-65\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Jump <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-66\"><a href=\"#cb73-66\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_first <span class=\"op\">=</span> <span class=\"bn\">7&#39;b0001000</span><span class=\"op\">;</span>  <span class=\"co\">// A</span></span>\n<span id=\"cb73-67\"><a href=\"#cb73-67\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_second <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1000010</span><span class=\"op\">;</span>  <span class=\"co\">// d</span></span>\n<span id=\"cb73-68\"><a href=\"#cb73-68\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_third <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1000010</span><span class=\"op\">;</span>  <span class=\"co\">// d</span></span>\n<span id=\"cb73-69\"><a href=\"#cb73-69\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fourth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1001111</span><span class=\"op\">;</span>  <span class=\"co\">// i</span></span>\n<span id=\"cb73-70\"><a href=\"#cb73-70\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fifth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-71\"><a href=\"#cb73-71\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span></span>\n<span id=\"cb73-72\"><a href=\"#cb73-72\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">6&#39;b001100</span><span class=\"op\">:</span> <span class=\"kw\">begin</span>  <span class=\"co\">// andi</span></span>\n<span id=\"cb73-73\"><a href=\"#cb73-73\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegDst <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-74\"><a href=\"#cb73-74\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb73-75\"><a href=\"#cb73-75\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-76\"><a href=\"#cb73-76\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb73-77\"><a href=\"#cb73-77\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemRead <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-78\"><a href=\"#cb73-78\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-79\"><a href=\"#cb73-79\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Branch <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-80\"><a href=\"#cb73-80\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Bne <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-81\"><a href=\"#cb73-81\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b11</span><span class=\"op\">;</span></span>\n<span id=\"cb73-82\"><a href=\"#cb73-82\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Jump <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-83\"><a href=\"#cb73-83\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_first <span class=\"op\">=</span> <span class=\"bn\">7&#39;b0001000</span><span class=\"op\">;</span>  <span class=\"co\">// A</span></span>\n<span id=\"cb73-84\"><a href=\"#cb73-84\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_second <span class=\"op\">=</span> <span class=\"bn\">7&#39;b0101011</span><span class=\"op\">;</span>  <span class=\"co\">// n</span></span>\n<span id=\"cb73-85\"><a href=\"#cb73-85\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_third <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1000010</span><span class=\"op\">;</span>  <span class=\"co\">// d</span></span>\n<span id=\"cb73-86\"><a href=\"#cb73-86\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fourth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1001111</span><span class=\"op\">;</span>  <span class=\"co\">// i</span></span>\n<span id=\"cb73-87\"><a href=\"#cb73-87\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fifth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-88\"><a href=\"#cb73-88\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span></span>\n<span id=\"cb73-89\"><a href=\"#cb73-89\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">6&#39;b100011</span><span class=\"op\">:</span> <span class=\"kw\">begin</span>  <span class=\"co\">// lw</span></span>\n<span id=\"cb73-90\"><a href=\"#cb73-90\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegDst <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-91\"><a href=\"#cb73-91\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb73-92\"><a href=\"#cb73-92\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb73-93\"><a href=\"#cb73-93\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb73-94\"><a href=\"#cb73-94\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemRead <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb73-95\"><a href=\"#cb73-95\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-96\"><a href=\"#cb73-96\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Branch <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-97\"><a href=\"#cb73-97\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Bne <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-98\"><a href=\"#cb73-98\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b00</span><span class=\"op\">;</span></span>\n<span id=\"cb73-99\"><a href=\"#cb73-99\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Jump <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-100\"><a href=\"#cb73-100\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_first <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1000111</span><span class=\"op\">;</span>  <span class=\"co\">// L</span></span>\n<span id=\"cb73-101\"><a href=\"#cb73-101\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_second <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1001001</span><span class=\"op\">;</span>  <span class=\"co\">// w</span></span>\n<span id=\"cb73-102\"><a href=\"#cb73-102\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_third <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-103\"><a href=\"#cb73-103\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fourth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-104\"><a href=\"#cb73-104\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fifth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-105\"><a href=\"#cb73-105\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span></span>\n<span id=\"cb73-106\"><a href=\"#cb73-106\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">6&#39;b101011</span><span class=\"op\">:</span> <span class=\"kw\">begin</span>  <span class=\"co\">// sw</span></span>\n<span id=\"cb73-107\"><a href=\"#cb73-107\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegDst <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>  <span class=\"co\">// X</span></span>\n<span id=\"cb73-108\"><a href=\"#cb73-108\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb73-109\"><a href=\"#cb73-109\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>  <span class=\"co\">// X</span></span>\n<span id=\"cb73-110\"><a href=\"#cb73-110\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-111\"><a href=\"#cb73-111\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemRead <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-112\"><a href=\"#cb73-112\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb73-113\"><a href=\"#cb73-113\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Branch <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-114\"><a href=\"#cb73-114\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Bne <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-115\"><a href=\"#cb73-115\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b00</span><span class=\"op\">;</span></span>\n<span id=\"cb73-116\"><a href=\"#cb73-116\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Jump <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-117\"><a href=\"#cb73-117\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_first <span class=\"op\">=</span> <span class=\"bn\">7&#39;b0010010</span><span class=\"op\">;</span>  <span class=\"co\">// S</span></span>\n<span id=\"cb73-118\"><a href=\"#cb73-118\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_second <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1001001</span><span class=\"op\">;</span>  <span class=\"co\">// w</span></span>\n<span id=\"cb73-119\"><a href=\"#cb73-119\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_third <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-120\"><a href=\"#cb73-120\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fourth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-121\"><a href=\"#cb73-121\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fifth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-122\"><a href=\"#cb73-122\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span></span>\n<span id=\"cb73-123\"><a href=\"#cb73-123\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">6&#39;b000100</span><span class=\"op\">:</span> <span class=\"kw\">begin</span>  <span class=\"co\">// beq</span></span>\n<span id=\"cb73-124\"><a href=\"#cb73-124\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegDst <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>  <span class=\"co\">// X</span></span>\n<span id=\"cb73-125\"><a href=\"#cb73-125\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-126\"><a href=\"#cb73-126\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>  <span class=\"co\">// X</span></span>\n<span id=\"cb73-127\"><a href=\"#cb73-127\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-128\"><a href=\"#cb73-128\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemRead <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-129\"><a href=\"#cb73-129\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-130\"><a href=\"#cb73-130\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Branch <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb73-131\"><a href=\"#cb73-131\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Bne <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-132\"><a href=\"#cb73-132\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b01</span><span class=\"op\">;</span></span>\n<span id=\"cb73-133\"><a href=\"#cb73-133\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Jump <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-134\"><a href=\"#cb73-134\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_first <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1100000</span><span class=\"op\">;</span>  <span class=\"co\">// b</span></span>\n<span id=\"cb73-135\"><a href=\"#cb73-135\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_second <span class=\"op\">=</span> <span class=\"bn\">7&#39;b0110000</span><span class=\"op\">;</span>  <span class=\"co\">// e</span></span>\n<span id=\"cb73-136\"><a href=\"#cb73-136\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_third <span class=\"op\">=</span> <span class=\"bn\">7&#39;b0001100</span><span class=\"op\">;</span>  <span class=\"co\">// q</span></span>\n<span id=\"cb73-137\"><a href=\"#cb73-137\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fourth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-138\"><a href=\"#cb73-138\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fifth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-139\"><a href=\"#cb73-139\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span></span>\n<span id=\"cb73-140\"><a href=\"#cb73-140\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">6&#39;b000101</span><span class=\"op\">:</span> <span class=\"kw\">begin</span>  <span class=\"co\">// bne</span></span>\n<span id=\"cb73-141\"><a href=\"#cb73-141\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegDst <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>  <span class=\"co\">// X</span></span>\n<span id=\"cb73-142\"><a href=\"#cb73-142\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-143\"><a href=\"#cb73-143\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>  <span class=\"co\">// X</span></span>\n<span id=\"cb73-144\"><a href=\"#cb73-144\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-145\"><a href=\"#cb73-145\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemRead <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-146\"><a href=\"#cb73-146\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-147\"><a href=\"#cb73-147\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Branch <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb73-148\"><a href=\"#cb73-148\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Bne <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb73-149\"><a href=\"#cb73-149\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b01</span><span class=\"op\">;</span></span>\n<span id=\"cb73-150\"><a href=\"#cb73-150\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Jump <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-151\"><a href=\"#cb73-151\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_first <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1100000</span><span class=\"op\">;</span>  <span class=\"co\">// b</span></span>\n<span id=\"cb73-152\"><a href=\"#cb73-152\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_second <span class=\"op\">=</span> <span class=\"bn\">7&#39;b0101011</span><span class=\"op\">;</span>  <span class=\"co\">// n</span></span>\n<span id=\"cb73-153\"><a href=\"#cb73-153\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_third <span class=\"op\">=</span> <span class=\"bn\">7&#39;b0110000</span><span class=\"op\">;</span>  <span class=\"co\">// e</span></span>\n<span id=\"cb73-154\"><a href=\"#cb73-154\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fourth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-155\"><a href=\"#cb73-155\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fifth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-156\"><a href=\"#cb73-156\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span></span>\n<span id=\"cb73-157\"><a href=\"#cb73-157\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">6&#39;b000010</span><span class=\"op\">:</span> <span class=\"kw\">begin</span>  <span class=\"co\">// j</span></span>\n<span id=\"cb73-158\"><a href=\"#cb73-158\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegDst <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>  <span class=\"co\">// X</span></span>\n<span id=\"cb73-159\"><a href=\"#cb73-159\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-160\"><a href=\"#cb73-160\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>  <span class=\"co\">// X</span></span>\n<span id=\"cb73-161\"><a href=\"#cb73-161\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-162\"><a href=\"#cb73-162\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemRead <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-163\"><a href=\"#cb73-163\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-164\"><a href=\"#cb73-164\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Branch <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-165\"><a href=\"#cb73-165\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Bne <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-166\"><a href=\"#cb73-166\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b01</span><span class=\"op\">;</span></span>\n<span id=\"cb73-167\"><a href=\"#cb73-167\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Jump <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb73-168\"><a href=\"#cb73-168\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_first <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1100001</span><span class=\"op\">;</span>  <span class=\"co\">// J</span></span>\n<span id=\"cb73-169\"><a href=\"#cb73-169\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_second <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-170\"><a href=\"#cb73-170\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_third <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-171\"><a href=\"#cb73-171\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fourth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-172\"><a href=\"#cb73-172\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fifth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-173\"><a href=\"#cb73-173\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span></span>\n<span id=\"cb73-174\"><a href=\"#cb73-174\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">default</span><span class=\"op\">:</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb73-175\"><a href=\"#cb73-175\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegDst <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>  <span class=\"co\">// X</span></span>\n<span id=\"cb73-176\"><a href=\"#cb73-176\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-177\"><a href=\"#cb73-177\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>  <span class=\"co\">// X</span></span>\n<span id=\"cb73-178\"><a href=\"#cb73-178\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-179\"><a href=\"#cb73-179\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemRead <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-180\"><a href=\"#cb73-180\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-181\"><a href=\"#cb73-181\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Branch <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-182\"><a href=\"#cb73-182\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Bne <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-183\"><a href=\"#cb73-183\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b00</span><span class=\"op\">;</span></span>\n<span id=\"cb73-184\"><a href=\"#cb73-184\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Jump <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb73-185\"><a href=\"#cb73-185\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_first <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-186\"><a href=\"#cb73-186\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_second <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-187\"><a href=\"#cb73-187\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_third <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-188\"><a href=\"#cb73-188\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fourth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-189\"><a href=\"#cb73-189\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fifth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb73-190\"><a href=\"#cb73-190\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span></span>\n<span id=\"cb73-191\"><a href=\"#cb73-191\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">endcase</span></span>\n<span id=\"cb73-192\"><a href=\"#cb73-192\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb73-193\"><a href=\"#cb73-193\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<p>The above Verilog code represents the Control Unit component of the\nsingle-cycle MIPS processor.</p>\n<p>The Control Unit is responsible for generating control signals based\non the input instruction, which determine the behavior of various\ncomponents within the processor.</p>\n<h5 id=\"io\">IO</h5>\n<p>The Control Unit, <code>ControlUnit.v</code>, has the following\ninputs and outputs:</p>\n<p>Inputs: - <code>i_instruction</code>: The 32-bit instruction fetched\nfrom the Instruction Memory.</p>\n<p>Outputs: - Various control signals: - <code>o_RegDst</code>: Selects\nthe destination register for the instruction (0 for rt, 1 for rd). -\n<code>o_Jump</code>: Indicates if the instruction is a jump instruction.\n- <code>o_Branch</code>: Indicates if the instruction is a branch\ninstruction. - <code>o_Bne</code>: Indicates if the instruction is a\n“branch not equal” instruction. - <code>o_MemRead</code>: Enables\nreading from the Data Memory. - <code>o_MemtoReg</code>: Selects the\nsource of data to be written to the register (0 for ALU result, 1 for\nmemory data). - <code>o_ALUOp</code>: A 2-bit signal that specifies the\nALU operation. - <code>o_MemWrite</code>: Enables writing to the Data\nMemory. - <code>o_ALUSrc</code>: Selects the second source for the ALU\n(0 for register, 1 for immediate). - <code>o_RegWrite</code>: Enables\nwriting to the Register File. - 7-segment display outputs: -\n<code>o_seg_first</code> to <code>o_seg_fifth</code>: Control signals\nfor displaying the instruction type on 7-segment displays.</p>\n<h5 id=\"processor-context\">Processor Context:</h5>\n<p>The following is the context (the purpose and functionality) of the\nControl Unit in the single-cycle MIPS processor:</p>\n<ol type=\"1\">\n<li><p>The Control Unit initializes all control signals to default\nvalues in the <code>initial</code> block.</p></li>\n<li><p>The <code>always</code> block is triggered whenever the\n<code>i_instruction</code> changes. It uses a case statement to\ndetermine the type of instruction based on the opcode (bits 31 to 26 of\nthe instruction).</p></li>\n<li><p>Depending on the instruction type, the Control Unit sets the\nappropriate control signals:</p>\n<ul>\n<li>For R-type instructions (arithmetic), it sets <code>RegDst</code> to\n1, enables <code>RegWrite</code>, sets <code>ALUOp</code> to 2’b10, and\ndisplays “ARITH” on the 7-segment displays.</li>\n<li>For I-type instructions (addi, andi, lw, sw), it sets\n<code>ALUSrc</code> to 1, enables <code>RegWrite</code> (except for sw),\nsets <code>ALUOp</code> based on the instruction, and displays the\ninstruction type on the 7-segment displays.</li>\n<li>For branch instructions (beq, bne), it sets <code>Branch</code> to\n1, sets <code>ALUOp</code> to 2’b01, and displays the instruction type\non the 7-segment displays.</li>\n<li>For the jump instruction, it sets <code>Jump</code> to 1, sets\n<code>ALUOp</code> to 2’b01, and displays “J” on the 7-segment\ndisplays.</li>\n</ul></li>\n<li><p>If the instruction does not match any of the defined cases, the\nControl Unit sets all control signals to their default values and\ndisplays blank on the 7-segment displays.</p></li>\n</ol>\n<p>The Control Unit is critial to correctly orchestrating the operation\nof the single-cycle MIPS processor.</p>\n<p>It interprets the instruction and generates the necessary control\nsignals to control the data-path components, such as the ALU, Register\nFile, and Data Memory.</p>\n<p>The control signals determine the flow of data and the operations\nperformed in each stage of the processor pipeline.</p>\n<ul>\n<li>The Control Unit receives the instruction from the Instruction\nMemory.</li>\n<li>It sends control signals to various components, such as the ALU,\nRegister File, and Data Memory, to control their behavior based on the\ninstruction being executed.</li>\n<li>The control signals generated by the Control Unit are used by the\ndata-path components to perform the required operations and route the\ndata accordingly.</li>\n</ul>\n<h4 id=\"data-memory-1\">Data Memory</h4>\n<p>The following is the code for the Data Memory module in the MIPS\nprocessor called <code>DataMemory.v</code>. (It can be found in the\n<code>./proj/</code> directory)</p>\n<div class=\"sourceCode\" id=\"cb74\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb74-1\"><a href=\"#cb74-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ot\">`timescale 1ns / 1ps</span></span>\n<span id=\"cb74-2\"><a href=\"#cb74-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> DataMemory <span class=\"op\">(</span></span>\n<span id=\"cb74-3\"><a href=\"#cb74-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> i_clk<span class=\"op\">,</span></span>\n<span id=\"cb74-4\"><a href=\"#cb74-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_addr<span class=\"op\">,</span></span>\n<span id=\"cb74-5\"><a href=\"#cb74-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_wData<span class=\"op\">,</span></span>\n<span id=\"cb74-6\"><a href=\"#cb74-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_ALUresult<span class=\"op\">,</span></span>\n<span id=\"cb74-7\"><a href=\"#cb74-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> i_MemWrite<span class=\"op\">,</span></span>\n<span id=\"cb74-8\"><a href=\"#cb74-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> i_MemRead<span class=\"op\">,</span></span>\n<span id=\"cb74-9\"><a href=\"#cb74-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> i_MemtoReg<span class=\"op\">,</span></span>\n<span id=\"cb74-10\"><a href=\"#cb74-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_rData</span>\n<span id=\"cb74-11\"><a href=\"#cb74-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb74-12\"><a href=\"#cb74-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">parameter</span> SIZE_DM <span class=\"op\">=</span> <span class=\"dv\">128</span><span class=\"op\">;</span>       <span class=\"co\">// size of this memory, by default 128*32</span></span>\n<span id=\"cb74-13\"><a href=\"#cb74-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> Dmem<span class=\"op\">[</span>SIZE_DM<span class=\"dv\">-1</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">];</span>  <span class=\"co\">// instruction memory</span></span>\n<span id=\"cb74-14\"><a href=\"#cb74-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">integer</span> i<span class=\"op\">;</span></span>\n<span id=\"cb74-15\"><a href=\"#cb74-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">initial</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb74-16\"><a href=\"#cb74-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">for</span> <span class=\"op\">(</span>i <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span> i <span class=\"op\">&lt;</span> SIZE_DM<span class=\"op\">;</span> i <span class=\"op\">=</span> i <span class=\"op\">+</span> <span class=\"dv\">1</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb74-17\"><a href=\"#cb74-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>      Dmem<span class=\"op\">[</span>i<span class=\"op\">]</span> <span class=\"op\">=</span> <span class=\"bn\">32&#39;b0</span><span class=\"op\">;</span></span>\n<span id=\"cb74-18\"><a href=\"#cb74-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb74-19\"><a href=\"#cb74-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb74-20\"><a href=\"#cb74-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">always</span> <span class=\"op\">@(</span>i_addr <span class=\"dt\">or</span> i_MemRead <span class=\"dt\">or</span> i_MemtoReg <span class=\"dt\">or</span> i_ALUresult<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb74-21\"><a href=\"#cb74-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">if</span> <span class=\"op\">(</span>i_MemRead <span class=\"op\">==</span> <span class=\"dv\">1</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb74-22\"><a href=\"#cb74-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">if</span> <span class=\"op\">(</span>i_MemtoReg <span class=\"op\">==</span> <span class=\"dv\">1</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb74-23\"><a href=\"#cb74-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_rData <span class=\"op\">=</span> Dmem<span class=\"op\">[</span>i_addr<span class=\"op\">];</span></span>\n<span id=\"cb74-24\"><a href=\"#cb74-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span> <span class=\"kw\">else</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb74-25\"><a href=\"#cb74-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_rData <span class=\"op\">=</span> i_ALUresult<span class=\"op\">;</span></span>\n<span id=\"cb74-26\"><a href=\"#cb74-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span></span>\n<span id=\"cb74-27\"><a href=\"#cb74-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span> <span class=\"kw\">else</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb74-28\"><a href=\"#cb74-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_rData <span class=\"op\">=</span> i_ALUresult<span class=\"op\">;</span></span>\n<span id=\"cb74-29\"><a href=\"#cb74-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb74-30\"><a href=\"#cb74-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb74-31\"><a href=\"#cb74-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">always</span> <span class=\"op\">@(</span><span class=\"kw\">posedge</span> i_clk<span class=\"op\">)</span> <span class=\"kw\">begin</span>  <span class=\"co\">// MemWrite, wData, addr</span></span>\n<span id=\"cb74-32\"><a href=\"#cb74-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">if</span> <span class=\"op\">(</span>i_MemWrite <span class=\"op\">==</span> <span class=\"dv\">1</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb74-33\"><a href=\"#cb74-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>      Dmem<span class=\"op\">[</span>i_addr<span class=\"op\">]</span> <span class=\"op\">=</span> i_wData<span class=\"op\">;</span></span>\n<span id=\"cb74-34\"><a href=\"#cb74-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb74-35\"><a href=\"#cb74-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb74-36\"><a href=\"#cb74-36\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<p>The provided code snippet is the implementation of the Data Memory\nmodule (<code>DataMemory.v</code>) in the single-cycle MIPS\nprocessor.</p>\n<p>The Data Memory module serves as the main memory for storing and\nretrieving data in the processor.</p>\n<h5 id=\"io-1\">IO</h5>\n<p>The following are the detailed input and output ports of the Data\nMemory module, <code>DataMemory.v</code>: - <code>i_clk</code>: Input\nclock signal. - <code>i_addr</code>: Input address for reading or\nwriting data. - <code>i_wData</code>: Input write data to be stored in\nmemory. - <code>i_ALUresult</code>: Input ALU result, which can be used\nas the address or data depending on the control signals. -\n<code>i_MemWrite</code>: Input control signal indicating a memory write\noperation. - <code>i_MemRead</code>: Input control signal indicating a\nmemory read operation. - <code>i_MemtoReg</code>: Input control signal\nindicating whether to pass the memory read data or ALU result to the\noutput. - <code>o_rData</code>: Output read data from the memory.</p>\n<h5 id=\"functionality\">Functionality</h5>\n<p>Memory Initialization:</p>\n<ul>\n<li>The module defines a parameter <code>SIZE_DM</code> representing the\nsize of the data memory (default is 128 words).</li>\n<li>It declares a register array <code>Dmem</code> of size\n<code>SIZE_DM</code> to store the memory contents.</li>\n<li>In the initial block, all memory locations are initialized to zero\nusing a loop.</li>\n</ul>\n<p>Memory Read Operation:</p>\n<ul>\n<li>The first always block is triggered whenever the input signals\n<code>i_addr</code>, <code>i_MemRead</code>, <code>i_MemtoReg</code>, or\n<code>i_ALUresult</code> change.</li>\n<li>If <code>i_MemRead</code> is asserted (equals 1), it indicates a\nmemory read operation.\n<ul>\n<li>If <code>i_MemtoReg</code> is also asserted, the data at memory\nlocation <code>i_addr</code> is assigned to the output\n<code>o_rData</code>.</li>\n<li>Otherwise, the ALU result <code>i_ALUresult</code> is assigned to\n<code>o_rData</code>.</li>\n</ul></li>\n<li>If <code>i_MemRead</code> is not asserted, the ALU result\n<code>i_ALUresult</code> is directly assigned to\n<code>o_rData</code>.</li>\n</ul>\n<p>Memory Write Operation:</p>\n<ul>\n<li>The second always block is triggered on the positive edge of the\nclock signal <code>i_clk</code>.</li>\n<li>If <code>i_MemWrite</code> is asserted (equals 1), it indicates a\nmemory write operation.</li>\n<li>The data <code>i_wData</code> is written to the memory location\nspecified by <code>i_addr</code>.</li>\n</ul>\n<h5 id=\"significance-in-the-processor\">Significance in the\nProcessor</h5>\n<p>Interaction with Other Components: - The Data Memory module interacts\nwith the ALU and the Control Unit in the processor. - The ALU provides\nthe address (<code>i_ALUresult</code>) for memory read or write\noperations. - The Control Unit generates the control signals\n(<code>i_MemWrite</code>, <code>i_MemRead</code>,\n<code>i_MemtoReg</code>) to control the behavior of the Data Memory\nmodule. - The Register File provides the data to be written to memory\n(<code>i_wData</code>) during a memory write operation. - The output\nread data (<code>o_rData</code>) is passed back to the Register File or\nused as needed in subsequent stages of the processor pipeline.</p>\n<p>Simply put, the Data Memory module allows storing and retrieving data\nin the MIPS processor.</p>\n<p>It responds to memory read and write requests based on the provided\naddress and control signals, and it interacts with other components such\nas the ALU, Control Unit, and Register File to facilitate data storage\nand retrieval operations.</p>\n<h4 id=\"instruction-memory-1\">Instruction Memory</h4>\n<p>The following is the code for the Instruction Memory module in the\nMIPS processor called <code>InstructionMemory.v</code>. (It can be found\nin the <code>./proj/</code> directory)</p>\n<div class=\"sourceCode\" id=\"cb75\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb75-1\"><a href=\"#cb75-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ot\">`timescale 1ns / 1ps</span></span>\n<span id=\"cb75-2\"><a href=\"#cb75-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> InstructionMemory <span class=\"op\">(</span></span>\n<span id=\"cb75-3\"><a href=\"#cb75-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_Addr<span class=\"op\">,</span></span>\n<span id=\"cb75-4\"><a href=\"#cb75-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">5</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_Ctr<span class=\"op\">,</span>          <span class=\"co\">// [31-26]</span></span>\n<span id=\"cb75-5\"><a href=\"#cb75-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">5</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_Funcode<span class=\"op\">,</span>      <span class=\"co\">// [5-0]</span></span>\n<span id=\"cb75-6\"><a href=\"#cb75-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_Instruction  <span class=\"co\">// [31-0]</span></span>\n<span id=\"cb75-7\"><a href=\"#cb75-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb75-8\"><a href=\"#cb75-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">parameter</span> SIZE_IM <span class=\"op\">=</span> <span class=\"dv\">128</span><span class=\"op\">;</span>           <span class=\"co\">// size of this memory, by default 128*32</span></span>\n<span id=\"cb75-9\"><a href=\"#cb75-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> Imem<span class=\"op\">[</span>SIZE_IM<span class=\"dv\">-1</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">];</span>      <span class=\"co\">// instruction memory</span></span>\n<span id=\"cb75-10\"><a href=\"#cb75-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">integer</span> n<span class=\"op\">;</span></span>\n<span id=\"cb75-11\"><a href=\"#cb75-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">initial</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb75-12\"><a href=\"#cb75-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">for</span> <span class=\"op\">(</span>n <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span> n <span class=\"op\">&lt;</span> SIZE_IM<span class=\"op\">;</span> n <span class=\"op\">=</span> n <span class=\"op\">+</span> <span class=\"dv\">1</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb75-13\"><a href=\"#cb75-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>      Imem<span class=\"op\">[</span>n<span class=\"op\">]</span> <span class=\"op\">=</span> <span class=\"bn\">32&#39;b11111100000000000000000000000000</span><span class=\"op\">;</span></span>\n<span id=\"cb75-14\"><a href=\"#cb75-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb75-15\"><a href=\"#cb75-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">$readmemb</span><span class=\"op\">(</span><span class=\"st\">&quot;instructions.mem&quot;</span><span class=\"op\">,</span> Imem<span class=\"op\">);</span></span>\n<span id=\"cb75-16\"><a href=\"#cb75-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    i_Instruction <span class=\"op\">=</span> <span class=\"bn\">32&#39;b11111100000000000000000000000000</span><span class=\"op\">;</span></span>\n<span id=\"cb75-17\"><a href=\"#cb75-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb75-18\"><a href=\"#cb75-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">always</span> <span class=\"op\">@(</span>i_Addr<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb75-19\"><a href=\"#cb75-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">if</span> <span class=\"op\">(</span>i_Addr <span class=\"op\">==</span> <span class=\"op\">-</span><span class=\"dv\">4</span><span class=\"op\">)</span> <span class=\"kw\">begin</span>         <span class=\"co\">// init</span></span>\n<span id=\"cb75-20\"><a href=\"#cb75-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>      i_Instruction <span class=\"op\">=</span> <span class=\"bn\">32&#39;b11111100000000000000000000000000</span><span class=\"op\">;</span></span>\n<span id=\"cb75-21\"><a href=\"#cb75-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span> <span class=\"kw\">else</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb75-22\"><a href=\"#cb75-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>      i_Instruction <span class=\"op\">=</span> Imem<span class=\"op\">[</span>i_Addr<span class=\"op\">&gt;&gt;</span><span class=\"dv\">2</span><span class=\"op\">];</span></span>\n<span id=\"cb75-23\"><a href=\"#cb75-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb75-24\"><a href=\"#cb75-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>    i_Ctr <span class=\"op\">=</span> i_Instruction<span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">26</span><span class=\"op\">];</span></span>\n<span id=\"cb75-25\"><a href=\"#cb75-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>    i_Funcode <span class=\"op\">=</span> i_Instruction<span class=\"op\">[</span><span class=\"dv\">5</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">];</span></span>\n<span id=\"cb75-26\"><a href=\"#cb75-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb75-27\"><a href=\"#cb75-27\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<p>The provided code represents “the Instruction Memory module\n<code>InstructionMemory.v</code> for the single-cycle MIPS\nprocessor.”</p>\n<h5 id=\"purpose\">Purpose:</h5>\n<p>The Instruction Memory module is responsible for storing the\nprocessor’s instructions and providing them to the other components of\nthe processor.</p>\n<p>It acts as a read-only memory (ROM) that holds the program\ninstructions.</p>\n<h5 id=\"io-2\">IO</h5>\n<p>Inputs and Outputs:</p>\n<ul>\n<li><code>i_Addr</code> (input, 32-bit): Represents the memory address\nfrom which the instruction should be fetched.</li>\n<li><code>i_Ctr</code> (output, 6-bit): Outputs the control bits of the\nfetched instruction (bits [31:26]).</li>\n<li><code>i_Funcode</code> (output, 6-bit): Outputs the function code of\nthe fetched instruction (bits [5:0]).</li>\n<li><code>i_Instruction</code> (output, 32-bit): Outputs the complete\n32-bit fetched instruction.</li>\n</ul>\n<h5 id=\"functionality-1\">Functionality</h5>\n<ol type=\"1\">\n<li>The module defines a parameter <code>SIZE_IM</code> which represents\nthe size of the instruction memory.</li>\n</ol>\n<p>By default, it is set to 128, meaning the memory can hold 128 32-bit\ninstructions.</p>\n<ol start=\"2\" type=\"1\">\n<li><p>The module declares a register array <code>Imem</code> of size\n<code>SIZE_IM</code> to store the instructions.</p></li>\n<li><p>In the initial block:</p>\n<ul>\n<li>The memory is initialized with a default instruction\n(32’b11111100000000000000000000000000) using a loop.</li>\n<li>The instructions are then loaded from a file named\n“instructions.mem” using the <code>$readmemb</code> system task. This\nfile contains the binary representation of the instructions.</li>\n<li>The <code>i_Instruction</code> output is initialized with the\ndefault instruction.</li>\n</ul></li>\n<li><p>The module has an “always” block that is triggered whenever the\n<code>i_Addr</code> input changes:</p>\n<ul>\n<li>If <code>i_Addr</code> is equal to -4 (used for initialization), the\n<code>i_Instruction</code> output is set to the default\ninstruction.</li>\n<li>Otherwise, the instruction is fetched from the <code>Imem</code>\narray using the address <code>i_Addr</code> shifted right by 2 bits\n(assuming word-aligned addresses).</li>\n<li>The control bits (<code>i_Ctr</code>) and function code\n(<code>i_Funcode</code>) are extracted from the fetched instruction and\nassigned to the respective outputs.</li>\n</ul></li>\n</ol>\n<h5 id=\"processor-context-1\">Processor Context</h5>\n<p>The following is the context of the Instruction Memory module,\n<code>InstructionMemory.v</code> in the single-cycle MIPS processor,\n<code>mips.v</code>:</p>\n<ul>\n<li>The Program Counter (<code>PC</code>) module provides the memory\naddress (<code>i_Addr</code>) to the Instruction Memory module to fetch\nthe instruction at that address.</li>\n<li>The fetched instruction (<code>i_Instruction</code>) is then passed\nto other components of the processor, such as the Control Unit and the\nRegister File, for further processing and execution.</li>\n<li>The control bits (<code>i_Ctr</code>) and function code\n(<code>i_Funcode</code>) are used by the Control Unit to generate\nappropriate control signals for the processor’s data-path.</li>\n</ul>\n<h5 id=\"significance\">Significance</h5>\n<p>The Instruction Memory module is a crucial component of the MIPS\nprocessor as it holds the program instructions that the processor\nexecutes.</p>\n<p>It provides the instructions to the processor’s data-path, enabling\nthe processor to perform the desired operations and execute the program\nstored in the memory.</p>\n<h5 id=\"summary\">Summary</h5>\n<p>Essentially, the Instruction Memory module in the single-cycle MIPS\nprocessor acts as a read-only memory that stores the program\ninstructions. It fetches instructions based on the provided memory\naddress and outputs the complete instruction along with its control bits\nand function code for further processing by other components of the\nprocessor.</p>\n<h2 id=\"verbose-components-code\">Verbose Components Code</h2>\n<p>The following section shows detailed, commented code files for each\nof the components of the processor.</p>\n<p>It includes detailed code comments to better explain the\nfunctionality and purpose of each component within the actual verilog\ncode.</p>\n<h3 id=\"data-memory-2\">Data Memory</h3>\n<p>The following is the commented code for the Data Memory module in the\nMIPS processor called <code>DataMemory.v</code>:</p>\n<div class=\"sourceCode\" id=\"cb76\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb76-1\"><a href=\"#cb76-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// File: DataMemory.v</span></span>\n<span id=\"cb76-2\"><a href=\"#cb76-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Description: This file contains the data memory module for the MIPS processor.</span></span>\n<span id=\"cb76-3\"><a href=\"#cb76-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Purpose: The data memory stores data values and provides read and write access to the processor.</span></span>\n<span id=\"cb76-4\"><a href=\"#cb76-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">//          It is responsible for handling memory read and write operations based on the control signals</span></span>\n<span id=\"cb76-5\"><a href=\"#cb76-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">//          received from the control unit.</span></span>\n<span id=\"cb76-6\"><a href=\"#cb76-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ot\">`timescale 1ns / 1ps</span></span>\n<span id=\"cb76-7\"><a href=\"#cb76-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> DataMemory <span class=\"op\">(</span></span>\n<span id=\"cb76-8\"><a href=\"#cb76-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> i_clk<span class=\"op\">,</span>                    <span class=\"co\">// Clock input</span></span>\n<span id=\"cb76-9\"><a href=\"#cb76-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_addr<span class=\"op\">,</span>            <span class=\"co\">// Address input for memory access</span></span>\n<span id=\"cb76-10\"><a href=\"#cb76-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_wData<span class=\"op\">,</span>           <span class=\"co\">// Write data input</span></span>\n<span id=\"cb76-11\"><a href=\"#cb76-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_ALUresult<span class=\"op\">,</span>       <span class=\"co\">// ALU result input (used for memory address calculation)</span></span>\n<span id=\"cb76-12\"><a href=\"#cb76-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> i_MemWrite<span class=\"op\">,</span>               <span class=\"co\">// Control signal for memory write operation</span></span>\n<span id=\"cb76-13\"><a href=\"#cb76-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> i_MemRead<span class=\"op\">,</span>                <span class=\"co\">// Control signal for memory read operation</span></span>\n<span id=\"cb76-14\"><a href=\"#cb76-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> i_MemtoReg<span class=\"op\">,</span>               <span class=\"co\">// Control signal for selecting memory or ALU result as the output</span></span>\n<span id=\"cb76-15\"><a href=\"#cb76-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_rData       <span class=\"co\">// Read data output</span></span>\n<span id=\"cb76-16\"><a href=\"#cb76-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb76-17\"><a href=\"#cb76-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">parameter</span> SIZE_DM <span class=\"op\">=</span> <span class=\"dv\">128</span><span class=\"op\">;</span>           <span class=\"co\">// Size of the data memory (default: 128 * 32 bits)</span></span>\n<span id=\"cb76-18\"><a href=\"#cb76-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> Dmem<span class=\"op\">[</span>SIZE_DM<span class=\"dv\">-1</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">];</span>      <span class=\"co\">// Data memory array</span></span>\n<span id=\"cb76-19\"><a href=\"#cb76-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">integer</span> i<span class=\"op\">;</span></span>\n<span id=\"cb76-20\"><a href=\"#cb76-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">// Initialize the data memory</span></span>\n<span id=\"cb76-21\"><a href=\"#cb76-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">initial</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb76-22\"><a href=\"#cb76-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Fill the data memory with zeros</span></span>\n<span id=\"cb76-23\"><a href=\"#cb76-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">for</span> <span class=\"op\">(</span>i <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span> i <span class=\"op\">&lt;</span> SIZE_DM<span class=\"op\">;</span> i <span class=\"op\">=</span> i <span class=\"op\">+</span> <span class=\"dv\">1</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb76-24\"><a href=\"#cb76-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>      Dmem<span class=\"op\">[</span>i<span class=\"op\">]</span> <span class=\"op\">=</span> <span class=\"bn\">32&#39;b0</span><span class=\"op\">;</span></span>\n<span id=\"cb76-25\"><a href=\"#cb76-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb76-26\"><a href=\"#cb76-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb76-27\"><a href=\"#cb76-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">// Memory read operation</span></span>\n<span id=\"cb76-28\"><a href=\"#cb76-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">always</span> <span class=\"op\">@(</span>i_addr <span class=\"dt\">or</span> i_MemRead <span class=\"dt\">or</span> i_MemtoReg <span class=\"dt\">or</span> i_ALUresult<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb76-29\"><a href=\"#cb76-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">if</span> <span class=\"op\">(</span>i_MemRead <span class=\"op\">==</span> <span class=\"dv\">1</span><span class=\"op\">)</span> <span class=\"kw\">begin</span>                  <span class=\"co\">// If memory read is enabled</span></span>\n<span id=\"cb76-30\"><a href=\"#cb76-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">if</span> <span class=\"op\">(</span>i_MemtoReg <span class=\"op\">==</span> <span class=\"dv\">1</span><span class=\"op\">)</span> <span class=\"kw\">begin</span>               <span class=\"co\">// If MemtoReg is 1, select memory data as output</span></span>\n<span id=\"cb76-31\"><a href=\"#cb76-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_rData <span class=\"op\">=</span> Dmem<span class=\"op\">[</span>i_addr<span class=\"op\">];</span>                <span class=\"co\">// Read data from the memory array</span></span>\n<span id=\"cb76-32\"><a href=\"#cb76-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span> <span class=\"kw\">else</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb76-33\"><a href=\"#cb76-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_rData <span class=\"op\">=</span> i_ALUresult<span class=\"op\">;</span>                 <span class=\"co\">// If MemtoReg is 0, select ALU result as output</span></span>\n<span id=\"cb76-34\"><a href=\"#cb76-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span></span>\n<span id=\"cb76-35\"><a href=\"#cb76-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span> <span class=\"kw\">else</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb76-36\"><a href=\"#cb76-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>      o_rData <span class=\"op\">=</span> i_ALUresult<span class=\"op\">;</span>                   <span class=\"co\">// If memory read is not enabled, select ALU result as output</span></span>\n<span id=\"cb76-37\"><a href=\"#cb76-37\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb76-38\"><a href=\"#cb76-38\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb76-39\"><a href=\"#cb76-39\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">// Memory write operation</span></span>\n<span id=\"cb76-40\"><a href=\"#cb76-40\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">always</span> <span class=\"op\">@(</span><span class=\"kw\">posedge</span> i_clk<span class=\"op\">)</span> <span class=\"kw\">begin</span>                <span class=\"co\">// Triggered on the positive edge of the clock</span></span>\n<span id=\"cb76-41\"><a href=\"#cb76-41\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">if</span> <span class=\"op\">(</span>i_MemWrite <span class=\"op\">==</span> <span class=\"dv\">1</span><span class=\"op\">)</span> <span class=\"kw\">begin</span>                 <span class=\"co\">// If memory write is enabled</span></span>\n<span id=\"cb76-42\"><a href=\"#cb76-42\" aria-hidden=\"true\" tabindex=\"-1\"></a>      Dmem<span class=\"op\">[</span>i_addr<span class=\"op\">]</span> <span class=\"op\">=</span> i_wData<span class=\"op\">;</span>                  <span class=\"co\">// Write data to the memory array</span></span>\n<span id=\"cb76-43\"><a href=\"#cb76-43\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb76-44\"><a href=\"#cb76-44\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb76-45\"><a href=\"#cb76-45\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<p>Interactions with other components: - The <code>DataMemory</code>\nmodule receives the address (<code>i_addr</code>), write data\n(<code>i_wData</code>), and control signals (<code>i_MemWrite</code>,\n<code>i_MemRead</code>, <code>i_MemtoReg</code>) from the\n<code>ControlUnit</code> and <code>ALU</code> modules. - It provides the\nread data (<code>o_rData</code>) to the <code>RegisterFile</code> module\nfor store instructions or to the <code>ALU</code> for load instructions.\n- The <code>i_ALUresult</code> input is used as the memory address for\nread and write operations. - The <code>i_MemWrite</code> control signal\ndetermines whether a memory write operation should be performed. - The\n<code>i_MemRead</code> control signal determines whether a memory read\noperation should be performed. - The <code>i_MemtoReg</code> control\nsignal selects whether the memory data or the ALU result should be\noutput as the read data.</p>\n<p>The <code>DataMemory</code> module is critical for providing data\nstorage and handling memory read and write operations.</p>\n<p>It interacts with the control unit, ALU, and register file to\nfacilitate data movement and manipulation in the processor.</p>\n<h3 id=\"instruction-memory-2\">Instruction Memory</h3>\n<p>Here the <code>ProgramCounter.v</code> file with detailed code\ncomments explaining its purpose, functionality, and interactions with\nother components in the MIPS processor:</p>\n<div class=\"sourceCode\" id=\"cb77\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb77-1\"><a href=\"#cb77-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// File: ProgramCounter.v</span></span>\n<span id=\"cb77-2\"><a href=\"#cb77-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Description: This file contains the program counter module for the MIPS processor.</span></span>\n<span id=\"cb77-3\"><a href=\"#cb77-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Purpose: The program counter keeps track of the current instruction address and updates it</span></span>\n<span id=\"cb77-4\"><a href=\"#cb77-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">//          to the next instruction address on each clock cycle. It is responsible for providing</span></span>\n<span id=\"cb77-5\"><a href=\"#cb77-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">//          the address of the instruction to be fetched from the instruction memory.</span></span>\n<span id=\"cb77-6\"><a href=\"#cb77-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ot\">`timescale 1ns / 1ps</span></span>\n<span id=\"cb77-7\"><a href=\"#cb77-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> ProgramCounter <span class=\"op\">(</span></span>\n<span id=\"cb77-8\"><a href=\"#cb77-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> i_Clk<span class=\"op\">,</span>                <span class=\"co\">// Input clock signal</span></span>\n<span id=\"cb77-9\"><a href=\"#cb77-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_Next<span class=\"op\">,</span>        <span class=\"co\">// Input next instruction address</span></span>\n<span id=\"cb77-10\"><a href=\"#cb77-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_Out     <span class=\"co\">// Output current instruction address</span></span>\n<span id=\"cb77-11\"><a href=\"#cb77-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb77-12\"><a href=\"#cb77-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">// Initialize the program counter</span></span>\n<span id=\"cb77-13\"><a href=\"#cb77-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">initial</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb77-14\"><a href=\"#cb77-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_Out <span class=\"op\">=</span> <span class=\"op\">-</span><span class=\"dv\">4</span><span class=\"op\">;</span>                 <span class=\"co\">// Set the initial address to -4 (used for reset or initialization)</span></span>\n<span id=\"cb77-15\"><a href=\"#cb77-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb77-16\"><a href=\"#cb77-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">// Update the program counter on the positive edge of the clock</span></span>\n<span id=\"cb77-17\"><a href=\"#cb77-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">always</span> <span class=\"op\">@(</span><span class=\"kw\">posedge</span> i_Clk<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb77-18\"><a href=\"#cb77-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_Out <span class=\"op\">=</span> i_Next<span class=\"op\">;</span>             <span class=\"co\">// Update the current address with the next address</span></span>\n<span id=\"cb77-19\"><a href=\"#cb77-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb77-20\"><a href=\"#cb77-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<p>Interactions with other components: - The <code>ProgramCounter</code>\nmodule receives the next instruction address (<code>i_Next</code>) from\nthe <code>NextProgramCounter</code> module. - It provides the current\ninstruction address (<code>o_Out</code>) to the\n<code>InstructionMemory</code> module to fetch the corresponding\ninstruction. - The <code>ProgramCounter</code> is updated on the\npositive edge of the clock signal (<code>i_Clk</code>), which is\ntypically connected to the global clock signal of the processor.</p>\n<p>The <code>ProgramCounter</code> module is a critical component in the\nMIPS processor pipeline. It keeps track of the current instruction\naddress and updates it on each clock cycle to fetch the next\ninstruction. The program counter ensures the sequential execution of\ninstructions and enables the processor to navigate through the\nprogram.</p>\n<h3 id=\"program-counter-1\">Program Counter</h3>\n<p>Here the <code>ProgramCounter.v</code> file with detailed code\ncomments explaining its purpose, functionality, and interactions with\nother components in the MIPS processor:</p>\n<div class=\"sourceCode\" id=\"cb78\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb78-1\"><a href=\"#cb78-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// File: ProgramCounter.v</span></span>\n<span id=\"cb78-2\"><a href=\"#cb78-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Description: This file contains the program counter module for the MIPS processor.</span></span>\n<span id=\"cb78-3\"><a href=\"#cb78-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Purpose: The program counter keeps track of the current instruction address and updates it to the next address.</span></span>\n<span id=\"cb78-4\"><a href=\"#cb78-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">//          It is responsible for providing the current instruction address to the instruction memory and updating</span></span>\n<span id=\"cb78-5\"><a href=\"#cb78-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">//          the address based on the next address input.</span></span>\n<span id=\"cb78-6\"><a href=\"#cb78-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ot\">`timescale 1ns / 1ps</span></span>\n<span id=\"cb78-7\"><a href=\"#cb78-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> ProgramCounter <span class=\"op\">(</span></span>\n<span id=\"cb78-8\"><a href=\"#cb78-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> i_Clk<span class=\"op\">,</span>                   <span class=\"co\">// Input clock signal</span></span>\n<span id=\"cb78-9\"><a href=\"#cb78-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_Next<span class=\"op\">,</span>           <span class=\"co\">// Input next instruction address</span></span>\n<span id=\"cb78-10\"><a href=\"#cb78-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_Out        <span class=\"co\">// Output current instruction address</span></span>\n<span id=\"cb78-11\"><a href=\"#cb78-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb78-12\"><a href=\"#cb78-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">// Initialize the program counter</span></span>\n<span id=\"cb78-13\"><a href=\"#cb78-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">initial</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb78-14\"><a href=\"#cb78-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_Out <span class=\"op\">=</span> <span class=\"op\">-</span><span class=\"dv\">4</span><span class=\"op\">;</span>                    <span class=\"co\">// Set the initial instruction address to -4</span></span>\n<span id=\"cb78-15\"><a href=\"#cb78-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb78-16\"><a href=\"#cb78-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">// Update the program counter on the positive edge of the clock</span></span>\n<span id=\"cb78-17\"><a href=\"#cb78-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">always</span> <span class=\"op\">@(</span><span class=\"kw\">posedge</span> i_Clk<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb78-18\"><a href=\"#cb78-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_Out <span class=\"op\">=</span> i_Next<span class=\"op\">;</span>                <span class=\"co\">// Update the current instruction address with the next address</span></span>\n<span id=\"cb78-19\"><a href=\"#cb78-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb78-20\"><a href=\"#cb78-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<p>Purpose and Functionality: - The <code>ProgramCounter</code> module\nkeeps track of the current instruction address in the MIPS processor. -\nIt is responsible for providing the current instruction address to the\ninstruction memory (<code>InstructionMemory</code>) for fetching the\ncorresponding instruction. - The program counter is updated on the\npositive edge of the clock signal (<code>i_Clk</code>). - The next\ninstruction address (<code>i_Next</code>) is provided as an input to the\nmodule, which is used to update the current instruction address\n(<code>o_Out</code>) on each clock cycle. - The initial value of the\nprogram counter is set to -4, which represents the initial state before\nthe first instruction is fetched.</p>\n<p>Interactions with other components: - The <code>ProgramCounter</code>\nmodule receives the next instruction address (<code>i_Next</code>) from\nthe <code>NextProgramCounter</code> module, which calculates the next\naddress based on the current instruction and control signals. - It\nprovides the current instruction address (<code>o_Out</code>) to the\n<code>InstructionMemory</code> module to fetch the corresponding\ninstruction. - The <code>ProgramCounter</code> is updated on the\npositive edge of the clock signal (<code>i_Clk</code>), which is\ntypically connected to the main processor clock.</p>\n<p>The <code>ProgramCounter</code> module is to manage the flow of\nexecution by keeping track of the current instruction address.</p>\n<p>It ensures that instructions are fetched and executed in the correct\norder by updating the address on each clock cycle based on the next\naddress input provided by the <code>NextProgramCounter</code>\nmodule.</p>\n<h3 id=\"alu-2\">ALU</h3>\n<p>Here the <code>ALU.v</code> file with detailed code comments\nexplaining its purpose, functionality, and interactions with other\ncomponents in the MIPS processor:</p>\n<div class=\"sourceCode\" id=\"cb79\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb79-1\"><a href=\"#cb79-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// File: ALU.v</span></span>\n<span id=\"cb79-2\"><a href=\"#cb79-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Description: This file contains the Arithmetic Logic Unit (ALU) module for the MIPS processor.</span></span>\n<span id=\"cb79-3\"><a href=\"#cb79-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Purpose: The ALU performs arithmetic and logic operations based on the ALU control signals.</span></span>\n<span id=\"cb79-4\"><a href=\"#cb79-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">//          It takes two input operands (i_data1 and i_read2/immediate value) and performs the specified operation.</span></span>\n<span id=\"cb79-5\"><a href=\"#cb79-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">//          The ALU also generates a zero flag (o_Zero) to indicate if the result is zero.</span></span>\n<span id=\"cb79-6\"><a href=\"#cb79-6\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb79-7\"><a href=\"#cb79-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ot\">`timescale 1ns / 1ps</span></span>\n<span id=\"cb79-8\"><a href=\"#cb79-8\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb79-9\"><a href=\"#cb79-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> ALU <span class=\"op\">(</span></span>\n<span id=\"cb79-10\"><a href=\"#cb79-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span>      <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_data1<span class=\"op\">,</span>        <span class=\"co\">// Input operand 1 (from RegisterFile)</span></span>\n<span id=\"cb79-11\"><a href=\"#cb79-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span>      <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_read2<span class=\"op\">,</span>        <span class=\"co\">// Input operand 2 (from RegisterFile or immediate value)</span></span>\n<span id=\"cb79-12\"><a href=\"#cb79-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span>      <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_Instruction<span class=\"op\">,</span>  <span class=\"co\">// Input instruction (used for sign-extension of immediate value)</span></span>\n<span id=\"cb79-13\"><a href=\"#cb79-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span>             i_ALUSrc<span class=\"op\">,</span>       <span class=\"co\">// Control signal to select between i_read2 or immediate value</span></span>\n<span id=\"cb79-14\"><a href=\"#cb79-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span>      <span class=\"op\">[</span> <span class=\"dv\">3</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_ALUcontrol<span class=\"op\">,</span>   <span class=\"co\">// Control signal to specify the ALU operation</span></span>\n<span id=\"cb79-15\"><a href=\"#cb79-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span>        o_Zero<span class=\"op\">,</span>         <span class=\"co\">// Output zero flag (1 if the ALU result is zero, 0 otherwise)</span></span>\n<span id=\"cb79-16\"><a href=\"#cb79-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_ALUresult     <span class=\"co\">// Output ALU result</span></span>\n<span id=\"cb79-17\"><a href=\"#cb79-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb79-18\"><a href=\"#cb79-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> data2<span class=\"op\">;</span></span>\n<span id=\"cb79-19\"><a href=\"#cb79-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">// Determine the second operand based on the ALUSrc control signal</span></span>\n<span id=\"cb79-20\"><a href=\"#cb79-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">always</span> <span class=\"op\">@(</span>i_ALUSrc<span class=\"op\">,</span> i_read2<span class=\"op\">,</span> i_Instruction<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb79-21\"><a href=\"#cb79-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">if</span> <span class=\"op\">(</span>i_ALUSrc <span class=\"op\">==</span> <span class=\"dv\">0</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb79-22\"><a href=\"#cb79-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>      data2 <span class=\"op\">=</span> i_read2<span class=\"op\">;</span>                 <span class=\"co\">// Use i_read2 as the second operand</span></span>\n<span id=\"cb79-23\"><a href=\"#cb79-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span> <span class=\"kw\">else</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb79-24\"><a href=\"#cb79-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"co\">// Sign-extend the immediate value</span></span>\n<span id=\"cb79-25\"><a href=\"#cb79-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">if</span> <span class=\"op\">(</span>i_Instruction<span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">]</span> <span class=\"op\">==</span> <span class=\"bn\">1&#39;b0</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb79-26\"><a href=\"#cb79-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>        data2 <span class=\"op\">=</span> <span class=\"op\">{</span><span class=\"bn\">16&#39;b0</span><span class=\"op\">,</span> i_Instruction<span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]};</span>  <span class=\"co\">// Zero-extend if the immediate value is positive</span></span>\n<span id=\"cb79-27\"><a href=\"#cb79-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span> <span class=\"kw\">else</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb79-28\"><a href=\"#cb79-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>        data2 <span class=\"op\">=</span> <span class=\"op\">{{</span><span class=\"dv\">16</span><span class=\"op\">{</span><span class=\"bn\">1&#39;b1</span><span class=\"op\">}},</span> i_Instruction<span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]};</span>  <span class=\"co\">// Sign-extend if the immediate value is negative</span></span>\n<span id=\"cb79-29\"><a href=\"#cb79-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span></span>\n<span id=\"cb79-30\"><a href=\"#cb79-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb79-31\"><a href=\"#cb79-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb79-32\"><a href=\"#cb79-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">// Perform the ALU operation based on the ALUcontrol signal</span></span>\n<span id=\"cb79-33\"><a href=\"#cb79-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">always</span> <span class=\"op\">@(</span>i_data1<span class=\"op\">,</span> data2<span class=\"op\">,</span> i_ALUcontrol<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb79-34\"><a href=\"#cb79-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">case</span> <span class=\"op\">(</span>i_ALUcontrol<span class=\"op\">)</span></span>\n<span id=\"cb79-35\"><a href=\"#cb79-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">4&#39;b0000</span><span class=\"op\">:</span>  <span class=\"co\">// AND</span></span>\n<span id=\"cb79-36\"><a href=\"#cb79-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUresult <span class=\"op\">=</span> i_data1 <span class=\"op\">&amp;</span> data2<span class=\"op\">;</span></span>\n<span id=\"cb79-37\"><a href=\"#cb79-37\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">4&#39;b0001</span><span class=\"op\">:</span>  <span class=\"co\">// OR</span></span>\n<span id=\"cb79-38\"><a href=\"#cb79-38\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUresult <span class=\"op\">=</span> i_data1 <span class=\"op\">|</span> data2<span class=\"op\">;</span></span>\n<span id=\"cb79-39\"><a href=\"#cb79-39\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">4&#39;b0010</span><span class=\"op\">:</span>  <span class=\"co\">// ADD</span></span>\n<span id=\"cb79-40\"><a href=\"#cb79-40\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUresult <span class=\"op\">=</span> i_data1 <span class=\"op\">+</span> data2<span class=\"op\">;</span></span>\n<span id=\"cb79-41\"><a href=\"#cb79-41\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">4&#39;b0110</span><span class=\"op\">:</span>  <span class=\"co\">// SUB</span></span>\n<span id=\"cb79-42\"><a href=\"#cb79-42\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUresult <span class=\"op\">=</span> i_data1 <span class=\"op\">-</span> data2<span class=\"op\">;</span></span>\n<span id=\"cb79-43\"><a href=\"#cb79-43\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">4&#39;b0111</span><span class=\"op\">:</span>  <span class=\"co\">// SLT (Set Less Than)</span></span>\n<span id=\"cb79-44\"><a href=\"#cb79-44\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUresult <span class=\"op\">=</span> <span class=\"op\">(</span>i_data1 <span class=\"op\">&lt;</span> data2<span class=\"op\">)</span> <span class=\"op\">?</span> <span class=\"dv\">1</span> <span class=\"op\">:</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb79-45\"><a href=\"#cb79-45\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">4&#39;b1100</span><span class=\"op\">:</span>  <span class=\"co\">// NOR</span></span>\n<span id=\"cb79-46\"><a href=\"#cb79-46\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUresult <span class=\"op\">=</span> <span class=\"op\">~(</span>i_data1 <span class=\"op\">|</span> data2<span class=\"op\">);</span></span>\n<span id=\"cb79-47\"><a href=\"#cb79-47\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">default</span><span class=\"op\">:</span> <span class=\"op\">;</span></span>\n<span id=\"cb79-48\"><a href=\"#cb79-48\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">endcase</span></span>\n<span id=\"cb79-49\"><a href=\"#cb79-49\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Set the zero flag if the ALU result is zero</span></span>\n<span id=\"cb79-50\"><a href=\"#cb79-50\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_Zero <span class=\"op\">=</span> <span class=\"op\">(</span>o_ALUresult <span class=\"op\">==</span> <span class=\"dv\">0</span><span class=\"op\">)</span> <span class=\"op\">?</span> <span class=\"dv\">1</span> <span class=\"op\">:</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb79-51\"><a href=\"#cb79-51\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb79-52\"><a href=\"#cb79-52\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb79-53\"><a href=\"#cb79-53\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<p>Interactions with other components: - The <code>ALU</code> module\nreceives input operands (<code>i_data1</code> and <code>i_read2</code>)\nfrom the <code>RegisterFile</code> module. - The <code>i_ALUSrc</code>\ncontrol signal from the <code>ControlUnit</code> determines whether the\nsecond operand is <code>i_read2</code> or an immediate value from the\ninstruction (<code>i_Instruction</code>). - The\n<code>i_ALUcontrol</code> signal from the <code>ALUControl</code> module\nspecifies the ALU operation to be performed. - The <code>ALU</code>\nmodule outputs the result (<code>o_ALUresult</code>) to the\n<code>DataMemory</code> and <code>RegisterFile</code> modules for memory\naccess and register writeback. - The zero flag (<code>o_Zero</code>) is\nused by</p>\n<h3 id=\"control-unit-1\">Control Unit</h3>\n<p>Certainly! Here’s a detailed explanation of the Verilog module\nprovided for a Control Unit in a single cycle MIPS processor. Each line\nof the module is annotated to explain its function and relevance.</p>\n<div class=\"sourceCode\" id=\"cb80\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb80-1\"><a href=\"#cb80-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ot\">`timescale 1ns / 1ps</span></span>\n<span id=\"cb80-2\"><a href=\"#cb80-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Defines the time unit as 1 nanosecond and the simulation time precision as 1 picosecond.</span></span>\n<span id=\"cb80-3\"><a href=\"#cb80-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> ControlUnit <span class=\"op\">(</span></span>\n<span id=\"cb80-4\"><a href=\"#cb80-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> i_instruction<span class=\"op\">,</span>     <span class=\"co\">// 32-bit input for the instruction.</span></span>\n<span id=\"cb80-5\"><a href=\"#cb80-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> o_RegDst<span class=\"op\">,</span>            <span class=\"co\">// Determines if rd (1) or rt (0) should be the destination register.</span></span>\n<span id=\"cb80-6\"><a href=\"#cb80-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> o_Jump<span class=\"op\">,</span>              <span class=\"co\">// Control signal for jumping to an instruction address.</span></span>\n<span id=\"cb80-7\"><a href=\"#cb80-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> o_Branch<span class=\"op\">,</span>            <span class=\"co\">// Control signal for branching (beq).</span></span>\n<span id=\"cb80-8\"><a href=\"#cb80-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> o_Bne<span class=\"op\">,</span>               <span class=\"co\">// Control signal for branching not equal (bne).</span></span>\n<span id=\"cb80-9\"><a href=\"#cb80-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> o_MemRead<span class=\"op\">,</span>           <span class=\"co\">// Enables reading from memory (used by lw).</span></span>\n<span id=\"cb80-10\"><a href=\"#cb80-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> o_MemtoReg<span class=\"op\">,</span>          <span class=\"co\">// Determines if the value should come from memory (1) or ALU (0).</span></span>\n<span id=\"cb80-11\"><a href=\"#cb80-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">1</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_ALUOp<span class=\"op\">,</span>       <span class=\"co\">// Control signal for ALU operation type.</span></span>\n<span id=\"cb80-12\"><a href=\"#cb80-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> o_MemWrite<span class=\"op\">,</span>          <span class=\"co\">// Enables writing to memory (used by sw).</span></span>\n<span id=\"cb80-13\"><a href=\"#cb80-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> o_ALUSrc<span class=\"op\">,</span>            <span class=\"co\">// Determines if the second ALU operand is an immediate (1) or register (0).</span></span>\n<span id=\"cb80-14\"><a href=\"#cb80-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> o_RegWrite<span class=\"op\">,</span>          <span class=\"co\">// Enables writing to the register file.</span></span>\n<span id=\"cb80-15\"><a href=\"#cb80-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">6</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_seg_first<span class=\"op\">,</span>   <span class=\"co\">// Segment display outputs to visually represent instruction types or states.</span></span>\n<span id=\"cb80-16\"><a href=\"#cb80-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">6</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_seg_second<span class=\"op\">,</span>  <span class=\"co\">// Each segment holds a 7-segment representation.</span></span>\n<span id=\"cb80-17\"><a href=\"#cb80-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">6</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_seg_third<span class=\"op\">,</span></span>\n<span id=\"cb80-18\"><a href=\"#cb80-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">6</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_seg_fourth<span class=\"op\">,</span></span>\n<span id=\"cb80-19\"><a href=\"#cb80-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">6</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> o_seg_fifth</span>\n<span id=\"cb80-20\"><a href=\"#cb80-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb80-21\"><a href=\"#cb80-21\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">initial</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb80-22\"><a href=\"#cb80-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Initialize all control signals and display outputs to their default (usually disabled) states.</span></span>\n<span id=\"cb80-23\"><a href=\"#cb80-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_RegDst <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-24\"><a href=\"#cb80-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_Jump <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-25\"><a href=\"#cb80-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_Branch <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-26\"><a href=\"#cb80-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_MemRead <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-27\"><a href=\"#cb80-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-28\"><a href=\"#cb80-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b00</span><span class=\"op\">;</span> <span class=\"co\">// Default ALU operation, no operation specified.</span></span>\n<span id=\"cb80-29\"><a href=\"#cb80-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-30\"><a href=\"#cb80-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-31\"><a href=\"#cb80-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-32\"><a href=\"#cb80-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_seg_first <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// All segments off (blank).</span></span>\n<span id=\"cb80-33\"><a href=\"#cb80-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_seg_second <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span></span>\n<span id=\"cb80-34\"><a href=\"#cb80-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_seg_third <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span></span>\n<span id=\"cb80-35\"><a href=\"#cb80-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_seg_fourth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span></span>\n<span id=\"cb80-36\"><a href=\"#cb80-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>    o_seg_fifth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span></span>\n<span id=\"cb80-37\"><a href=\"#cb80-37\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">end</span></span>\n<span id=\"cb80-38\"><a href=\"#cb80-38\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">always</span> <span class=\"op\">@(</span>i_instruction<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb80-39\"><a href=\"#cb80-39\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Control logic triggered by any change in the instruction input.</span></span>\n<span id=\"cb80-40\"><a href=\"#cb80-40\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">case</span> <span class=\"op\">(</span>i_instruction<span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">26</span><span class=\"op\">])</span> <span class=\"co\">// Decode the opcode part of the instruction.</span></span>\n<span id=\"cb80-41\"><a href=\"#cb80-41\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">6&#39;b000000</span><span class=\"op\">:</span> <span class=\"kw\">begin</span>  <span class=\"co\">// ARITHMETIC (R-type instructions)</span></span>\n<span id=\"cb80-42\"><a href=\"#cb80-42\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegDst <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb80-43\"><a href=\"#cb80-43\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-44\"><a href=\"#cb80-44\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-45\"><a href=\"#cb80-45\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb80-46\"><a href=\"#cb80-46\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemRead <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-47\"><a href=\"#cb80-47\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-48\"><a href=\"#cb80-48\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Branch <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-49\"><a href=\"#cb80-49\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Bne <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-50\"><a href=\"#cb80-50\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b10</span><span class=\"op\">;</span> <span class=\"co\">// Specific ALU operation for arithmetic.</span></span>\n<span id=\"cb80-51\"><a href=\"#cb80-51\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Jump <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-52\"><a href=\"#cb80-52\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"co\">// Display setup for ARITHMETIC.</span></span>\n<span id=\"cb80-53\"><a href=\"#cb80-53\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_first <span class=\"op\">=</span>  <span class=\"bn\">7&#39;b0001000</span><span class=\"op\">;</span>  <span class=\"co\">// A</span></span>\n<span id=\"cb80-54\"><a href=\"#cb80-54\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_second <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111010</span><span class=\"op\">;</span>  <span class=\"co\">// R</span></span>\n<span id=\"cb80-55\"><a href=\"#cb80-55\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_third <span class=\"op\">=</span>  <span class=\"bn\">7&#39;b1111001</span><span class=\"op\">;</span>  <span class=\"co\">// I</span></span>\n<span id=\"cb80-56\"><a href=\"#cb80-56\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fourth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b0001111</span><span class=\"op\">;</span>  <span class=\"co\">// T</span></span>\n<span id=\"cb80-57\"><a href=\"#cb80-57\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fifth <span class=\"op\">=</span>  <span class=\"bn\">7&#39;b0001001</span><span class=\"op\">;</span>  <span class=\"co\">// H</span></span>\n<span id=\"cb80-58\"><a href=\"#cb80-58\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span></span>\n<span id=\"cb80-59\"><a href=\"#cb80-59\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">6&#39;b001000</span><span class=\"op\">:</span> <span class=\"kw\">begin</span>  <span class=\"co\">// addi</span></span>\n<span id=\"cb80-60\"><a href=\"#cb80-60\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegDst <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-61\"><a href=\"#cb80-61\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb80-62\"><a href=\"#cb80-62\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-63\"><a href=\"#cb80-63\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb80-64\"><a href=\"#cb80-64\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemRead <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-65\"><a href=\"#cb80-65\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-66\"><a href=\"#cb80-66\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Branch <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-67\"><a href=\"#cb80-67\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Bne <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-68\"><a href=\"#cb80-68\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b00</span><span class=\"op\">;</span></span>\n<span id=\"cb80-69\"><a href=\"#cb80-69\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Jump <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-70\"><a href=\"#cb80-70\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_first <span class=\"op\">=</span> <span class=\"bn\">7&#39;b0001000</span><span class=\"op\">;</span>  <span class=\"co\">// A</span></span>\n<span id=\"cb80-71\"><a href=\"#cb80-71\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_second <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1000010</span><span class=\"op\">;</span> <span class=\"co\">// d</span></span>\n<span id=\"cb80-72\"><a href=\"#cb80-72\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_third <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1000010</span><span class=\"op\">;</span>  <span class=\"co\">// d</span></span>\n<span id=\"cb80-73\"><a href=\"#cb80-73\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fourth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1001111</span><span class=\"op\">;</span> <span class=\"co\">// i</span></span>\n<span id=\"cb80-74\"><a href=\"#cb80-74\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fifth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb80-75\"><a href=\"#cb80-75\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span></span>\n<span id=\"cb80-76\"><a href=\"#cb80-76\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">6&#39;b001100</span><span class=\"op\">:</span> <span class=\"kw\">begin</span>  <span class=\"co\">// andi</span></span>\n<span id=\"cb80-77\"><a href=\"#cb80-77\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegDst <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-78\"><a href=\"#cb80-78\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb80-79\"><a href=\"#cb80-79\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-80\"><a href=\"#cb80-80\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb80-81\"><a href=\"#cb80-81\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemRead <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-82\"><a href=\"#cb80-82\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-83\"><a href=\"#cb80-83\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Branch <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-84\"><a href=\"#cb80-84\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Bne <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-85\"><a href=\"#cb80-85\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b11</span><span class=\"op\">;</span></span>\n<span id=\"cb80-86\"><a href=\"#cb80-86\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Jump <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-87\"><a href=\"#cb80-87\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_first <span class=\"op\">=</span> <span class=\"bn\">7&#39;b0001000</span><span class=\"op\">;</span>  <span class=\"co\">// A</span></span>\n<span id=\"cb80-88\"><a href=\"#cb80-88\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_second <span class=\"op\">=</span> <span class=\"bn\">7&#39;b0101011</span><span class=\"op\">;</span>  <span class=\"co\">// n</span></span>\n<span id=\"cb80-89\"><a href=\"#cb80-89\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_third <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1000010</span><span class=\"op\">;</span>  <span class=\"co\">// d</span></span>\n<span id=\"cb80-90\"><a href=\"#cb80-90\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fourth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1001111</span><span class=\"op\">;</span>  <span class=\"co\">// i</span></span>\n<span id=\"cb80-91\"><a href=\"#cb80-91\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fifth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb80-92\"><a href=\"#cb80-92\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span></span>\n<span id=\"cb80-93\"><a href=\"#cb80-93\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">6&#39;b100011</span><span class=\"op\">:</span> <span class=\"kw\">begin</span>  <span class=\"co\">// lw</span></span>\n<span id=\"cb80-94\"><a href=\"#cb80-94\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegDst <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-95\"><a href=\"#cb80-95\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb80-96\"><a href=\"#cb80-96\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb80-97\"><a href=\"#cb80-97\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb80-98\"><a href=\"#cb80-98\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemRead <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb80-99\"><a href=\"#cb80-99\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-100\"><a href=\"#cb80-100\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Branch <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-101\"><a href=\"#cb80-101\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Bne <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-102\"><a href=\"#cb80-102\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b00</span><span class=\"op\">;</span></span>\n<span id=\"cb80-103\"><a href=\"#cb80-103\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Jump <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-104\"><a href=\"#cb80-104\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_first <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1000111</span><span class=\"op\">;</span>  <span class=\"co\">// L</span></span>\n<span id=\"cb80-105\"><a href=\"#cb80-105\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_second <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1001001</span><span class=\"op\">;</span>  <span class=\"co\">// w</span></span>\n<span id=\"cb80-106\"><a href=\"#cb80-106\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_third <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb80-107\"><a href=\"#cb80-107\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fourth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb80-108\"><a href=\"#cb80-108\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fifth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb80-109\"><a href=\"#cb80-109\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span></span>\n<span id=\"cb80-110\"><a href=\"#cb80-110\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">6&#39;b101011</span><span class=\"op\">:</span> <span class=\"kw\">begin</span>  <span class=\"co\">// sw</span></span>\n<span id=\"cb80-111\"><a href=\"#cb80-111\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegDst <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>  <span class=\"co\">// X</span></span>\n<span id=\"cb80-112\"><a href=\"#cb80-112\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb80-113\"><a href=\"#cb80-113\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>  <span class=\"co\">// X</span></span>\n<span id=\"cb80-114\"><a href=\"#cb80-114\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-115\"><a href=\"#cb80-115\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemRead <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-116\"><a href=\"#cb80-116\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb80-117\"><a href=\"#cb80-117\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Branch <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-118\"><a href=\"#cb80-118\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Bne <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-119\"><a href=\"#cb80-119\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b00</span><span class=\"op\">;</span></span>\n<span id=\"cb80-120\"><a href=\"#cb80-120\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Jump <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-121\"><a href=\"#cb80-121\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_first <span class=\"op\">=</span> <span class=\"bn\">7&#39;b0010010</span><span class=\"op\">;</span>  <span class=\"co\">// S</span></span>\n<span id=\"cb80-122\"><a href=\"#cb80-122\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_second <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1001001</span><span class=\"op\">;</span>  <span class=\"co\">// w</span></span>\n<span id=\"cb80-123\"><a href=\"#cb80-123\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_third <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb80-124\"><a href=\"#cb80-124\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fourth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb80-125\"><a href=\"#cb80-125\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fifth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb80-126\"><a href=\"#cb80-126\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span></span>\n<span id=\"cb80-127\"><a href=\"#cb80-127\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">6&#39;b000100</span><span class=\"op\">:</span> <span class=\"kw\">begin</span>  <span class=\"co\">// beq</span></span>\n<span id=\"cb80-128\"><a href=\"#cb80-128\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegDst <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>  <span class=\"co\">// X</span></span>\n<span id=\"cb80-129\"><a href=\"#cb80-129\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-130\"><a href=\"#cb80-130\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>  <span class=\"co\">// X</span></span>\n<span id=\"cb80-131\"><a href=\"#cb80-131\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-132\"><a href=\"#cb80-132\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemRead <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-133\"><a href=\"#cb80-133\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-134\"><a href=\"#cb80-134\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Branch <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb80-135\"><a href=\"#cb80-135\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Bne <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-136\"><a href=\"#cb80-136\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b01</span><span class=\"op\">;</span></span>\n<span id=\"cb80-137\"><a href=\"#cb80-137\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Jump <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-138\"><a href=\"#cb80-138\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_first <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1100000</span><span class=\"op\">;</span>  <span class=\"co\">// b</span></span>\n<span id=\"cb80-139\"><a href=\"#cb80-139\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_second <span class=\"op\">=</span> <span class=\"bn\">7&#39;b0110000</span><span class=\"op\">;</span>  <span class=\"co\">// e</span></span>\n<span id=\"cb80-140\"><a href=\"#cb80-140\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_third <span class=\"op\">=</span> <span class=\"bn\">7&#39;b0001100</span><span class=\"op\">;</span>  <span class=\"co\">// q</span></span>\n<span id=\"cb80-141\"><a href=\"#cb80-141\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fourth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb80-142\"><a href=\"#cb80-142\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fifth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb80-143\"><a href=\"#cb80-143\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span></span>\n<span id=\"cb80-144\"><a href=\"#cb80-144\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">6&#39;b000101</span><span class=\"op\">:</span> <span class=\"kw\">begin</span>  <span class=\"co\">// bne</span></span>\n<span id=\"cb80-145\"><a href=\"#cb80-145\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegDst <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>  <span class=\"co\">// X</span></span>\n<span id=\"cb80-146\"><a href=\"#cb80-146\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-147\"><a href=\"#cb80-147\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>  <span class=\"co\">// X</span></span>\n<span id=\"cb80-148\"><a href=\"#cb80-148\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-149\"><a href=\"#cb80-149\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemRead <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-150\"><a href=\"#cb80-150\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-151\"><a href=\"#cb80-151\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Branch <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb80-152\"><a href=\"#cb80-152\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Bne <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb80-153\"><a href=\"#cb80-153\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b01</span><span class=\"op\">;</span></span>\n<span id=\"cb80-154\"><a href=\"#cb80-154\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Jump <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-155\"><a href=\"#cb80-155\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_first <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1100000</span><span class=\"op\">;</span>  <span class=\"co\">// b</span></span>\n<span id=\"cb80-156\"><a href=\"#cb80-156\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_second <span class=\"op\">=</span> <span class=\"bn\">7&#39;b0101011</span><span class=\"op\">;</span> <span class=\"co\">// n</span></span>\n<span id=\"cb80-157\"><a href=\"#cb80-157\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_third <span class=\"op\">=</span> <span class=\"bn\">7&#39;b0110000</span><span class=\"op\">;</span>  <span class=\"co\">// e</span></span>\n<span id=\"cb80-158\"><a href=\"#cb80-158\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fourth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span> <span class=\"co\">// Blank</span></span>\n<span id=\"cb80-159\"><a href=\"#cb80-159\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fifth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb80-160\"><a href=\"#cb80-160\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span></span>\n<span id=\"cb80-161\"><a href=\"#cb80-161\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"bn\">6&#39;b000010</span><span class=\"op\">:</span> <span class=\"kw\">begin</span>  <span class=\"co\">// j</span></span>\n<span id=\"cb80-162\"><a href=\"#cb80-162\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegDst <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>  <span class=\"co\">// X</span></span>\n<span id=\"cb80-163\"><a href=\"#cb80-163\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-164\"><a href=\"#cb80-164\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>  <span class=\"co\">// X</span></span>\n<span id=\"cb80-165\"><a href=\"#cb80-165\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-166\"><a href=\"#cb80-166\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemRead <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-167\"><a href=\"#cb80-167\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-168\"><a href=\"#cb80-168\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Branch <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-169\"><a href=\"#cb80-169\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Bne <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-170\"><a href=\"#cb80-170\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b01</span><span class=\"op\">;</span></span>\n<span id=\"cb80-171\"><a href=\"#cb80-171\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Jump <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb80-172\"><a href=\"#cb80-172\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_first <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1100001</span><span class=\"op\">;</span>  <span class=\"co\">// J</span></span>\n<span id=\"cb80-173\"><a href=\"#cb80-173\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_second <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span> <span class=\"co\">// Blank</span></span>\n<span id=\"cb80-174\"><a href=\"#cb80-174\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_third <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb80-175\"><a href=\"#cb80-175\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fourth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span> <span class=\"co\">// Blank</span></span>\n<span id=\"cb80-176\"><a href=\"#cb80-176\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fifth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb80-177\"><a href=\"#cb80-177\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span></span>\n<span id=\"cb80-178\"><a href=\"#cb80-178\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">default</span><span class=\"op\">:</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb80-179\"><a href=\"#cb80-179\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"co\">// Default case sets all outputs to zero or disables them, providing a safe default state.</span></span>\n<span id=\"cb80-180\"><a href=\"#cb80-180\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegDst <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-181\"><a href=\"#cb80-181\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUSrc <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-182\"><a href=\"#cb80-182\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemtoReg <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-183\"><a href=\"#cb80-183\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_RegWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-184\"><a href=\"#cb80-184\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemRead <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-185\"><a href=\"#cb80-185\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_MemWrite <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-186\"><a href=\"#cb80-186\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Branch <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-187\"><a href=\"#cb80-187\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Bne <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-188\"><a href=\"#cb80-188\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_ALUOp <span class=\"op\">=</span> <span class=\"bn\">2&#39;b00</span><span class=\"op\">;</span></span>\n<span id=\"cb80-189\"><a href=\"#cb80-189\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_Jump <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb80-190\"><a href=\"#cb80-190\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"co\">// Display all segments off for undefined instructions.</span></span>\n<span id=\"cb80-191\"><a href=\"#cb80-191\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_first <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb80-192\"><a href=\"#cb80-192\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_second <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span> <span class=\"co\">// Blank</span></span>\n<span id=\"cb80-193\"><a href=\"#cb80-193\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_third <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb80-194\"><a href=\"#cb80-194\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fourth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span> <span class=\"co\">// Blank</span></span>\n<span id=\"cb80-195\"><a href=\"#cb80-195\" aria-hidden=\"true\" tabindex=\"-1\"></a>        o_seg_fifth <span class=\"op\">=</span> <span class=\"bn\">7&#39;b1111111</span><span class=\"op\">;</span>  <span class=\"co\">// Blank</span></span>\n<span id=\"cb80-196\"><a href=\"#cb80-196\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"kw\">end</span></span>\n<span id=\"cb80-197\"><a href=\"#cb80-197\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">endcase</span></span>\n<span id=\"cb80-198\"><a href=\"#cb80-198\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">end</span></span>\n<span id=\"cb80-199\"><a href=\"#cb80-199\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb80-200\"><a href=\"#cb80-200\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<p>This code serves as the control logic for a single cycle MIPS\nprocessor, managing the routing and operations of data based on the\ninstruction being executed. It adjusts the path and operation of the\ndata in various parts of the processor according to the opcode of the\ninstruction, with added visual output for debugging or educational\npurposes through a 7-segment display configuration.</p>\n<h3 id=\"testbench\">Testbench</h3>\n<p>Here is the <code>mips_tb.v</code> file with detailed code comments\nexplaining its purpose, functionality, and interactions with other\ncomponents in the MIPS processor:</p>\n<div class=\"sourceCode\" id=\"cb81\"><pre\nclass=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb81-1\"><a href=\"#cb81-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// File: mips_tb.v</span></span>\n<span id=\"cb81-2\"><a href=\"#cb81-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Description: This file contains the testbench for the MIPS processor.</span></span>\n<span id=\"cb81-3\"><a href=\"#cb81-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Purpose: The testbench is used to simulate and verify the functionality of the MIPS processor.</span></span>\n<span id=\"cb81-4\"><a href=\"#cb81-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">//          It instantiates the MIPS processor module, provides clock and reset signals, and</span></span>\n<span id=\"cb81-5\"><a href=\"#cb81-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">//          initializes the data memory and register file. It also displays the output on 7-segment displays.</span></span>\n<span id=\"cb81-6\"><a href=\"#cb81-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ot\">`timescale 1ns / 1ps</span></span>\n<span id=\"cb81-7\"><a href=\"#cb81-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ot\">`define CYCLE_TIME 20</span></span>\n<span id=\"cb81-8\"><a href=\"#cb81-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> mips_tb<span class=\"op\">;</span></span>\n<span id=\"cb81-9\"><a href=\"#cb81-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">reg</span> clk<span class=\"op\">;</span>                 <span class=\"co\">// Clock signal</span></span>\n<span id=\"cb81-10\"><a href=\"#cb81-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">reg</span> rst<span class=\"op\">;</span>                 <span class=\"co\">// Reset signal</span></span>\n<span id=\"cb81-11\"><a href=\"#cb81-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">// Segments for the 7-segment displays</span></span>\n<span id=\"cb81-12\"><a href=\"#cb81-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">wire</span> <span class=\"op\">[</span><span class=\"dv\">6</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> seg_first<span class=\"op\">,</span> seg_second<span class=\"op\">,</span> seg_third<span class=\"op\">,</span> seg_fourth<span class=\"op\">,</span> seg_fifth<span class=\"op\">;</span></span>\n<span id=\"cb81-13\"><a href=\"#cb81-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">integer</span> i<span class=\"op\">;</span>               <span class=\"co\">// Loop variable</span></span>\n<span id=\"cb81-14\"><a href=\"#cb81-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">// Generate clock signal</span></span>\n<span id=\"cb81-15\"><a href=\"#cb81-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">always</span> #<span class=\"op\">(</span><span class=\"ot\">`CYCLE_TIME</span> <span class=\"op\">/</span> <span class=\"dv\">2</span><span class=\"op\">)</span> clk <span class=\"op\">=</span> <span class=\"op\">~</span>clk<span class=\"op\">;</span></span>\n<span id=\"cb81-16\"><a href=\"#cb81-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">// Instantiate the MIPS processor module</span></span>\n<span id=\"cb81-17\"><a href=\"#cb81-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>  mips uut <span class=\"op\">(</span></span>\n<span id=\"cb81-18\"><a href=\"#cb81-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>      .i_Clk<span class=\"op\">(</span>clk<span class=\"op\">),</span></span>\n<span id=\"cb81-19\"><a href=\"#cb81-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>      .i_Rst<span class=\"op\">(</span>rst<span class=\"op\">),</span></span>\n<span id=\"cb81-20\"><a href=\"#cb81-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>      .o_Seg_first<span class=\"op\">(</span>seg_first<span class=\"op\">),</span></span>\n<span id=\"cb81-21\"><a href=\"#cb81-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>      .o_Seg_second<span class=\"op\">(</span>seg_second<span class=\"op\">),</span></span>\n<span id=\"cb81-22\"><a href=\"#cb81-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>      .o_Seg_third<span class=\"op\">(</span>seg_third<span class=\"op\">),</span></span>\n<span id=\"cb81-23\"><a href=\"#cb81-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>      .o_Seg_fourth<span class=\"op\">(</span>seg_fourth<span class=\"op\">),</span></span>\n<span id=\"cb81-24\"><a href=\"#cb81-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>      .o_Seg_fifth<span class=\"op\">(</span>seg_fifth<span class=\"op\">)</span></span>\n<span id=\"cb81-25\"><a href=\"#cb81-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">);</span></span>\n<span id=\"cb81-26\"><a href=\"#cb81-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">// Initialize data memory and register file</span></span>\n<span id=\"cb81-27\"><a href=\"#cb81-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">initial</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb81-28\"><a href=\"#cb81-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Initialize data memory</span></span>\n<span id=\"cb81-29\"><a href=\"#cb81-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">for</span> <span class=\"op\">(</span>i <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span> i <span class=\"op\">&lt;</span> <span class=\"dv\">32</span><span class=\"op\">;</span> i <span class=\"op\">=</span> i <span class=\"op\">+</span> <span class=\"dv\">1</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb81-30\"><a href=\"#cb81-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>      uut.inst_DataMemory.Dmem<span class=\"op\">[</span>i<span class=\"op\">]</span> <span class=\"op\">=</span> <span class=\"bn\">32&#39;b0</span><span class=\"op\">;</span></span>\n<span id=\"cb81-31\"><a href=\"#cb81-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb81-32\"><a href=\"#cb81-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// Initialize register file</span></span>\n<span id=\"cb81-33\"><a href=\"#cb81-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">for</span> <span class=\"op\">(</span>i <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span> i <span class=\"op\">&lt;</span> <span class=\"dv\">32</span><span class=\"op\">;</span> i <span class=\"op\">=</span> i <span class=\"op\">+</span> <span class=\"dv\">1</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb81-34\"><a href=\"#cb81-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>      uut.inst_RegisterFile.RegData<span class=\"op\">[</span>i<span class=\"op\">]</span> <span class=\"op\">=</span> <span class=\"bn\">32&#39;b0</span><span class=\"op\">;</span></span>\n<span id=\"cb81-35\"><a href=\"#cb81-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb81-36\"><a href=\"#cb81-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>    clk <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span>                <span class=\"co\">// Initialize clock signal</span></span>\n<span id=\"cb81-37\"><a href=\"#cb81-37\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb81-38\"><a href=\"#cb81-38\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">initial</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb81-39\"><a href=\"#cb81-39\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bn\">#1800</span> <span class=\"dt\">$finish</span><span class=\"op\">;</span></span>\n<span id=\"cb81-40\"><a href=\"#cb81-40\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">end</span></span>\n<span id=\"cb81-41\"><a href=\"#cb81-41\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<p>Interactions with other components:</p>\n<ul>\n<li>The <code>mips_tb</code> module instantiates the <code>mips</code>\nmodule, which represents the MIPS processor.</li>\n<li>It provides the clock signal (<code>clk</code>) to the\n<code>mips</code> module for synchronization.</li>\n<li>The reset signal (<code>rst</code>) is not used in this testbench\nbut can be used to reset the processor if needed.</li>\n<li>The testbench initializes the data memory\n(<code>inst_DataMemory.Dmem</code>) and register file\n(<code>inst_RegisterFile.RegData</code>) of the <code>mips</code> module\nto zero.</li>\n<li>The 7-segment display outputs (<code>seg_first</code>,\n<code>seg_second</code>, <code>seg_third</code>,\n<code>seg_fourth</code>, <code>seg_fifth</code>) from the\n<code>mips</code> module are connected to the testbench for monitoring\npurposes.</li>\n</ul>\n<p>The <code>mips_tb</code> module serves as a testbench to simulate and\nverify the functionality of the MIPS processor.</p>\n<p>It provides the necessary inputs (clock and reset) and initializes\nthe memory and registers. The testbench can be modified to apply\ndifferent test cases through loading different binary converted assembly\nfiles and allows one to monitor the processor’s behavior through the\n7-segment display outputs.</p>\n<h1 id=\"conclusion-1\">Conclusion</h1>\n<p>Throughout this project, I gained valuable experience in designing and\nimplementing a processor using Verilog. I further learned about the different\nstages of the processor pipeline, including instruction fetch, decode,\nexecute, memory access, and write-back. I also gained a deeper\nunderstanding of the MIPS instruction set architecture and how\ninstructions are encoded and executed.</p>\n<p>Implementing the processor in Verilog allowed me to apply my\nknowledge of digital design and hardware description languages. I\nutilized various Verilog constructs, such as modules, always blocks, and\ncase statements, to model the behavior of the processor components. I\nalso learned about the importance of proper synchronization and timing\nin hardware design.</p>\n<p>To ensure the correctness of the processor implementation, I\ndeveloped test-benches in Verilog to verify the functionality of\nindividual components as well as the overall processor. The test-benches\nallowed me to simulate the processor’s behavior and debug any issues\nthat arose during the development process.</p>\n<p>In addition to the Verilog implementation, I also compared my experience with writing a similar single-cycle processor\nin VHDL. This comparison provided insights into the\ndifferences and similarities between the two hardware description\nlanguages. While Verilog offers a more concise and flexible syntax, VHDL\nprovides stronger typing and more explicit component instantiation. Both\nlanguages have their strengths and weaknesses, and the choice between\nthem often depends on the specific project requirements and personal\npreference.</p>\n</body>\n\n\n",
	Slug:            "verilog-single-cycle-mips",
	TagSlugs:        []string{"hdl/verilog", "edu/iastate/cpre281"},
	Tags:            []*assets.Tag{&TagHdlVerilog, &TagEduIastateCpre281},
	Title:           "Verilog Single Cycle MIPS",
	UpdatedAt:       time.Date(2025, time.April, 15, 5, 32, 18, 0, time.UTC),
	X:               -0.02303759774898162,
	Y:               0.017909378899335915,
	Z:               -0.18294146409600515,
}}
var ProjectGenstruct = assets.Project{Embedded: assets.Embedded{
	BannerPath:      "projects/genstruct-logo.webp",
	Content:         "<h1 id=\"genstruct\"><a class=\"anchor permalink p-4\" href=\"#genstruct\">#</a> genstruct</h1>\n<h2 id=\"overview\"><a class=\"anchor permalink p-4\" href=\"#overview\">#</a> Overview</h2>\n<p>Golang library for generating static structs, with a focus on performance.</p>\n<p>Public Docs: <a href=\"https://conneroisu.github.io/genstruct/\">https://conneroisu.github.io/genstruct/</a><br>\nPkg Docs: <a href=\"https://godoc.org/github.com/conneroisu/genstruct\">https://godoc.org/github.com/conneroisu/genstruct</a></p>\n<h2 id=\"the-problem\"><a class=\"anchor permalink p-4\" href=\"#the-problem\">#</a> The Problem</h2>\n<p>Static data in Go applications often presents several challenges:</p>\n<ol>\n<li><strong>Runtime Overhead</strong>: Loading data from external sources (JSON, YAML, databases) at runtime adds latency and complexity</li>\n<li><strong>Type Safety</strong>: External data formats lack compile-time type checking, leading to potential runtime errors</li>\n<li><strong>IDE Support</strong>: External data doesn't benefit from IDE features like autocompletion, refactoring, and documentation</li>\n<li><strong>Testing</strong>: External data makes tests more complex and harder to reason about</li>\n<li><strong>Deployment</strong>: External data files need to be packaged and deployed alongside your application</li>\n<li><strong>Relationships</strong>: Managing relationships between different data types becomes manual and error-prone</li>\n</ol>\n<h2 id=\"the-solution\"><a class=\"anchor permalink p-4\" href=\"#the-solution\">#</a> The Solution</h2>\n<p>Genstruct addresses these challenges by moving data from external sources into Go code:</p>\n<h3 id=\"compile-time-verification\"><a class=\"anchor permalink p-4\" href=\"#compile-time-verification\">#</a> Compile-Time Verification</h3>\n<p>By generating Go code, all data is verified at compile-time:</p>\n<ul>\n<li>Type errors are caught before your application runs</li>\n<li>Syntax or format errors become impossible</li>\n<li>Missing or malformed data is immediately apparent</li>\n</ul>\n<h3 id=\"performance-benefits\"><a class=\"anchor permalink p-4\" href=\"#performance-benefits\">#</a> Performance Benefits</h3>\n<p>Static data compilation provides significant performance advantages:</p>\n<ul>\n<li>No runtime loading or parsing overhead</li>\n<li>Zero allocation overhead compared to unmarshaling JSON/YAML</li>\n<li>Instant access to data without initialization code</li>\n<li>Reduced memory usage (no map-based intermediate structures)</li>\n</ul>\n<h3 id=\"developer-experience\"><a class=\"anchor permalink p-4\" href=\"#developer-experience\">#</a> Developer Experience</h3>\n<p>The development experience is dramatically improved:</p>\n<ul>\n<li>Full IDE support with autocompletion</li>\n<li>Jump-to-definition for data references</li>\n<li>Inline documentation for data structures</li>\n<li>Simplified refactoring and renaming</li>\n<li>Consistent code structure for both logic and data</li>\n</ul>\n<h3 id=\"relationships-between-data\"><a class=\"anchor permalink p-4\" href=\"#relationships-between-data\">#</a> Relationships Between Data</h3>\n<p>With the struct reference embedding feature:</p>\n<ul>\n<li>Relationships between different data types are automatically managed</li>\n<li>References maintain type safety and refactoring support</li>\n<li>Data consistency is enforced at compile time</li>\n<li>Changes to reference fields are tracked through the type system</li>\n</ul>\n<h2 id=\"when-to-use-genstruct\"><a class=\"anchor permalink p-4\" href=\"#when-to-use-genstruct\">#</a> When to Use Genstruct</h2>\n<p>Genstruct is ideal for applications that have:</p>\n<ol>\n<li><strong>Reference Data</strong>: Lists of countries, categories, permissions, etc.</li>\n<li><strong>Configuration Constants</strong>: Feature flags, limits, defaults</li>\n<li><strong>Enumerated Types</strong>: Status values, types, classifications</li>\n<li><strong>Content Libraries</strong>: Help content, error messages, documentation</li>\n<li><strong>Related Data</strong>: Blog posts with tags, products with categories, users with roles</li>\n</ol>\n<h2 id=\"when-not-to-use-genstruct\"><a class=\"anchor permalink p-4\" href=\"#when-not-to-use-genstruct\">#</a> When Not to Use Genstruct</h2>\n<p>Genstruct may not be the best solution for:</p>\n<ol>\n<li><strong>Highly Dynamic Data</strong>: Data that changes frequently at runtime</li>\n<li><strong>Extremely Large Datasets</strong>: Datasets with thousands of entries (though this depends on usage patterns)</li>\n<li><strong>User-Generated Content</strong>: Content created and modified by end-users</li>\n<li><strong>Data Requiring External Editing</strong>: When non-developers need to frequently edit the data</li>\n</ol>\n<h2 id=\"real-world-use-cases\"><a class=\"anchor permalink p-4\" href=\"#real-world-use-cases\">#</a> Real-World Use Cases</h2>\n<h3 id=\"content-management-systems\"><a class=\"anchor permalink p-4\" href=\"#content-management-systems\">#</a> Content Management Systems</h3>\n<p>Pre-generate content structures while allowing runtime content to reference these structures:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Generated site sections\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">SectionNews</span> = <span style=\"color:#a6e22e\">Section</span>{<span style=\"color:#f92672\">...</span>}\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">SectionBlog</span> = <span style=\"color:#a6e22e\">Section</span>{<span style=\"color:#f92672\">...</span>}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Runtime content referencing static structures\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#a6e22e\">content</span>.<span style=\"color:#a6e22e\">Section</span> = <span style=\"color:#a6e22e\">SectionNews</span>\n</span></span></code></pre><h3 id=\"e-commerce-product-catalogs\"><a class=\"anchor permalink p-4\" href=\"#e-commerce-product-catalogs\">#</a> E-commerce Product Catalogs</h3>\n<p>Define product categories, attributes, and relationships statically:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Access static product categories\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">for</span> <span style=\"color:#a6e22e\">product</span> <span style=\"color:#a6e22e\">in</span> <span style=\"color:#a6e22e\">dynamicProducts</span> {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> <span style=\"color:#a6e22e\">product</span>.<span style=\"color:#a6e22e\">CategorySlug</span> <span style=\"color:#f92672\">==</span> <span style=\"color:#a6e22e\">ProductCategorySportwear</span>.<span style=\"color:#a6e22e\">Slug</span> {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#75715e\">// Process sporting goods\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    }\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre><h3 id=\"api-specifications\"><a class=\"anchor permalink p-4\" href=\"#api-specifications\">#</a> API Specifications</h3>\n<p>Generate API endpoints, parameters, and response types:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Check if an endpoint requires authentication\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">if</span> <span style=\"color:#a6e22e\">APIEndpointUserProfile</span>.<span style=\"color:#a6e22e\">RequiresAuth</span> {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// Perform authentication\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>}\n</span></span></code></pre><h3 id=\"internationalization-and-localization\"><a class=\"anchor permalink p-4\" href=\"#internationalization-and-localization\">#</a> Internationalization and Localization</h3>\n<p>Generate language packs and translations:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Access translations\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#a6e22e\">message</span> <span style=\"color:#f92672\">:=</span> <span style=\"color:#a6e22e\">LocaleEnUs</span>.<span style=\"color:#a6e22e\">Errors</span>.<span style=\"color:#a6e22e\">NotFound</span>\n</span></span></code></pre><h2 id=\"conclusion\"><a class=\"anchor permalink p-4\" href=\"#conclusion\">#</a> Conclusion</h2>\n<p>Genstruct transforms the way you work with static data in Go by bringing it into the type system, improving performance, developer experience, and reliability. By generating Go code from your data, you get the best of both worlds: the flexibility of external data formats with the robustness and safety of the Go compiler.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 10, 0, time.UTC),
	Description:     "Golang library for generating static structs, with a focus on performance.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: genstruct\naliases:\n  - genstruct\ntags:\n  - programming-language/go\n  - ideologies/open-source\nbanner_path: projects/genstruct-logo.webp\ncreated_at: 2025-03-27T14:13:10.000-06:00\ndescription: Golang library for generating static structs, with a focus on performance.\ntitle: genstruct\nupdated_at: 2025-04-14T06:45:48.000-06:00\n---\n\n# genstruct\n\n## Overview\n\nGolang library for generating static structs, with a focus on performance.\n\nPublic Docs: [https://conneroisu.github.io/genstruct/](https://conneroisu.github.io/genstruct/)\nPkg Docs: [https://godoc.org/github.com/conneroisu/genstruct](https://godoc.org/github.com/conneroisu/genstruct)\n\n## The Problem\n\nStatic data in Go applications often presents several challenges:\n\n1. **Runtime Overhead**: Loading data from external sources (JSON, YAML, databases) at runtime adds latency and complexity\n2. **Type Safety**: External data formats lack compile-time type checking, leading to potential runtime errors\n3. **IDE Support**: External data doesn't benefit from IDE features like autocompletion, refactoring, and documentation\n4. **Testing**: External data makes tests more complex and harder to reason about\n5. **Deployment**: External data files need to be packaged and deployed alongside your application\n6. **Relationships**: Managing relationships between different data types becomes manual and error-prone\n\n## The Solution\n\nGenstruct addresses these challenges by moving data from external sources into Go code:\n\n### Compile-Time Verification\n\nBy generating Go code, all data is verified at compile-time:\n\n- Type errors are caught before your application runs\n- Syntax or format errors become impossible\n- Missing or malformed data is immediately apparent\n\n### Performance Benefits\n\nStatic data compilation provides significant performance advantages:\n\n- No runtime loading or parsing overhead\n- Zero allocation overhead compared to unmarshaling JSON/YAML\n- Instant access to data without initialization code\n- Reduced memory usage (no map-based intermediate structures)\n\n### Developer Experience\n\nThe development experience is dramatically improved:\n\n- Full IDE support with autocompletion\n- Jump-to-definition for data references\n- Inline documentation for data structures\n- Simplified refactoring and renaming\n- Consistent code structure for both logic and data\n\n### Relationships Between Data\n\nWith the struct reference embedding feature:\n\n- Relationships between different data types are automatically managed\n- References maintain type safety and refactoring support\n- Data consistency is enforced at compile time\n- Changes to reference fields are tracked through the type system\n\n## When to Use Genstruct\n\nGenstruct is ideal for applications that have:\n\n1. **Reference Data**: Lists of countries, categories, permissions, etc.\n2. **Configuration Constants**: Feature flags, limits, defaults\n3. **Enumerated Types**: Status values, types, classifications\n4. **Content Libraries**: Help content, error messages, documentation\n5. **Related Data**: Blog posts with tags, products with categories, users with roles\n\n## When Not to Use Genstruct\n\nGenstruct may not be the best solution for:\n\n1. **Highly Dynamic Data**: Data that changes frequently at runtime\n2. **Extremely Large Datasets**: Datasets with thousands of entries (though this depends on usage patterns)\n3. **User-Generated Content**: Content created and modified by end-users\n4. **Data Requiring External Editing**: When non-developers need to frequently edit the data\n\n## Real-World Use Cases\n\n### Content Management Systems\n\nPre-generate content structures while allowing runtime content to reference these structures:\n\n```go\n// Generated site sections\nvar SectionNews = Section{...}\nvar SectionBlog = Section{...}\n\n// Runtime content referencing static structures\ncontent.Section = SectionNews\n```\n\n### E-commerce Product Catalogs\n\nDefine product categories, attributes, and relationships statically:\n\n```go\n// Access static product categories\nfor product in dynamicProducts {\n    if product.CategorySlug == ProductCategorySportwear.Slug {\n        // Process sporting goods\n    }\n}\n```\n\n### API Specifications\n\nGenerate API endpoints, parameters, and response types:\n\n```go\n// Check if an endpoint requires authentication\nif APIEndpointUserProfile.RequiresAuth {\n    // Perform authentication\n}\n```\n\n### Internationalization and Localization\n\nGenerate language packs and translations:\n\n```go\n// Access translations\nmessage := LocaleEnUs.Errors.NotFound\n```\n\n## Conclusion\n\nGenstruct transforms the way you work with static data in Go by bringing it into the type system, improving performance, developer experience, and reliability. By generating Go code from your data, you get the best of both worlds: the flexibility of external data formats with the robustness and safety of the Go compiler.\n\n",
	Slug:            "genstruct",
	TagSlugs:        []string{"programming-language/go", "ideologies/open-source"},
	Tags:            []*assets.Tag{&TagProgrammingLanguageGo, &TagIdeologiesOpenSource},
	Title:           "genstruct",
	UpdatedAt:       time.Date(2025, time.April, 14, 6, 45, 48, 0, time.UTC),
	X:               -0.026619301030948686,
	Y:               -0.3884387202668452,
	Z:               0.06507603535129142,
}}
var ProjectLibsqlz = assets.Project{Embedded: assets.Embedded{
	BannerPath:      "projects/libsqlz.webp",
	Content:         "<h1 id=\"libsqlz\"><a class=\"anchor permalink p-4\" href=\"#libsqlz\">#</a> libsqlz</h1>\n<p>Navigating the intricate landscape of database management, I frequently encountered a recurring dilemma: how to achieve optimal performance without sacrificing type safety. Traditional Object-Relational Mapping (ORM) tools, while offering convenience, often introduced runtime overhead and obscured the direct interaction with the database schema. As a developer deeply immersed in the Zig programming language, I envisioned a solution that would seamlessly integrate Zig's compile-time capabilities with efficient database operations. This vision culminated in the creation of <strong>libsqlz</strong>, a compile-time ORM-ish library tailored for Zig developers who possess a comprehensive understanding of their database schemas.</p>\n<h2 id=\"the-inspiration-behind-libsqlz\"><a class=\"anchor permalink p-4\" href=\"#the-inspiration-behind-libsqlz\">#</a> The Inspiration Behind libsqlz</h2>\n<p>The motivation for developing libsqlz stemmed from the challenges I faced when working with databases in Zig. Existing solutions either lacked the performance I desired or failed to leverage the powerful compile-time features that Zig offers. I sought to create a library that would allow developers to define their database schemas at compile time, ensuring type safety and eliminating the need for runtime introspection. By doing so, I aimed to provide a tool that aligns with Zig's philosophy of simplicity and performance.</p>\n<h2 id=\"introducing-libsqlz\"><a class=\"anchor permalink p-4\" href=\"#introducing-libsqlz\">#</a> Introducing libsqlz</h2>\n<p>libsqlz is designed for developers who have a clear understanding of their database schema during the development phase. By utilizing Zig's compile-time execution, libsqlz enables the definition and manipulation of database schemas directly within Zig code. This approach eliminates the need for runtime schema parsing, thereby enhancing performance and ensuring type safety.</p>\n<h2 id=\"key-features-of-libsqlz\"><a class=\"anchor permalink p-4\" href=\"#key-features-of-libsqlz\">#</a> Key Features of libsqlz</h2>\n<ul>\n<li>\n<p><strong>Compile-Time Schema Definition:</strong> Define your database schema at compile time, ensuring type safety and reducing the likelihood of runtime errors.</p>\n</li>\n<li>\n<p><strong>Seamless Integration with Zig's Build System:</strong> Integrate libsqlz effortlessly into your Zig projects by incorporating it into your <code>build.zig</code> file.</p>\n</li>\n<li>\n<p><strong>Performance-Oriented Design:</strong> By eliminating runtime schema parsing, libsqlz offers improved performance, making it suitable for high-performance applications.</p>\n</li>\n</ul>\n<h2 id=\"getting-started-with-libsqlz\"><a class=\"anchor permalink p-4\" href=\"#getting-started-with-libsqlz\">#</a> Getting Started with libsqlz</h2>\n<p>Integrating libsqlz into your Zig project is straightforward. Begin by adding it as a dependency in your <code>build.zig</code> file:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> std <span style=\"color:#f92672\">=</span> @import(<span style=\"color:#e6db74\">&#34;std&#34;</span>);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">pub</span> <span style=\"color:#66d9ef\">fn</span> build(b<span style=\"color:#f92672\">:</span> <span style=\"color:#f92672\">*</span>std.Build) <span style=\"color:#66d9ef\">void</span> {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> target <span style=\"color:#f92672\">=</span> b.standardTargetOptions(.{});\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> optimize <span style=\"color:#f92672\">=</span> b.standardOptimizeOption(.{});\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// Your executable or library declaration...\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> libsqlz <span style=\"color:#f92672\">=</span> b.dependency(<span style=\"color:#e6db74\">&#34;libsqlz&#34;</span>, .{\n</span></span><span style=\"display:flex;\"><span>        .target <span style=\"color:#f92672\">=</span> target,\n</span></span><span style=\"display:flex;\"><span>        .optimize <span style=\"color:#f92672\">=</span> optimize,\n</span></span><span style=\"display:flex;\"><span>    });\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// Further build configurations...\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>}\n</span></span></code></pre><p>This setup ensures that libsqlz is seamlessly integrated into your Zig project's build process.</p>\n<h2 id=\"exploring-libsqlz-through-examples\"><a class=\"anchor permalink p-4\" href=\"#exploring-libsqlz-through-examples\">#</a> Exploring libsqlz Through Examples</h2>\n<p>Consider a scenario where you have a <code>users</code> table in your database. With libsqlz, you can define a corresponding Zig struct at compile time, ensuring that your code remains type-safe and closely aligned with your database schema.</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> libsqlz <span style=\"color:#f92672\">=</span> @import(<span style=\"color:#e6db74\">&#34;libsqlz&#34;</span>);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> User <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">struct</span> {\n</span></span><span style=\"display:flex;\"><span>    id<span style=\"color:#f92672\">:</span> <span style=\"color:#66d9ef\">i32</span>,\n</span></span><span style=\"display:flex;\"><span>    name<span style=\"color:#f92672\">:</span> []<span style=\"color:#66d9ef\">const</span> <span style=\"color:#66d9ef\">u8</span>,\n</span></span><span style=\"display:flex;\"><span>    email<span style=\"color:#f92672\">:</span> []<span style=\"color:#66d9ef\">const</span> <span style=\"color:#66d9ef\">u8</span>,\n</span></span><span style=\"display:flex;\"><span>};\n</span></span></code></pre><p>This approach not only enhances type safety but also allows for compile-time checks, reducing the likelihood of runtime errors.</p>\n<h2 id=\"the-journey-ahead\"><a class=\"anchor permalink p-4\" href=\"#the-journey-ahead\">#</a> The Journey Ahead</h2>\n<p>Developing libsqlz has been a journey of exploration and innovation. As I continue to learn zig I am sure to refine its features and expand its capabilities, I invite fellow Zig developers to explore, contribute, and provide feedback. Together, we can create a tool that embodies the principles of performance, safety, and simplicity that Zig stands for.</p>\n<p>For more information, detailed documentation, and contribution guidelines, visit the <a href=\"https://github.com/conneroisu/libsqlz\">libsqlz GitHub repository</a>. Let's collaborate to transform the way we interact with databases in Zig, making the process more efficient and enjoyable.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 10, 0, time.UTC),
	Description:     "libsqlz is a libsql sdk library written in Zig.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: libsqlz\naliases:\n  - libsqlz\ntags:\n  - programming-language/zig\n  - programming-language/c\n  - programming-language/rust\nbanner_path: projects/libsqlz.webp\ncreated_at: 2025-03-27T14:13:10.000-06:00\ndescription: libsqlz is a libsql sdk library written in Zig.\ntitle: libsqlz\nupdated_at: 2025-04-12T12:17:11.000-06:00\n---\n\n# libsqlz\n\nNavigating the intricate landscape of database management, I frequently encountered a recurring dilemma: how to achieve optimal performance without sacrificing type safety. Traditional Object-Relational Mapping (ORM) tools, while offering convenience, often introduced runtime overhead and obscured the direct interaction with the database schema. As a developer deeply immersed in the Zig programming language, I envisioned a solution that would seamlessly integrate Zig's compile-time capabilities with efficient database operations. This vision culminated in the creation of **libsqlz**, a compile-time ORM-ish library tailored for Zig developers who possess a comprehensive understanding of their database schemas.\n\n## The Inspiration Behind libsqlz\n\nThe motivation for developing libsqlz stemmed from the challenges I faced when working with databases in Zig. Existing solutions either lacked the performance I desired or failed to leverage the powerful compile-time features that Zig offers. I sought to create a library that would allow developers to define their database schemas at compile time, ensuring type safety and eliminating the need for runtime introspection. By doing so, I aimed to provide a tool that aligns with Zig's philosophy of simplicity and performance.\n\n## Introducing libsqlz\n\nlibsqlz is designed for developers who have a clear understanding of their database schema during the development phase. By utilizing Zig's compile-time execution, libsqlz enables the definition and manipulation of database schemas directly within Zig code. This approach eliminates the need for runtime schema parsing, thereby enhancing performance and ensuring type safety.\n\n## Key Features of libsqlz\n\n- **Compile-Time Schema Definition:** Define your database schema at compile time, ensuring type safety and reducing the likelihood of runtime errors.\n\n- **Seamless Integration with Zig's Build System:** Integrate libsqlz effortlessly into your Zig projects by incorporating it into your `build.zig` file.\n\n- **Performance-Oriented Design:** By eliminating runtime schema parsing, libsqlz offers improved performance, making it suitable for high-performance applications.\n\n## Getting Started with libsqlz\n\nIntegrating libsqlz into your Zig project is straightforward. Begin by adding it as a dependency in your `build.zig` file:\n\n```zig\nconst std = @import(\"std\");\n\npub fn build(b: *std.Build) void {\n    const target = b.standardTargetOptions(.{});\n    const optimize = b.standardOptimizeOption(.{});\n\n    // Your executable or library declaration...\n\n    const libsqlz = b.dependency(\"libsqlz\", .{\n        .target = target,\n        .optimize = optimize,\n    });\n\n    // Further build configurations...\n}\n```\n\nThis setup ensures that libsqlz is seamlessly integrated into your Zig project's build process.\n\n## Exploring libsqlz Through Examples\n\nConsider a scenario where you have a `users` table in your database. With libsqlz, you can define a corresponding Zig struct at compile time, ensuring that your code remains type-safe and closely aligned with your database schema.\n\n```zig\nconst libsqlz = @import(\"libsqlz\");\n\nconst User = struct {\n    id: i32,\n    name: []const u8,\n    email: []const u8,\n};\n```\n\nThis approach not only enhances type safety but also allows for compile-time checks, reducing the likelihood of runtime errors.\n\n## The Journey Ahead\n\nDeveloping libsqlz has been a journey of exploration and innovation. As I continue to learn zig I am sure to refine its features and expand its capabilities, I invite fellow Zig developers to explore, contribute, and provide feedback. Together, we can create a tool that embodies the principles of performance, safety, and simplicity that Zig stands for.\n\nFor more information, detailed documentation, and contribution guidelines, visit the [libsqlz GitHub repository](https://github.com/conneroisu/libsqlz). Let's collaborate to transform the way we interact with databases in Zig, making the process more efficient and enjoyable.\n",
	Slug:            "libsqlz",
	TagSlugs:        []string{"programming-language/zig", "programming-language/c", "programming-language/rust"},
	Tags:            []*assets.Tag{&TagProgrammingLanguageZig, &TagProgrammingLanguageC, &TagProgrammingLanguageRust},
	Title:           "libsqlz",
	UpdatedAt:       time.Date(2025, time.April, 12, 12, 17, 11, 0, time.UTC),
	X:               -0.7468859857042967,
	Y:               -0.06137278375515176,
	Z:               -0.33496975630958836,
}}
var ProjectSeltabl = assets.Project{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<p>Embarking on a journey through the intricate world of web data extraction, I often found myself entangled in the complexities of parsing HTML tables. The repetitive tasks, the cumbersome code, and the constant battle to maintain efficiency were challenges I knew many developers faced. Determined to find a solution, I channeled my passion for coding and problem-solving into creating <strong>seltabl</strong>, a Go library designed to transform the way we interact with HTML tables.</p>\n<h2 id=\"the-genesis-of-seltabl\"><a class=\"anchor permalink p-4\" href=\"#the-genesis-of-seltabl\">#</a> The Genesis of seltabl</h2>\n<p>The inception of seltabl was driven by a simple yet profound realization: extracting data from HTML tables shouldn't be a herculean task. As a senior in Electrical Engineering and Computer Science at Iowa State University, I had encountered numerous scenarios where the need for a streamlined, efficient method to parse HTML tables was evident. Leveraging the power of Go and inspired by the capabilities of the goquery library, I set out to develop a tool that would not only simplify the process but also offer configurability and robust developer support.</p>\n<h2 id=\"unveiling-seltabl\"><a class=\"anchor permalink p-4\" href=\"#unveiling-seltabl\">#</a> Unveiling seltabl</h2>\n<p>At its core, seltabl is a Go library accompanied by a command-line interface (CLI) and a language server. Its primary function is to parse HTML sequences into structs, making it particularly adept at handling HTML tables. However, its versatility allows it to be employed for any HTML sequence parsing tasks. By enabling data binding to structs and providing a dynamic way to define table schemas, seltabl empowers developers to interact with web data more intuitively and efficiently.</p>\n<h2 id=\"key-features\"><a class=\"anchor permalink p-4\" href=\"#key-features\">#</a> Key Features</h2>\n<ul>\n<li><strong>Configurable Parsing:</strong> seltabl allows for customizable parsing configurations, enabling developers to tailor the extraction process to their specific needs.</li>\n<li><strong>Goquery Integration:</strong> By leveraging goquery, seltabl offers a familiar and powerful selection syntax, akin to jQuery, making it accessible for those already acquainted with CSS selectors.</li>\n<li><strong>Developer Tooling:</strong> The inclusion of a language server and CLI utilities enhances the development experience, providing tools for code generation, linting, and testing.</li>\n</ul>\n<h2 id=\"getting-started-with-seltabl\"><a class=\"anchor permalink p-4\" href=\"#getting-started-with-seltabl\">#</a> Getting Started with seltabl</h2>\n<p>Integrating seltabl into your Go project is straightforward. Begin by installing the package:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>go get github.com/conneroisu/seltabl\n</span></span></code></pre><p>For access to the CLI and language server functionalities, install the command-line tool:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>go install github.com/conneroisu/seltabl/tools/seltabls@latest\n</span></span></code></pre><h2 id=\"a-glimpse-into-usage\"><a class=\"anchor permalink p-4\" href=\"#a-glimpse-into-usage\">#</a> A Glimpse into Usage</h2>\n<p>Imagine you have an HTML table and you wish to extract its data into Go structs. With seltabl, this task becomes seamless. Here's a basic example:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#f92672\">package</span> <span style=\"color:#a6e22e\">main</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#f92672\">import</span> (\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#e6db74\">&#34;fmt&#34;</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#e6db74\">&#34;github.com/conneroisu/seltabl&#34;</span>\n</span></span><span style=\"display:flex;\"><span>)\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">type</span> <span style=\"color:#a6e22e\">TableRow</span> <span style=\"color:#66d9ef\">struct</span> {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">Column1</span> <span style=\"color:#66d9ef\">string</span> <span style=\"color:#e6db74\">`json:&#34;column1&#34; hSel:&#34;tr:nth-child(1) td:nth-child(1)&#34; dSel:&#34;tr td:nth-child(1)&#34; ctl:&#34;text&#34;`</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">Column2</span> <span style=\"color:#66d9ef\">string</span> <span style=\"color:#e6db74\">`json:&#34;column2&#34; hSel:&#34;tr:nth-child(1) td:nth-child(2)&#34; dSel:&#34;tr td:nth-child(2)&#34; ctl:&#34;text&#34;`</span>\n</span></span><span style=\"display:flex;\"><span>}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">func</span> <span style=\"color:#a6e22e\">main</span>() {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">htmlContent</span> <span style=\"color:#f92672\">:=</span> <span style=\"color:#e6db74\">`\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">    &lt;table&gt;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">        &lt;tr&gt;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">            &lt;td&gt;Data1&lt;/td&gt;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">            &lt;td&gt;Data2&lt;/td&gt;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">        &lt;/tr&gt;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">        &lt;tr&gt;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">            &lt;td&gt;Data3&lt;/td&gt;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">            &lt;td&gt;Data4&lt;/td&gt;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">        &lt;/tr&gt;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">    &lt;/table&gt;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">    `</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">rows</span>, <span style=\"color:#a6e22e\">err</span> <span style=\"color:#f92672\">:=</span> <span style=\"color:#a6e22e\">seltabl</span>.<span style=\"color:#a6e22e\">NewFromString</span>[<span style=\"color:#a6e22e\">TableRow</span>](<span style=\"color:#a6e22e\">htmlContent</span>)\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> <span style=\"color:#a6e22e\">err</span> <span style=\"color:#f92672\">!=</span> <span style=\"color:#66d9ef\">nil</span> {\n</span></span><span style=\"display:flex;\"><span>        panic(<span style=\"color:#a6e22e\">fmt</span>.<span style=\"color:#a6e22e\">Errorf</span>(<span style=\"color:#e6db74\">&#34;failed to parse HTML: %w&#34;</span>, <span style=\"color:#a6e22e\">err</span>))\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">for</span> <span style=\"color:#a6e22e\">_</span>, <span style=\"color:#a6e22e\">row</span> <span style=\"color:#f92672\">:=</span> <span style=\"color:#66d9ef\">range</span> <span style=\"color:#a6e22e\">rows</span> {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">fmt</span>.<span style=\"color:#a6e22e\">Printf</span>(<span style=\"color:#e6db74\">&#34;%+v\\n&#34;</span>, <span style=\"color:#a6e22e\">row</span>)\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre><p>This snippet demonstrates how seltabl can be employed to parse an HTML table, extracting its contents into a slice of <code>TableRow</code> structs. The use of struct tags like <code>hSel</code>, <code>dSel</code>, and <code>ctl</code> allows for precise selection and extraction of data, showcasing the library's configurability.</p>\n<h2 id=\"the-road-ahead\"><a class=\"anchor permalink p-4\" href=\"#the-road-ahead\">#</a> The Road Ahead</h2>\n<p>The development of seltabl has been a journey of learning, innovation, and community engagement. As I continue to refine and expand its capabilities, I invite fellow developers to explore, contribute, and provide feedback. Together, we can make web data extraction in Go not just a necessity, but a delight.</p>\n<p>For more information, detailed documentation, and contribution guidelines, visit the <a href=\"https://github.com/conneroisu/seltabl\">seltabl GitHub repository</a>. Let's embark on this journey together, transforming challenges into opportunities and code into solutions.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 19, 12, 39, 0, time.UTC),
	Description:     "A Go library for extracting data from HTML tables.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: seltabl\naliases: []\ntags:\n  - programming-language/go\n  - programming-language/html\ncreated_at: 2025-03-28T19:12:39.000-06:00\ndescription: A Go library for extracting data from HTML tables.\ntitle: seltabl\nupdated_at: 2025-03-28T20:07:30.000-06:00\n---\n\nEmbarking on a journey through the intricate world of web data extraction, I often found myself entangled in the complexities of parsing HTML tables. The repetitive tasks, the cumbersome code, and the constant battle to maintain efficiency were challenges I knew many developers faced. Determined to find a solution, I channeled my passion for coding and problem-solving into creating **seltabl**, a Go library designed to transform the way we interact with HTML tables.\n\n## The Genesis of seltabl\n\nThe inception of seltabl was driven by a simple yet profound realization: extracting data from HTML tables shouldn't be a herculean task. As a senior in Electrical Engineering and Computer Science at Iowa State University, I had encountered numerous scenarios where the need for a streamlined, efficient method to parse HTML tables was evident. Leveraging the power of Go and inspired by the capabilities of the goquery library, I set out to develop a tool that would not only simplify the process but also offer configurability and robust developer support.\n\n## Unveiling seltabl\n\nAt its core, seltabl is a Go library accompanied by a command-line interface (CLI) and a language server. Its primary function is to parse HTML sequences into structs, making it particularly adept at handling HTML tables. However, its versatility allows it to be employed for any HTML sequence parsing tasks. By enabling data binding to structs and providing a dynamic way to define table schemas, seltabl empowers developers to interact with web data more intuitively and efficiently.\n\n## Key Features\n\n- **Configurable Parsing:** seltabl allows for customizable parsing configurations, enabling developers to tailor the extraction process to their specific needs.\n- **Goquery Integration:** By leveraging goquery, seltabl offers a familiar and powerful selection syntax, akin to jQuery, making it accessible for those already acquainted with CSS selectors.\n- **Developer Tooling:** The inclusion of a language server and CLI utilities enhances the development experience, providing tools for code generation, linting, and testing.\n\n## Getting Started with seltabl\n\nIntegrating seltabl into your Go project is straightforward. Begin by installing the package:\n\n```bash\ngo get github.com/conneroisu/seltabl\n```\n\nFor access to the CLI and language server functionalities, install the command-line tool:\n\n```bash\ngo install github.com/conneroisu/seltabl/tools/seltabls@latest\n```\n\n## A Glimpse into Usage\n\nImagine you have an HTML table and you wish to extract its data into Go structs. With seltabl, this task becomes seamless. Here's a basic example:\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/conneroisu/seltabl\"\n)\n\ntype TableRow struct {\n    Column1 string `json:\"column1\" hSel:\"tr:nth-child(1) td:nth-child(1)\" dSel:\"tr td:nth-child(1)\" ctl:\"text\"`\n    Column2 string `json:\"column2\" hSel:\"tr:nth-child(1) td:nth-child(2)\" dSel:\"tr td:nth-child(2)\" ctl:\"text\"`\n}\n\nfunc main() {\n    htmlContent := `\n    <table>\n        <tr>\n            <td>Data1</td>\n            <td>Data2</td>\n        </tr>\n        <tr>\n            <td>Data3</td>\n            <td>Data4</td>\n        </tr>\n    </table>\n    `\n    rows, err := seltabl.NewFromString[TableRow](htmlContent)\n    if err != nil {\n        panic(fmt.Errorf(\"failed to parse HTML: %w\", err))\n    }\n    for _, row := range rows {\n        fmt.Printf(\"%+v\\n\", row)\n    }\n}\n```\n\nThis snippet demonstrates how seltabl can be employed to parse an HTML table, extracting its contents into a slice of `TableRow` structs. The use of struct tags like `hSel`, `dSel`, and `ctl` allows for precise selection and extraction of data, showcasing the library's configurability.\n\n## The Road Ahead\n\nThe development of seltabl has been a journey of learning, innovation, and community engagement. As I continue to refine and expand its capabilities, I invite fellow developers to explore, contribute, and provide feedback. Together, we can make web data extraction in Go not just a necessity, but a delight.\n\nFor more information, detailed documentation, and contribution guidelines, visit the [seltabl GitHub repository](https://github.com/conneroisu/seltabl). Let's embark on this journey together, transforming challenges into opportunities and code into solutions.\n",
	Slug:            "seltabl",
	TagSlugs:        []string{"programming-language/go", "programming-language/html"},
	Tags:            []*assets.Tag{&TagProgrammingLanguageGo, &TagProgrammingLanguageHtml},
	Title:           "seltabl",
	UpdatedAt:       time.Date(2025, time.March, 28, 20, 7, 30, 0, time.UTC),
	X:               0.7455669393550026,
	Y:               0.32039083784576394,
	Z:               -0.043919895884009186,
}}
var ProjectSemanticRouterGo = assets.Project{Embedded: assets.Embedded{
	BannerPath:      "",
	Content:         "<p>Github: <a href=\"https://github.com/conneroisu/semanticrouter-go\">https://github.com/conneroisu/semanticrouter-go</a><br>\nGithub Pages: <a href=\"https://conneroisu.github.io/semanticrouter-go/\">https://conneroisu.github.io/semanticrouter-go/</a></p>\n<h1 id=\"semanticrouter-go\"><a class=\"anchor permalink p-4\" href=\"#semanticrouter-go\">#</a> semanticrouter-go</h1>\n<p>As a college student with a keen interest in artificial intelligence and software development, I developed <strong>semanticrouter-go</strong>, a high-performance, cost-effective AI decision-making library written in pure Go. This project aims to enhance the efficiency of large language models (LLMs) and AI agents by providing a rapid decision-making layer that leverages semantic vector spaces for routing requests based on configurable semantic meanings. \ue200cite\ue202turn0search0\ue201</p>\n<p><strong>Key Features of semanticrouter-go:</strong></p>\n<ul>\n<li>\n<p><strong>Efficient Decision-Making:</strong> By utilizing semantic vector spaces, the library enables swift routing of requests, eliminating the latency associated with traditional LLM-generated decisions.</p>\n</li>\n<li>\n<p><strong>Pure Go Implementation:</strong> Written entirely in Go, semanticrouter-go ensures seamless integration into Go-based projects without external dependencies.</p>\n</li>\n<li>\n<p><strong>Flexible Encoding Support:</strong> The library supports various encoding methods, including integration with models like <code>mxbai-embed-large</code> through the Ollama API, facilitating versatile embedding strategies.</p>\n</li>\n<li>\n<p><strong>Customizable Routing:</strong> Developers can define routes with specific utterances, allowing the router to match incoming queries to the most appropriate route based on semantic similarity.</p>\n</li>\n</ul>\n<p><strong>Installation:</strong></p>\n<p>To incorporate semanticrouter-go into your Go project, execute:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>go get github.com/conneroisu/semanticrouter-go\n</span></span></code></pre><p><strong>Example Use Case:</strong></p>\n<p>Consider a scenario in a veterinary application where it's essential to distinguish between noteworthy medical inquiries and casual chitchat. semanticrouter-go can be configured to route user inputs accordingly:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#f92672\">package</span> <span style=\"color:#a6e22e\">main</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#f92672\">import</span> (\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#e6db74\">&#34;context&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#e6db74\">&#34;fmt&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#e6db74\">&#34;os&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#e6db74\">&#34;github.com/conneroisu/semanticrouter-go&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#e6db74\">&#34;github.com/conneroisu/semanticrouter-go/encoders/ollama&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#e6db74\">&#34;github.com/conneroisu/semanticrouter-go/stores/memory&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#e6db74\">&#34;github.com/ollama/ollama/api&#34;</span>\n</span></span><span style=\"display:flex;\"><span>)\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">NoteworthyRoutes</span> = <span style=\"color:#a6e22e\">semanticrouter</span>.<span style=\"color:#a6e22e\">Route</span>{\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#a6e22e\">Name</span>: <span style=\"color:#e6db74\">&#34;noteworthy&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#a6e22e\">Utterances</span>: []<span style=\"color:#a6e22e\">semanticrouter</span>.<span style=\"color:#a6e22e\">Utterance</span>{\n</span></span><span style=\"display:flex;\"><span>\t\t{<span style=\"color:#a6e22e\">Utterance</span>: <span style=\"color:#e6db74\">&#34;What is the best way to treat a dog with a cold?&#34;</span>},\n</span></span><span style=\"display:flex;\"><span>\t\t{<span style=\"color:#a6e22e\">Utterance</span>: <span style=\"color:#e6db74\">&#34;My cat has been limping; what should I do?&#34;</span>},\n</span></span><span style=\"display:flex;\"><span>\t},\n</span></span><span style=\"display:flex;\"><span>}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">ChitchatRoutes</span> = <span style=\"color:#a6e22e\">semanticrouter</span>.<span style=\"color:#a6e22e\">Route</span>{\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#a6e22e\">Name</span>: <span style=\"color:#e6db74\">&#34;chitchat&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#a6e22e\">Utterances</span>: []<span style=\"color:#a6e22e\">semanticrouter</span>.<span style=\"color:#a6e22e\">Utterance</span>{\n</span></span><span style=\"display:flex;\"><span>\t\t{<span style=\"color:#a6e22e\">Utterance</span>: <span style=\"color:#e6db74\">&#34;What&#39;s your favorite color?&#34;</span>},\n</span></span><span style=\"display:flex;\"><span>\t\t{<span style=\"color:#a6e22e\">Utterance</span>: <span style=\"color:#e6db74\">&#34;Do you like animals?&#34;</span>},\n</span></span><span style=\"display:flex;\"><span>\t},\n</span></span><span style=\"display:flex;\"><span>}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">func</span> <span style=\"color:#a6e22e\">main</span>() {\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#66d9ef\">if</span> <span style=\"color:#a6e22e\">err</span> <span style=\"color:#f92672\">:=</span> <span style=\"color:#a6e22e\">run</span>(); <span style=\"color:#a6e22e\">err</span> <span style=\"color:#f92672\">!=</span> <span style=\"color:#66d9ef\">nil</span> {\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#a6e22e\">fmt</span>.<span style=\"color:#a6e22e\">Println</span>(<span style=\"color:#a6e22e\">err</span>)\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#a6e22e\">os</span>.<span style=\"color:#a6e22e\">Exit</span>(<span style=\"color:#ae81ff\">1</span>)\n</span></span><span style=\"display:flex;\"><span>\t}\n</span></span><span style=\"display:flex;\"><span>}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">func</span> <span style=\"color:#a6e22e\">run</span>() <span style=\"color:#66d9ef\">error</span> {\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#a6e22e\">ctx</span> <span style=\"color:#f92672\">:=</span> <span style=\"color:#a6e22e\">context</span>.<span style=\"color:#a6e22e\">Background</span>()\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#a6e22e\">cli</span>, <span style=\"color:#a6e22e\">err</span> <span style=\"color:#f92672\">:=</span> <span style=\"color:#a6e22e\">api</span>.<span style=\"color:#a6e22e\">ClientFromEnvironment</span>()\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#66d9ef\">if</span> <span style=\"color:#a6e22e\">err</span> <span style=\"color:#f92672\">!=</span> <span style=\"color:#66d9ef\">nil</span> {\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">fmt</span>.<span style=\"color:#a6e22e\">Errorf</span>(<span style=\"color:#e6db74\">&#34;error creating client: %w&#34;</span>, <span style=\"color:#a6e22e\">err</span>)\n</span></span><span style=\"display:flex;\"><span>\t}\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#a6e22e\">router</span>, <span style=\"color:#a6e22e\">err</span> <span style=\"color:#f92672\">:=</span> <span style=\"color:#a6e22e\">semanticrouter</span>.<span style=\"color:#a6e22e\">NewRouter</span>(\n</span></span><span style=\"display:flex;\"><span>\t\t[]<span style=\"color:#a6e22e\">semanticrouter</span>.<span style=\"color:#a6e22e\">Route</span>{<span style=\"color:#a6e22e\">NoteworthyRoutes</span>, <span style=\"color:#a6e22e\">ChitchatRoutes</span>},\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#f92672\">&amp;</span><span style=\"color:#a6e22e\">ollama</span>.<span style=\"color:#a6e22e\">Encoder</span>{\n</span></span><span style=\"display:flex;\"><span>\t\t\t<span style=\"color:#a6e22e\">Client</span>: <span style=\"color:#a6e22e\">cli</span>,\n</span></span><span style=\"display:flex;\"><span>\t\t\t<span style=\"color:#a6e22e\">Model</span>:  <span style=\"color:#e6db74\">&#34;mxbai-embed-large&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>\t\t},\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#a6e22e\">memory</span>.<span style=\"color:#a6e22e\">NewStore</span>(),\n</span></span><span style=\"display:flex;\"><span>\t)\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#66d9ef\">if</span> <span style=\"color:#a6e22e\">err</span> <span style=\"color:#f92672\">!=</span> <span style=\"color:#66d9ef\">nil</span> {\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">fmt</span>.<span style=\"color:#a6e22e\">Errorf</span>(<span style=\"color:#e6db74\">&#34;error creating router: %w&#34;</span>, <span style=\"color:#a6e22e\">err</span>)\n</span></span><span style=\"display:flex;\"><span>\t}\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#a6e22e\">finding</span>, <span style=\"color:#a6e22e\">p</span>, <span style=\"color:#a6e22e\">err</span> <span style=\"color:#f92672\">:=</span> <span style=\"color:#a6e22e\">router</span>.<span style=\"color:#a6e22e\">Match</span>(<span style=\"color:#a6e22e\">ctx</span>, <span style=\"color:#e6db74\">&#34;How&#39;s the weather today?&#34;</span>)\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#66d9ef\">if</span> <span style=\"color:#a6e22e\">err</span> <span style=\"color:#f92672\">!=</span> <span style=\"color:#66d9ef\">nil</span> {\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#a6e22e\">fmt</span>.<span style=\"color:#a6e22e\">Println</span>(<span style=\"color:#e6db74\">&#34;Error:&#34;</span>, <span style=\"color:#a6e22e\">err</span>)\n</span></span><span style=\"display:flex;\"><span>\t}\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#a6e22e\">fmt</span>.<span style=\"color:#a6e22e\">Println</span>(<span style=\"color:#e6db74\">&#34;Found:&#34;</span>, <span style=\"color:#a6e22e\">finding</span>.<span style=\"color:#a6e22e\">Name</span>)\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#a6e22e\">fmt</span>.<span style=\"color:#a6e22e\">Println</span>(<span style=\"color:#e6db74\">&#34;Probability:&#34;</span>, <span style=\"color:#a6e22e\">p</span>)\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">nil</span>\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre><p>In this example, the router evaluates the input &ldquo;How's the weather today?&rdquo; and classifies it under the &ldquo;chitchat&rdquo; route, demonstrating its ability to discern between different types of user interactions. \ue200cite\ue202turn0search0\ue201</p>\n<p><strong>Development and Contribution:</strong></p>\n<p>semanticrouter-go is designed with a focus on performance and simplicity, aiming to provide developers with a tool to enhance AI decision-making processes efficiently. The project is open-source and licensed under the MIT License, inviting community contributions and collaboration.</p>\n<p>For more information, to explore the source code, or to contribute to the project, visit the GitHub repository: <a href=\"https://github.com/conneroisu/semanticrouter-go\">https://github.com/conneroisu/semanticrouter-go</a></p>\n<p>By developing semanticrouter-go, I aim to empower Go developers to implement rapid and intelligent decision-making capabilities within their AI applications, fostering innovation and efficiency in the field of artificial intelligence.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 19, 17, 7, 0, time.UTC),
	Description:     "A high-performance, cost-effective AI decision-making library written in pure Go.",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: semantic-router-go\naliases:\n  - semanticrouter-go\ntags:\n  - programming-language/go\ncreated_at: 2025-03-28T19:17:07.000-06:00\ndescription: A high-performance, cost-effective AI decision-making library written in pure Go.\ntitle: semantic-router-go\nupdated_at: 2025-04-07T19:33:19.000-06:00\n---\nGithub: [https://github.com/conneroisu/semanticrouter-go](https://github.com/conneroisu/semanticrouter-go)\nGithub Pages: [https://conneroisu.github.io/semanticrouter-go/](https://conneroisu.github.io/semanticrouter-go/)\n\n# semanticrouter-go\n\nAs a college student with a keen interest in artificial intelligence and software development, I developed **semanticrouter-go**, a high-performance, cost-effective AI decision-making library written in pure Go. This project aims to enhance the efficiency of large language models (LLMs) and AI agents by providing a rapid decision-making layer that leverages semantic vector spaces for routing requests based on configurable semantic meanings. \ue200cite\ue202turn0search0\ue201\n\n**Key Features of semanticrouter-go:**\n\n- **Efficient Decision-Making:** By utilizing semantic vector spaces, the library enables swift routing of requests, eliminating the latency associated with traditional LLM-generated decisions.\n\n- **Pure Go Implementation:** Written entirely in Go, semanticrouter-go ensures seamless integration into Go-based projects without external dependencies.\n\n- **Flexible Encoding Support:** The library supports various encoding methods, including integration with models like `mxbai-embed-large` through the Ollama API, facilitating versatile embedding strategies.\n\n- **Customizable Routing:** Developers can define routes with specific utterances, allowing the router to match incoming queries to the most appropriate route based on semantic similarity.\n\n**Installation:**\n\nTo incorporate semanticrouter-go into your Go project, execute:\n\n```bash\ngo get github.com/conneroisu/semanticrouter-go\n```\n\n**Example Use Case:**\n\nConsider a scenario in a veterinary application where it's essential to distinguish between noteworthy medical inquiries and casual chitchat. semanticrouter-go can be configured to route user inputs accordingly:\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/conneroisu/semanticrouter-go\"\n\t\"github.com/conneroisu/semanticrouter-go/encoders/ollama\"\n\t\"github.com/conneroisu/semanticrouter-go/stores/memory\"\n\t\"github.com/ollama/ollama/api\"\n)\n\nvar NoteworthyRoutes = semanticrouter.Route{\n\tName: \"noteworthy\",\n\tUtterances: []semanticrouter.Utterance{\n\t\t{Utterance: \"What is the best way to treat a dog with a cold?\"},\n\t\t{Utterance: \"My cat has been limping; what should I do?\"},\n\t},\n}\n\nvar ChitchatRoutes = semanticrouter.Route{\n\tName: \"chitchat\",\n\tUtterances: []semanticrouter.Utterance{\n\t\t{Utterance: \"What's your favorite color?\"},\n\t\t{Utterance: \"Do you like animals?\"},\n\t},\n}\n\nfunc main() {\n\tif err := run(); err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n}\n\nfunc run() error {\n\tctx := context.Background()\n\tcli, err := api.ClientFromEnvironment()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error creating client: %w\", err)\n\t}\n\trouter, err := semanticrouter.NewRouter(\n\t\t[]semanticrouter.Route{NoteworthyRoutes, ChitchatRoutes},\n\t\t&ollama.Encoder{\n\t\t\tClient: cli,\n\t\t\tModel:  \"mxbai-embed-large\",\n\t\t},\n\t\tmemory.NewStore(),\n\t)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error creating router: %w\", err)\n\t}\n\tfinding, p, err := router.Match(ctx, \"How's the weather today?\")\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\tfmt.Println(\"Found:\", finding.Name)\n\tfmt.Println(\"Probability:\", p)\n\treturn nil\n}\n```\n\nIn this example, the router evaluates the input \"How's the weather today?\" and classifies it under the \"chitchat\" route, demonstrating its ability to discern between different types of user interactions. \ue200cite\ue202turn0search0\ue201\n\n**Development and Contribution:**\n\nsemanticrouter-go is designed with a focus on performance and simplicity, aiming to provide developers with a tool to enhance AI decision-making processes efficiently. The project is open-source and licensed under the MIT License, inviting community contributions and collaboration.\n\nFor more information, to explore the source code, or to contribute to the project, visit the GitHub repository: [https://github.com/conneroisu/semanticrouter-go](https://github.com/conneroisu/semanticrouter-go)\n\nBy developing semanticrouter-go, I aim to empower Go developers to implement rapid and intelligent decision-making capabilities within their AI applications, fostering innovation and efficiency in the field of artificial intelligence.\n",
	Slug:            "semantic-router-go",
	TagSlugs:        []string{"programming-language/go"},
	Tags:            []*assets.Tag{&TagProgrammingLanguageGo},
	Title:           "semantic-router-go",
	UpdatedAt:       time.Date(2025, time.April, 7, 19, 33, 19, 0, time.UTC),
	X:               0.7578638863490208,
	Y:               0.3624919503139674,
	Z:               -0.2399632058634052,
}}
var ProjectMathpixGo = assets.Project{Embedded: assets.Embedded{
	BannerPath:      "projects/mathpix-go.webp",
	Content:         "<p>As an electrical engineering student passionate about integrating advanced technologies into software development, I created <strong>mathpix-go</strong>, a Go client library designed to interface with the Mathpix API. This project facilitates seamless integration of Mathpix's Optical Character Recognition (OCR) capabilities into Go applications, enabling the conversion of images containing mathematical expressions into LaTeX code.</p>\n<p><strong>Key Features of mathpix-go:</strong></p>\n<ul>\n<li>\n<p><strong>Image-to-LaTeX Conversion:</strong> The library allows for the transformation of images with mathematical content into corresponding LaTeX representations, streamlining the process of digitizing complex equations.</p>\n</li>\n<li>\n<p><strong>Batch Processing:</strong> mathpix-go supports batch processing, enabling the submission of multiple images in a single request, which enhances efficiency when dealing with large datasets.</p>\n</li>\n<li>\n<p><strong>Asynchronous Operations:</strong> The library provides asynchronous processing capabilities, allowing applications to handle other tasks while awaiting the OCR results, thereby improving overall performance.</p>\n</li>\n</ul>\n<p><strong>Installation:</strong></p>\n<p>To incorporate mathpix-go into your Go project, execute:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>go get github.com/conneroisu/mathpix-go\n</span></span></code></pre><p><strong>Example Usage:</strong></p>\n<p>Below is a basic example demonstrating how to use mathpix-go to convert an image containing a mathematical expression into LaTeX code:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#f92672\">package</span> <span style=\"color:#a6e22e\">main</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#f92672\">import</span> (\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#e6db74\">&#34;context&#34;</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#e6db74\">&#34;fmt&#34;</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#e6db74\">&#34;log&#34;</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#e6db74\">&#34;os&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#e6db74\">&#34;github.com/conneroisu/mathpix-go&#34;</span>\n</span></span><span style=\"display:flex;\"><span>)\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">func</span> <span style=\"color:#a6e22e\">main</span>() {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">apiKey</span> <span style=\"color:#f92672\">:=</span> <span style=\"color:#e6db74\">&#34;your_api_key&#34;</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">appID</span> <span style=\"color:#f92672\">:=</span> <span style=\"color:#e6db74\">&#34;your_app_id&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">client</span> <span style=\"color:#f92672\">:=</span> <span style=\"color:#a6e22e\">mathpix</span>.<span style=\"color:#a6e22e\">NewClient</span>(<span style=\"color:#a6e22e\">apiKey</span>, <span style=\"color:#a6e22e\">appID</span>)\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">imagePath</span> <span style=\"color:#f92672\">:=</span> <span style=\"color:#e6db74\">&#34;path_to_your_image.png&#34;</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">imageFile</span>, <span style=\"color:#a6e22e\">err</span> <span style=\"color:#f92672\">:=</span> <span style=\"color:#a6e22e\">os</span>.<span style=\"color:#a6e22e\">Open</span>(<span style=\"color:#a6e22e\">imagePath</span>)\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> <span style=\"color:#a6e22e\">err</span> <span style=\"color:#f92672\">!=</span> <span style=\"color:#66d9ef\">nil</span> {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">log</span>.<span style=\"color:#a6e22e\">Fatalf</span>(<span style=\"color:#e6db74\">&#34;failed to open image: %v&#34;</span>, <span style=\"color:#a6e22e\">err</span>)\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">defer</span> <span style=\"color:#a6e22e\">imageFile</span>.<span style=\"color:#a6e22e\">Close</span>()\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">request</span> <span style=\"color:#f92672\">:=</span> <span style=\"color:#f92672\">&amp;</span><span style=\"color:#a6e22e\">mathpix</span>.<span style=\"color:#a6e22e\">ImageRequest</span>{\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">Src</span>: <span style=\"color:#a6e22e\">imageFile</span>,\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">response</span>, <span style=\"color:#a6e22e\">err</span> <span style=\"color:#f92672\">:=</span> <span style=\"color:#a6e22e\">client</span>.<span style=\"color:#a6e22e\">Image</span>(<span style=\"color:#a6e22e\">context</span>.<span style=\"color:#a6e22e\">Background</span>(), <span style=\"color:#a6e22e\">request</span>)\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> <span style=\"color:#a6e22e\">err</span> <span style=\"color:#f92672\">!=</span> <span style=\"color:#66d9ef\">nil</span> {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">log</span>.<span style=\"color:#a6e22e\">Fatalf</span>(<span style=\"color:#e6db74\">&#34;failed to process image: %v&#34;</span>, <span style=\"color:#a6e22e\">err</span>)\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">fmt</span>.<span style=\"color:#a6e22e\">Println</span>(<span style=\"color:#e6db74\">&#34;LaTeX Code:&#34;</span>, <span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">Latex</span>)\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre><p>In this example, the <code>mathpix.NewClient</code> function initializes a new client with the provided API key and application ID. An image file is then opened and passed to the <code>Image</code> method of the client, which sends the image to the Mathpix API for processing. The resulting LaTeX code is printed to the console.</p>\n<p><strong>Development and Contribution:</strong></p>\n<p>mathpix-go is developed with a focus on performance and ease of use, aiming to provide Go developers with a straightforward means to integrate Mathpix's OCR capabilities into their applications. The project is open-source and licensed under the MIT License, encouraging community involvement and collaboration.</p>\n<p>For more information, to explore the source code, or to contribute to the project, visit the GitHub repository: <a href=\"https://github.com/conneroisu/mathpix-go\">https://github.com/conneroisu/mathpix-go</a></p>\n<p>By developing mathpix-go, I aim to empower Go developers to seamlessly incorporate advanced OCR technology into their applications, facilitating the digitization and manipulation of complex mathematical content.</p>\n",
	CreatedAt:       time.Date(2025, time.March, 28, 19, 20, 17, 0, time.UTC),
	Description:     "A Go client library for the Mathpix API",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: mathpix-go\naliases: []\ntags:\n  - programming-language/go\nbanner_path: projects/mathpix-go.webp\ncreated_at: 2025-03-28T19:20:17.000-06:00\ndescription: A Go client library for the Mathpix API\ntitle: mathpix-go\nupdated_at: 2025-04-14T19:23:43.000-06:00\n---\n\nAs an electrical engineering student passionate about integrating advanced technologies into software development, I created **mathpix-go**, a Go client library designed to interface with the Mathpix API. This project facilitates seamless integration of Mathpix's Optical Character Recognition (OCR) capabilities into Go applications, enabling the conversion of images containing mathematical expressions into LaTeX code.\n\n**Key Features of mathpix-go:**\n\n- **Image-to-LaTeX Conversion:** The library allows for the transformation of images with mathematical content into corresponding LaTeX representations, streamlining the process of digitizing complex equations.\n\n- **Batch Processing:** mathpix-go supports batch processing, enabling the submission of multiple images in a single request, which enhances efficiency when dealing with large datasets.\n\n- **Asynchronous Operations:** The library provides asynchronous processing capabilities, allowing applications to handle other tasks while awaiting the OCR results, thereby improving overall performance.\n\n**Installation:**\n\nTo incorporate mathpix-go into your Go project, execute:\n\n```bash\ngo get github.com/conneroisu/mathpix-go\n```\n\n**Example Usage:**\n\nBelow is a basic example demonstrating how to use mathpix-go to convert an image containing a mathematical expression into LaTeX code:\n\n```go\npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    \"github.com/conneroisu/mathpix-go\"\n)\n\nfunc main() {\n    apiKey := \"your_api_key\"\n    appID := \"your_app_id\"\n\n    client := mathpix.NewClient(apiKey, appID)\n\n    imagePath := \"path_to_your_image.png\"\n    imageFile, err := os.Open(imagePath)\n    if err != nil {\n        log.Fatalf(\"failed to open image: %v\", err)\n    }\n    defer imageFile.Close()\n\n    request := &mathpix.ImageRequest{\n        Src: imageFile,\n    }\n\n    response, err := client.Image(context.Background(), request)\n    if err != nil {\n        log.Fatalf(\"failed to process image: %v\", err)\n    }\n\n    fmt.Println(\"LaTeX Code:\", response.Latex)\n}\n```\n\nIn this example, the `mathpix.NewClient` function initializes a new client with the provided API key and application ID. An image file is then opened and passed to the `Image` method of the client, which sends the image to the Mathpix API for processing. The resulting LaTeX code is printed to the console.\n\n**Development and Contribution:**\n\nmathpix-go is developed with a focus on performance and ease of use, aiming to provide Go developers with a straightforward means to integrate Mathpix's OCR capabilities into their applications. The project is open-source and licensed under the MIT License, encouraging community involvement and collaboration.\n\nFor more information, to explore the source code, or to contribute to the project, visit the GitHub repository: [https://github.com/conneroisu/mathpix-go](https://github.com/conneroisu/mathpix-go)\n\nBy developing mathpix-go, I aim to empower Go developers to seamlessly incorporate advanced OCR technology into their applications, facilitating the digitization and manipulation of complex mathematical content.\n",
	Slug:            "mathpix-go",
	TagSlugs:        []string{"programming-language/go"},
	Tags:            []*assets.Tag{&TagProgrammingLanguageGo},
	Title:           "mathpix-go",
	UpdatedAt:       time.Date(2025, time.April, 14, 19, 23, 43, 0, time.UTC),
	X:               0.0928237929217085,
	Y:               0.12567880325610215,
	Z:               0.008680902989404271,
}}
var ProjectCpre488Mp0 = assets.Project{Embedded: assets.Embedded{
	BannerPath:      "projects/mp0-menu.gif",
	Content:         "<h1 id=\"cpre488-mp0\"><a class=\"anchor permalink p-4\" href=\"#cpre488-mp0\">#</a> CPRE488 MP0</h1>\n<h2 id=\"breaking-down-nes-bootloaderc\"><a class=\"anchor permalink p-4\" href=\"#breaking-down-nes-bootloaderc\">#</a> Breaking down <code>nes_bootloader.c</code></h2>\n<h3 id=\"main-components\"><a class=\"anchor permalink p-4\" href=\"#main-components\">#</a> <strong>Main Components</strong></h3>\n<ol>\n<li>\n<p><strong>Initialization</strong> (<code>xil_init()</code>):</p>\n<ul>\n<li><strong>Hardware Setup</strong>: Configures Xilinx peripherals:\n<ul>\n<li><strong>VTC (Video Timing Controller)</strong>: Generates video timing signals.</li>\n<li><strong>VDMA (Video DMA)</strong>: Transfers framebuffer data to the display (configuration incomplete in initially given code).</li>\n<li><strong>Framebuffers</strong>: Initializes front/back buffers in DDR memory for double-buffering.</li>\n</ul>\n</li>\n<li><strong>Memory Initialization</strong>: Clears framebuffers with <code>INIT_COLOR</code> (gray) and sets up boot state (debug level, active buffer).</li>\n</ul>\n</li>\n<li>\n<p><strong>NES Emulation Loop</strong> (<code>nes_load()</code>):</p>\n<ul>\n<li><strong>ROM Loading</strong>:\n<ul>\n<li>Hardcodes loading <code>zelda.nes</code> from SD card (via <code>NESCore_LoadROM</code>).</li>\n<li>Disables cache temporarily for SD card I/O compatibility.</li>\n</ul>\n</li>\n<li><strong>Emulation Start</strong>:\n<ul>\n<li>Resets the NES core (<code>NESCore_Reset</code>).</li>\n<li>Enters an infinite loop running <code>NESCore_Cycle()</code> to emulate NES CPU/PPU cycles.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Video Output</strong> (<code>NESCore_Callback_OutputFrame</code> in <code>NESCore_Callback.c</code>):</p>\n<ul>\n<li><strong>Pixel Conversion</strong>: Maps NES color indices to 16-bit RGB using <code>NesPalette3</code>.</li>\n<li><strong>Framebuffer Update</strong>: Intended to write pixels to <code>FBUFFER_BASEADDR</code>, but the current implementation is incomplete (pixels aren't written to the buffer).</li>\n<li><strong>Cache Flush</strong>: Ensures VDMA sees updated framebuffer data.</li>\n</ul>\n</li>\n<li>\n<p><strong>Input Handling</strong> (<code>NESCore_Callback_InputPadState</code>):</p>\n<ul>\n<li><strong>Hardcoded Input</strong>: Player 1’s controller is set to press A/B buttons (no real input handling yet).</li>\n</ul>\n</li>\n<li>\n<p><strong>Audio</strong> (Stubs):</p>\n<ul>\n<li>Sound functions are placeholders; audio isn’t implemented.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"key-code-structures\"><a class=\"anchor permalink p-4\" href=\"#key-code-structures\">#</a> <strong>Key Code Structures</strong></h3>\n<p>The following describes some of the key code structures in the initially given <code>nes_bootloader.c</code> file.</p>\n<ul>\n<li><strong>Main Loop</strong>:<br>\nLoads and runs NES ROM indefinitely through the <code>nes_load()</code> hardcoded internal input to call of <code>nes_strncpy()</code>.\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">while</span> (<span style=\"color:#ae81ff\">1</span>) {\n</span></span><span style=\"display:flex;\"><span>  nes_load();\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre></li>\n<li><strong>Emulation Cycle</strong>:<br>\nEmulates NES hardware cycles\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">do</span> {\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">for</span> (i <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>; i <span style=\"color:#f92672\">&lt;</span> RESET_TIME; i<span style=\"color:#f92672\">++</span>) {\n</span></span><span style=\"display:flex;\"><span>    NESCore_Cycle(); \n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>} <span style=\"color:#66d9ef\">while</span> (<span style=\"color:#ae81ff\">1</span>); <span style=\"color:#75715e\">// No exit condition\n</span></span></span></code></pre></li>\n</ul>\n<h3 id=\"framebuffer--video-pipeline\"><a class=\"anchor permalink p-4\" href=\"#framebuffer--video-pipeline\">#</a> <strong>Framebuffer &amp; Video Pipeline</strong></h3>\n<p>In the code (nes_bootloader.c), the VDMA is responsible for the following essential functions:</p>\n<h4 id=\"streaming-the-framebuffer\"><a class=\"anchor permalink p-4\" href=\"#streaming-the-framebuffer\">#</a> Streaming the Framebuffer:</h4>\n<ul>\n<li>The NES emulator draws frames into the front buffer (<code>FBUFFER_BASEADDR</code>).</li>\n<li>The VDMA continuously streams this buffer to the display controller (e.g., HDMI/VGA module).</li>\n</ul>\n<h4 id=\"double-buffering\"><a class=\"anchor permalink p-4\" href=\"#double-buffering\">#</a> Double-Buffering:</h4>\n<ul>\n<li>While the VDMA streams the front buffer, the emulator can render the next frame to the back buffer (i.e. <code>BBUFFER_BASEADDR</code>).</li>\n<li>Buffers are swapped to avoid visual artifacts.</li>\n</ul>\n<p><code>nes_pixelcpy</code> coming from <code>utils.c</code> which copies from <code>src</code> to <code>dest</code> pointers and converts the RGBA <code>.bmp</code> to rbg pixel values</p>\n<p>Depends on the <code>xilinx-sdk</code> implementation.</p>\n<h3 id=\"flow-summary\"><a class=\"anchor permalink p-4\" href=\"#flow-summary\">#</a> <strong>Flow Summary</strong></h3>\n<ol>\n<li><strong>Boot</strong>:\n<ul>\n<li>Initialize hardware (VTC, VDMA, framebuffers).</li>\n<li>Load hardcoded NES ROM (<code>zelda.nes</code>).</li>\n</ul>\n</li>\n<li><strong>Emulation</strong>:\n<ul>\n<li>Run NES CPU/PPU cycles indefinitely.</li>\n<li>Attempt to render frames to the framebuffer (broken in initially given code).</li>\n</ul>\n</li>\n<li><strong>Display</strong>:\n<ul>\n<li>VDMA <strong>should</strong> stream the framebuffer to the display.</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://conneroh.fly.storage.tigris.dev/projects/high_level_diagram.png\"></p>\n<h2 id=\"how-does-nescore-callback-outputframe-get-called\"><a class=\"anchor permalink p-4\" href=\"#how-does-nescore-callback-outputframe-get-called\">#</a> How does NESCore_Callback_OutputFrame() get called?</h2>\n<p>Inside <strong>NESCore.c</strong>, there is a main loop in <strong><code>NESCore_Cycle()</code></strong> that continually advances the emulation by stepping through each scanline.</p>\n<p>At the end of each scanline, it calls <strong><code>NESCore_HSync()</code></strong>. Within <strong><code>NESCore_HSync()</code></strong>, once it reaches scanline 240 (the constant <code>SCAN_UNKNOWN_START</code>), there is a check:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>         <span style=\"color:#66d9ef\">case</span> SCAN_UNKNOWN_START:\n</span></span><span style=\"display:flex;\"><span>          <span style=\"color:#66d9ef\">if</span> (S.FrameCnt <span style=\"color:#f92672\">==</span> <span style=\"color:#ae81ff\">0</span>) {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#75715e\">/* Calback function for rendering */</span>\n</span></span><span style=\"display:flex;\"><span>            NESCore_Callback_OutputFrame(S.WorkFrame);\n</span></span><span style=\"display:flex;\"><span>     \n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#75715e\">/* Wait callback (for timing) */</span>\n</span></span><span style=\"display:flex;\"><span>            NESCore_Callback_Wait();\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">break</span>;\n</span></span></code></pre><p>That snippet shows exactly where (appox. line 847) <strong><code>NESCore_Callback_OutputFrame(S.WorkFrame)</code></strong> is invoked. Essentially:</p>\n<ol>\n<li><strong><code>NESCore_Cycle()</code></strong> calls <strong><code>NESCore_HSync()</code></strong> at each scanline boundary.</li>\n<li><strong><code>NESCore_HSync()</code></strong> recognizes when it’s at scanline 240 (end of the visible area).</li>\n<li>If this is not a skipped frame (<code>S.FrameCnt == 0</code>), it calls <strong><code>NESCore_Callback_OutputFrame()</code></strong>, which hands off the final rendered 256×240 image (<code>S.WorkFrame</code>) to your platform code (e.g. copying pixels out, displaying them, etc.).</li>\n</ol>\n<p>Thus, <strong><code>NESCore_Callback_OutputFrame()</code></strong> is triggered once per frame near the bottom of each video frame cycle.</p>\n<h2 id=\"step-2-describe-what-configuration-options-are-available-and-how-they-may-be-potentially-useful-in-an-embedded-system\"><a class=\"anchor permalink p-4\" href=\"#step-2-describe-what-configuration-options-are-available-and-how-they-may-be-potentially-useful-in-an-embedded-system\">#</a> Step 2: Describe what configuration options are available and how they may be potentially useful in an embedded system?</h2>\n<p>The configuration options are run, debug, and hardware (single application debugger).</p>\n<p>We analyzed the following three green boxes;</p>\n<p><strong>Generic Interrupt Controller (GIC)</strong></p>\n<ul>\n<li>Interrupts for programmable logic (PL) and processing systems (PS)</li>\n<li>PL-PS Interrupt Ports\n<ul>\n<li>Can enable fast or not fast interrupt signals from PL to PS (CPU 0 or CPU 1)</li>\n<li>Enable 16-bit shared interrupt port from PL</li>\n</ul>\n</li>\n<li><strong>PS-PL Interrupt Ports</strong>\n<ul>\n<li>\n<p>Enable interrupts from DMAC, SMC, QSPI, CTI, GPIO, USB, SDIO, ETHERNET, I2C, SPI, UART, CAN to PL</p>\n<p><strong>Usefulness Description:</strong><br>\nHaving interrupt functionality is extremely important when working with embedded systems since they enable the CPU to respond to stimuli almost immediately. This removes the need to poll the status of a component or peripheral, which wastes CPU time. For example, let's say the embedded system has a UART module that is receiving data. Instead of polling the FIFO status register to know when data can be read out, an interrupt can be setup that will interrupt the CPU when a new character is ready to be read from the FIFO. Then the CPU will execute the interrupt handler, which reads the character. After the character is read, the CPU restores its previous state. No polling of status registers was needed to read out of the FIFO, which saved a lot of CPU time.</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>System Watch Dog Timer (SWDT)</strong></p>\n<ul>\n<li>\n<p>Can enable Watch dog timer in APU</p>\n</li>\n<li>\n<p>Change IO (EMIO or MIO)</p>\n<p><strong>Usefulness Description:</strong><br>\nWatchdog timers are useful in embedded systems to make sure that some process is not taking control of the CPU permanently and to handle hardware exceptions. Specifically, the watchdog timers can be used to make sure a set of asynchronous processes or threads are not taking up too much CPU time.</p>\n</li>\n</ul>\n<p><strong>Direct Memory Access Controller (DMA Controller)</strong></p>\n<ul>\n<li>\n<p>Enable peripheral request interfaces that supports the connection of DMA-capable peripherals resident in the PL</p>\n<p><strong>Usefulness Description:</strong><br>\nDMA is extremely useful in embedded systems when many memory operations or required. Instead of using up CPU time to facilitate memory operations, the CPU just has to tell the DMA what memory operations should be done and it executes them. This saves tons of CPU time, which is always desired when developing an embedded system. However, synchronization between the CPU and DMA must be established. This is usually done using interrupts, which were previously discussed.</p>\n</li>\n</ul>\n<h2 id=\"step-5-are-these-buttons-leds-and-switches-connected-via-the-ps-subsystem-or-the-pl-subsystem-briefly-defend-your-answer-note-also-that-all-three-peripherals-appear-to-be-the-same-exact-ip-type-axi-gpio--how-can-this-be-possible\"><a class=\"anchor permalink p-4\" href=\"#step-5-are-these-buttons-leds-and-switches-connected-via-the-ps-subsystem-or-the-pl-subsystem-briefly-defend-your-answer-note-also-that-all-three-peripherals-appear-to-be-the-same-exact-ip-type-axi-gpio--how-can-this-be-possible\">#</a> Step 5: Are these buttons, LEDs, and switches connected via the PS subsystem or the PL subsystem? Briefly defend your answer. Note also that all three peripherals appear to be the same exact IP type (axi_gpio) – how can this be possible?</h2>\n<p>The LEDS, buttons and switches are connected to the PL subsystem as they are connected/controlled through GPIO subsystem, which belongs to the PL subsystem. The peripherals appear to be at the same exact IP type because an IP core such as <code>axi_gpio</code> is a general-purpose GPIO controller that can be instantiated multiple times within the design. Each instantiation can be configured independently to handle different sets of GPIOs.</p>\n<p>The reason why buttons, LEDs, and switches can all use the same axi_gpio IP is that the axi_gpio module is highly configurable, allowing different instances to be set up for input or output operations. For example:</p>\n<pre><code>One instance of axi_gpio can be configured as an input interface for buttons.\nAnother instance can be configured as an output interface for LEDs.\nA third instance can be configured to handle switches as inputs.\n</code></pre>\n<p>Each instance is mapped to a different memory address and connected to separate GPIO pins, making it possible to use the same IP type multiple times within the system.</p>\n<h2 id=\"step-5-based-on-the-datasheet-and-the-address-map-shown-in-the-address-editor-mentioned-in-instruction-7-of-step-2-use-designer-assistance-how-would-you-in-software-read-the-current-state-of-the-switches-be-specific\"><a class=\"anchor permalink p-4\" href=\"#step-5-based-on-the-datasheet-and-the-address-map-shown-in-the-address-editor-mentioned-in-instruction-7-of-step-2-use-designer-assistance-how-would-you-in-software-read-the-current-state-of-the-switches-be-specific\">#</a> Step 5: Based on the datasheet and the address map shown in the “Address Editor” (mentioned in instruction 7 of Step 2: Use Designer Assistance), how would you (in software) read the current state of the switches? Be specific</h2>\n<p>The processing system can read the register of the axi_gpio which communicates with the switches. For example:<br>\nOn our system, the GPIO AXI interface connected to the switches has a base address of 0x4122_0000 (this will most likely be different than the current one since other AXI interfaces have been added). According to the datasheet, an address offset of 0x4 from the base address points to the tri-state buffer register, which allows us to configure the GPIO interface to be read or write. According to the datasheet, if this register has a value of 0x0, the GPIO interface is configured for writes and if the register has a value of 0x1, it is configured for reads. So, to read from the switches we need to set the 32-bit register stored at 0x4122_0004 to 0x1. Then, according to the GPIO datasheet, the base address of the GPIO interface points to a 32-bit register where the GPIO data can be read from. So to read the switch states, we simply need to access the value stored at 0x4122_0000. That is it!*</p>\n<h2 id=\"step-7-modifications-create-a-software-application-a-nice-feature-is-the-ability-to-right-click-on-any-function-to-view-its-declaration--do-this-for-the-print-function-in-your-writeup-use-this-feature-and-describe-what-print-does-and-how-why-do-you-believe-this-function-is-used-by-xilinx-for-their-hello-world-application-as-opposed-to-the-more-conventional-printf-function\"><a class=\"anchor permalink p-4\" href=\"#step-7-modifications-create-a-software-application-a-nice-feature-is-the-ability-to-right-click-on-any-function-to-view-its-declaration--do-this-for-the-print-function-in-your-writeup-use-this-feature-and-describe-what-print-does-and-how-why-do-you-believe-this-function-is-used-by-xilinx-for-their-hello-world-application-as-opposed-to-the-more-conventional-printf-function\">#</a> Step 7: modifications: Create a Software Application A nice feature is the ability to right-click on any function to view its declaration – do this for the print() function. In your writeup, use this feature and describe what print() does, and how. Why do you believe this function is used by Xilinx for their Hello World application, as opposed to the more conventional printf() function?</h2>\n<p>Right-clicking on the print() function opens a dialog for going to a specific declaration of the function from the available declarations. Clicking on the declarations.</p>\n<p>If certain Xilinx preprocessor macros are defined, the print function output is console.<br>\nYou give the print function a <code>*char</code> and it sends the &ldquo;string&rdquo; to the UART on stdout base address.</p>\n<p>The stdio printf() function outputs the formatted input to the STDOUT stream. We believe that this stream is not hooked up to the UART since when we tried using the stdio printf(), we saw no output on the UART. So, it makes sense that the default &ldquo;Hello World&rdquo; example uses the Xilinx print() function instead since it manually sends the input using the UART, no streams invovled!</p>\n<p>This is used in the Hello World example to print the &ldquo;Hello World&rdquo; string to the console while operating correctly in the xilinx emulator and on the actual fpga hardware.</p>\n<h2 id=\"step-9-connect-to-the-vivado-logic-analyzer-take-a-screen-capture-of-an-led-wire-turning-on-can-you-turn-the-led-on-and-off-fast-enough-to-get-a-screen-capture-of-the-logic-analyzer-displaying-this-pulse-if-so-then-provide-this-screen-capture-as-well-for-how-long-does-the-pulse-stay-high\"><a class=\"anchor permalink p-4\" href=\"#step-9-connect-to-the-vivado-logic-analyzer-take-a-screen-capture-of-an-led-wire-turning-on-can-you-turn-the-led-on-and-off-fast-enough-to-get-a-screen-capture-of-the-logic-analyzer-displaying-this-pulse-if-so-then-provide-this-screen-capture-as-well-for-how-long-does-the-pulse-stay-high\">#</a> Step 9: Connect to the Vivado Logic Analyzer: Take a screen capture of an LED wire turning on? Can you turn the LED on and off fast enough to get a screen capture of the Logic Analyzer displaying this pulse? If so, then provide this screen capture as well. For how long does the pulse stay high?</h2>\n<p>The LED outputs were connected to an Axi interconnect at slot_0. Because the LED is sending data, we can read the respective GPIO responses in the W Channel. The image below illustrates that the first and seventh switches were toggled in succession per the signals in WDATA.</p>\n<p><img src=\"https://conneroh.fly.storage.tigris.dev/projects/cpre488-mp0-led-flash-capture.png\"></p>\n<p>A pulse duration of 25 ns is shown in the image above.</p>\n<h2 id=\"modify-the-hello-world-application-to-also-interface-with-the-switches-buttons-and-leds-that-are-configured-in-the-programmable-logic-for-example-have-the-application-print-out-the-state-of-the-switches-when-a-button-is-pressed-or-light-up-certain-leds-given-an-input-integer\"><a class=\"anchor permalink p-4\" href=\"#modify-the-hello-world-application-to-also-interface-with-the-switches-buttons-and-leds-that-are-configured-in-the-programmable-logic-for-example-have-the-application-print-out-the-state-of-the-switches-when-a-button-is-pressed-or-light-up-certain-leds-given-an-input-integer\">#</a> Modify the hello_world application to also interface with the switches, buttons, and LEDs that are configured in the programmable logic. For example, have the application print out the state of the switches when a button is pressed, or light up certain LEDs given an input integer.</h2>\n<p>The following code uses switches to toggle a respective LED and print to PuTTY if button 1 is active.</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">int</span> <span style=\"color:#a6e22e\">main</span>()\n</span></span><span style=\"display:flex;\"><span>{\n</span></span><span style=\"display:flex;\"><span>    init_platform();\n</span></span><span style=\"display:flex;\"><span>    UINTPTR SWIn <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0x41220000</span>;\n</span></span><span style=\"display:flex;\"><span>    UINTPTR LEDIn <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0x41200000</span>;\n</span></span><span style=\"display:flex;\"><span>    UINTPTR ButtonIn <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0x41210000</span>;\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">int32_t</span> LEDOut <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0x00000000</span>;\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">while</span> (<span style=\"color:#ae81ff\">1</span>) {\n</span></span><span style=\"display:flex;\"><span>    \t<span style=\"color:#66d9ef\">if</span> ((Xil_In32(SWIn) <span style=\"color:#f92672\">&amp;</span> <span style=\"color:#ae81ff\">0x00000001</span>) <span style=\"color:#f92672\">==</span> <span style=\"color:#ae81ff\">0x00000001</span>) {\n</span></span><span style=\"display:flex;\"><span>    \t\tLEDOut <span style=\"color:#f92672\">=</span> LEDOut <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">0x00000001</span>;\n</span></span><span style=\"display:flex;\"><span>    \t}\n</span></span><span style=\"display:flex;\"><span>    \t<span style=\"color:#66d9ef\">if</span> ((Xil_In32(SWIn) <span style=\"color:#f92672\">&amp;</span> <span style=\"color:#ae81ff\">0x00000002</span>) <span style=\"color:#f92672\">==</span> <span style=\"color:#ae81ff\">0x00000002</span>) {\n</span></span><span style=\"display:flex;\"><span>\t\t\tLEDOut <span style=\"color:#f92672\">=</span> LEDOut <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">0x00000002</span>;\n</span></span><span style=\"display:flex;\"><span>\t\t}\n</span></span><span style=\"display:flex;\"><span>    \t<span style=\"color:#66d9ef\">if</span> ((Xil_In32(SWIn) <span style=\"color:#f92672\">&amp;</span> <span style=\"color:#ae81ff\">0x00000004</span>) <span style=\"color:#f92672\">==</span> <span style=\"color:#ae81ff\">0x00000004</span>) {\n</span></span><span style=\"display:flex;\"><span>\t\t\tLEDOut <span style=\"color:#f92672\">=</span> LEDOut <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">0x00000004</span>;\n</span></span><span style=\"display:flex;\"><span>\t\t}\n</span></span><span style=\"display:flex;\"><span>    \t<span style=\"color:#66d9ef\">if</span> ((Xil_In32(SWIn) <span style=\"color:#f92672\">&amp;</span> <span style=\"color:#ae81ff\">0x00000008</span>) <span style=\"color:#f92672\">==</span> <span style=\"color:#ae81ff\">0x00000008</span>) {\n</span></span><span style=\"display:flex;\"><span>    \t\tLEDOut <span style=\"color:#f92672\">=</span> LEDOut <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">0x00000008</span>;\n</span></span><span style=\"display:flex;\"><span>    \t}\n</span></span><span style=\"display:flex;\"><span>    \t<span style=\"color:#66d9ef\">if</span> ((Xil_In32(SWIn) <span style=\"color:#f92672\">&amp;</span> <span style=\"color:#ae81ff\">0x000000010</span>) <span style=\"color:#f92672\">==</span> <span style=\"color:#ae81ff\">0x00000010</span>) {\n</span></span><span style=\"display:flex;\"><span>\t\t\tLEDOut <span style=\"color:#f92672\">=</span> LEDOut <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">0x00000010</span>;\n</span></span><span style=\"display:flex;\"><span>\t\t}\n</span></span><span style=\"display:flex;\"><span>    \t<span style=\"color:#66d9ef\">if</span> ((Xil_In32(SWIn) <span style=\"color:#f92672\">&amp;</span> <span style=\"color:#ae81ff\">0x000000020</span>) <span style=\"color:#f92672\">==</span> <span style=\"color:#ae81ff\">0x00000020</span>) {\n</span></span><span style=\"display:flex;\"><span>\t\t\tLEDOut <span style=\"color:#f92672\">=</span> LEDOut <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">0x00000020</span>;\n</span></span><span style=\"display:flex;\"><span>\t\t}\n</span></span><span style=\"display:flex;\"><span>    \t<span style=\"color:#66d9ef\">if</span> ((Xil_In32(SWIn) <span style=\"color:#f92672\">&amp;</span> <span style=\"color:#ae81ff\">0x00000040</span>) <span style=\"color:#f92672\">==</span> <span style=\"color:#ae81ff\">0x00000040</span>) {\n</span></span><span style=\"display:flex;\"><span>    \t\tLEDOut <span style=\"color:#f92672\">=</span> LEDOut <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">0x00000040</span>;\n</span></span><span style=\"display:flex;\"><span>    \t}\n</span></span><span style=\"display:flex;\"><span>    \t<span style=\"color:#66d9ef\">if</span> ((Xil_In32(SWIn) <span style=\"color:#f92672\">&amp;</span> <span style=\"color:#ae81ff\">0x00000080</span>) <span style=\"color:#f92672\">==</span> <span style=\"color:#ae81ff\">0x00000080</span>) {\n</span></span><span style=\"display:flex;\"><span>\t\t\tLEDOut <span style=\"color:#f92672\">=</span> LEDOut <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">0x00000080</span>;\n</span></span><span style=\"display:flex;\"><span>\t\t}\n</span></span><span style=\"display:flex;\"><span>    \t<span style=\"color:#66d9ef\">if</span>((Xil_In32(ButtonIn) <span style=\"color:#f92672\">&amp;</span> <span style=\"color:#ae81ff\">0x00000001</span>) <span style=\"color:#f92672\">==</span> <span style=\"color:#ae81ff\">0x00000001</span>){\n</span></span><span style=\"display:flex;\"><span>    \t\tprint(<span style=\"color:#e6db74\">&#34;Button 1 is on</span><span style=\"color:#ae81ff\">\\n\\r</span><span style=\"color:#e6db74\">&#34;</span>);\n</span></span><span style=\"display:flex;\"><span>    \t\tLEDOut <span style=\"color:#f92672\">=</span> LEDOut <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">0x00000001</span>;\n</span></span><span style=\"display:flex;\"><span>    \t}\n</span></span><span style=\"display:flex;\"><span>    \tXil_Out32(LEDIn, LEDOut);\n</span></span><span style=\"display:flex;\"><span>    \tLEDOut <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0x00000000</span>;\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    cleanup_platform();\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre><h2 id=\"in-vivado-add-these-peripherals-to-your-project--connect-and-then-configure-them-to-generate-a-640x480-output-signal\"><a class=\"anchor permalink p-4\" href=\"#in-vivado-add-these-peripherals-to-your-project--connect-and-then-configure-them-to-generate-a-640x480-output-signal\">#</a> In VIVADO, add these peripherals to your project , connect and then configure them to generate a 640x480 output signal.</h2>\n<p>The Video Timing Control IP was set to the given timing values for 640x480 video. However, we had to change the active polarity of the Hsync and Vsync as the VTC defualt values did not align with the standard VGA protocol.<br>\n<img src=\"https://conneroh.fly.storage.tigris.dev/projects/VTC_setup.png\"></p>\n<p>The Video Direct Memory Access IP was set such that it had a data width of 16 bits to correspond to our Video Output IP.<br>\n<img src=\"https://conneroh.fly.storage.tigris.dev/projects/VDMA_setup.png\"></p>\n<p>The AXI4-Stream to Video Out IP was setup such that it could read 16 bits and output 16 bits. Because the VGA protocol did need any additional signals from this IP, we could use the Mono/Sensor video format to ensure our data stream widths were the desired sizes (12-bits also works for the output as long as it is properly mapped to the VGA pins).<br>\n<img src=\"https://conneroh.fly.storage.tigris.dev/projects/Vidout_setup.png\"></p>\n<p>Some other important considerations were that the input clock had to be as close to 25.125 MHz, the VTC enable on the AXI4-Stream to Video Out IP had to be connected to the generation clock enable output on the Video Timing, and ensuring the AXI4-Stream to Video Out IP had an independent clock for video if we had a faster clock for the AXI stream.</p>\n<h2 id=\"modify-the-configuration-registers-for-correct-vdma-operation-and-in-your-writeup-provide-a-justification-based-on-the-vdma-documentation-for-how-you-set-these-values\"><a class=\"anchor permalink p-4\" href=\"#modify-the-configuration-registers-for-correct-vdma-operation-and-in-your-writeup-provide-a-justification-based-on-the-vdma-documentation-for-how-you-set-these-values\">#</a> Modify the configuration registers for correct VDMA operation, and in your writeup, provide a justification based on the VDMA documentation for how you set these values.</h2>\n<p><img src=\"https://conneroh.fly.storage.tigris.dev/projects/VGA.jpg\"></p>\n<p>Our VDMA register configurations were as follows:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Simple function abstraction by Vendor for writing VDMA registers\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    XAxiVdma_WriteReg(XPAR_AXI_VDMA_0_BASEADDR, XAXIVDMA_CR_OFFSET,  <span style=\"color:#ae81ff\">0x00000003</span>);  <span style=\"color:#75715e\">// Read Channel: VDMA MM2S Circular Mode and Start bits set, VDMA MM2S Control\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    XAxiVdma_WriteReg(XPAR_AXI_VDMA_0_BASEADDR, XAXIVDMA_HI_FRMBUF_OFFSET, <span style=\"color:#ae81ff\">0x00000001</span>);  <span style=\"color:#75715e\">// Read Channel: VDMA MM2S Reg_Index\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    XAxiVdma_WriteReg(XPAR_AXI_VDMA_0_BASEADDR, XAXIVDMA_MM2S_ADDR_OFFSET <span style=\"color:#f92672\">+</span> XAXIVDMA_START_ADDR_OFFSET, (UINTPTR)test_image);  <span style=\"color:#75715e\">// Read Channel: VDMA MM2S Frame buffer Start Addr 1\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    XAxiVdma_WriteReg(XPAR_AXI_VDMA_0_BASEADDR, XAXIVDMA_MM2S_ADDR_OFFSET <span style=\"color:#f92672\">+</span> XAXIVDMA_STRD_FRMDLY_OFFSET, <span style=\"color:#ae81ff\">0x00000500</span>);  <span style=\"color:#75715e\">// Read Channel: VDMA MM2S FRM_Delay, and Stride\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    XAxiVdma_WriteReg(XPAR_AXI_VDMA_0_BASEADDR, XAXIVDMA_MM2S_ADDR_OFFSET <span style=\"color:#f92672\">+</span> XAXIVDMA_HSIZE_OFFSET, <span style=\"color:#ae81ff\">0x00000500</span>);  <span style=\"color:#75715e\">// Read Channel: VDMA MM2S HSIZE\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    XAxiVdma_WriteReg(XPAR_AXI_VDMA_0_BASEADDR, XAXIVDMA_MM2S_ADDR_OFFSET <span style=\"color:#f92672\">+</span> XAXIVDMA_VSIZE_OFFSET, <span style=\"color:#ae81ff\">0x000001E0</span>);  <span style=\"color:#75715e\">// Read Channel: VDMA MM2S VSIZE  (Note: Also Starts VDMA transaction)\n</span></span></span></code></pre><ul>\n<li>\n<p>To enable the VDMA MM2S circular Mode and start bits, we referenced the MM2S_VDMACR Register and enabled the first and second bit which enabled circular mode and started VDMA operations. Since the start bit was at bit position 0 and the circular mode enable was on bit position 1, we wrote 0x3 to the register to make both the bits &lsquo;1&rsquo;.</p>\n</li>\n<li>\n<p>Since our VDMA we wanted any read access between 0x5C and 0x98 to access the start address 1 to 16 so we set this register to 0x0.</p>\n</li>\n<li>\n<p>We set the MM2S start Address enabled by the previously discussed register to the address of the first byte of the image we wanted to display.</p>\n</li>\n<li>\n<p>The stride was set to the size of our horizontal offset and there was no frame delay. Since all the pixel data is aligned to 16-bits, our stride equaled the horizontal offset in bytes. See next bullet for horizontal offset size justification.</p>\n</li>\n<li>\n<p>The horizontal offset was set to 2x our desired horizontal size since the horizontal line was 2 bytes. So since we are drawing 640 pixels horizontally, the offset is 640 * 2 = 1280, which is 0x500.</p>\n</li>\n<li>\n<p>The vertical offset was set to our desired vertical size of 480 lines, which is 0x1E0 in hex.</p>\n</li>\n</ul>\n<h2 id=\"in-your-writeup-explain-how-you-converted-these-color-values-valid-values-for-the-16-bit-framebuffer\"><a class=\"anchor permalink p-4\" href=\"#in-your-writeup-explain-how-you-converted-these-color-values-valid-values-for-the-16-bit-framebuffer\">#</a> In your writeup, explain how you converted these color values valid values for the 16-bit framebuffer.</h2>\n<p><img src=\"https://conneroh.fly.storage.tigris.dev/projects/Cyclone_checker.jpg\"></p>\n<p>We worked through calculating the RGB values manually using python and then implemented the necessary conversion functions in the nes_bootloader.c file.</p>\n<p><strong>Conversion Description</strong></p>\n<p>In 24-bit color, 8 bits are used for each color (RGB). Since we are using 12-bit color with 4-bits of padding, we need 4 bits per color. This means that we need to map the 8-bit colors to 4-bit colors using a linear relationship. This was done by only using the most significant byte of each of the colors in the 12-bit color. This makes it so 0x0 in 24-bit maps to 0x0 in 12-bit and 0xFFFFFF in 24-bit maps to 0xFFFF in 12-bit color, which is what we want. However the endianness of the colors in the two formats differ. Red is on the MSB in 24-bit color while red is on the LSB in 12-bit color, so some shifting needs to be done.</p>\n<p>To derive the shift values, it is best to isolate the 3 different colors in the 24-bit format.</p>\n<p><strong>24-Bit Color</strong><br>\n0xABCDEF:<br>\nRed: 0xAB | Green: 0xCD | Blue: EF</p>\n<p>**12-Bit Color<br>\n0xABC</p>\n<p>Red: 0xC | Green: 0xB | Blue: 0xA</p>\n<p>Now that we have an example 24-bit color separated into the three colors, we can look at the conversion for each.</p>\n<p><strong>Red</strong><br>\nFor red, we need the upper 4 bits to be moved to bit positions 0-3 for the 12-bit color. This is achieved by shifting the value right 20 bits. No masking is needed since the lower 4 bits are shifted off.</p>\n<p><strong>Green</strong><br>\nFor green, we need the upper 4 bits to be in bit positions 4-7. To achieve this, we can shift it to the right 8 bits and then mask off the lower 4 bits via &amp; 0xF0.</p>\n<p><strong>Blue</strong><br>\nFor blue, we need to get the upper 4 bits in bit positions 8-11. To achieve this, we can shift it to the left 4 bits and then mask off the lower 4 bits via &amp; 0xF00.</p>\n<p>All of these color values are stored in their own 16-bit unsigned-integer variables so they can be bitwise OR'd together to give the final 12-Bit RGB value.</p>\n<p>The function that performs this conversion is given below:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Example: 0xC8103E\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// 0xC8 -&gt; Red | 0x10 -&gt; Green | 0x3E -&gt; Blue\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>u16 <span style=\"color:#a6e22e\">convert_color_24_16</span>(u32 color)\n</span></span><span style=\"display:flex;\"><span>{\n</span></span><span style=\"display:flex;\"><span>\tu16 r, g, b <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#75715e\">// Red: 0xFF0000 -&gt; 0xF\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t<span style=\"color:#75715e\">// Shift right 2 bytes (16 bits) to get the two bytes in the LSB position.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t<span style=\"color:#75715e\">// Then to get the left byte, shift 4 more.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\tr <span style=\"color:#f92672\">=</span> color <span style=\"color:#f92672\">&gt;&gt;</span> <span style=\"color:#ae81ff\">20</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#75715e\">// Green: 0xFF00 -&gt; 0xF0\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t<span style=\"color:#75715e\">//Shift right one byte (8 bits) to get the two bytes in the LSB position.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t<span style=\"color:#75715e\">// Then mask with 0xF0 to only take the left byte. It is already positioned\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t<span style=\"color:#75715e\">// where it needs to be.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\tg <span style=\"color:#f92672\">=</span> (color <span style=\"color:#f92672\">&gt;&gt;</span> <span style=\"color:#ae81ff\">8</span>) <span style=\"color:#f92672\">&amp;</span> <span style=\"color:#ae81ff\">0xF0</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#75715e\">// Blue:  0xFF -&gt; 0xF00\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t<span style=\"color:#75715e\">// Shift left 4 bits to get the left-most byte in the correct position.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t<span style=\"color:#75715e\">// Then mask with 0xF00 to only use the left-most byte.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\tb <span style=\"color:#f92672\">=</span> (color <span style=\"color:#f92672\">&lt;&lt;</span> <span style=\"color:#ae81ff\">4</span>) <span style=\"color:#f92672\">&amp;</span> <span style=\"color:#ae81ff\">0xF00</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#66d9ef\">return</span> r <span style=\"color:#f92672\">|</span> g <span style=\"color:#f92672\">|</span> b;\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre><h2 id=\"modify-the-nes-bootloader-code-such-that-the-nes-games-are-reasonably-playable-in-your-report-describe-your-general-approach-to-implementing-both-of-the-nescore-callback-functions\"><a class=\"anchor permalink p-4\" href=\"#modify-the-nes-bootloader-code-such-that-the-nes-games-are-reasonably-playable-in-your-report-describe-your-general-approach-to-implementing-both-of-the-nescore-callback-functions\">#</a> Modify the nes_bootloader code such that the NES games are reasonably playable. In your report, describe your general approach to implementing both of the NESCore_Callback functions.</h2>\n<p>For the “NESCore_Callback_OutputFrame,” our task was to expand the 256x240 image to a 640x480 resolution. For this, we first started by finding the scalar needed to enlarge the image. This scalar was then used to repeat the WorkFrame multiple times for every pixel read. Once implemented, we realized that we needed to add borders to our image to ensure that the VGA HW had a reference for black. This is because the VGA timing was slightly off, which caused data from the blanking period to be drawn in the drawing window. The black reference bars were implemented by updating the left and right columns of the WorkFrame to have a value of 0x0, which is black.</p>\n<p>For “NESCore_Callback_InputPadState,” we were able to use our GPIO code from step 5. However, we also created a simple interface (controls.h) to make the usage easier. Using this interface, we just had to call the configure function to configure the GPIO interfaces and then run the data collection function. We provided a pointer to a struct that stores all the data to this function to be populated. After the function ran, we had an array of enumeration values, where each value represented a pressed button. We decided to represent the button presses this way for simplicity. All one has to do to determine what buttons are being pressed down are look at each of the enumeration values in the array, no bit-parsing needed. However, this does require more CPU time and can make the mapping to how the NESCore has the inputs defined more tedious.</p>\n<h2 id=\"bonus-credit\"><a class=\"anchor permalink p-4\" href=\"#bonus-credit\">#</a> <strong>BONUS credit.</strong></h2>\n<p>We implemented the following extra credit items:</p>\n<ul>\n<li>SNES Controller Implementation</li>\n<li>Graphical Menu</li>\n<li>Return to Menu Functionality</li>\n</ul>\n<h3 id=\"snes-controller-implementation\"><a class=\"anchor permalink p-4\" href=\"#snes-controller-implementation\">#</a> SNES Controller Implementation</h3>\n<p>To implement a reader for the SNES controller, we first did some research on the protocol that the controller used. The website <a href=\"https://gamesx.com/controldata/snesdat.htm\">https://gamesx.com/controldata/snesdat.htm</a> provided a sufficient writeup of the protocol. However, to verify that we understood the protocol, we took the SNES controller and went out to one of the circuit labs. In the lab, we hooked up the function generator to generate the <code>clock</code> and <code>latch</code> signals. We then were able to read the response from the SNES controller using an oscilloscope. Am image of such a reading is shown below:</p>\n<p><img src=\"https://conneroh.fly.storage.tigris.dev/projects/oscope.png\"></p>\n<p>After we verified we understood the protocol, we devised a block diagram of an implementation. This block diagram is shown below:</p>\n<p><img src=\"https://conneroh.fly.storage.tigris.dev/projects/snes_controller_reader_bd.png\"></p>\n<p>This block diagram is made up of three major components: the pulse generator, a 4-bit counter, and a 16-bit shift register. The pulse generator creates the <code>latch</code> signal for the SNES controller upon receiving the <code>start</code> signal. After the pulse is sent, the pulse generator will not sent another pulse until it is reset and <code>start</code> is sent again. Then once the pulse has finished, the <code>counter_enable</code> signal is sent out to the 4-bit counter. The 4-bit counter will count 16 clock cycles, which will be aligned to the 16 data bits that the SNES controller sends. Once 16 clock cycles have been read, the <code>done</code> signal is sent out and the 16-bit shift register is disabled so we don't shift the read data off. Like the pulse generator, the 4-bit counter cannot be activated again until it is reset. This is to avoid restarting the 4-bit counter by accidently holding the enable signal high for too long.</p>\n<p>Finally, this system was hooked up to an AXI-Lite interface which allowed us to send the <code>start</code>  and <code>rest_n</code> signals, read the <code>done</code> signal, and read the controller from C code via memory-mapped registers.</p>\n<p>Once all of this was implemented, we ran many tests, fixed many issues and got a result that mostly worked. The design will always read the first data bit as a &lsquo;1&rsquo;, which corresponds to the B button not being pressed. To work around this, we simply re-bound X to B since we could read all the other buttons just fine. We believe this is due to some timing issue not caught in our simulated testbenches or due to running the <code>snes_clk</code> too fast. We originally had the AXI but clock and the <code>snes_clk</code> at different frequencies, but this introduced negative slack so we made them the same frequency. We found that when two SNES controller reader modules (for two player support) were instantiated, the AXI clock needed to be at least 1MHz to function properly. Finally, the VHDL was not written the best. I had FSMs baked into many of my blocks where the next state logic was handled in a sequential process. We now understand this not to be the best practice since it is a bit unclear how it will synthesize, but this was a good learning experience overall.</p>\n<p>There was another attempt to interface with a SNES controller through a Verilog defined IP. This particular method sought to follow the SNES protocol as defined in this website (<a href=\"https://gamesx.com/controldata/snesdat.htm)\">https://gamesx.com/controldata/snesdat.htm)</a>. A state machine was implemented such that the RTL would act like the SNES CPU; The latch and clock would hold high for 12 us to signal for the SNES controller to begin latching data, the latch would then go low for 6 us to signal for the SNES controller to begin sending data, and then the clock would then propagate on a 12 us period for 15 cycles such that the SNES data was completely transmitted. In order to implement a delay of 6 us and 12 us clock, a delay timer was created by using a counter. This counter counts to a parameter set to the quotient of the input clock and the desired period. Since the input clock to this RTL IP was 25 MHz 6 us achieved by counting up to 150 cycles. This RTL IP was successfully imported into the Vivado project, but there was issue when attempting to connect its output data to the processing system block. There was an attempt to create a custom AXI4-lite peripherial IP which wrapped the user project, but there wasn't enough time to trouble shoot the issues.</p>\n<p><img src=\"https://conneroh.fly.storage.tigris.dev/projects/ager.png\"></p>\n<p>Below is an example of the SNES controller correctly communicating with the FPGA.</p>\n<p><img src=\"https://conneroh.fly.storage.tigris.dev/projects/verilog_snes_ex.png\"></p>\n<h3 id=\"graphical-menu\"><a class=\"anchor permalink p-4\" href=\"#graphical-menu\">#</a> Graphical Menu</h3>\n<h5 id=\"design\"><a class=\"anchor permalink p-4\" href=\"#design\">#</a> Design</h5>\n<h6 id=\"navigation\"><a class=\"anchor permalink p-4\" href=\"#navigation\">#</a> Navigation</h6>\n<p>In designing the graphical window for our system, our goal was to enable smooth and intuitive scrolling through a rendered list of game options. This list not only displayed the names of available games but also included additional information about each game or ROM, providing a more informative and user-friendly interface.</p>\n<p>To ensure seamless navigation, we implemented an offset-based scrolling mechanism that allows users to freely scroll through the game list without restrictions. This feature dynamically adjusts the menu offset based on the selected index, ensuring that the currently highlighted game remains visible at all times. If the selected index moves beyond the visible portion of the menu, the offset is updated accordingly to bring the relevant content into view. This allows users to navigate effortlessly through large game lists without losing track of their current selection.</p>\n<h6 id=\"visuals\"><a class=\"anchor permalink p-4\" href=\"#visuals\">#</a> Visuals</h6>\n<p>To enhance the visual experience, we incorporated image rendering using the PPM (Portable Pixmap) format.</p>\n<p>This allowed us to include visual previews of games alongside their textual descriptions, enriching the browsing experience for users. The PPM format was chosen due to its simplicity and ease of implementation in our system. While this solution worked seamlessly on our development machines, we encountered issues when attempting to read PPM files from the Xilinx SD card. The format did not function as expected in this environment, leading to difficulties in rendering the images correctly.</p>\n<p><img src=\"https://conneroh.fly.storage.tigris.dev/projects/mp0-menu.gif\"></p>\n<p>Furthermore, we implemented a feature that allows users to return to the game menu after launching a game. To achieve this, we designed a specific input recognition system that detects when both the Start and Select buttons are pressed simultaneously. This shortcut provides a convenient and intuitive method for users to exit a game and navigate back to the menu without needing to reset the system.</p>\n<h4 id=\"implementation\"><a class=\"anchor permalink p-4\" href=\"#implementation\">#</a> Implementation</h4>\n<p>Implementation of the menu was the easy part, combing the working functionality with the existing NES emulator proved to be more of a problem to be solved&hellip;</p>\n<h5 id=\"navigation-1\"><a class=\"anchor permalink p-4\" href=\"#navigation-1\">#</a> Navigation</h5>\n<p>The implementation of the game menu navigation relies on a structured control loop that governs menu behavior and game launching. By designing the render_game_menu function to accept both the selected index and menu offset, we created a system that seamlessly integrates with the NES emulation. This approach ensures clarity and modularity in our implementation.</p>\n<p>First, by making our, <code>render_game_menu</code> function take the selected index and the menu offset, we allowed for our integration of the menu into the nes emulation implementation to be as clear as possible:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">void</span> <span style=\"color:#a6e22e\">render_game_menu</span>(<span style=\"color:#66d9ef\">int</span> selected_index, <span style=\"color:#66d9ef\">int</span> menu_offset)\n</span></span><span style=\"display:flex;\"><span>{\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// draws the actual game menu to the draw buffer\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  draw_game_menu(<span style=\"color:#f92672\">*</span>draw_buffer, selected_index, menu_offset);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  Xil_DCacheFlush();\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  XAxiVdma_WriteReg(\n</span></span><span style=\"display:flex;\"><span>      XPAR_AXI_VDMA_0_BASEADDR,\n</span></span><span style=\"display:flex;\"><span>      XAXIVDMA_MM2S_ADDR_OFFSET <span style=\"color:#f92672\">+</span> XAXIVDMA_START_ADDR_OFFSET,\n</span></span><span style=\"display:flex;\"><span>      (u32)<span style=\"color:#f92672\">*</span>draw_buffer); <span style=\"color:#75715e\">// Read Channel: VDMA MM2S Frame buffer Start Addr 1\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\n</span></span><span style=\"display:flex;\"><span>  draw_buffer <span style=\"color:#f92672\">=</span> (draw_buffer <span style=\"color:#f92672\">==</span> <span style=\"color:#f92672\">&amp;</span>front_buffer <span style=\"color:#f92672\">?</span> <span style=\"color:#f92672\">&amp;</span>back_buffer : <span style=\"color:#f92672\">&amp;</span>front_buffer);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  XAxiVdma_WriteReg(\n</span></span><span style=\"display:flex;\"><span>      XPAR_AXI_VDMA_0_BASEADDR,\n</span></span><span style=\"display:flex;\"><span>      XAXIVDMA_MM2S_ADDR_OFFSET <span style=\"color:#f92672\">+</span> XAXIVDMA_VSIZE_OFFSET,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#ae81ff\">480</span>); <span style=\"color:#75715e\">// Read Channel: VDMA MM2S VSIZE and start transaction.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>}\n</span></span></code></pre><p>A dedicated game menu loop runs prior to ROM execution, maintaining functionality for game selection and ensuring smooth returns to the menu upon exiting a game. Within this loop, control inputs are continuously read, updating the selected game index accordingly. The menu offset dynamically adjusts to keep the selected game within view. Once a selection is confirmed, the game loads, and control is passed to the emulator.</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">char</span> <span style=\"color:#f92672\">*</span><span style=\"color:#a6e22e\">game_menu</span>()\n</span></span><span style=\"display:flex;\"><span>{\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">int</span> selected_index <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">int</span> menu_offset <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// the number of games to select from. (gotten from menu.c)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">int</span> num_games <span style=\"color:#f92672\">=</span> get_games_length();\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// actual name of the name\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">char</span> <span style=\"color:#f92672\">*</span>rom_name;\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// currectly selected game (0, 0)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">char</span> <span style=\"color:#f92672\">*</span>selected_game <span style=\"color:#f92672\">=</span> get_selected_game_rom_name(selected_index, menu_offset);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Allocate space for the dpad data.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  dpad_state_p1.active_buttons <span style=\"color:#f92672\">=</span> malloc(<span style=\"color:#66d9ef\">sizeof</span>(t_dpad_buttons) <span style=\"color:#f92672\">*</span> DPAD_BUTTON_COUNT);\n</span></span><span style=\"display:flex;\"><span>  dpad_state_p1.len <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span>  dpad_state_p2.active_buttons <span style=\"color:#f92672\">=</span> malloc(<span style=\"color:#66d9ef\">sizeof</span>(t_dpad_buttons) <span style=\"color:#f92672\">*</span> DPAD_BUTTON_COUNT);\n</span></span><span style=\"display:flex;\"><span>  dpad_state_p2.len <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Allocate space for the general button data.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  general_button_states_p1.active_buttons <span style=\"color:#f92672\">=</span> malloc(<span style=\"color:#66d9ef\">sizeof</span>(t_general_button_states) <span style=\"color:#f92672\">*</span> GENERAL_BUTTON_COUNT);\n</span></span><span style=\"display:flex;\"><span>  general_button_states_p1.len <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span>  general_button_states_p2.active_buttons <span style=\"color:#f92672\">=</span> malloc(<span style=\"color:#66d9ef\">sizeof</span>(t_general_button_states) <span style=\"color:#f92672\">*</span> GENERAL_BUTTON_COUNT);\n</span></span><span style=\"display:flex;\"><span>  general_button_states_p2.len <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  render_game_menu(selected_index, menu_offset);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">while</span> (<span style=\"color:#ae81ff\">1</span>)\n</span></span><span style=\"display:flex;\"><span>  {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (selected_index <span style=\"color:#f92672\">&lt;</span> menu_offset)\n</span></span><span style=\"display:flex;\"><span>    {\n</span></span><span style=\"display:flex;\"><span>      menu_offset <span style=\"color:#f92672\">=</span> selected_index;\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">else</span> <span style=\"color:#66d9ef\">if</span> (selected_index <span style=\"color:#f92672\">&gt;=</span> menu_offset <span style=\"color:#f92672\">+</span> ROWS_GAME_MENU)\n</span></span><span style=\"display:flex;\"><span>    {\n</span></span><span style=\"display:flex;\"><span>      menu_offset <span style=\"color:#f92672\">=</span> selected_index <span style=\"color:#f92672\">-</span> ROWS_GAME_MENU <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">1</span>;\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    get_dpad_state(<span style=\"color:#f92672\">&amp;</span>dpad_state_p1, <span style=\"color:#ae81ff\">0</span>);\n</span></span><span style=\"display:flex;\"><span>    get_general_buttons_state(<span style=\"color:#f92672\">&amp;</span>general_button_states_p1, <span style=\"color:#ae81ff\">0</span>);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">switch</span> (dpad_state_p1.active_buttons[<span style=\"color:#ae81ff\">0</span>])\n</span></span><span style=\"display:flex;\"><span>    {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">case</span> UP:\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">if</span> (selected_index <span style=\"color:#f92672\">&lt;</span> <span style=\"color:#ae81ff\">1</span>)\n</span></span><span style=\"display:flex;\"><span>      {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">continue</span>;\n</span></span><span style=\"display:flex;\"><span>      }\n</span></span><span style=\"display:flex;\"><span>      selected_index<span style=\"color:#f92672\">--</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>      selected_game <span style=\"color:#f92672\">=</span> get_selected_game_rom_name(selected_index, menu_offset);\n</span></span><span style=\"display:flex;\"><span>      render_game_menu(selected_index, menu_offset);\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">break</span>;\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">case</span> DOWN:\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">if</span> (selected_index <span style=\"color:#f92672\">&gt;</span> num_games)\n</span></span><span style=\"display:flex;\"><span>      {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">continue</span>;\n</span></span><span style=\"display:flex;\"><span>      }\n</span></span><span style=\"display:flex;\"><span>      selected_index<span style=\"color:#f92672\">++</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>      selected_game <span style=\"color:#f92672\">=</span> get_selected_game_rom_name(selected_index, menu_offset);\n</span></span><span style=\"display:flex;\"><span>      render_game_menu(selected_index, menu_offset);\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">break</span>;\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">default</span><span style=\"color:#f92672\">:</span>\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">break</span>;\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">switch</span> (general_button_states_p1.active_buttons[<span style=\"color:#ae81ff\">0</span>])\n</span></span><span style=\"display:flex;\"><span>    {\n</span></span><span style=\"display:flex;\"><span>    \t<span style=\"color:#66d9ef\">case</span> A:\n</span></span><span style=\"display:flex;\"><span>    \t<span style=\"color:#66d9ef\">case</span> START:\n</span></span><span style=\"display:flex;\"><span>    \t\t<span style=\"color:#66d9ef\">return</span> selected_game;\n</span></span><span style=\"display:flex;\"><span>    \t<span style=\"color:#66d9ef\">default</span><span style=\"color:#f92672\">:</span>\n</span></span><span style=\"display:flex;\"><span>    \t\t<span style=\"color:#66d9ef\">break</span>;\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    usleep(<span style=\"color:#ae81ff\">50</span>);\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  rom_name <span style=\"color:#f92672\">=</span> get_selected_game_rom_name(selected_index, menu_offset);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">return</span> rom_name;\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre><p>To handle game selection and navigation, we allocate memory for button state tracking, ensuring responsiveness and accuracy in user interactions. Input signals such as directional pad presses update the menu selection, while button confirmations trigger game execution. Additionally, the <code>main</code> program loop continuously resets the system environment when exiting a game, allowing users to navigate back to the menu without requiring a system restart.</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">int</span> <span style=\"color:#a6e22e\">main</span>()\n</span></span><span style=\"display:flex;\"><span>{\n</span></span><span style=\"display:flex;\"><span>  init_platform();\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Initialize all memory space\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  xil_init();\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Initialize the NESCore\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  NESCore_Init();\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Enable the cache\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  Xil_DCacheEnable();\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">while</span> (<span style=\"color:#ae81ff\">1</span>)\n</span></span><span style=\"display:flex;\"><span>  {\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#75715e\">// return the selected game\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">char</span> <span style=\"color:#f92672\">*</span>selected_game <span style=\"color:#f92672\">=</span> game_menu();\n</span></span><span style=\"display:flex;\"><span>    xil_init();\n</span></span><span style=\"display:flex;\"><span>    NESCore_Init();\n</span></span><span style=\"display:flex;\"><span>    nes_load(selected_game); <span style=\"color:#75715e\">// shown below\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  }\n</span></span><span style=\"display:flex;\"><span>  cleanup_platform();\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">return</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre><p>Finally, when we actually load the <code>.nes</code> rom, by a call to <code>nes_load()</code>, the internal game loop of the emulator allows us to listen for the controller state to potentially exit from the game if the user presses both start and select at the same time, and return from<code>nes_load</code> as mentioned:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">void</span> <span style=\"color:#a6e22e\">nes_load</span>( <span style=\"color:#66d9ef\">char</span> <span style=\"color:#f92672\">*</span>rom_name) {\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">int32_t</span> result <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>, i;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  usleep(<span style=\"color:#ae81ff\">100000</span>);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Disable the cache so it will play nice with xilsd (needed here)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  Xil_DCacheDisable();\n</span></span><span style=\"display:flex;\"><span>  result <span style=\"color:#f92672\">=</span> NESCore_LoadROM(rom_name);\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">if</span> (result <span style=\"color:#f92672\">!=</span> <span style=\"color:#ae81ff\">0</span>) {\n</span></span><span style=\"display:flex;\"><span>    xil_printf(<span style=\"color:#e6db74\">&#34;nes_load(): invalid ROM load. Returning</span><span style=\"color:#ae81ff\">\\r\\n</span><span style=\"color:#e6db74\">&#34;</span>); <span style=\"color:#66d9ef\">return</span>;\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Enable the cache for performance reasons\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  Xil_DCacheEnable();\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  result <span style=\"color:#f92672\">=</span> NESCore_Reset();\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">if</span> (result <span style=\"color:#f92672\">!=</span> <span style=\"color:#ae81ff\">0</span>) {\n</span></span><span style=\"display:flex;\"><span>    xil_printf(<span style=\"color:#e6db74\">&#34;nes_load(): invalid reset. Returning</span><span style=\"color:#ae81ff\">\\r\\n</span><span style=\"color:#e6db74\">&#34;</span>); <span style=\"color:#66d9ef\">return</span>;\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// set the boot state that we are playing a game\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  bootstate.nes_playing <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">1</span>;\n</span></span><span style=\"display:flex;\"><span>  usleep(<span style=\"color:#ae81ff\">100000</span>);\n</span></span><span style=\"display:flex;\"><span>  ptv <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">int</span> cyRes;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">do</span> {\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">for</span> (i <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>; i <span style=\"color:#f92672\">&lt;</span> RESET_TIME; i<span style=\"color:#f92672\">++</span>) {\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#75715e\">// Got START and SELECT at the same time from user, go back to menu.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t<span style=\"color:#66d9ef\">extern</span> t_general_button_states general_button_states_p1;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\tget_general_buttons_state(<span style=\"color:#f92672\">&amp;</span>general_button_states_p1, <span style=\"color:#ae81ff\">0</span>);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#75715e\">// Or all together.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\tu16 state <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0x0</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#66d9ef\">for</span>(<span style=\"color:#66d9ef\">int</span> i <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>; i <span style=\"color:#f92672\">&lt;</span> general_button_states_p1.len; <span style=\"color:#f92672\">++</span>i)\n</span></span><span style=\"display:flex;\"><span>\t{\n</span></span><span style=\"display:flex;\"><span>\t\tstate <span style=\"color:#f92672\">|=</span> (u16) general_button_states_p1.active_buttons[i];\n</span></span><span style=\"display:flex;\"><span>\t}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#66d9ef\">if</span>(state <span style=\"color:#f92672\">==</span> (u16)(((u16)START <span style=\"color:#f92672\">|</span> (u16)SELECT)))\n</span></span><span style=\"display:flex;\"><span>\t{\n</span></span><span style=\"display:flex;\"><span>\t\txil_printf(<span style=\"color:#e6db74\">&#34;Returning to main menu!</span><span style=\"color:#ae81ff\">\\n\\r</span><span style=\"color:#e6db74\">&#34;</span>);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#75715e\">// Give user time to release buttons.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\tsleep(<span style=\"color:#ae81ff\">1</span>);\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#66d9ef\">return</span>;\n</span></span><span style=\"display:flex;\"><span>\t}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>     NESCore_Cycle();\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  } <span style=\"color:#66d9ef\">while</span> (<span style=\"color:#ae81ff\">1</span>);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  bootstate.nes_playing <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">return</span>;\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre><p>Additionally, to define our font, we statically declared a basic 8 bit font to use:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#75715e\">/*\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"> * Complete 8x8 font table for the first 128 ASCII characters.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"> * (Data derived from the public domain font8x8_basic)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"> */</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">static</span> <span style=\"color:#66d9ef\">const</span> u8 font8x8_basic[<span style=\"color:#ae81ff\">128</span>][<span style=\"color:#ae81ff\">8</span>] <span style=\"color:#f92672\">=</span> {\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#75715e\">// ...\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    [<span style=\"color:#ae81ff\">0x1C</span>] <span style=\"color:#f92672\">=</span> {<span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>},\n</span></span><span style=\"display:flex;\"><span>    [<span style=\"color:#ae81ff\">0x1D</span>] <span style=\"color:#f92672\">=</span> {<span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>},\n</span></span><span style=\"display:flex;\"><span>    [<span style=\"color:#ae81ff\">0x1E</span>] <span style=\"color:#f92672\">=</span> {<span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>},\n</span></span><span style=\"display:flex;\"><span>    [<span style=\"color:#ae81ff\">0x1F</span>] <span style=\"color:#f92672\">=</span> {<span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>},\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// Printable characters (0x20 to 0x7E)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    [<span style=\"color:#ae81ff\">0x20</span>] <span style=\"color:#f92672\">=</span> {<span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x00</span>}, <span style=\"color:#75715e\">// space\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    [<span style=\"color:#ae81ff\">0x21</span>] <span style=\"color:#f92672\">=</span> {<span style=\"color:#ae81ff\">0x18</span>, <span style=\"color:#ae81ff\">0x3C</span>, <span style=\"color:#ae81ff\">0x3C</span>, <span style=\"color:#ae81ff\">0x18</span>, <span style=\"color:#ae81ff\">0x18</span>, <span style=\"color:#ae81ff\">0x00</span>, <span style=\"color:#ae81ff\">0x18</span>, <span style=\"color:#ae81ff\">0x00</span>}, <span style=\"color:#75715e\">// !\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t<span style=\"color:#75715e\">// ...\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    [<span style=\"color:#ae81ff\">0x41</span>] <span style=\"color:#f92672\">=</span> {<span style=\"color:#ae81ff\">0x38</span>, <span style=\"color:#ae81ff\">0x6C</span>, <span style=\"color:#ae81ff\">0xC6</span>, <span style=\"color:#ae81ff\">0xFE</span>, <span style=\"color:#ae81ff\">0xC6</span>, <span style=\"color:#ae81ff\">0xC6</span>, <span style=\"color:#ae81ff\">0xC6</span>, <span style=\"color:#ae81ff\">0x00</span>}, <span style=\"color:#75715e\">// A\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    [<span style=\"color:#ae81ff\">0x42</span>] <span style=\"color:#f92672\">=</span> {<span style=\"color:#ae81ff\">0xFC</span>, <span style=\"color:#ae81ff\">0x66</span>, <span style=\"color:#ae81ff\">0x66</span>, <span style=\"color:#ae81ff\">0x7C</span>, <span style=\"color:#ae81ff\">0x66</span>, <span style=\"color:#ae81ff\">0x66</span>, <span style=\"color:#ae81ff\">0xFC</span>, <span style=\"color:#ae81ff\">0x00</span>}, <span style=\"color:#75715e\">// B\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    [<span style=\"color:#ae81ff\">0x43</span>] <span style=\"color:#f92672\">=</span> {<span style=\"color:#ae81ff\">0x3C</span>, <span style=\"color:#ae81ff\">0x66</span>, <span style=\"color:#ae81ff\">0xC0</span>, <span style=\"color:#ae81ff\">0xC0</span>, <span style=\"color:#ae81ff\">0xC0</span>, <span style=\"color:#ae81ff\">0x66</span>, <span style=\"color:#ae81ff\">0x3C</span>, <span style=\"color:#ae81ff\">0x00</span>}, <span style=\"color:#75715e\">// C\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    [<span style=\"color:#ae81ff\">0x44</span>] <span style=\"color:#f92672\">=</span> {<span style=\"color:#ae81ff\">0xF8</span>, <span style=\"color:#ae81ff\">0x6C</span>, <span style=\"color:#ae81ff\">0x66</span>, <span style=\"color:#ae81ff\">0x66</span>, <span style=\"color:#ae81ff\">0x66</span>, <span style=\"color:#ae81ff\">0x6C</span>, <span style=\"color:#ae81ff\">0xF8</span>, <span style=\"color:#ae81ff\">0x00</span>}, <span style=\"color:#75715e\">// D\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    [<span style=\"color:#ae81ff\">0x45</span>] <span style=\"color:#f92672\">=</span> {<span style=\"color:#ae81ff\">0xFE</span>, <span style=\"color:#ae81ff\">0x62</span>, <span style=\"color:#ae81ff\">0x68</span>, <span style=\"color:#ae81ff\">0x78</span>, <span style=\"color:#ae81ff\">0x68</span>, <span style=\"color:#ae81ff\">0x62</span>, <span style=\"color:#ae81ff\">0xFE</span>, <span style=\"color:#ae81ff\">0x00</span>}, <span style=\"color:#75715e\">// E\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    [<span style=\"color:#ae81ff\">0x46</span>] <span style=\"color:#f92672\">=</span> {<span style=\"color:#ae81ff\">0xFE</span>, <span style=\"color:#ae81ff\">0x62</span>, <span style=\"color:#ae81ff\">0x68</span>, <span style=\"color:#ae81ff\">0x78</span>, <span style=\"color:#ae81ff\">0x68</span>, <span style=\"color:#ae81ff\">0x60</span>, <span style=\"color:#ae81ff\">0xF0</span>, <span style=\"color:#ae81ff\">0x00</span>}, <span style=\"color:#75715e\">// F\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t<span style=\"color:#75715e\">// ...\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>};\n</span></span></code></pre><p>This static declaration of the font allowed for a very simple implementation of <code>draw_char()</code> and <code>draw_text()</code>,</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#75715e\">/*\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"> * Draw a single character at (x, y) using the given 16-bit color.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"> */</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">void</span> <span style=\"color:#a6e22e\">draw_char</span>(u16 (<span style=\"color:#f92672\">*</span>fb)[VIDEO_WIDTH], <span style=\"color:#66d9ef\">int</span> x, <span style=\"color:#66d9ef\">int</span> y, <span style=\"color:#66d9ef\">char</span> c, u16 color) {\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">if</span> ((<span style=\"color:#66d9ef\">unsigned</span> <span style=\"color:#66d9ef\">char</span>)c <span style=\"color:#f92672\">&gt;</span> <span style=\"color:#ae81ff\">127</span>)\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span>;\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">for</span> (<span style=\"color:#66d9ef\">int</span> row <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>; row <span style=\"color:#f92672\">&lt;</span> MENU_FONT_HEIGHT; row<span style=\"color:#f92672\">++</span>) {\n</span></span><span style=\"display:flex;\"><span>    u8 row_bits <span style=\"color:#f92672\">=</span> font8x8_basic[(<span style=\"color:#66d9ef\">unsigned</span> <span style=\"color:#66d9ef\">char</span>)c][row];\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">for</span> (<span style=\"color:#66d9ef\">int</span> col <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>; col <span style=\"color:#f92672\">&lt;</span> MENU_FONT_WIDTH; col<span style=\"color:#f92672\">++</span>) {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">if</span> (row_bits <span style=\"color:#f92672\">&amp;</span> (<span style=\"color:#ae81ff\">1</span> <span style=\"color:#f92672\">&lt;&lt;</span> (<span style=\"color:#ae81ff\">7</span> <span style=\"color:#f92672\">-</span> col))) {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">int</span> px <span style=\"color:#f92672\">=</span> x <span style=\"color:#f92672\">+</span> col;\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">int</span> py <span style=\"color:#f92672\">=</span> y <span style=\"color:#f92672\">+</span> row;\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">if</span> (px <span style=\"color:#f92672\">&gt;=</span> <span style=\"color:#ae81ff\">0</span> <span style=\"color:#f92672\">&amp;&amp;</span> px <span style=\"color:#f92672\">&lt;</span> VIDEO_WIDTH <span style=\"color:#f92672\">&amp;&amp;</span> py <span style=\"color:#f92672\">&gt;=</span> <span style=\"color:#ae81ff\">0</span> <span style=\"color:#f92672\">&amp;&amp;</span> py <span style=\"color:#f92672\">&lt;</span> VIDEO_HEIGHT) {\n</span></span><span style=\"display:flex;\"><span>          fb[py][px] <span style=\"color:#f92672\">=</span> color;\n</span></span><span style=\"display:flex;\"><span>        }\n</span></span><span style=\"display:flex;\"><span>      }\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre><p>This simple but parameterized implementation allows for a clear and short definition of a <code>draw_text()</code> function:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#75715e\">/*\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"> * Draw a null-terminated string starting at (x, y) with the given 16-bit color.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"> */</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">void</span> <span style=\"color:#a6e22e\">draw_text</span>(u16 (<span style=\"color:#f92672\">*</span>fb)[VIDEO_WIDTH], <span style=\"color:#66d9ef\">int</span> x, <span style=\"color:#66d9ef\">int</span> y, <span style=\"color:#66d9ef\">const</span> <span style=\"color:#66d9ef\">char</span> <span style=\"color:#f92672\">*</span>text,\n</span></span><span style=\"display:flex;\"><span>               u16 color) {\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">int</span> cursor_x <span style=\"color:#f92672\">=</span> x;\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">while</span> (<span style=\"color:#f92672\">*</span>text) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">*</span>text <span style=\"color:#f92672\">==</span> <span style=\"color:#e6db74\">&#39;\\n&#39;</span>) {\n</span></span><span style=\"display:flex;\"><span>      cursor_x <span style=\"color:#f92672\">=</span> x;\n</span></span><span style=\"display:flex;\"><span>      y <span style=\"color:#f92672\">+=</span> MENU_FONT_HEIGHT;\n</span></span><span style=\"display:flex;\"><span>    } <span style=\"color:#66d9ef\">else</span> {\n</span></span><span style=\"display:flex;\"><span>      draw_char(fb, cursor_x, y, <span style=\"color:#f92672\">*</span>text, color);\n</span></span><span style=\"display:flex;\"><span>      cursor_x <span style=\"color:#f92672\">+=</span> MENU_FONT_WIDTH;\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    text<span style=\"color:#f92672\">++</span>;\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre>",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 10, 0, time.UTC),
	Description:     "The first Project from CPRE488 at Iowa State University",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: cpre488-mp0\naliases:\n  - CPRE488 MP0\ntags:\n  - hdl/vhdl\n  - ide/vivado\n  - programming-language/c\n  - protocol/uart\n  - edu/iastate\nbanner_path: projects/mp0-menu.gif\ncreated_at: 2025-03-27T14:13:10.000-06:00\ndescription: The first Project from CPRE488 at Iowa State University\ntitle: CPRE488 MP0\nupdated_at: 2025-04-14T19:16:20.000-06:00\n---\n\n# CPRE488 MP0\n\n## Breaking down `nes_bootloader.c`\n\n### **Main Components**\n\n1. **Initialization** (`xil_init()`):\n   - **Hardware Setup**: Configures Xilinx peripherals:\n     - **VTC (Video Timing Controller)**: Generates video timing signals.\n     - **VDMA (Video DMA)**: Transfers framebuffer data to the display (configuration incomplete in initially given code).\n     - **Framebuffers**: Initializes front/back buffers in DDR memory for double-buffering.\n   - **Memory Initialization**: Clears framebuffers with `INIT_COLOR` (gray) and sets up boot state (debug level, active buffer).\n\n2. **NES Emulation Loop** (`nes_load()`):\n   - **ROM Loading**:\n     - Hardcodes loading `zelda.nes` from SD card (via `NESCore_LoadROM`).\n     - Disables cache temporarily for SD card I/O compatibility.\n   - **Emulation Start**:\n     - Resets the NES core (`NESCore_Reset`).\n     - Enters an infinite loop running `NESCore_Cycle()` to emulate NES CPU/PPU cycles.\n\n3. **Video Output** (`NESCore_Callback_OutputFrame` in `NESCore_Callback.c`):\n   - **Pixel Conversion**: Maps NES color indices to 16-bit RGB using `NesPalette3`.\n   - **Framebuffer Update**: Intended to write pixels to `FBUFFER_BASEADDR`, but the current implementation is incomplete (pixels aren't written to the buffer).\n   - **Cache Flush**: Ensures VDMA sees updated framebuffer data.\n\n4. **Input Handling** (`NESCore_Callback_InputPadState`):\n   - **Hardcoded Input**: Player 1’s controller is set to press A/B buttons (no real input handling yet).\n\n5. **Audio** (Stubs):\n   - Sound functions are placeholders; audio isn’t implemented.\n\n### **Key Code Structures**\n\nThe following describes some of the key code structures in the initially given `nes_bootloader.c` file.\n\n- **Main Loop**:\n  Loads and runs NES ROM indefinitely through the `nes_load()` hardcoded internal input to call of `nes_strncpy()`.\n  ```c\n  while (1) {\n    nes_load();\n  }\n  ```\n- **Emulation Cycle**:\n  Emulates NES hardware cycles\n  ```c\n  do {\n    for (i = 0; i < RESET_TIME; i++) {\n      NESCore_Cycle(); \n    }\n  } while (1); // No exit condition\n  ```\n  \n### **Framebuffer & Video Pipeline**\n\nIn the code (nes_bootloader.c), the VDMA is responsible for the following essential functions:\n\n#### Streaming the Framebuffer:\n\n- The NES emulator draws frames into the front buffer (`FBUFFER_BASEADDR`).\n- The VDMA continuously streams this buffer to the display controller (e.g., HDMI/VGA module).\n\n#### Double-Buffering:\n\n- While the VDMA streams the front buffer, the emulator can render the next frame to the back buffer (i.e. `BBUFFER_BASEADDR`).\n- Buffers are swapped to avoid visual artifacts.\n\n`nes_pixelcpy` coming from `utils.c` which copies from `src` to `dest` pointers and converts the RGBA `.bmp` to rbg pixel values\n\nDepends on the `xilinx-sdk` implementation.\n\n### **Flow Summary**\n\n1. **Boot**:\n   - Initialize hardware (VTC, VDMA, framebuffers).\n   - Load hardcoded NES ROM (`zelda.nes`).\n2. **Emulation**:\n   - Run NES CPU/PPU cycles indefinitely.\n   - Attempt to render frames to the framebuffer (broken in initially given code).\n3. **Display**:\n   - VDMA **should** stream the framebuffer to the display.\n\n![[projects/high_level_diagram.png]]\n\n## How does NESCore_Callback_OutputFrame() get called?\n\nInside **NESCore.c**, there is a main loop in **`NESCore_Cycle()`** that continually advances the emulation by stepping through each scanline.\n\nAt the end of each scanline, it calls **`NESCore_HSync()`**. Within **`NESCore_HSync()`**, once it reaches scanline 240 (the constant `SCAN_UNKNOWN_START`), there is a check:\n\n```c\n         case SCAN_UNKNOWN_START:\n          if (S.FrameCnt == 0) {\n            /* Calback function for rendering */\n            NESCore_Callback_OutputFrame(S.WorkFrame);\n     \n            /* Wait callback (for timing) */\n            NESCore_Callback_Wait();\n            break;\n```\n\nThat snippet shows exactly where (appox. line 847) **`NESCore_Callback_OutputFrame(S.WorkFrame)`** is invoked. Essentially:\n\n1. **`NESCore_Cycle()`** calls **`NESCore_HSync()`** at each scanline boundary.\n2. **`NESCore_HSync()`** recognizes when it’s at scanline 240 (end of the visible area).\n3. If this is not a skipped frame (`S.FrameCnt == 0`), it calls **`NESCore_Callback_OutputFrame()`**, which hands off the final rendered 256×240 image (`S.WorkFrame`) to your platform code (e.g. copying pixels out, displaying them, etc.).\n\nThus, **`NESCore_Callback_OutputFrame()`** is triggered once per frame near the bottom of each video frame cycle.\n\n## Step 2: Describe what configuration options are available and how they may be potentially useful in an embedded system?\n\nThe configuration options are run, debug, and hardware (single application debugger).\n\nWe analyzed the following three green boxes;\n\n**Generic Interrupt Controller (GIC)**\n- Interrupts for programmable logic (PL) and processing systems (PS)\n- PL-PS Interrupt Ports\n  - Can enable fast or not fast interrupt signals from PL to PS (CPU 0 or CPU 1)\n  - Enable 16-bit shared interrupt port from PL\n- **PS-PL Interrupt Ports**\n  - Enable interrupts from DMAC, SMC, QSPI, CTI, GPIO, USB, SDIO, ETHERNET, I2C, SPI, UART, CAN to PL\n\t\n\t**Usefulness Description:**\n\tHaving interrupt functionality is extremely important when working with embedded systems since they enable the CPU to respond to stimuli almost immediately. This removes the need to poll the status of a component or peripheral, which wastes CPU time. For example, let's say the embedded system has a UART module that is receiving data. Instead of polling the FIFO status register to know when data can be read out, an interrupt can be setup that will interrupt the CPU when a new character is ready to be read from the FIFO. Then the CPU will execute the interrupt handler, which reads the character. After the character is read, the CPU restores its previous state. No polling of status registers was needed to read out of the FIFO, which saved a lot of CPU time.\n\n**System Watch Dog Timer (SWDT)**\n  - Can enable Watch dog timer in APU\n  - Change IO (EMIO or MIO)\n\n\t**Usefulness Description:**\n\tWatchdog timers are useful in embedded systems to make sure that some process is not taking control of the CPU permanently and to handle hardware exceptions. Specifically, the watchdog timers can be used to make sure a set of asynchronous processes or threads are not taking up too much CPU time.\n\n**Direct Memory Access Controller (DMA Controller)**\n- Enable peripheral request interfaces that supports the connection of DMA-capable peripherals resident in the PL\n\n\t**Usefulness Description:**\n\tDMA is extremely useful in embedded systems when many memory operations or required. Instead of using up CPU time to facilitate memory operations, the CPU just has to tell the DMA what memory operations should be done and it executes them. This saves tons of CPU time, which is always desired when developing an embedded system. However, synchronization between the CPU and DMA must be established. This is usually done using interrupts, which were previously discussed.\n\n## Step 5: Are these buttons, LEDs, and switches connected via the PS subsystem or the PL subsystem? Briefly defend your answer. Note also that all three peripherals appear to be the same exact IP type (axi_gpio) – how can this be possible?\n \nThe LEDS, buttons and switches are connected to the PL subsystem as they are connected/controlled through GPIO subsystem, which belongs to the PL subsystem. The peripherals appear to be at the same exact IP type because an IP core such as `axi_gpio` is a general-purpose GPIO controller that can be instantiated multiple times within the design. Each instantiation can be configured independently to handle different sets of GPIOs.\n\nThe reason why buttons, LEDs, and switches can all use the same axi_gpio IP is that the axi_gpio module is highly configurable, allowing different instances to be set up for input or output operations. For example:\n\n    One instance of axi_gpio can be configured as an input interface for buttons.\n    Another instance can be configured as an output interface for LEDs.\n    A third instance can be configured to handle switches as inputs.\n\nEach instance is mapped to a different memory address and connected to separate GPIO pins, making it possible to use the same IP type multiple times within the system.\n\n## Step 5: Based on the datasheet and the address map shown in the “Address Editor” (mentioned in instruction 7 of Step 2: Use Designer Assistance), how would you (in software) read the current state of the switches? Be specific\n\n\nThe processing system can read the register of the axi_gpio which communicates with the switches. For example:\n\tOn our system, the GPIO AXI interface connected to the switches has a base address of 0x4122_0000 (this will most likely be different than the current one since other AXI interfaces have been added). According to the datasheet, an address offset of 0x4 from the base address points to the tri-state buffer register, which allows us to configure the GPIO interface to be read or write. According to the datasheet, if this register has a value of 0x0, the GPIO interface is configured for writes and if the register has a value of 0x1, it is configured for reads. So, to read from the switches we need to set the 32-bit register stored at 0x4122_0004 to 0x1. Then, according to the GPIO datasheet, the base address of the GPIO interface points to a 32-bit register where the GPIO data can be read from. So to read the switch states, we simply need to access the value stored at 0x4122_0000. That is it!*\n\n## Step 7: modifications: Create a Software Application A nice feature is the ability to right-click on any function to view its declaration – do this for the print() function. In your writeup, use this feature and describe what print() does, and how. Why do you believe this function is used by Xilinx for their Hello World application, as opposed to the more conventional printf() function?\n\nRight-clicking on the print() function opens a dialog for going to a specific declaration of the function from the available declarations. Clicking on the declarations. \n\nIf certain Xilinx preprocessor macros are defined, the print function output is console. \nYou give the print function a `*char` and it sends the \"string\" to the UART on stdout base address.\n\nThe stdio printf() function outputs the formatted input to the STDOUT stream. We believe that this stream is not hooked up to the UART since when we tried using the stdio printf(), we saw no output on the UART. So, it makes sense that the default \"Hello World\" example uses the Xilinx print() function instead since it manually sends the input using the UART, no streams invovled!\n\nThis is used in the Hello World example to print the \"Hello World\" string to the console while operating correctly in the xilinx emulator and on the actual fpga hardware.\n\n## Step 9: Connect to the Vivado Logic Analyzer: Take a screen capture of an LED wire turning on? Can you turn the LED on and off fast enough to get a screen capture of the Logic Analyzer displaying this pulse? If so, then provide this screen capture as well. For how long does the pulse stay high?\n\nThe LED outputs were connected to an Axi interconnect at slot_0. Because the LED is sending data, we can read the respective GPIO responses in the W Channel. The image below illustrates that the first and seventh switches were toggled in succession per the signals in WDATA. \n\n![[projects/cpre488-mp0-led-flash-capture.png]] \n\nA pulse duration of 25 ns is shown in the image above.\n\n## Modify the hello_world application to also interface with the switches, buttons, and LEDs that are configured in the programmable logic. For example, have the application print out the state of the switches when a button is pressed, or light up certain LEDs given an input integer.\n\nThe following code uses switches to toggle a respective LED and print to PuTTY if button 1 is active.\n\n```c\nint main()\n{\n    init_platform();\n    UINTPTR SWIn = 0x41220000;\n    UINTPTR LEDIn = 0x41200000;\n    UINTPTR ButtonIn = 0x41210000;\n    int32_t LEDOut = 0x00000000;\n    while (1) {\n    \tif ((Xil_In32(SWIn) & 0x00000001) == 0x00000001) {\n    \t\tLEDOut = LEDOut + 0x00000001;\n    \t}\n    \tif ((Xil_In32(SWIn) & 0x00000002) == 0x00000002) {\n\t\t\tLEDOut = LEDOut + 0x00000002;\n\t\t}\n    \tif ((Xil_In32(SWIn) & 0x00000004) == 0x00000004) {\n\t\t\tLEDOut = LEDOut + 0x00000004;\n\t\t}\n    \tif ((Xil_In32(SWIn) & 0x00000008) == 0x00000008) {\n    \t\tLEDOut = LEDOut + 0x00000008;\n    \t}\n    \tif ((Xil_In32(SWIn) & 0x000000010) == 0x00000010) {\n\t\t\tLEDOut = LEDOut + 0x00000010;\n\t\t}\n    \tif ((Xil_In32(SWIn) & 0x000000020) == 0x00000020) {\n\t\t\tLEDOut = LEDOut + 0x00000020;\n\t\t}\n    \tif ((Xil_In32(SWIn) & 0x00000040) == 0x00000040) {\n    \t\tLEDOut = LEDOut + 0x00000040;\n    \t}\n    \tif ((Xil_In32(SWIn) & 0x00000080) == 0x00000080) {\n\t\t\tLEDOut = LEDOut + 0x00000080;\n\t\t}\n    \tif((Xil_In32(ButtonIn) & 0x00000001) == 0x00000001){\n    \t\tprint(\"Button 1 is on\\n\\r\");\n    \t\tLEDOut = LEDOut + 0x00000001;\n    \t}\n    \tXil_Out32(LEDIn, LEDOut);\n    \tLEDOut = 0x00000000;\n    }\n    cleanup_platform();\n    return 0;\n}\n```\n\n\n## In VIVADO, add these peripherals to your project , connect and then configure them to generate a 640x480 output signal.\n\nThe Video Timing Control IP was set to the given timing values for 640x480 video. However, we had to change the active polarity of the Hsync and Vsync as the VTC defualt values did not align with the standard VGA protocol.\n![[projects/VTC_setup.png]]\n\nThe Video Direct Memory Access IP was set such that it had a data width of 16 bits to correspond to our Video Output IP.\n![[projects/VDMA_setup.png]]\n\nThe AXI4-Stream to Video Out IP was setup such that it could read 16 bits and output 16 bits. Because the VGA protocol did need any additional signals from this IP, we could use the Mono/Sensor video format to ensure our data stream widths were the desired sizes (12-bits also works for the output as long as it is properly mapped to the VGA pins). \n![[projects/Vidout_setup.png]]\n\nSome other important considerations were that the input clock had to be as close to 25.125 MHz, the VTC enable on the AXI4-Stream to Video Out IP had to be connected to the generation clock enable output on the Video Timing, and ensuring the AXI4-Stream to Video Out IP had an independent clock for video if we had a faster clock for the AXI stream. \n\n## Modify the configuration registers for correct VDMA operation, and in your writeup, provide a justification based on the VDMA documentation for how you set these values.\n\n![[projects/VGA.jpg]]\n\nOur VDMA register configurations were as follows:\n\n```c\n// Simple function abstraction by Vendor for writing VDMA registers\n    XAxiVdma_WriteReg(XPAR_AXI_VDMA_0_BASEADDR, XAXIVDMA_CR_OFFSET,  0x00000003);  // Read Channel: VDMA MM2S Circular Mode and Start bits set, VDMA MM2S Control\n    XAxiVdma_WriteReg(XPAR_AXI_VDMA_0_BASEADDR, XAXIVDMA_HI_FRMBUF_OFFSET, 0x00000001);  // Read Channel: VDMA MM2S Reg_Index\n    XAxiVdma_WriteReg(XPAR_AXI_VDMA_0_BASEADDR, XAXIVDMA_MM2S_ADDR_OFFSET + XAXIVDMA_START_ADDR_OFFSET, (UINTPTR)test_image);  // Read Channel: VDMA MM2S Frame buffer Start Addr 1\n    XAxiVdma_WriteReg(XPAR_AXI_VDMA_0_BASEADDR, XAXIVDMA_MM2S_ADDR_OFFSET + XAXIVDMA_STRD_FRMDLY_OFFSET, 0x00000500);  // Read Channel: VDMA MM2S FRM_Delay, and Stride\n    XAxiVdma_WriteReg(XPAR_AXI_VDMA_0_BASEADDR, XAXIVDMA_MM2S_ADDR_OFFSET + XAXIVDMA_HSIZE_OFFSET, 0x00000500);  // Read Channel: VDMA MM2S HSIZE\n    XAxiVdma_WriteReg(XPAR_AXI_VDMA_0_BASEADDR, XAXIVDMA_MM2S_ADDR_OFFSET + XAXIVDMA_VSIZE_OFFSET, 0x000001E0);  // Read Channel: VDMA MM2S VSIZE  (Note: Also Starts VDMA transaction)\n```\n- To enable the VDMA MM2S circular Mode and start bits, we referenced the MM2S_VDMACR Register and enabled the first and second bit which enabled circular mode and started VDMA operations. Since the start bit was at bit position 0 and the circular mode enable was on bit position 1, we wrote 0x3 to the register to make both the bits '1'.\n\n- Since our VDMA we wanted any read access between 0x5C and 0x98 to access the start address 1 to 16 so we set this register to 0x0.\n\n- We set the MM2S start Address enabled by the previously discussed register to the address of the first byte of the image we wanted to display.\n\n- The stride was set to the size of our horizontal offset and there was no frame delay. Since all the pixel data is aligned to 16-bits, our stride equaled the horizontal offset in bytes. See next bullet for horizontal offset size justification.\n\n- The horizontal offset was set to 2x our desired horizontal size since the horizontal line was 2 bytes. So since we are drawing 640 pixels horizontally, the offset is 640 * 2 = 1280, which is 0x500.\n\n- The vertical offset was set to our desired vertical size of 480 lines, which is 0x1E0 in hex.\n\n## In your writeup, explain how you converted these color values valid values for the 16-bit framebuffer.\n\n![[projects/Cyclone_checker.jpg]]\n\nWe worked through calculating the RGB values manually using python and then implemented the necessary conversion functions in the nes_bootloader.c file.\n\n**Conversion Description**\n\nIn 24-bit color, 8 bits are used for each color (RGB). Since we are using 12-bit color with 4-bits of padding, we need 4 bits per color. This means that we need to map the 8-bit colors to 4-bit colors using a linear relationship. This was done by only using the most significant byte of each of the colors in the 12-bit color. This makes it so 0x0 in 24-bit maps to 0x0 in 12-bit and 0xFFFFFF in 24-bit maps to 0xFFFF in 12-bit color, which is what we want. However the endianness of the colors in the two formats differ. Red is on the MSB in 24-bit color while red is on the LSB in 12-bit color, so some shifting needs to be done.\n\nTo derive the shift values, it is best to isolate the 3 different colors in the 24-bit format.\n\n**24-Bit Color**\n0xABCDEF:\nRed: 0xAB | Green: 0xCD | Blue: EF\n\n**12-Bit Color\n0xABC\n\nRed: 0xC | Green: 0xB | Blue: 0xA\n\nNow that we have an example 24-bit color separated into the three colors, we can look at the conversion for each.\n\n**Red**\nFor red, we need the upper 4 bits to be moved to bit positions 0-3 for the 12-bit color. This is achieved by shifting the value right 20 bits. No masking is needed since the lower 4 bits are shifted off.\n\n**Green**\nFor green, we need the upper 4 bits to be in bit positions 4-7. To achieve this, we can shift it to the right 8 bits and then mask off the lower 4 bits via & 0xF0.\n\n**Blue**\nFor blue, we need to get the upper 4 bits in bit positions 8-11. To achieve this, we can shift it to the left 4 bits and then mask off the lower 4 bits via & 0xF00.\n\nAll of these color values are stored in their own 16-bit unsigned-integer variables so they can be bitwise OR'd together to give the final 12-Bit RGB value.\n\n\nThe function that performs this conversion is given below:\n\n\n```c\n// Example: 0xC8103E\n// 0xC8 -> Red | 0x10 -> Green | 0x3E -> Blue\nu16 convert_color_24_16(u32 color)\n{\n\tu16 r, g, b = 0;\n\n\t// Red: 0xFF0000 -> 0xF\n\t// Shift right 2 bytes (16 bits) to get the two bytes in the LSB position.\n\t// Then to get the left byte, shift 4 more.\n\tr = color >> 20;\n\n\t// Green: 0xFF00 -> 0xF0\n\t//Shift right one byte (8 bits) to get the two bytes in the LSB position.\n\t// Then mask with 0xF0 to only take the left byte. It is already positioned\n\t// where it needs to be.\n\tg = (color >> 8) & 0xF0;\n\n\t// Blue:  0xFF -> 0xF00\n\t// Shift left 4 bits to get the left-most byte in the correct position.\n\t// Then mask with 0xF00 to only use the left-most byte.\n\tb = (color << 4) & 0xF00;\n\n\treturn r | g | b;\n}\n```\n\n## Modify the nes_bootloader code such that the NES games are reasonably playable. In your report, describe your general approach to implementing both of the NESCore_Callback functions.\n\nFor the “NESCore_Callback_OutputFrame,” our task was to expand the 256x240 image to a 640x480 resolution. For this, we first started by finding the scalar needed to enlarge the image. This scalar was then used to repeat the WorkFrame multiple times for every pixel read. Once implemented, we realized that we needed to add borders to our image to ensure that the VGA HW had a reference for black. This is because the VGA timing was slightly off, which caused data from the blanking period to be drawn in the drawing window. The black reference bars were implemented by updating the left and right columns of the WorkFrame to have a value of 0x0, which is black.\n\nFor “NESCore_Callback_InputPadState,” we were able to use our GPIO code from step 5. However, we also created a simple interface (controls.h) to make the usage easier. Using this interface, we just had to call the configure function to configure the GPIO interfaces and then run the data collection function. We provided a pointer to a struct that stores all the data to this function to be populated. After the function ran, we had an array of enumeration values, where each value represented a pressed button. We decided to represent the button presses this way for simplicity. All one has to do to determine what buttons are being pressed down are look at each of the enumeration values in the array, no bit-parsing needed. However, this does require more CPU time and can make the mapping to how the NESCore has the inputs defined more tedious.\n\n## **BONUS credit.** \n\nWe implemented the following extra credit items:\n\n- SNES Controller Implementation\n- Graphical Menu\n- Return to Menu Functionality\n\n### SNES Controller Implementation\n\nTo implement a reader for the SNES controller, we first did some research on the protocol that the controller used. The website https://gamesx.com/controldata/snesdat.htm provided a sufficient writeup of the protocol. However, to verify that we understood the protocol, we took the SNES controller and went out to one of the circuit labs. In the lab, we hooked up the function generator to generate the `clock` and `latch` signals. We then were able to read the response from the SNES controller using an oscilloscope. Am image of such a reading is shown below:\n\n![[projects/oscope.png]]\n\nAfter we verified we understood the protocol, we devised a block diagram of an implementation. This block diagram is shown below:\n\n![[projects/snes_controller_reader_bd.png]]\n\nThis block diagram is made up of three major components: the pulse generator, a 4-bit counter, and a 16-bit shift register. The pulse generator creates the `latch` signal for the SNES controller upon receiving the `start` signal. After the pulse is sent, the pulse generator will not sent another pulse until it is reset and `start` is sent again. Then once the pulse has finished, the `counter_enable` signal is sent out to the 4-bit counter. The 4-bit counter will count 16 clock cycles, which will be aligned to the 16 data bits that the SNES controller sends. Once 16 clock cycles have been read, the `done` signal is sent out and the 16-bit shift register is disabled so we don't shift the read data off. Like the pulse generator, the 4-bit counter cannot be activated again until it is reset. This is to avoid restarting the 4-bit counter by accidently holding the enable signal high for too long.\n\nFinally, this system was hooked up to an AXI-Lite interface which allowed us to send the `start`  and `rest_n` signals, read the `done` signal, and read the controller from C code via memory-mapped registers.\n\nOnce all of this was implemented, we ran many tests, fixed many issues and got a result that mostly worked. The design will always read the first data bit as a '1', which corresponds to the B button not being pressed. To work around this, we simply re-bound X to B since we could read all the other buttons just fine. We believe this is due to some timing issue not caught in our simulated testbenches or due to running the `snes_clk` too fast. We originally had the AXI but clock and the `snes_clk` at different frequencies, but this introduced negative slack so we made them the same frequency. We found that when two SNES controller reader modules (for two player support) were instantiated, the AXI clock needed to be at least 1MHz to function properly. Finally, the VHDL was not written the best. I had FSMs baked into many of my blocks where the next state logic was handled in a sequential process. We now understand this not to be the best practice since it is a bit unclear how it will synthesize, but this was a good learning experience overall.\n\nThere was another attempt to interface with a SNES controller through a Verilog defined IP. This particular method sought to follow the SNES protocol as defined in this website (https://gamesx.com/controldata/snesdat.htm). A state machine was implemented such that the RTL would act like the SNES CPU; The latch and clock would hold high for 12 us to signal for the SNES controller to begin latching data, the latch would then go low for 6 us to signal for the SNES controller to begin sending data, and then the clock would then propagate on a 12 us period for 15 cycles such that the SNES data was completely transmitted. In order to implement a delay of 6 us and 12 us clock, a delay timer was created by using a counter. This counter counts to a parameter set to the quotient of the input clock and the desired period. Since the input clock to this RTL IP was 25 MHz 6 us achieved by counting up to 150 cycles. This RTL IP was successfully imported into the Vivado project, but there was issue when attempting to connect its output data to the processing system block. There was an attempt to create a custom AXI4-lite peripherial IP which wrapped the user project, but there wasn't enough time to trouble shoot the issues. \n\n![[projects/ager.png]]\n\nBelow is an example of the SNES controller correctly communicating with the FPGA.\n\n![[projects/verilog_snes_ex.png]]\n\n### Graphical Menu\n\n##### Design\n\n###### Navigation\n\nIn designing the graphical window for our system, our goal was to enable smooth and intuitive scrolling through a rendered list of game options. This list not only displayed the names of available games but also included additional information about each game or ROM, providing a more informative and user-friendly interface.\n\nTo ensure seamless navigation, we implemented an offset-based scrolling mechanism that allows users to freely scroll through the game list without restrictions. This feature dynamically adjusts the menu offset based on the selected index, ensuring that the currently highlighted game remains visible at all times. If the selected index moves beyond the visible portion of the menu, the offset is updated accordingly to bring the relevant content into view. This allows users to navigate effortlessly through large game lists without losing track of their current selection.\n\n###### Visuals\n\nTo enhance the visual experience, we incorporated image rendering using the PPM (Portable Pixmap) format.\n\nThis allowed us to include visual previews of games alongside their textual descriptions, enriching the browsing experience for users. The PPM format was chosen due to its simplicity and ease of implementation in our system. While this solution worked seamlessly on our development machines, we encountered issues when attempting to read PPM files from the Xilinx SD card. The format did not function as expected in this environment, leading to difficulties in rendering the images correctly.\n\n![[projects/mp0-menu.gif]]\n\nFurthermore, we implemented a feature that allows users to return to the game menu after launching a game. To achieve this, we designed a specific input recognition system that detects when both the Start and Select buttons are pressed simultaneously. This shortcut provides a convenient and intuitive method for users to exit a game and navigate back to the menu without needing to reset the system.\n\n#### Implementation\n\nImplementation of the menu was the easy part, combing the working functionality with the existing NES emulator proved to be more of a problem to be solved...\n\n##### Navigation\n\nThe implementation of the game menu navigation relies on a structured control loop that governs menu behavior and game launching. By designing the render_game_menu function to accept both the selected index and menu offset, we created a system that seamlessly integrates with the NES emulation. This approach ensures clarity and modularity in our implementation.\n\nFirst, by making our, `render_game_menu` function take the selected index and the menu offset, we allowed for our integration of the menu into the nes emulation implementation to be as clear as possible:\n\n```c\nvoid render_game_menu(int selected_index, int menu_offset)\n{\n  // draws the actual game menu to the draw buffer\n  draw_game_menu(*draw_buffer, selected_index, menu_offset);\n\n  Xil_DCacheFlush();\n\n  XAxiVdma_WriteReg(\n      XPAR_AXI_VDMA_0_BASEADDR,\n      XAXIVDMA_MM2S_ADDR_OFFSET + XAXIVDMA_START_ADDR_OFFSET,\n      (u32)*draw_buffer); // Read Channel: VDMA MM2S Frame buffer Start Addr 1\n\n  draw_buffer = (draw_buffer == &front_buffer ? &back_buffer : &front_buffer);\n\n  XAxiVdma_WriteReg(\n      XPAR_AXI_VDMA_0_BASEADDR,\n      XAXIVDMA_MM2S_ADDR_OFFSET + XAXIVDMA_VSIZE_OFFSET,\n      480); // Read Channel: VDMA MM2S VSIZE and start transaction.\n}\n```\n\nA dedicated game menu loop runs prior to ROM execution, maintaining functionality for game selection and ensuring smooth returns to the menu upon exiting a game. Within this loop, control inputs are continuously read, updating the selected game index accordingly. The menu offset dynamically adjusts to keep the selected game within view. Once a selection is confirmed, the game loads, and control is passed to the emulator.\n\n```c\nchar *game_menu()\n{\n  int selected_index = 0;\n  int menu_offset = 0;\n  // the number of games to select from. (gotten from menu.c)\n  int num_games = get_games_length();\n  // actual name of the name\n  char *rom_name;\n  // currectly selected game (0, 0)\n  char *selected_game = get_selected_game_rom_name(selected_index, menu_offset);\n\n  // Allocate space for the dpad data.\n  dpad_state_p1.active_buttons = malloc(sizeof(t_dpad_buttons) * DPAD_BUTTON_COUNT);\n  dpad_state_p1.len = 0;\n  dpad_state_p2.active_buttons = malloc(sizeof(t_dpad_buttons) * DPAD_BUTTON_COUNT);\n  dpad_state_p2.len = 0;\n\n  // Allocate space for the general button data.\n  general_button_states_p1.active_buttons = malloc(sizeof(t_general_button_states) * GENERAL_BUTTON_COUNT);\n  general_button_states_p1.len = 0;\n  general_button_states_p2.active_buttons = malloc(sizeof(t_general_button_states) * GENERAL_BUTTON_COUNT);\n  general_button_states_p2.len = 0;\n\n  render_game_menu(selected_index, menu_offset);\n\n  while (1)\n  {\n    if (selected_index < menu_offset)\n    {\n      menu_offset = selected_index;\n    }\n    else if (selected_index >= menu_offset + ROWS_GAME_MENU)\n    {\n      menu_offset = selected_index - ROWS_GAME_MENU + 1;\n    }\n\n    get_dpad_state(&dpad_state_p1, 0);\n    get_general_buttons_state(&general_button_states_p1, 0);\n\n    switch (dpad_state_p1.active_buttons[0])\n    {\n    case UP:\n      if (selected_index < 1)\n      {\n        continue;\n      }\n      selected_index--;\n\n      selected_game = get_selected_game_rom_name(selected_index, menu_offset);\n      render_game_menu(selected_index, menu_offset);\n      break;\n    case DOWN:\n      if (selected_index > num_games)\n      {\n        continue;\n      }\n      selected_index++;\n\n      selected_game = get_selected_game_rom_name(selected_index, menu_offset);\n      render_game_menu(selected_index, menu_offset);\n      break;\n    default:\n      break;\n    }\n\n    switch (general_button_states_p1.active_buttons[0])\n    {\n    \tcase A:\n    \tcase START:\n    \t\treturn selected_game;\n    \tdefault:\n    \t\tbreak;\n    }\n\n    usleep(50);\n  }\n\n  rom_name = get_selected_game_rom_name(selected_index, menu_offset);\n\n  return rom_name;\n}\n```\n\nTo handle game selection and navigation, we allocate memory for button state tracking, ensuring responsiveness and accuracy in user interactions. Input signals such as directional pad presses update the menu selection, while button confirmations trigger game execution. Additionally, the `main` program loop continuously resets the system environment when exiting a game, allowing users to navigate back to the menu without requiring a system restart.\n\n```c\nint main()\n{\n  init_platform();\n\n  // Initialize all memory space\n  xil_init();\n\n  // Initialize the NESCore\n  NESCore_Init();\n\n  // Enable the cache\n  Xil_DCacheEnable();\n\n  while (1)\n  {\n\t// return the selected game\n    char *selected_game = game_menu();\n    xil_init();\n    NESCore_Init();\n    nes_load(selected_game); // shown below\n  }\n  cleanup_platform();\n\n  return 0;\n}\n```\n\nFinally, when we actually load the `.nes` rom, by a call to `nes_load()`, the internal game loop of the emulator allows us to listen for the controller state to potentially exit from the game if the user presses both start and select at the same time, and return from`nes_load` as mentioned:\n\n```c\nvoid nes_load( char *rom_name) {\n  int32_t result = 0, i;\n\n  usleep(100000);\n\n  // Disable the cache so it will play nice with xilsd (needed here)\n  Xil_DCacheDisable();\n  result = NESCore_LoadROM(rom_name);\n  if (result != 0) {\n    xil_printf(\"nes_load(): invalid ROM load. Returning\\r\\n\"); return;\n  }\n\n  // Enable the cache for performance reasons\n  Xil_DCacheEnable();\n\n  result = NESCore_Reset();\n  if (result != 0) {\n    xil_printf(\"nes_load(): invalid reset. Returning\\r\\n\"); return;\n  }\n\n  // set the boot state that we are playing a game\n  bootstate.nes_playing = 1;\n  usleep(100000);\n  ptv = 0;\n\n  int cyRes;\n\n  do {\n\n    for (i = 0; i < RESET_TIME; i++) {\n\n\t// Got START and SELECT at the same time from user, go back to menu.\n\textern t_general_button_states general_button_states_p1;\n\n\tget_general_buttons_state(&general_button_states_p1, 0);\n\n\t// Or all together.\n\tu16 state = 0x0;\n\n\tfor(int i = 0; i < general_button_states_p1.len; ++i)\n\t{\n\t\tstate |= (u16) general_button_states_p1.active_buttons[i];\n\t}\n\n\tif(state == (u16)(((u16)START | (u16)SELECT)))\n\t{\n\t\txil_printf(\"Returning to main menu!\\n\\r\");\n\n\t\t// Give user time to release buttons.\n\t\tsleep(1);\n\t\treturn;\n\t}\n\n     NESCore_Cycle();\n    }\n\n  } while (1);\n\n  bootstate.nes_playing = 0;\n\n  return;\n}\n```\n\nAdditionally, to define our font, we statically declared a basic 8 bit font to use:\n```c\n/*\n * Complete 8x8 font table for the first 128 ASCII characters.\n * (Data derived from the public domain font8x8_basic)\n */\nstatic const u8 font8x8_basic[128][8] = {\n\t// ...\n    [0x1C] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},\n    [0x1D] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},\n    [0x1E] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},\n    [0x1F] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},\n    // Printable characters (0x20 to 0x7E)\n    [0x20] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // space\n    [0x21] = {0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00}, // !\n\t// ...\n    [0x41] = {0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00}, // A\n    [0x42] = {0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x00}, // B\n    [0x43] = {0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00}, // C\n    [0x44] = {0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00}, // D\n    [0x45] = {0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x00}, // E\n    [0x46] = {0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x00}, // F\n\t// ...\n};\n```\n\nThis static declaration of the font allowed for a very simple implementation of `draw_char()` and `draw_text()`,\n\n```c\n/*\n * Draw a single character at (x, y) using the given 16-bit color.\n */\nvoid draw_char(u16 (*fb)[VIDEO_WIDTH], int x, int y, char c, u16 color) {\n  if ((unsigned char)c > 127)\n    return;\n  for (int row = 0; row < MENU_FONT_HEIGHT; row++) {\n    u8 row_bits = font8x8_basic[(unsigned char)c][row];\n    for (int col = 0; col < MENU_FONT_WIDTH; col++) {\n      if (row_bits & (1 << (7 - col))) {\n        int px = x + col;\n        int py = y + row;\n        if (px >= 0 && px < VIDEO_WIDTH && py >= 0 && py < VIDEO_HEIGHT) {\n          fb[py][px] = color;\n        }\n      }\n    }\n  }\n}\n```\n\nThis simple but parameterized implementation allows for a clear and short definition of a `draw_text()` function:\n```c\n/*\n * Draw a null-terminated string starting at (x, y) with the given 16-bit color.\n */\nvoid draw_text(u16 (*fb)[VIDEO_WIDTH], int x, int y, const char *text,\n               u16 color) {\n  int cursor_x = x;\n  while (*text) {\n    if (*text == '\\n') {\n      cursor_x = x;\n      y += MENU_FONT_HEIGHT;\n    } else {\n      draw_char(fb, cursor_x, y, *text, color);\n      cursor_x += MENU_FONT_WIDTH;\n    }\n    text++;\n  }\n}\n```\n",
	Slug:            "cpre488-mp0",
	TagSlugs:        []string{"hdl/vhdl", "ide/vivado", "programming-language/c", "protocol/uart", "edu/iastate"},
	Tags:            []*assets.Tag{&TagHdlVhdl, &TagIdeVivado, &TagProgrammingLanguageC, &TagProtocolUart, &TagEduIastate},
	Title:           "CPRE488 MP0",
	UpdatedAt:       time.Date(2025, time.April, 14, 19, 16, 20, 0, time.UTC),
	X:               -1.0346428296971193,
	Y:               -0.42926118923888,
	Z:               -0.31841707958669924,
}}
var ProjectCpre488Mp2 = assets.Project{Embedded: assets.Embedded{
	BannerPath:      "projects/mp2.webp",
	Content:         "<h1 id=\"cpre488-mp2\"><a class=\"anchor permalink p-4\" href=\"#cpre488-mp2\">#</a> CPRE488 MP2</h1>\n<h2 id=\"detailed-system-diagram\"><a class=\"anchor permalink p-4\" href=\"#detailed-system-diagram\">#</a> Detailed System Diagram</h2>\n<p>The following diagram illustrates the interconnection between the various modules in the<br>\nsystem, both at the IP core level (i.e. the components in our VIVADO design) as well as the board<br>\nlevel (i.e. the various chips that work together to connect the output video to the monitor).</p>\n<p><img src=\"https://conneroh.fly.storage.tigris.dev/projects/cpre488-mp2/image-pipeline-diagram.png\"></p>\n<h2 id=\"starter-hardware-operation-intentions\"><a class=\"anchor permalink p-4\" href=\"#starter-hardware-operation-intentions\">#</a> Starter Hardware Operation Intentions</h2>\n<p>The overall goal of the starter hardware to to provide an interface to FMC device such that a test image sequence can be displayed over the HDMI port on the FMC device. To accomplish this, a Test Pattern Generator IP is instantiated and configured using the AXI bus to produce a video stream that is provided to the VDMA. The VDMA is configured to store this stream to a memory location and forward the stream to an AXI Stream output IP block, which passes the stream to the AVNET HDMI Output IP block. This gives the test pattern stream a direct path to the FMC module so it can be displayed.</p>\n<p>However, we also need to incorporate timing information. Similar to the VGA protocol, HDMI requires timing signals to make sure line draws are all synced up. To do this a Video Timing Controller IP block is used. This IP block is configured off of an AXI bus fed to it and it outputs all the timing signals that the HDMI IP block needs. These timing signals are fed into the AXI Stream to Video Out IP block, which then forwards the timing signals to the AVNET HDMI Output.</p>\n<p>In addition, there are two I2C IP blocks, the FMC IPMI ID EEPROM I2C block and the FMC IMAGEON I2C block. The purpose of the IMAGEON interface is to provide a way for the ZYNQ processor to control the FMC peripheral. Then, the purpose of the EEPROM I2C interface is to provide the ZYNQ processor a way to configure the on-board EEPROM on the FMC, which stores important information.</p>\n<p>For the VDMA, the primary difference between this setup and the setup from MP-0 is that the VDMA is configured for both reads and writes. There is a stream incoming from the TPG that is written to memory, and then that memory is read out to the HDMI. This requires GenLock synchronization between the reads and writes, which was not needed in MP-0.</p>\n<p>Finally, there are two clock domains defined for this design, a 100MHz clock and a 148Mhz clock. The 100MHz clock is used for all the AXI bus transactions and is considered the primary clock. Then the 148MHz clock is used for the video clock. Looking at the block diagram, all modules that are fed a video stream use this clock and this clock is passed directly to the AVENT HDMI IP block. So, it is safe to say that the purpose of the 148MHz clock is to clock the video streams.</p>\n<p>This design only allows for the display of the test pattern, so we need to add more IP cores later to use the camera.</p>\n<h2 id=\"what-are-the-changes-we-made-to-camera-appc\"><a class=\"anchor permalink p-4\" href=\"#what-are-the-changes-we-made-to-camera-appc\">#</a> What are the changes we made to <code>camera_app.c</code>?</h2>\n<h3 id=\"tpg-change\"><a class=\"anchor permalink p-4\" href=\"#tpg-change\">#</a> TPG Change</h3>\n<p>For the TPG change, we referenced the provided datasheet to see what we configure via memory mapped registers. We saw that we had the ability to set a foreground and background to be a variety of preset patters. So, we set the background to a colored bars pattern (register value <code>0x9</code>) and the foreground to be a colored box that bounces around (register value <code>0x1</code>). Since we were enabling a box, we had to specify its dimensions and colors, which was simple to due since there were registers for each. The relevant code for this update is shown below:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>   <span style=\"color:#75715e\">// Define convenient volatile pointers for accessing TPG registers\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>   <span style=\"color:#66d9ef\">volatile</span> <span style=\"color:#66d9ef\">uint32_t</span> <span style=\"color:#f92672\">*</span>TPG_CR       <span style=\"color:#f92672\">=</span> (<span style=\"color:#66d9ef\">volatile</span> <span style=\"color:#66d9ef\">uint32_t</span><span style=\"color:#f92672\">*</span>) (config<span style=\"color:#f92672\">-&gt;</span>uBaseAddr_TPG_PatternGenerator <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">0</span>);    <span style=\"color:#75715e\">// TPG Control\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>   <span style=\"color:#66d9ef\">volatile</span> <span style=\"color:#66d9ef\">uint32_t</span> <span style=\"color:#f92672\">*</span>TPG_Act_H    <span style=\"color:#f92672\">=</span> (<span style=\"color:#66d9ef\">volatile</span> <span style=\"color:#66d9ef\">uint32_t</span><span style=\"color:#f92672\">*</span>) (config<span style=\"color:#f92672\">-&gt;</span>uBaseAddr_TPG_PatternGenerator <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">0x10</span>); <span style=\"color:#75715e\">// Active Height\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>   <span style=\"color:#66d9ef\">volatile</span> <span style=\"color:#66d9ef\">uint32_t</span> <span style=\"color:#f92672\">*</span>TPG_Act_W    <span style=\"color:#f92672\">=</span> (<span style=\"color:#66d9ef\">volatile</span> <span style=\"color:#66d9ef\">uint32_t</span><span style=\"color:#f92672\">*</span>) (config<span style=\"color:#f92672\">-&gt;</span>uBaseAddr_TPG_PatternGenerator <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">0x18</span>); <span style=\"color:#75715e\">// Active Width\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>   <span style=\"color:#66d9ef\">volatile</span> <span style=\"color:#66d9ef\">uint32_t</span> <span style=\"color:#f92672\">*</span>TPG_BGP      <span style=\"color:#f92672\">=</span> (<span style=\"color:#66d9ef\">volatile</span> <span style=\"color:#66d9ef\">uint32_t</span><span style=\"color:#f92672\">*</span>) (config<span style=\"color:#f92672\">-&gt;</span>uBaseAddr_TPG_PatternGenerator <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">0x20</span>); <span style=\"color:#75715e\">// Background Pattern\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>   <span style=\"color:#66d9ef\">volatile</span> <span style=\"color:#66d9ef\">uint32_t</span> <span style=\"color:#f92672\">*</span>TPG_FGP      <span style=\"color:#f92672\">=</span> (<span style=\"color:#66d9ef\">volatile</span> <span style=\"color:#66d9ef\">uint32_t</span><span style=\"color:#f92672\">*</span>) (config<span style=\"color:#f92672\">-&gt;</span>uBaseAddr_TPG_PatternGenerator <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">0x28</span>); <span style=\"color:#75715e\">// Foreground Pattern\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>   <span style=\"color:#66d9ef\">volatile</span> <span style=\"color:#66d9ef\">uint32_t</span> <span style=\"color:#f92672\">*</span>TPG_MS       <span style=\"color:#f92672\">=</span> (<span style=\"color:#66d9ef\">volatile</span> <span style=\"color:#66d9ef\">uint32_t</span><span style=\"color:#f92672\">*</span>) (config<span style=\"color:#f92672\">-&gt;</span>uBaseAddr_TPG_PatternGenerator <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">0x38</span>); <span style=\"color:#75715e\">// Motion Speed\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>   <span style=\"color:#66d9ef\">volatile</span> <span style=\"color:#66d9ef\">uint32_t</span> <span style=\"color:#f92672\">*</span>TPG_CF       <span style=\"color:#f92672\">=</span> (<span style=\"color:#66d9ef\">volatile</span> <span style=\"color:#66d9ef\">uint32_t</span><span style=\"color:#f92672\">*</span>) (config<span style=\"color:#f92672\">-&gt;</span>uBaseAddr_TPG_PatternGenerator <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">0x40</span>); <span style=\"color:#75715e\">// TPG Color Format\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>   <span style=\"color:#66d9ef\">volatile</span> <span style=\"color:#66d9ef\">uint32_t</span> <span style=\"color:#f92672\">*</span>TPG_BOX_SIZE <span style=\"color:#f92672\">=</span> (<span style=\"color:#66d9ef\">volatile</span> <span style=\"color:#66d9ef\">uint32_t</span><span style=\"color:#f92672\">*</span>) (config<span style=\"color:#f92672\">-&gt;</span>uBaseAddr_TPG_PatternGenerator <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">0x78</span>);\n</span></span><span style=\"display:flex;\"><span>   <span style=\"color:#66d9ef\">volatile</span> <span style=\"color:#66d9ef\">uint32_t</span> <span style=\"color:#f92672\">*</span>TPG_BOX_COLOR_Y <span style=\"color:#f92672\">=</span> (<span style=\"color:#66d9ef\">volatile</span> <span style=\"color:#66d9ef\">uint32_t</span><span style=\"color:#f92672\">*</span>) (config<span style=\"color:#f92672\">-&gt;</span>uBaseAddr_TPG_PatternGenerator <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">0x80</span>);\n</span></span><span style=\"display:flex;\"><span>   <span style=\"color:#66d9ef\">volatile</span> <span style=\"color:#66d9ef\">uint32_t</span> <span style=\"color:#f92672\">*</span>TPG_BOX_COLOR_U <span style=\"color:#f92672\">=</span> (<span style=\"color:#66d9ef\">volatile</span> <span style=\"color:#66d9ef\">uint32_t</span><span style=\"color:#f92672\">*</span>) (config<span style=\"color:#f92672\">-&gt;</span>uBaseAddr_TPG_PatternGenerator <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">0x88</span>);\n</span></span><span style=\"display:flex;\"><span>   <span style=\"color:#66d9ef\">volatile</span> <span style=\"color:#66d9ef\">uint32_t</span> <span style=\"color:#f92672\">*</span>TPG_BOX_COLOR_V <span style=\"color:#f92672\">=</span> (<span style=\"color:#66d9ef\">volatile</span> <span style=\"color:#66d9ef\">uint32_t</span><span style=\"color:#f92672\">*</span>) (config<span style=\"color:#f92672\">-&gt;</span>uBaseAddr_TPG_PatternGenerator <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">0x90</span>);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>   xil_printf(<span style=\"color:#e6db74\">&#34;Test Pattern Generator Initialization ...</span><span style=\"color:#ae81ff\">\\n\\r</span><span style=\"color:#e6db74\">&#34;</span>);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>   <span style=\"color:#75715e\">// Direct Memory Mapped access of TPG configuration registers\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>   <span style=\"color:#75715e\">// See TPG data sheet for configuring the TPG for other features\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>   TPG_Act_H[<span style=\"color:#ae81ff\">0</span>]  <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0x438</span>; <span style=\"color:#75715e\">// Active Height\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>   TPG_Act_W[<span style=\"color:#ae81ff\">0</span>]  <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0x780</span>; <span style=\"color:#75715e\">// Active Width\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>   TPG_BGP[<span style=\"color:#ae81ff\">0</span>]    <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0x09</span>;  <span style=\"color:#75715e\">// Background Pattern\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>   TPG_FGP[<span style=\"color:#ae81ff\">0</span>]    <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0x01</span>;  <span style=\"color:#75715e\">// Foreground Pattern\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>   TPG_MS[<span style=\"color:#ae81ff\">0</span>]     <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0x04</span>;  <span style=\"color:#75715e\">// Motion Speed\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>   TPG_BOX_SIZE[<span style=\"color:#ae81ff\">0</span>] <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">100</span>;\n</span></span><span style=\"display:flex;\"><span>   TPG_BOX_COLOR_Y[<span style=\"color:#ae81ff\">0</span>] <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">167</span>;\n</span></span><span style=\"display:flex;\"><span>   TPG_BOX_COLOR_U[<span style=\"color:#ae81ff\">0</span>] <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">120</span>;\n</span></span><span style=\"display:flex;\"><span>   TPG_BOX_COLOR_V[<span style=\"color:#ae81ff\">0</span>] <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">8</span>;\n</span></span><span style=\"display:flex;\"><span>   TPG_CF[<span style=\"color:#ae81ff\">0</span>]     <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0x02</span>;  <span style=\"color:#75715e\">// TPG Color Format\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>   TPG_CR[<span style=\"color:#ae81ff\">0</span>]     <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0x81</span>;  <span style=\"color:#75715e\">// TPG Control\n</span></span></span></code></pre><p>A picture of the output of this change is shown below:</p>\n<p><img src=\"https://conneroh.fly.storage.tigris.dev/projects/cpre488-mp2/tpg_change.png\"></p>\n<h3 id=\"software-only-change-tpg-registers-not-modified\"><a class=\"anchor permalink p-4\" href=\"#software-only-change-tpg-registers-not-modified\">#</a> Software Only Change (TPG Registers not Modified)</h3>\n<p>For the software only change, we decided to read out the pixel colors in the YUV format and halve the luminance. We believed that knowing the YUV format early on in the lab would be beneficial later when we have to implement SW demosaicing. The code that reads the YUV data, halves the luminance, and then writes it back is shown below:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">for</span> (i <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>; i <span style=\"color:#f92672\">&lt;</span> <span style=\"color:#ae81ff\">1920</span><span style=\"color:#f92672\">*</span><span style=\"color:#ae81ff\">1080</span>; i <span style=\"color:#f92672\">+=</span> <span style=\"color:#ae81ff\">2</span>)\n</span></span><span style=\"display:flex;\"><span>\t\t{\n</span></span><span style=\"display:flex;\"><span>\t\t   <span style=\"color:#66d9ef\">uint8_t</span> u, v <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span>\t\t   <span style=\"color:#66d9ef\">uint16_t</span> y <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t   u <span style=\"color:#f92672\">=</span> (pS2MM_Mem[i] <span style=\"color:#f92672\">&amp;</span> <span style=\"color:#ae81ff\">0xFF00</span>) <span style=\"color:#f92672\">&gt;&gt;</span> <span style=\"color:#ae81ff\">8</span>;\n</span></span><span style=\"display:flex;\"><span>\t\t   v <span style=\"color:#f92672\">=</span> (pS2MM_Mem[i <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">1</span>] <span style=\"color:#f92672\">&amp;</span> <span style=\"color:#ae81ff\">0xFF00</span>) <span style=\"color:#f92672\">&gt;&gt;</span> <span style=\"color:#ae81ff\">8</span>;\n</span></span><span style=\"display:flex;\"><span>\t\t   y <span style=\"color:#f92672\">=</span> (pS2MM_Mem[i] <span style=\"color:#f92672\">&amp;</span> <span style=\"color:#ae81ff\">0xFF</span>) <span style=\"color:#f92672\">|</span> ((pS2MM_Mem[i <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">1</span>] <span style=\"color:#f92672\">&amp;</span> <span style=\"color:#ae81ff\">0xFF</span>) <span style=\"color:#f92672\">&lt;&lt;</span> <span style=\"color:#ae81ff\">8</span>);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t   <span style=\"color:#75715e\">// Half luminance\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\t   y <span style=\"color:#f92672\">/=</span> <span style=\"color:#ae81ff\">2</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t   <span style=\"color:#75715e\">// Set from YUV values.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t       pMM2S_Mem[i] <span style=\"color:#f92672\">=</span> (u <span style=\"color:#f92672\">&lt;&lt;</span> <span style=\"color:#ae81ff\">8</span>) <span style=\"color:#f92672\">|</span> (y <span style=\"color:#f92672\">&amp;</span> <span style=\"color:#ae81ff\">0xFF</span>);\n</span></span><span style=\"display:flex;\"><span>\t       pMM2S_Mem[i <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">1</span>] <span style=\"color:#f92672\">=</span> (v <span style=\"color:#f92672\">&lt;&lt;</span> <span style=\"color:#ae81ff\">8</span>) <span style=\"color:#f92672\">|</span> ((y <span style=\"color:#f92672\">&amp;</span> <span style=\"color:#ae81ff\">0xFF00</span>) <span style=\"color:#f92672\">&gt;&gt;</span> <span style=\"color:#ae81ff\">8</span>);\n</span></span><span style=\"display:flex;\"><span>\t\t}\n</span></span></code></pre><p>The YUV 422 format is described later in this report.</p>\n<p>A picture of the output from this change is shown below:</p>\n<p><img src=\"https://conneroh.fly.storage.tigris.dev/projects/cpre488-mp2/tpg_change_sw.png\"></p>\n<p>Though it is quite hard to see in this image, the luminance has be halved. My phone camera dod not pick this up well.</p>\n<h2 id=\"in-the-xdc-constraints-file-what-does-the--p-and--n-pairing-of-signals-signify-and-what-this-configuration-is-typically-used-for\"><a class=\"anchor permalink p-4\" href=\"#in-the-xdc-constraints-file-what-does-the--p-and--n-pairing-of-signals-signify-and-what-this-configuration-is-typically-used-for\">#</a> In the (<code>.xdc</code>) constraints file, what does the <code>_p</code> and <code>_n</code> pairing of signals signify, and what this configuration is typically used for?</h2>\n<p>In the constraints file, the <code>_p</code> and <code>_n</code> suffix pairs indicate differential signaling, specifically LVDS (Low-Voltage Differential Signaling). This is confirmed by the IOSTANDARD setting for these signals:</p>\n<pre><code>set_property IOSTANDARD LVDS_25 [get_ports IO_VITA_CAM_clk_out_*]\nset_property IOSTANDARD LVDS_25 [get_ports IO_VITA_CAM_sync_*]\nset_property IOSTANDARD LVDS_25 [get_ports IO_VITA_CAM_data_*]\n</code></pre>\n<h3 id=\"what-lvds-is-and-how-does-it-work\"><a class=\"anchor permalink p-4\" href=\"#what-lvds-is-and-how-does-it-work\">#</a> What LVDS Is and How Does It Work?</h3>\n<p>LVDS uses a pair of complementary signals that are transmitted on two separate traces:</p>\n<ul>\n<li>The <code>_p</code> suffix indicates the positive/true signal</li>\n<li>The <code>_n</code> suffix indicates the negative/complement signal</li>\n</ul>\n<p>The actual data is determined by the voltage difference between these two signals rather than the absolute voltage level. Typically, a small voltage difference (around 350mV) is used, where:</p>\n<ul>\n<li>A positive difference represents a logical &lsquo;1&rsquo;</li>\n<li>A negative difference represents a logical &lsquo;0&rsquo;</li>\n</ul>\n<h3 id=\"why-is-lvds-used-for-the-camera-interface\"><a class=\"anchor permalink p-4\" href=\"#why-is-lvds-used-for-the-camera-interface\">#</a> Why Is LVDS Used for the Camera Interface?</h3>\n<p>LVDS is used for the VITA camera interface for several important reasons:</p>\n<ol>\n<li>\n<p><strong>High-Speed Data Transfer</strong>: The VITA-2000 sensor needs to transfer large amounts of image data quickly. LVDS supports high-speed data rates (often above 1 Gbps per pair) as seen in the 2.692 ns clock period (approximately 371 MHz).</p>\n</li>\n<li>\n<p><strong>Noise Immunity</strong>: Since LVDS relies on the difference between two signals rather than absolute voltage, it's highly resistant to common-mode noise that would affect both lines equally.</p>\n</li>\n<li>\n<p><strong>Low EMI</strong>: The differential pairs carry equal and opposite currents, causing the electromagnetic fields to cancel out, which reduces electromagnetic interference.</p>\n</li>\n<li>\n<p><strong>Signal Integrity</strong>: The constraint file also sets differential termination for these signals:</p>\n<pre><code>set_property DIFF_TERM true [get_ports IO_VITA_CAM_clk_out_*]\nset_property DIFF_TERM true [get_ports IO_VITA_CAM_sync_*]\nset_property DIFF_TERM true [get_ports IO_VITA_CAM_data_*]\n</code></pre>\n<p>This ensures proper signal integrity by eliminating reflections.</p>\n</li>\n</ol>\n<p>In this design, LVDS is specifically used for:</p>\n<ul>\n<li>Clock signals (<code>IO_VITA_CAM_clk_out_p/n</code>) - to provide a stable, clean timing reference</li>\n<li>Synchronization signals (<code>IO_VITA_CAM_sync_p/n</code>) - for frame timing synchronization</li>\n<li>Data lines (<code>IO_VITA_CAM_data_p/n</code>) - carrying the actual pixel data from the sensor</li>\n</ul>\n<h2 id=\"why-are-we-appending-10000000-to-the-output-of-the-vita-2000-camera-also-why-would-it-not-make-sense-to-append-00000000\"><a class=\"anchor permalink p-4\" href=\"#why-are-we-appending-10000000-to-the-output-of-the-vita-2000-camera-also-why-would-it-not-make-sense-to-append-00000000\">#</a> Why are we appending 10000000 to the output of the VITA-2000 camera? Also, why would it not make sense to append 00000000?</h2>\n<p>The 0x10000000 offset creates a safe &ldquo;sandbox&rdquo; for the video frame buffers that won't interfere with other memory usage in the system. This is particularly important for video processing which involves large, continuous memory accesses through DMA that could otherwise corrupt system memory.</p>\n<p>It would not make sense to append 0x00000000 to the output of the VITA-2000 camera because it would almost certainly result in memory corruption as the video data would overwrite critical program memory.</p>\n<h2 id=\"why-at-this-point-does-the-camera-had-no-color\"><a class=\"anchor permalink p-4\" href=\"#why-at-this-point-does-the-camera-had-no-color\">#</a> Why at this point, does the camera had no color?</h2>\n<p>Before implementing the demosaicing algorithm and software processing, the camera had no color because the raw data from the camera sensor is in a Bayer pattern format rather than a processed RGB or YCbCr color format.</p>\n<p><strong>Bayer Pattern Sensor Format</strong>:</p>\n<p>The VITA-2000 camera sensor uses a Bayer filter pattern. This means each pixel captures only one color component (Red, Green, or Blue) arranged in a specific pattern.</p>\n<p><strong>Direct Raw Data Display</strong>: Without the demosaic and color processing enabled, the system is directly displaying the raw Bayer pattern data, which appears as a grayscale or monochrome image. Each pixel only contains intensity information for a single color, but the display treats it as luminance-only data.</p>\n<h2 id=\"software-demosaicing-implementation\"><a class=\"anchor permalink p-4\" href=\"#software-demosaicing-implementation\">#</a> Software Demosaicing Implementation</h2>\n<p>To implement our software demosaicing C code, we simply ran it in the main <code>camera_loop</code> function, making sure to provide pointers to the data coming in and where the demosaiced data should go to. Subgroup B's code for this is shown below:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>\t\tset_park_frame(<span style=\"color:#f92672\">&amp;</span>(config<span style=\"color:#f92672\">-&gt;</span>vdma_hdmi), <span style=\"color:#ae81ff\">0</span>, XAXIVDMA_WRITE);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#75715e\">// Wait until frame zero is being written to.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\t<span style=\"color:#66d9ef\">while</span>(get_current_frame_pointer(<span style=\"color:#f92672\">&amp;</span>(config<span style=\"color:#f92672\">-&gt;</span>vdma_hdmi), XAXIVDMA_WRITE))\n</span></span><span style=\"display:flex;\"><span>\t\t{\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\tset_park_frame(<span style=\"color:#f92672\">&amp;</span>(config<span style=\"color:#f92672\">-&gt;</span>vdma_hdmi), <span style=\"color:#ae81ff\">1</span>, XAXIVDMA_WRITE);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#75715e\">// Wait until frame one is being written to.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\t<span style=\"color:#66d9ef\">while</span>(<span style=\"color:#f92672\">!</span>get_current_frame_pointer(<span style=\"color:#f92672\">&amp;</span>(config<span style=\"color:#f92672\">-&gt;</span>vdma_hdmi), XAXIVDMA_WRITE))\n</span></span><span style=\"display:flex;\"><span>\t\t{\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#75715e\">// Apply CFA\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\trun_demosaicing((<span style=\"color:#66d9ef\">uint16_t</span><span style=\"color:#f92672\">*</span>)pS2MM_Mem, (<span style=\"color:#66d9ef\">uint16_t</span><span style=\"color:#f92672\">*</span>)pMM2S_Mem);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#75715e\">// Swap back and front buffers\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\tu8 temp <span style=\"color:#f92672\">=</span> back_buffer_frame;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\tback_buffer_frame <span style=\"color:#f92672\">=</span> front_buffer_frame;\n</span></span><span style=\"display:flex;\"><span>\t\tfront_buffer_frame <span style=\"color:#f92672\">=</span> temp;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#75715e\">// Have the read side park on the new front buffer\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\tset_park_frame(<span style=\"color:#f92672\">&amp;</span>(config<span style=\"color:#f92672\">-&gt;</span>vdma_hdmi), front_buffer_frame, XAXIVDMA_READ);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#75715e\">// Wait for park frame to update.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\t<span style=\"color:#66d9ef\">while</span>(get_current_frame_pointer(<span style=\"color:#f92672\">&amp;</span>(config<span style=\"color:#f92672\">-&gt;</span>vdma_hdmi), XAXIVDMA_READ) <span style=\"color:#f92672\">!=</span> front_buffer_frame)\n</span></span><span style=\"display:flex;\"><span>\t\t{\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#75715e\">// Update pMM2S_Mem to point to back buffer.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\tpMM2S_Mem <span style=\"color:#f92672\">=</span> (Xuint16 <span style=\"color:#f92672\">*</span>)XAxiVdma_ReadReg(config<span style=\"color:#f92672\">-&gt;</span>vdma_hdmi.BaseAddr, XAXIVDMA_MM2S_ADDR_OFFSET<span style=\"color:#f92672\">+</span>XAXIVDMA_START_ADDR_OFFSET <span style=\"color:#f92672\">+</span> (back_buffer_frame <span style=\"color:#f92672\">*</span> <span style=\"color:#ae81ff\">0x4</span>));\n</span></span></code></pre><p>The function <code>run_demosaicing</code> applies the demosaic operation to the incoming data and the rest of the code shown here is to manage the frame buffers. To allow for an easier time measuring the performance metrics and to remove tearing, we used the frame buffers smartly.</p>\n<p>Since the demosaicing software takes a while to run, we take a single snapshot image, store it in frame buffer 0, and then let the VDMA write the incoming stream to frame buffer 1. Then, the deomosaicing software can run on frame buffer 0.</p>\n<p>For displaying the image, we decided to treat two different read frame buffers as front and back buffers. The demosaicing code updates the back buffer while the read channel of the VDMA streams the front buffer contents to the HDMI interface. Then once the demosaicing software has ran, the buffers are swapped, which displays the latest processed frame. This worked quite well and removed many artifacts in our images. An example of an image that resulted from the software demosaicing is shown below (image quality is a bit poor due to my phone):</p>\n<p><img src=\"https://conneroh.fly.storage.tigris.dev/projects/cpre488-mp2/sw_demo.png\"></p>\n<h2 id=\"ycbcr-422-format-analysis\"><a class=\"anchor permalink p-4\" href=\"#ycbcr-422-format-analysis\">#</a> YCbCr 4:2:2 Format Analysis</h2>\n<h3 id=\"note-from-the-documentation\"><a class=\"anchor permalink p-4\" href=\"#note-from-the-documentation\">#</a> Note from the Documentation</h3>\n<p>4:4:4 to 4:2:2 Conversion Eq from Subsystem Documentation (PG231):</p>\n<p><span class=\"math display\">\\[o_{x,y} = \\left[\\sum_{k=0}^{N_{\\text{taps}}-1} i_{x-k,y}\\, \\text{COEF}_{k,\\text{HPHASEO}}\\right]_0^{2^{D_w}-1}\n\\]</span></p>\n<p>Equation 3-11</p>\n<p>This conversion is a horizontal 2:1 decimation operation, implemented using a low-pass FIR filter to suppress chroma aliasing. In order to evaluate output pixel <span class=\"math inline\">\\(o_x$,\\)</span>o_y<span class=\"math inline\">\\(, the FIR filter in the core convolves COEFk_HPHASE0, where k is the coefficient index, \\)</span>i_x<span class=\"math inline\">\\(,\\)</span>i_y<span class=\"math inline\">\\(are pixels from the input image, and\\)</span>[ ]^M_m$ represents rounding with clipping at M, and clamping at m. DW is the Data Width or number of bits per video component. Ntaps is the number of filter taps. The predefined filter coefficients are <code>[0.25 0.5 0.25]</code>.</p>\n<h3 id=\"primary-analysis\"><a class=\"anchor permalink p-4\" href=\"#primary-analysis\">#</a> Primary Analysis</h3>\n<p>In the YCbCr 4:2:2 format, each 32-bit word (0xF0525A52, 0x36912291, 0x6E29F029) contains data for two adjacent pixels. Breaking down these values:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Frame #1 - Red pixels\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">for</span> (i <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>; i <span style=\"color:#f92672\">&lt;</span> storage_size <span style=\"color:#f92672\">/</span> config<span style=\"color:#f92672\">-&gt;</span>uNumFrames_HdmiFrameBuffer; i <span style=\"color:#f92672\">+=</span> <span style=\"color:#ae81ff\">4</span>) {\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">*</span>pStorageMem<span style=\"color:#f92672\">++</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0xF0525A52</span>;  <span style=\"color:#75715e\">// Red\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>}\n</span></span></code></pre><ol>\n<li><strong>Red Example (0xF0525A52)</strong>:\n<ul>\n<li>This represents two pixels in sequence</li>\n<li>First 16 bits (0xF052): Y1=0xF0, Cb=0x52</li>\n<li>Second 16 bits (0x5A52): Y2=0x5A, Cr=0x52</li>\n</ul>\n</li>\n</ol>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Frame #2 - Green pixels\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">for</span> (i <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>; i <span style=\"color:#f92672\">&lt;</span> storage_size <span style=\"color:#f92672\">/</span> config<span style=\"color:#f92672\">-&gt;</span>uNumFrames_HdmiFrameBuffer; i <span style=\"color:#f92672\">+=</span> <span style=\"color:#ae81ff\">4</span>) {\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">*</span>pStorageMem<span style=\"color:#f92672\">++</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0x36912291</span>; <span style=\"color:#75715e\">// Green\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>}\n</span></span></code></pre><ol start=\"2\">\n<li><strong>Green Example (0x36912291)</strong>:\n<ul>\n<li>First 16 bits (0x3691): Y1=0x36, Cb=0x91</li>\n<li>Second 16 bits (0x2291): Y2=0x22, Cr=0x91</li>\n</ul>\n</li>\n</ol>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Frame #3 - Blue pixels\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">for</span> (i <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>; i <span style=\"color:#f92672\">&lt;</span> storage_size <span style=\"color:#f92672\">/</span> config<span style=\"color:#f92672\">-&gt;</span>uNumFrames_HdmiFrameBuffer; i <span style=\"color:#f92672\">+=</span> <span style=\"color:#ae81ff\">4</span>) {\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">*</span>pStorageMem<span style=\"color:#f92672\">++</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0x6E29F029</span>;  <span style=\"color:#75715e\">// Blue\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>}\n</span></span></code></pre><ol start=\"3\">\n<li><strong>Blue Example (0x6E29F029)</strong>:\n<ul>\n<li>First 16 bits (0x6E29): Y1=0x6E, Cb=0x29</li>\n<li>Second 16 bits (0xF029): Y2=0xF0, Cr=0x29</li>\n</ul>\n</li>\n</ol>\n<p>The pattern for each color follows the YCbCr 4:2:2 format where:</p>\n<ul>\n<li>Each 16-bit word contains one Y (luminance) value and one chrominance (Cb or Cr) value</li>\n<li>The chrominance values alternate between Cb and Cr</li>\n<li>Two adjacent pixels share the same Cb and Cr values (the subsampling)</li>\n</ul>\n<h2 id=\"format-structure\"><a class=\"anchor permalink p-4\" href=\"#format-structure\">#</a> Format Structure</h2>\n<p>The 4:2:2 format packs data as follows for each pair of pixels:</p>\n<pre><code>[Y1][Cb][Y2][Cr]\n</code></pre>\n<p>Where:</p>\n<ul>\n<li>Y1: Luminance for first pixel</li>\n<li>Cb: Blue color difference (shared between two pixels)</li>\n<li>Y2: Luminance for second pixel</li>\n<li>Cr: Red color difference (shared between two pixels)</li>\n</ul>\n<p>This format maintains full luminance resolution (the &ldquo;4&rdquo; in 4:2:2) while halving the horizontal resolution of the color information (the &ldquo;2:2&rdquo;). This works well because human vision is more sensitive to changes in brightness than in color.</p>\n<p>For the <code>camera_loop()</code> function's conversion pass, this format would need to be maintained when processing the data, ensuring that each 32-bit word continues to represent two pixels in the YCbCr 4:2:2 format, with the appropriate luminance and chrominance values preserved during the vertical flip operation.</p>\n<h2 id=\"image-processing-pipeline\"><a class=\"anchor permalink p-4\" href=\"#image-processing-pipeline\">#</a> Image Processing Pipeline</h2>\n<p>Below is the resulting block diagram after adding the pipeline (we did not have enough time to update our original diagram, we have provided a description of the changes below):</p>\n<p><img src=\"https://conneroh.fly.storage.tigris.dev/projects/cpre488-mp2/HW-BD.png\"></p>\n<p>The pipeline consists of an IP block that does demosaicing to the incoming video stream and two video processing modules. One of the video processing modules converts the RGB output from the demosaicing module to YUV 444 then the other video processing module converts the YUV 444 data to YUV 422, which is what the FMC IMAGEON module expects. The output from the YUV 444 to YUV 422 is then passed through an AXI Stream Converter and is then passed to the VDMA like before. So in summary, three pipeline stages were added:</p>\n<ol>\n<li>Demosaicing</li>\n<li>RGB to YUV 444 Conversion</li>\n<li>YUV 444 to YUV 422 Conversion</li>\n</ol>\n<h2 id=\"performance\"><a class=\"anchor permalink p-4\" href=\"#performance\">#</a> Performance</h2>\n<h3 id=\"introduction-how-we-measured-performance\"><a class=\"anchor permalink p-4\" href=\"#introduction-how-we-measured-performance\">#</a> Introduction (how we measured performance)</h3>\n<p>We measured the performance of the software and hardware pipelines in this design utilizing interrupt-driven time measurements. Using interrupts allows the software to be aware when a frame is read or written by the VDMA. Then by using timers, we can get extremely accurate frame write times, which can be used to derive the resulting average frames per second (FPS).</p>\n<h3 id=\"software-pipeline\"><a class=\"anchor permalink p-4\" href=\"#software-pipeline\">#</a> Software Pipeline</h3>\n<h4 id=\"performance-1\"><a class=\"anchor permalink p-4\" href=\"#performance-1\">#</a> Performance</h4>\n<p>For subgroup B, we determined that the average frame rate is <code>0.396 FPS</code></p>\n<p>This is quite slow, which is due to the software demosaicing algorithm not being optimized well and the fact that over 2 million half-word writes are required to process a single image!</p>\n<h4 id=\"testing-methodology\"><a class=\"anchor permalink p-4\" href=\"#testing-methodology\">#</a> Testing Methodology</h4>\n<p>As previously stated, we used interrupts and timers to measure the FPS. We setup interrupts for the VDMA read channel frame completion and the write channel frame completion. This allowed us to know when frames were written to the VDMA and read from the VDMA. However, we had to find a solution to isolate the frame that is being processed since we don't shut down the VDMA.</p>\n<p>To do this, we stored a single frame in frame buffer 0, which the demosaicing software ran on. Then, once the demosaicing was finished, we updated the VDMA read channel to read this new frame out. By using the park pointer VDMA registers, we were able to detect when this new frame was written out and start/stop timers accordingly on this event. By comparing the current write time to the previous write time, we can determine how long it took to write out the last frame, which gives us our FPS value! Finally, we averaged 10 FPS values together to produce a final FPS value!</p>\n<p>The interrupt service routines and park pointer register modification code is shown below:</p>\n<p>Globals</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Timing globals\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">static</span> fps_t fps;\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">static</span> <span style=\"color:#66d9ef\">int</span> sw_mode <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">static</span> <span style=\"color:#66d9ef\">int</span> snapshot_saved <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">static</span> u8 back_buffer_frame <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">2</span>;\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">static</span> u8 front_buffer_frame <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">3</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Frame that indicates that the write completed.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">static</span> u8 target_frame <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">2</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">static</span> XTime tStart, tEnd <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// In seconds\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">static</span> <span style=\"color:#66d9ef\">float</span> frame_time <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span></code></pre><p>ISRS:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">void</span> <span style=\"color:#a6e22e\">video_frame_output_isr</span>(<span style=\"color:#66d9ef\">void</span><span style=\"color:#f92672\">*</span> CallBackRef, u32 InterruptTypes)\n</span></span><span style=\"display:flex;\"><span>{\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#66d9ef\">switch</span>(InterruptTypes)\n</span></span><span style=\"display:flex;\"><span>\t{\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#66d9ef\">case</span> XAXIVDMA_IXR_FRMCNT_MASK:\n</span></span><span style=\"display:flex;\"><span>\t\t{\n</span></span><span style=\"display:flex;\"><span>\t\t\t<span style=\"color:#75715e\">// Once we have read from the back buffer, we know that it is the new front buffer\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\t\t<span style=\"color:#75715e\">// so we must have just swapped.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\t\t<span style=\"color:#66d9ef\">if</span>(sw_mode <span style=\"color:#f92672\">&amp;&amp;</span> (get_current_frame_pointer((XAxiVdma<span style=\"color:#f92672\">*</span>) CallBackRef, XAXIVDMA_READ) <span style=\"color:#f92672\">==</span> target_frame) <span style=\"color:#f92672\">&amp;&amp;</span> snapshot_saved)\n</span></span><span style=\"display:flex;\"><span>\t\t\t{\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t<span style=\"color:#75715e\">// We start and stop the timer on this ISR.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\t\t\t<span style=\"color:#75715e\">// If this is the first frame, the timer won&#39;t be started, so start it up without ending any timer.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\t\t\t<span style=\"color:#66d9ef\">if</span>(<span style=\"color:#f92672\">!</span>tStart)\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t{\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t\tXTime_GetTime(<span style=\"color:#f92672\">&amp;</span>tStart);\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t}\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t<span style=\"color:#66d9ef\">else</span>\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t{\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t\tXTime_GetTime(<span style=\"color:#f92672\">&amp;</span>tEnd);\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t\tsnapshot_saved <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t\tframe_time <span style=\"color:#f92672\">=</span> (tEnd <span style=\"color:#f92672\">-</span> tStart) <span style=\"color:#f92672\">/</span> (<span style=\"color:#66d9ef\">float</span>)COUNTS_PER_SECOND;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t\tfps_time_store(<span style=\"color:#f92672\">&amp;</span>fps, frame_time);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t\tsprintf(fps_msg, <span style=\"color:#e6db74\">&#34;Average FPS: %.5f&#34;</span>, fps_calculate(<span style=\"color:#f92672\">&amp;</span>fps));\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t\txil_printf(<span style=\"color:#e6db74\">&#34;%s</span><span style=\"color:#ae81ff\">\\n\\r</span><span style=\"color:#e6db74\">&#34;</span>, fps_msg);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t\t<span style=\"color:#75715e\">// Start the timer back up!\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\t\t\t\tXTime_GetTime(<span style=\"color:#f92672\">&amp;</span>tStart);\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t\t}\n</span></span><span style=\"display:flex;\"><span>\t\t}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#66d9ef\">default</span><span style=\"color:#f92672\">:</span>\n</span></span><span style=\"display:flex;\"><span>\t\t{\n</span></span><span style=\"display:flex;\"><span>\t\t\t<span style=\"color:#66d9ef\">break</span>;\n</span></span><span style=\"display:flex;\"><span>\t\t}\n</span></span><span style=\"display:flex;\"><span>\t}\n</span></span><span style=\"display:flex;\"><span>}\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">void</span> <span style=\"color:#a6e22e\">camera_input_isr</span>(<span style=\"color:#66d9ef\">void</span><span style=\"color:#f92672\">*</span> CallBackRef, u32 InterruptTypes)\n</span></span><span style=\"display:flex;\"><span>{\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#66d9ef\">switch</span>(InterruptTypes)\n</span></span><span style=\"display:flex;\"><span>\t{\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#66d9ef\">case</span> XAXIVDMA_IXR_FRMCNT_MASK:\n</span></span><span style=\"display:flex;\"><span>\t\t{\n</span></span><span style=\"display:flex;\"><span>\t\t\t<span style=\"color:#66d9ef\">if</span>(sw_mode <span style=\"color:#f92672\">&amp;&amp;</span> get_current_frame_pointer((XAxiVdma<span style=\"color:#f92672\">*</span>)CallBackRef, XAXIVDMA_WRITE) <span style=\"color:#f92672\">==</span> <span style=\"color:#ae81ff\">0</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#f92672\">!</span>snapshot_saved)\n</span></span><span style=\"display:flex;\"><span>\t\t\t{\n</span></span><span style=\"display:flex;\"><span>\t\t\t\tsnapshot_saved <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">1</span>;\n</span></span><span style=\"display:flex;\"><span>\t\t\t\ttarget_frame <span style=\"color:#f92672\">=</span> back_buffer_frame;\n</span></span><span style=\"display:flex;\"><span>\t\t\t}\n</span></span><span style=\"display:flex;\"><span>\t\t}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#66d9ef\">default</span><span style=\"color:#f92672\">:</span>\n</span></span><span style=\"display:flex;\"><span>\t\t{\n</span></span><span style=\"display:flex;\"><span>\t\t\t<span style=\"color:#66d9ef\">break</span>;\n</span></span><span style=\"display:flex;\"><span>\t\t}\n</span></span><span style=\"display:flex;\"><span>\t}\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre><p>Park Pointer Register Modifications</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>\t\tset_park_frame(<span style=\"color:#f92672\">&amp;</span>(config<span style=\"color:#f92672\">-&gt;</span>vdma_hdmi), <span style=\"color:#ae81ff\">0</span>, XAXIVDMA_WRITE);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#75715e\">// Wait until frame zero is being written to.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\t<span style=\"color:#66d9ef\">while</span>(get_current_frame_pointer(<span style=\"color:#f92672\">&amp;</span>(config<span style=\"color:#f92672\">-&gt;</span>vdma_hdmi), XAXIVDMA_WRITE))\n</span></span><span style=\"display:flex;\"><span>\t\t{\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\tset_park_frame(<span style=\"color:#f92672\">&amp;</span>(config<span style=\"color:#f92672\">-&gt;</span>vdma_hdmi), <span style=\"color:#ae81ff\">1</span>, XAXIVDMA_WRITE);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#75715e\">// Wait until frame one is being written to.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\t<span style=\"color:#66d9ef\">while</span>(<span style=\"color:#f92672\">!</span>get_current_frame_pointer(<span style=\"color:#f92672\">&amp;</span>(config<span style=\"color:#f92672\">-&gt;</span>vdma_hdmi), XAXIVDMA_WRITE))\n</span></span><span style=\"display:flex;\"><span>\t\t{\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#75715e\">// Apply CFA\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\trun_demosaicing((<span style=\"color:#66d9ef\">uint16_t</span><span style=\"color:#f92672\">*</span>)pS2MM_Mem, (<span style=\"color:#66d9ef\">uint16_t</span><span style=\"color:#f92672\">*</span>)pMM2S_Mem);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#75715e\">// Swap back and front buffers\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\tu8 temp <span style=\"color:#f92672\">=</span> back_buffer_frame;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\tback_buffer_frame <span style=\"color:#f92672\">=</span> front_buffer_frame;\n</span></span><span style=\"display:flex;\"><span>\t\tfront_buffer_frame <span style=\"color:#f92672\">=</span> temp;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#75715e\">// Have the read side park on the new front buffer\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\tset_park_frame(<span style=\"color:#f92672\">&amp;</span>(config<span style=\"color:#f92672\">-&gt;</span>vdma_hdmi), front_buffer_frame, XAXIVDMA_READ);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#75715e\">// Wait for park frame to update.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\t<span style=\"color:#66d9ef\">while</span>(get_current_frame_pointer(<span style=\"color:#f92672\">&amp;</span>(config<span style=\"color:#f92672\">-&gt;</span>vdma_hdmi), XAXIVDMA_READ) <span style=\"color:#f92672\">!=</span> front_buffer_frame)\n</span></span><span style=\"display:flex;\"><span>\t\t{\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#75715e\">// Update pMM2S_Mem to point to back buffer.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\tpMM2S_Mem <span style=\"color:#f92672\">=</span> (Xuint16 <span style=\"color:#f92672\">*</span>)XAxiVdma_ReadReg(config<span style=\"color:#f92672\">-&gt;</span>vdma_hdmi.BaseAddr, XAXIVDMA_MM2S_ADDR_OFFSET<span style=\"color:#f92672\">+</span>XAXIVDMA_START_ADDR_OFFSET <span style=\"color:#f92672\">+</span> (back_buffer_frame <span style=\"color:#f92672\">*</span> <span style=\"color:#ae81ff\">0x4</span>));\n</span></span></code></pre><h3 id=\"hardware-pipeline\"><a class=\"anchor permalink p-4\" href=\"#hardware-pipeline\">#</a> Hardware Pipeline</h3>\n<h4 id=\"performance-2\"><a class=\"anchor permalink p-4\" href=\"#performance-2\">#</a> Performance</h4>\n<p>For subgroup B, we determined that the average frame rate is <code>59.794 FPS</code></p>\n<p>This is what we expect since the timing was setup for 60Hz writes, which is 60 times a second.</p>\n<h4 id=\"testing-methodology-1\"><a class=\"anchor permalink p-4\" href=\"#testing-methodology-1\">#</a> Testing Methodology</h4>\n<p>The testing methodology used for the hardware pipeline is quite similar to what we used for the software pipeline. We made use of VDMA read and write interrupts and the processing system timers to record the time passed between frame writes. However, since we don't have to wait on C code to run, we did not need to single out a frame and keep track of it. We could simply let the VDMA run with a few conditions to make sure we are recording the times fine:</p>\n<ul>\n<li>A VDMA write must happen before a VDMA read can occur. We need to take into consideration the VDMA write time.</li>\n<li>Only record times between VDMA reads to two different frame buffers. If multiple reads are done on the same frame buffer, we know that the write channel is lagging behind, so we should wait until the frame buffer counter increments.</li>\n</ul>\n<p>The interrupt service routines that implement this are shown below:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">void</span> <span style=\"color:#a6e22e\">video_frame_output_isr</span>(<span style=\"color:#66d9ef\">void</span><span style=\"color:#f92672\">*</span> CallBackRef, u32 InterruptTypes)\n</span></span><span style=\"display:flex;\"><span>{\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#66d9ef\">switch</span>(InterruptTypes)\n</span></span><span style=\"display:flex;\"><span>\t{\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#66d9ef\">case</span> XAXIVDMA_IXR_FRMCNT_MASK:\n</span></span><span style=\"display:flex;\"><span>\t\t{\n</span></span><span style=\"display:flex;\"><span>\t\t\tu8 current_frame <span style=\"color:#f92672\">=</span> get_current_frame_pointer((XAxiVdma<span style=\"color:#f92672\">*</span>) CallBackRef, XAXIVDMA_READ);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t\t<span style=\"color:#75715e\">// Make sure we received something before recording that we wrote it.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\t\t<span style=\"color:#66d9ef\">if</span>(rec_flag <span style=\"color:#f92672\">&amp;&amp;</span> (current_frame <span style=\"color:#f92672\">!=</span> prev_frame))\n</span></span><span style=\"display:flex;\"><span>\t\t\t{\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t<span style=\"color:#75715e\">// If first frame, start only\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\t\t\t<span style=\"color:#66d9ef\">if</span>(<span style=\"color:#f92672\">!</span>tStart)\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t{\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t\tXTime_GetTime(<span style=\"color:#f92672\">&amp;</span>tStart);\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t}\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t<span style=\"color:#66d9ef\">else</span>\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t{\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t\tXTime_GetTime(<span style=\"color:#f92672\">&amp;</span>tEnd);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t\tfps_reading <span style=\"color:#f92672\">=</span> (tEnd <span style=\"color:#f92672\">-</span> tStart) <span style=\"color:#f92672\">/</span> (<span style=\"color:#66d9ef\">float</span>)COUNTS_PER_SECOND;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t\tfps_time_store(<span style=\"color:#f92672\">&amp;</span>fps, fps_reading);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">#if OUTPUT_FPS\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\t\t\t\tsprintf(fps_msg, <span style=\"color:#e6db74\">&#34;Average FPS: %.5f&#34;</span>, fps_calculate(<span style=\"color:#f92672\">&amp;</span>fps));\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t\txil_printf(<span style=\"color:#e6db74\">&#34;%s</span><span style=\"color:#ae81ff\">\\n\\r</span><span style=\"color:#e6db74\">&#34;</span>, fps_msg);\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">#endif\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t\t<span style=\"color:#75715e\">// Start the timer back up!\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\t\t\t\t\tXTime_GetTime(<span style=\"color:#f92672\">&amp;</span>tStart);\n</span></span><span style=\"display:flex;\"><span>\t\t\t\t}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t\t\trec_flag <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span>\t\t\t}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t\tprev_frame <span style=\"color:#f92672\">=</span> current_frame;\n</span></span><span style=\"display:flex;\"><span>\t\t}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#66d9ef\">default</span><span style=\"color:#f92672\">:</span>\n</span></span><span style=\"display:flex;\"><span>\t\t{\n</span></span><span style=\"display:flex;\"><span>\t\t\t<span style=\"color:#66d9ef\">break</span>;\n</span></span><span style=\"display:flex;\"><span>\t\t}\n</span></span><span style=\"display:flex;\"><span>\t}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Does nothing as of now. All timer operations are done when a frame is drawn to the screen.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">void</span> <span style=\"color:#a6e22e\">camera_input_isr</span>(<span style=\"color:#66d9ef\">void</span><span style=\"color:#f92672\">*</span> CallBackRef, u32 InterruptTypes)\n</span></span><span style=\"display:flex;\"><span>{\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#66d9ef\">switch</span>(InterruptTypes)\n</span></span><span style=\"display:flex;\"><span>\t{\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#66d9ef\">case</span> XAXIVDMA_IXR_FRMCNT_MASK:\n</span></span><span style=\"display:flex;\"><span>\t\t{\n</span></span><span style=\"display:flex;\"><span>\t\t\t<span style=\"color:#66d9ef\">if</span>(<span style=\"color:#f92672\">!</span>rec_flag)\n</span></span><span style=\"display:flex;\"><span>\t\t\t{\n</span></span><span style=\"display:flex;\"><span>\t\t\t\trec_flag <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">1</span>;\n</span></span><span style=\"display:flex;\"><span>\t\t\t}\n</span></span><span style=\"display:flex;\"><span>\t\t\t<span style=\"color:#66d9ef\">break</span>;\n</span></span><span style=\"display:flex;\"><span>\t\t}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\t\t<span style=\"color:#66d9ef\">default</span><span style=\"color:#f92672\">:</span>\n</span></span><span style=\"display:flex;\"><span>\t\t{\n</span></span><span style=\"display:flex;\"><span>\t\t\t<span style=\"color:#66d9ef\">break</span>;\n</span></span><span style=\"display:flex;\"><span>\t\t}\n</span></span><span style=\"display:flex;\"><span>\t}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre><p>Overall, it was quite tedious to get interrupts working, but it definitely paid off!</p>\n<h2 id=\"bonus-credit\"><a class=\"anchor permalink p-4\" href=\"#bonus-credit\">#</a> Bonus Credit</h2>\n<p>The following sections describe the bonus credit tasks that were completed for this project and how they were implemented/accomplished.</p>\n<h3 id=\"various-analog-and-digital-adjustments-for-the-gain-exposure-and-other-common-user-configurable-digital-camera-settings\"><a class=\"anchor permalink p-4\" href=\"#various-analog-and-digital-adjustments-for-the-gain-exposure-and-other-common-user-configurable-digital-camera-settings\">#</a> Various analog and digital adjustments for the gain, exposure, and other common user-configurable digital camera settings.</h3>\n<p>We implemented the following adjustments:</p>\n<ul>\n<li>Contrast</li>\n<li>Brightness</li>\n<li>Saturation</li>\n</ul>\n<p>These were implemented by leveraging the second Subsystem which converts 4:4:4 to 4:2:2 and the <code>xvprocss.h</code> defined utilities.</p>\n<h4 id=\"gain\"><a class=\"anchor permalink p-4\" href=\"#gain\">#</a> Gain</h4>\n<h3 id=\"1-brightness-adjustment\"><a class=\"anchor permalink p-4\" href=\"#1-brightness-adjustment\">#</a> 1. Brightness Adjustment</h3>\n<p><strong>Explanation:</strong><br>\nThe brightness level is adjusted dynamically through a dedicated function. When invoked (for example, via board buttons), it calls the hardware API to update the brightness level of the processed video image.</p>\n<p><strong>Code Sample:</strong></p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">void</span> <span style=\"color:#a6e22e\">set_brightness</span>(\n</span></span><span style=\"display:flex;\"><span>    camera_config_t <span style=\"color:#f92672\">*</span>config,\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">int</span> percent <span style=\"color:#75715e\">// Brightness level as a percentage\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>)\n</span></span><span style=\"display:flex;\"><span>{\n</span></span><span style=\"display:flex;\"><span>   <span style=\"color:#66d9ef\">if</span> (config<span style=\"color:#f92672\">-&gt;</span>bVerbose)\n</span></span><span style=\"display:flex;\"><span>   {\n</span></span><span style=\"display:flex;\"><span>      xil_printf(<span style=\"color:#e6db74\">&#34;Setting brightness to %d</span><span style=\"color:#ae81ff\">\\n\\r</span><span style=\"color:#e6db74\">&#34;</span>, percent);\n</span></span><span style=\"display:flex;\"><span>   }\n</span></span><span style=\"display:flex;\"><span>   <span style=\"color:#75715e\">// Apply the brightness adjustment using the video processing subsystem\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>   XVprocSs_SetPictureBrightness(<span style=\"color:#f92672\">&amp;</span>proc_ss_RGB_YCrCb_444, (s32)percent);\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre><h3 id=\"2-contrast-adjustment\"><a class=\"anchor permalink p-4\" href=\"#2-contrast-adjustment\">#</a> 2. Contrast Adjustment</h3>\n<p><strong>Explanation:</strong><br>\nSimilarly, contrast is adjusted using a dedicated function that calls the hardware API to modify the contrast level. This allows users to dynamically control the difference between light and dark areas in the image.</p>\n<p><strong>Code Sample:</strong></p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">void</span> <span style=\"color:#a6e22e\">set_contrast</span>(\n</span></span><span style=\"display:flex;\"><span>    camera_config_t <span style=\"color:#f92672\">*</span>config,\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">int</span> percent <span style=\"color:#75715e\">// Contrast level as a percentage\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>)\n</span></span><span style=\"display:flex;\"><span>{\n</span></span><span style=\"display:flex;\"><span>   <span style=\"color:#66d9ef\">if</span> (config<span style=\"color:#f92672\">-&gt;</span>bVerbose)\n</span></span><span style=\"display:flex;\"><span>   {\n</span></span><span style=\"display:flex;\"><span>      xil_printf(<span style=\"color:#e6db74\">&#34;Setting contrast to %d</span><span style=\"color:#ae81ff\">\\n\\r</span><span style=\"color:#e6db74\">&#34;</span>, percent);\n</span></span><span style=\"display:flex;\"><span>   }\n</span></span><span style=\"display:flex;\"><span>   <span style=\"color:#75715e\">// Apply the contrast adjustment using the video processing subsystem\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>   XVprocSs_SetPictureContrast(<span style=\"color:#f92672\">&amp;</span>proc_ss_RGB_YCrCb_444, (s32)percent);\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre><h3 id=\"4-saturation-adjustment\"><a class=\"anchor permalink p-4\" href=\"#4-saturation-adjustment\">#</a> 4. Saturation Adjustment</h3>\n<p><strong>Explanation:</strong><br>\nThe saturation adjustment function controls the vividness of the colors in the video output. This function calls the corresponding hardware API to adjust the saturation level in the YCrCb color space.</p>\n<p><strong>Code Sample:</strong></p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">void</span> <span style=\"color:#a6e22e\">set_saturation</span>(\n</span></span><span style=\"display:flex;\"><span>    camera_config_t <span style=\"color:#f92672\">*</span>config,\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">int</span> percent <span style=\"color:#75715e\">// Saturation level as a percentage\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>)\n</span></span><span style=\"display:flex;\"><span>{\n</span></span><span style=\"display:flex;\"><span>   <span style=\"color:#66d9ef\">if</span> (config<span style=\"color:#f92672\">-&gt;</span>bVerbose)\n</span></span><span style=\"display:flex;\"><span>   {\n</span></span><span style=\"display:flex;\"><span>      xil_printf(<span style=\"color:#e6db74\">&#34;Setting saturation to %d</span><span style=\"color:#ae81ff\">\\n\\r</span><span style=\"color:#e6db74\">&#34;</span>, percent);\n</span></span><span style=\"display:flex;\"><span>   }\n</span></span><span style=\"display:flex;\"><span>   <span style=\"color:#75715e\">// Apply the saturation adjustment using the video processing subsystem\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>   XVprocSs_SetPictureSaturation(<span style=\"color:#f92672\">&amp;</span>proc_ss_RGB_YCrCb_444, (s32)percent);\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre><p>Using the buttons on the board (code resused from mp-1), the user can adjust the gain, contrast, brightness, and saturation.</p>\n<h3 id=\"a-video-mode-which-records-and-can-replay-up-to-5-seconds-of-1080p-video\"><a class=\"anchor permalink p-4\" href=\"#a-video-mode-which-records-and-can-replay-up-to-5-seconds-of-1080p-video\">#</a> A video mode, which records and can replay up to 5 seconds of 1080p video.</h3>\n<p>Video mode was about decreasing the delay from image to image in the play mode and increasing the number of images that can be stored in the software. This was done by removing the 2-second delay in image capture and increasing the heap size to correspond with the increased number of stored images.</p>\n<p><strong>Code Sample:</strong></p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>_HEAP_SIZE <span style=\"color:#f92672\">=</span> DEFINED(_HEAP_SIZE) <span style=\"color:#f92672\">?</span> _HEAP_SIZE : <span style=\"color:#ae81ff\">0x19000000</span>;\n</span></span></code></pre><h3 id=\"a-digital-zoom-mode-which-uses-the-up-and-down-buttons-to-zoom-in-and-out-of-the-current-scene\"><a class=\"anchor permalink p-4\" href=\"#a-digital-zoom-mode-which-uses-the-up-and-down-buttons-to-zoom-in-and-out-of-the-current-scene\">#</a> A digital zoom mode, which uses the up and down buttons to zoom in and out of the current scene.</h3>\n<p>The digital zoom was implemented partially through the crop and scale capabilities of the fully fledged Video Processing Subsystem (v2.2) IP core. According to the embedded drivers for the IP, the VPSS has a zoom and scale core that can be used to perform a digital zoom by relaying display information in a user-specified window that can then be scaled to a desired dimension. To do this, I opted to add a separate core in addition to the two used in the original hardware pipeline for colour space conversion and chroma sampling, as I worried the additional operations could cause timing issues during the video processing. The final pipeline was as follows: Demosiac -&gt; Zoom and Scale VPSS -&gt; CSC VPSS -&gt; 444:422 VPSS -&gt; VDMA. Unfortunately, the driver documentation leaves something to be desired and there lacks an accessible example for this design. This resulted in an awfully heuristic design process, which ultimately produced a rather lackluster product. However, a product nonetheless. Although it still suffers from artifacts, a digital zoom of at most 85% of the original resolution was achieved before the video became distorted and corrupted. An example of the corrupted image can be seen below:</p>\n<p><img src=\"https://conneroh.fly.storage.tigris.dev/projects/cpre488-mp2/zoom_issue.png\"></p>\n<p>As the zoom increased past the 85% threshold, only a small segment of the top of the display would repeat. This segment seemed like it would duplicate and shrink as the zoom factor increased. Originally, I had believed that the issue lied in the output resolution of the zoom core being incompatible with the HDMI. For example, when I played around with the picture in picture mode, a similar artifact manifested - as seen below:</p>\n<p><img src=\"https://conneroh.fly.storage.tigris.dev/projects/cpre488-mp2/pip_fun.png\"></p>\n<p>For that reason, I figured that using the horizontal and vertical scaler cores could help align the output video resolution.</p>\n<p>However, I was unsure as to how to properly sequence the core configurations as there was a lack of relative documentation.</p>\n<p>Looking at the AMD forums, it seemed that many people experiencing similar artifacts blamed unaligned VDMA writes or bandwidth bottlenecks.</p>\n<p>In an attempt to address the VDMA issues, I tried to dynamically reconfigure the VDMA such that it could scale the non-1080p output of the zoom core to 1080p for the HDMI.</p>\n<p>I also tried allowing for unaligned VDMA reads and writes.</p>\n<p>Neither of these worked. I also wanted to try increasing the sample rate of the hardware pipeline to 2 or more pixels per clock, but I ran out of time before I could test this hypothesis.</p>\n<p>In the end, I was able to perform a digital zoom in some way.</p>\n<h3 id=\"sobel-edge-detector\"><a class=\"anchor permalink p-4\" href=\"#sobel-edge-detector\">#</a> Sobel Edge Detector</h3>\n<p>The Sobel edge detector was implemented through software - in a similar manner to the Bayer reconstruction software. This meant the operation could be achieved with the following convolution algorithm:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Kernels\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">uint32_t</span> i, j, gx, gy <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">uint32_t</span> mx[<span style=\"color:#ae81ff\">3</span>][<span style=\"color:#ae81ff\">3</span>] <span style=\"color:#f92672\">=</span> {\n</span></span><span style=\"display:flex;\"><span>\t{<span style=\"color:#f92672\">-</span><span style=\"color:#ae81ff\">1</span>, <span style=\"color:#ae81ff\">0</span>, <span style=\"color:#ae81ff\">1</span>},\n</span></span><span style=\"display:flex;\"><span>\t{<span style=\"color:#f92672\">-</span><span style=\"color:#ae81ff\">2</span>, <span style=\"color:#ae81ff\">0</span>, <span style=\"color:#ae81ff\">2</span>},\n</span></span><span style=\"display:flex;\"><span>  {<span style=\"color:#f92672\">-</span><span style=\"color:#ae81ff\">1</span>, <span style=\"color:#ae81ff\">0</span>, <span style=\"color:#ae81ff\">1</span>}\n</span></span><span style=\"display:flex;\"><span>};\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">uint32_t</span> my[<span style=\"color:#ae81ff\">3</span>][<span style=\"color:#ae81ff\">3</span>] <span style=\"color:#f92672\">=</span> {\n</span></span><span style=\"display:flex;\"><span>\t{<span style=\"color:#f92672\">-</span><span style=\"color:#ae81ff\">1</span>, <span style=\"color:#f92672\">-</span><span style=\"color:#ae81ff\">2</span>, <span style=\"color:#f92672\">-</span><span style=\"color:#ae81ff\">1</span>},\n</span></span><span style=\"display:flex;\"><span>\t{<span style=\"color:#ae81ff\">0</span>, <span style=\"color:#ae81ff\">0</span>, <span style=\"color:#ae81ff\">0</span>},\n</span></span><span style=\"display:flex;\"><span>  {<span style=\"color:#ae81ff\">1</span>, <span style=\"color:#ae81ff\">2</span>, <span style=\"color:#ae81ff\">1</span>}\n</span></span><span style=\"display:flex;\"><span>};\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Convolution\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">for</span> (<span style=\"color:#66d9ef\">int</span> x <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>; x <span style=\"color:#f92672\">&lt;</span> <span style=\"color:#ae81ff\">1000</span>; x<span style=\"color:#f92672\">++</span>) {\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">for</span> (i <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">1</span>; i <span style=\"color:#f92672\">&lt;</span> <span style=\"color:#ae81ff\">1080</span> <span style=\"color:#f92672\">-</span> <span style=\"color:#ae81ff\">2</span>; i<span style=\"color:#f92672\">++</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">for</span> (j <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">1</span>; j <span style=\"color:#f92672\">&lt;</span> <span style=\"color:#ae81ff\">1920</span> <span style=\"color:#f92672\">-</span> <span style=\"color:#ae81ff\">2</span>; j<span style=\"color:#f92672\">++</span>) {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">uint32_t</span> r, t <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">uint32_t</span> gx <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>, gy <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">for</span> (r <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>; r <span style=\"color:#f92672\">&lt;</span> <span style=\"color:#ae81ff\">3</span>; r<span style=\"color:#f92672\">++</span>) {\n</span></span><span style=\"display:flex;\"><span>          <span style=\"color:#66d9ef\">for</span> (t <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>; t <span style=\"color:#f92672\">&lt;</span> <span style=\"color:#ae81ff\">3</span>; t<span style=\"color:#f92672\">++</span>) {\n</span></span><span style=\"display:flex;\"><span>\t \t\t\t\t\t<span style=\"color:#66d9ef\">uint32_t</span> image_index <span style=\"color:#f92672\">=</span> (i <span style=\"color:#f92672\">+</span> r <span style=\"color:#f92672\">-</span> <span style=\"color:#ae81ff\">1</span>) <span style=\"color:#f92672\">*</span> <span style=\"color:#ae81ff\">1920</span> <span style=\"color:#f92672\">+</span> (j <span style=\"color:#f92672\">+</span> t <span style=\"color:#f92672\">-</span> <span style=\"color:#ae81ff\">1</span>);\n</span></span><span style=\"display:flex;\"><span>\t \t\t\t\t\t<span style=\"color:#66d9ef\">uint32_t</span> pixel_value <span style=\"color:#f92672\">=</span> pS2MM_Mem[image_index];\n</span></span><span style=\"display:flex;\"><span>\t \t\t\t\t\tgx <span style=\"color:#f92672\">+=</span> pixel_value <span style=\"color:#f92672\">*</span> mx[r][t];\n</span></span><span style=\"display:flex;\"><span>\t \t\t\t\t\tgy <span style=\"color:#f92672\">+=</span> pixel_value <span style=\"color:#f92672\">*</span> my[r][t];\n</span></span><span style=\"display:flex;\"><span>\t \t\t\t\t}\n</span></span><span style=\"display:flex;\"><span>\t \t\t\t}\n</span></span><span style=\"display:flex;\"><span>\t      <span style=\"color:#66d9ef\">uint32_t</span> output <span style=\"color:#f92672\">=</span> sqrt(gx<span style=\"color:#f92672\">*</span>gx <span style=\"color:#f92672\">+</span> gy<span style=\"color:#f92672\">*</span>gy);\n</span></span><span style=\"display:flex;\"><span>\t      pMM2S_Mem[i <span style=\"color:#f92672\">*</span> COL_SIZE <span style=\"color:#f92672\">+</span> j] <span style=\"color:#f92672\">=</span> output;\n</span></span><span style=\"display:flex;\"><span>\t  }\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre>",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 10, 0, time.UTC),
	Description:     "The third Project from CPRE488 at Iowa State University",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: cpre488-mp2\naliases:\n  - CPRE488 MP2\ntags:\n  - programming-language/c\n  - programming-language/cpp\n  - programming-language/matlab\n  - ide/vivado\n  - hdl/vhdl\n  - hdl/verilog\n  - protocol/uart\n  - edu/iastate\n  - edu/iastate/cpre488\nbanner_path: projects/mp2.webp\ncreated_at: 2025-03-27T14:13:10.000-06:00\ndescription: The third Project from CPRE488 at Iowa State University\ntitle: CPRE488 MP2\nupdated_at: 2025-04-12T12:19:22.000-06:00\n---\n\n# CPRE488 MP2\n\n## Detailed System Diagram\n\nThe following diagram illustrates the interconnection between the various modules in the\nsystem, both at the IP core level (i.e. the components in our VIVADO design) as well as the board\nlevel (i.e. the various chips that work together to connect the output video to the monitor).\n\n![[projects/cpre488-mp2/image-pipeline-diagram.png]]\n\n## Starter Hardware Operation Intentions\n\nThe overall goal of the starter hardware to to provide an interface to FMC device such that a test image sequence can be displayed over the HDMI port on the FMC device. To accomplish this, a Test Pattern Generator IP is instantiated and configured using the AXI bus to produce a video stream that is provided to the VDMA. The VDMA is configured to store this stream to a memory location and forward the stream to an AXI Stream output IP block, which passes the stream to the AVNET HDMI Output IP block. This gives the test pattern stream a direct path to the FMC module so it can be displayed.\n\nHowever, we also need to incorporate timing information. Similar to the VGA protocol, HDMI requires timing signals to make sure line draws are all synced up. To do this a Video Timing Controller IP block is used. This IP block is configured off of an AXI bus fed to it and it outputs all the timing signals that the HDMI IP block needs. These timing signals are fed into the AXI Stream to Video Out IP block, which then forwards the timing signals to the AVNET HDMI Output.\n\nIn addition, there are two I2C IP blocks, the FMC IPMI ID EEPROM I2C block and the FMC IMAGEON I2C block. The purpose of the IMAGEON interface is to provide a way for the ZYNQ processor to control the FMC peripheral. Then, the purpose of the EEPROM I2C interface is to provide the ZYNQ processor a way to configure the on-board EEPROM on the FMC, which stores important information.\n\nFor the VDMA, the primary difference between this setup and the setup from MP-0 is that the VDMA is configured for both reads and writes. There is a stream incoming from the TPG that is written to memory, and then that memory is read out to the HDMI. This requires GenLock synchronization between the reads and writes, which was not needed in MP-0.\n\nFinally, there are two clock domains defined for this design, a 100MHz clock and a 148Mhz clock. The 100MHz clock is used for all the AXI bus transactions and is considered the primary clock. Then the 148MHz clock is used for the video clock. Looking at the block diagram, all modules that are fed a video stream use this clock and this clock is passed directly to the AVENT HDMI IP block. So, it is safe to say that the purpose of the 148MHz clock is to clock the video streams.\n\nThis design only allows for the display of the test pattern, so we need to add more IP cores later to use the camera.\n\n## What are the changes we made to `camera_app.c`?\n\n### TPG Change\n\nFor the TPG change, we referenced the provided datasheet to see what we configure via memory mapped registers. We saw that we had the ability to set a foreground and background to be a variety of preset patters. So, we set the background to a colored bars pattern (register value `0x9`) and the foreground to be a colored box that bounces around (register value `0x1`). Since we were enabling a box, we had to specify its dimensions and colors, which was simple to due since there were registers for each. The relevant code for this update is shown below:\n\n```c\n   // Define convenient volatile pointers for accessing TPG registers\n   volatile uint32_t *TPG_CR       = (volatile uint32_t*) (config->uBaseAddr_TPG_PatternGenerator + 0);    // TPG Control\n   volatile uint32_t *TPG_Act_H    = (volatile uint32_t*) (config->uBaseAddr_TPG_PatternGenerator + 0x10); // Active Height\n   volatile uint32_t *TPG_Act_W    = (volatile uint32_t*) (config->uBaseAddr_TPG_PatternGenerator + 0x18); // Active Width\n   volatile uint32_t *TPG_BGP      = (volatile uint32_t*) (config->uBaseAddr_TPG_PatternGenerator + 0x20); // Background Pattern\n   volatile uint32_t *TPG_FGP      = (volatile uint32_t*) (config->uBaseAddr_TPG_PatternGenerator + 0x28); // Foreground Pattern\n   volatile uint32_t *TPG_MS       = (volatile uint32_t*) (config->uBaseAddr_TPG_PatternGenerator + 0x38); // Motion Speed\n   volatile uint32_t *TPG_CF       = (volatile uint32_t*) (config->uBaseAddr_TPG_PatternGenerator + 0x40); // TPG Color Format\n   volatile uint32_t *TPG_BOX_SIZE = (volatile uint32_t*) (config->uBaseAddr_TPG_PatternGenerator + 0x78);\n   volatile uint32_t *TPG_BOX_COLOR_Y = (volatile uint32_t*) (config->uBaseAddr_TPG_PatternGenerator + 0x80);\n   volatile uint32_t *TPG_BOX_COLOR_U = (volatile uint32_t*) (config->uBaseAddr_TPG_PatternGenerator + 0x88);\n   volatile uint32_t *TPG_BOX_COLOR_V = (volatile uint32_t*) (config->uBaseAddr_TPG_PatternGenerator + 0x90);\n\n   xil_printf(\"Test Pattern Generator Initialization ...\\n\\r\");\n\n   // Direct Memory Mapped access of TPG configuration registers\n   // See TPG data sheet for configuring the TPG for other features\n   TPG_Act_H[0]  = 0x438; // Active Height\n   TPG_Act_W[0]  = 0x780; // Active Width\n   TPG_BGP[0]    = 0x09;  // Background Pattern\n   TPG_FGP[0]    = 0x01;  // Foreground Pattern\n   TPG_MS[0]     = 0x04;  // Motion Speed\n   TPG_BOX_SIZE[0] = 100;\n   TPG_BOX_COLOR_Y[0] = 167;\n   TPG_BOX_COLOR_U[0] = 120;\n   TPG_BOX_COLOR_V[0] = 8;\n   TPG_CF[0]     = 0x02;  // TPG Color Format\n   TPG_CR[0]     = 0x81;  // TPG Control\n```\n\nA picture of the output of this change is shown below:\n\n![[projects/cpre488-mp2/tpg_change.png]]\n\n### Software Only Change (TPG Registers not Modified)\n\nFor the software only change, we decided to read out the pixel colors in the YUV format and halve the luminance. We believed that knowing the YUV format early on in the lab would be beneficial later when we have to implement SW demosaicing. The code that reads the YUV data, halves the luminance, and then writes it back is shown below:\n\n```c\nfor (i = 0; i < 1920*1080; i += 2)\n\t\t{\n\t\t   uint8_t u, v = 0;\n\t\t   uint16_t y = 0;\n\n\t\t   u = (pS2MM_Mem[i] & 0xFF00) >> 8;\n\t\t   v = (pS2MM_Mem[i + 1] & 0xFF00) >> 8;\n\t\t   y = (pS2MM_Mem[i] & 0xFF) | ((pS2MM_Mem[i + 1] & 0xFF) << 8);\n\n\t\t   // Half luminance\n\t\t   y /= 2;\n\n\t\t   // Set from YUV values.\n\t       pMM2S_Mem[i] = (u << 8) | (y & 0xFF);\n\t       pMM2S_Mem[i + 1] = (v << 8) | ((y & 0xFF00) >> 8);\n\t\t}\n```\n\nThe YUV 422 format is described later in this report.\n\nA picture of the output from this change is shown below:\n\n![[projects/cpre488-mp2/tpg_change_sw.png]]\n\nThough it is quite hard to see in this image, the luminance has be halved. My phone camera dod not pick this up well.\n\n## In the (`.xdc`) constraints file, what does the `_p` and `_n` pairing of signals signify, and what this configuration is typically used for?\n\nIn the constraints file, the `_p` and `_n` suffix pairs indicate differential signaling, specifically LVDS (Low-Voltage Differential Signaling). This is confirmed by the IOSTANDARD setting for these signals:\n\n```\nset_property IOSTANDARD LVDS_25 [get_ports IO_VITA_CAM_clk_out_*]\nset_property IOSTANDARD LVDS_25 [get_ports IO_VITA_CAM_sync_*]\nset_property IOSTANDARD LVDS_25 [get_ports IO_VITA_CAM_data_*]\n```\n\n### What LVDS Is and How Does It Work?\n\nLVDS uses a pair of complementary signals that are transmitted on two separate traces:\n\n- The `_p` suffix indicates the positive/true signal\n- The `_n` suffix indicates the negative/complement signal\n\nThe actual data is determined by the voltage difference between these two signals rather than the absolute voltage level. Typically, a small voltage difference (around 350mV) is used, where:\n\n- A positive difference represents a logical '1'\n- A negative difference represents a logical '0'\n\n### Why Is LVDS Used for the Camera Interface?\n\nLVDS is used for the VITA camera interface for several important reasons:\n\n1. **High-Speed Data Transfer**: The VITA-2000 sensor needs to transfer large amounts of image data quickly. LVDS supports high-speed data rates (often above 1 Gbps per pair) as seen in the 2.692 ns clock period (approximately 371 MHz).\n\n2. **Noise Immunity**: Since LVDS relies on the difference between two signals rather than absolute voltage, it's highly resistant to common-mode noise that would affect both lines equally.\n\n3. **Low EMI**: The differential pairs carry equal and opposite currents, causing the electromagnetic fields to cancel out, which reduces electromagnetic interference.\n\n4. **Signal Integrity**: The constraint file also sets differential termination for these signals:\n   ```\n   set_property DIFF_TERM true [get_ports IO_VITA_CAM_clk_out_*]\n   set_property DIFF_TERM true [get_ports IO_VITA_CAM_sync_*]\n   set_property DIFF_TERM true [get_ports IO_VITA_CAM_data_*]\n   ```\n   This ensures proper signal integrity by eliminating reflections.\n\nIn this design, LVDS is specifically used for:\n\n- Clock signals (`IO_VITA_CAM_clk_out_p/n`) - to provide a stable, clean timing reference\n- Synchronization signals (`IO_VITA_CAM_sync_p/n`) - for frame timing synchronization\n- Data lines (`IO_VITA_CAM_data_p/n`) - carrying the actual pixel data from the sensor\n\n## Why are we appending 10000000 to the output of the VITA-2000 camera? Also, why would it not make sense to append 00000000?\n\nThe 0x10000000 offset creates a safe \"sandbox\" for the video frame buffers that won't interfere with other memory usage in the system. This is particularly important for video processing which involves large, continuous memory accesses through DMA that could otherwise corrupt system memory.\n\nIt would not make sense to append 0x00000000 to the output of the VITA-2000 camera because it would almost certainly result in memory corruption as the video data would overwrite critical program memory.\n\n## Why at this point, does the camera had no color?\n\nBefore implementing the demosaicing algorithm and software processing, the camera had no color because the raw data from the camera sensor is in a Bayer pattern format rather than a processed RGB or YCbCr color format.\n\n**Bayer Pattern Sensor Format**:\n\nThe VITA-2000 camera sensor uses a Bayer filter pattern. This means each pixel captures only one color component (Red, Green, or Blue) arranged in a specific pattern.\n\n**Direct Raw Data Display**: Without the demosaic and color processing enabled, the system is directly displaying the raw Bayer pattern data, which appears as a grayscale or monochrome image. Each pixel only contains intensity information for a single color, but the display treats it as luminance-only data.\n\n## Software Demosaicing Implementation\n\nTo implement our software demosaicing C code, we simply ran it in the main `camera_loop` function, making sure to provide pointers to the data coming in and where the demosaiced data should go to. Subgroup B's code for this is shown below:\n\n```c\n\t\tset_park_frame(&(config->vdma_hdmi), 0, XAXIVDMA_WRITE);\n\n\t\t// Wait until frame zero is being written to.\n\t\twhile(get_current_frame_pointer(&(config->vdma_hdmi), XAXIVDMA_WRITE))\n\t\t{\n\n\t\t}\n\n\t\tset_park_frame(&(config->vdma_hdmi), 1, XAXIVDMA_WRITE);\n\n\t\t// Wait until frame one is being written to.\n\t\twhile(!get_current_frame_pointer(&(config->vdma_hdmi), XAXIVDMA_WRITE))\n\t\t{\n\n\t\t}\n\n\t\t// Apply CFA\n\t\trun_demosaicing((uint16_t*)pS2MM_Mem, (uint16_t*)pMM2S_Mem);\n\n\t\t// Swap back and front buffers\n\t\tu8 temp = back_buffer_frame;\n\n\t\tback_buffer_frame = front_buffer_frame;\n\t\tfront_buffer_frame = temp;\n\n\t\t// Have the read side park on the new front buffer\n\t\tset_park_frame(&(config->vdma_hdmi), front_buffer_frame, XAXIVDMA_READ);\n\n\t\t// Wait for park frame to update.\n\t\twhile(get_current_frame_pointer(&(config->vdma_hdmi), XAXIVDMA_READ) != front_buffer_frame)\n\t\t{\n\n\t\t}\n\n\t\t// Update pMM2S_Mem to point to back buffer.\n\t\tpMM2S_Mem = (Xuint16 *)XAxiVdma_ReadReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_MM2S_ADDR_OFFSET+XAXIVDMA_START_ADDR_OFFSET + (back_buffer_frame * 0x4));\n```\n\nThe function `run_demosaicing` applies the demosaic operation to the incoming data and the rest of the code shown here is to manage the frame buffers. To allow for an easier time measuring the performance metrics and to remove tearing, we used the frame buffers smartly.\n\nSince the demosaicing software takes a while to run, we take a single snapshot image, store it in frame buffer 0, and then let the VDMA write the incoming stream to frame buffer 1. Then, the deomosaicing software can run on frame buffer 0.\n\nFor displaying the image, we decided to treat two different read frame buffers as front and back buffers. The demosaicing code updates the back buffer while the read channel of the VDMA streams the front buffer contents to the HDMI interface. Then once the demosaicing software has ran, the buffers are swapped, which displays the latest processed frame. This worked quite well and removed many artifacts in our images. An example of an image that resulted from the software demosaicing is shown below (image quality is a bit poor due to my phone):\n\n![[projects/cpre488-mp2/sw_demo.png]]\n\n## YCbCr 4:2:2 Format Analysis\n\n### Note from the Documentation\n\n4:4:4 to 4:2:2 Conversion Eq from Subsystem Documentation (PG231):\n\n$$\no_{x,y} = \\left[\\sum_{k=0}^{N_{\\text{taps}}-1} i_{x-k,y}\\, \\text{COEF}_{k,\\text{HPHASEO}}\\right]_0^{2^{D_w}-1}\n$$\n\nEquation 3-11\n\nThis conversion is a horizontal 2:1 decimation operation, implemented using a low-pass FIR filter to suppress chroma aliasing. In order to evaluate output pixel $o_x$,$o_y$, the FIR filter in the core convolves COEFk_HPHASE0, where k is the coefficient index, $i_x$,$i_y$ are pixels from the input image, and $[ ]^M_m$ represents rounding with clipping at M, and clamping at m. DW is the Data Width or number of bits per video component. Ntaps is the number of filter taps. The predefined filter coefficients are `[0.25 0.5 0.25]`.\n\n### Primary Analysis\n\nIn the YCbCr 4:2:2 format, each 32-bit word (0xF0525A52, 0x36912291, 0x6E29F029) contains data for two adjacent pixels. Breaking down these values:\n\n```c\n// Frame #1 - Red pixels\nfor (i = 0; i < storage_size / config->uNumFrames_HdmiFrameBuffer; i += 4) {\n  *pStorageMem++ = 0xF0525A52;  // Red\n}\n```\n\n1. **Red Example (0xF0525A52)**:\n   - This represents two pixels in sequence\n   - First 16 bits (0xF052): Y1=0xF0, Cb=0x52\n   - Second 16 bits (0x5A52): Y2=0x5A, Cr=0x52\n\n```c\n// Frame #2 - Green pixels\nfor (i = 0; i < storage_size / config->uNumFrames_HdmiFrameBuffer; i += 4) {\n  *pStorageMem++ = 0x36912291; // Green\n}\n```\n\n2. **Green Example (0x36912291)**:\n   - First 16 bits (0x3691): Y1=0x36, Cb=0x91\n   - Second 16 bits (0x2291): Y2=0x22, Cr=0x91\n\n```c\n// Frame #3 - Blue pixels\nfor (i = 0; i < storage_size / config->uNumFrames_HdmiFrameBuffer; i += 4) {\n  *pStorageMem++ = 0x6E29F029;  // Blue\n}\n```\n\n3. **Blue Example (0x6E29F029)**:\n   - First 16 bits (0x6E29): Y1=0x6E, Cb=0x29\n   - Second 16 bits (0xF029): Y2=0xF0, Cr=0x29\n\nThe pattern for each color follows the YCbCr 4:2:2 format where:\n\n- Each 16-bit word contains one Y (luminance) value and one chrominance (Cb or Cr) value\n- The chrominance values alternate between Cb and Cr\n- Two adjacent pixels share the same Cb and Cr values (the subsampling)\n\n## Format Structure\n\nThe 4:2:2 format packs data as follows for each pair of pixels:\n\n```\n[Y1][Cb][Y2][Cr]\n```\n\nWhere:\n\n- Y1: Luminance for first pixel\n- Cb: Blue color difference (shared between two pixels)\n- Y2: Luminance for second pixel\n- Cr: Red color difference (shared between two pixels)\n\nThis format maintains full luminance resolution (the \"4\" in 4:2:2) while halving the horizontal resolution of the color information (the \"2:2\"). This works well because human vision is more sensitive to changes in brightness than in color.\n\nFor the `camera_loop()` function's conversion pass, this format would need to be maintained when processing the data, ensuring that each 32-bit word continues to represent two pixels in the YCbCr 4:2:2 format, with the appropriate luminance and chrominance values preserved during the vertical flip operation.\n\n## Image Processing Pipeline\n\nBelow is the resulting block diagram after adding the pipeline (we did not have enough time to update our original diagram, we have provided a description of the changes below):\n\n![[projects/cpre488-mp2/HW-BD.png]]\n\nThe pipeline consists of an IP block that does demosaicing to the incoming video stream and two video processing modules. One of the video processing modules converts the RGB output from the demosaicing module to YUV 444 then the other video processing module converts the YUV 444 data to YUV 422, which is what the FMC IMAGEON module expects. The output from the YUV 444 to YUV 422 is then passed through an AXI Stream Converter and is then passed to the VDMA like before. So in summary, three pipeline stages were added:\n\n1. Demosaicing\n2. RGB to YUV 444 Conversion\n3. YUV 444 to YUV 422 Conversion\n\n## Performance\n\n### Introduction (how we measured performance)\n\nWe measured the performance of the software and hardware pipelines in this design utilizing interrupt-driven time measurements. Using interrupts allows the software to be aware when a frame is read or written by the VDMA. Then by using timers, we can get extremely accurate frame write times, which can be used to derive the resulting average frames per second (FPS).\n\n### Software Pipeline\n\n#### Performance\n\nFor subgroup B, we determined that the average frame rate is `0.396 FPS`\n\nThis is quite slow, which is due to the software demosaicing algorithm not being optimized well and the fact that over 2 million half-word writes are required to process a single image!\n\n#### Testing Methodology\n\nAs previously stated, we used interrupts and timers to measure the FPS. We setup interrupts for the VDMA read channel frame completion and the write channel frame completion. This allowed us to know when frames were written to the VDMA and read from the VDMA. However, we had to find a solution to isolate the frame that is being processed since we don't shut down the VDMA.\n\nTo do this, we stored a single frame in frame buffer 0, which the demosaicing software ran on. Then, once the demosaicing was finished, we updated the VDMA read channel to read this new frame out. By using the park pointer VDMA registers, we were able to detect when this new frame was written out and start/stop timers accordingly on this event. By comparing the current write time to the previous write time, we can determine how long it took to write out the last frame, which gives us our FPS value! Finally, we averaged 10 FPS values together to produce a final FPS value!\n\nThe interrupt service routines and park pointer register modification code is shown below:\n\nGlobals\n\n```c\n// Timing globals\nstatic fps_t fps;\nstatic int sw_mode = 0;\nstatic int snapshot_saved = 0;\n\nstatic u8 back_buffer_frame = 2;\nstatic u8 front_buffer_frame = 3;\n\n// Frame that indicates that the write completed.\nstatic u8 target_frame = 2;\n\nstatic XTime tStart, tEnd = 0;\n\n// In seconds\nstatic float frame_time = 0;\n```\n\nISRS:\n\n```c\nvoid video_frame_output_isr(void* CallBackRef, u32 InterruptTypes)\n{\n\tswitch(InterruptTypes)\n\t{\n\t\tcase XAXIVDMA_IXR_FRMCNT_MASK:\n\t\t{\n\t\t\t// Once we have read from the back buffer, we know that it is the new front buffer\n\t\t\t// so we must have just swapped.\n\t\t\tif(sw_mode && (get_current_frame_pointer((XAxiVdma*) CallBackRef, XAXIVDMA_READ) == target_frame) && snapshot_saved)\n\t\t\t{\n\t\t\t\t// We start and stop the timer on this ISR.\n\t\t\t\t// If this is the first frame, the timer won't be started, so start it up without ending any timer.\n\t\t\t\tif(!tStart)\n\t\t\t\t{\n\t\t\t\t\tXTime_GetTime(&tStart);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tXTime_GetTime(&tEnd);\n\t\t\t\t\tsnapshot_saved = 0;\n\n\t\t\t\t\tframe_time = (tEnd - tStart) / (float)COUNTS_PER_SECOND;\n\n\t\t\t\t\tfps_time_store(&fps, frame_time);\n\n\t\t\t\t\tsprintf(fps_msg, \"Average FPS: %.5f\", fps_calculate(&fps));\n\n\t\t\t\t\txil_printf(\"%s\\n\\r\", fps_msg);\n\n\t\t\t\t\t// Start the timer back up!\n\t\t\t\t\tXTime_GetTime(&tStart);\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t\tdefault:\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n}\nvoid camera_input_isr(void* CallBackRef, u32 InterruptTypes)\n{\n\tswitch(InterruptTypes)\n\t{\n\t\tcase XAXIVDMA_IXR_FRMCNT_MASK:\n\t\t{\n\t\t\tif(sw_mode && get_current_frame_pointer((XAxiVdma*)CallBackRef, XAXIVDMA_WRITE) == 0 && !snapshot_saved)\n\t\t\t{\n\t\t\t\tsnapshot_saved = 1;\n\t\t\t\ttarget_frame = back_buffer_frame;\n\t\t\t}\n\t\t}\n\n\t\tdefault:\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n}\n```\n\nPark Pointer Register Modifications\n\n```c\n\t\tset_park_frame(&(config->vdma_hdmi), 0, XAXIVDMA_WRITE);\n\n\t\t// Wait until frame zero is being written to.\n\t\twhile(get_current_frame_pointer(&(config->vdma_hdmi), XAXIVDMA_WRITE))\n\t\t{\n\n\t\t}\n\n\t\tset_park_frame(&(config->vdma_hdmi), 1, XAXIVDMA_WRITE);\n\n\t\t// Wait until frame one is being written to.\n\t\twhile(!get_current_frame_pointer(&(config->vdma_hdmi), XAXIVDMA_WRITE))\n\t\t{\n\n\t\t}\n\n\t\t// Apply CFA\n\t\trun_demosaicing((uint16_t*)pS2MM_Mem, (uint16_t*)pMM2S_Mem);\n\n\t\t// Swap back and front buffers\n\t\tu8 temp = back_buffer_frame;\n\n\t\tback_buffer_frame = front_buffer_frame;\n\t\tfront_buffer_frame = temp;\n\n\t\t// Have the read side park on the new front buffer\n\t\tset_park_frame(&(config->vdma_hdmi), front_buffer_frame, XAXIVDMA_READ);\n\n\t\t// Wait for park frame to update.\n\t\twhile(get_current_frame_pointer(&(config->vdma_hdmi), XAXIVDMA_READ) != front_buffer_frame)\n\t\t{\n\n\t\t}\n\n\t\t// Update pMM2S_Mem to point to back buffer.\n\t\tpMM2S_Mem = (Xuint16 *)XAxiVdma_ReadReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_MM2S_ADDR_OFFSET+XAXIVDMA_START_ADDR_OFFSET + (back_buffer_frame * 0x4));\n```\n\n### Hardware Pipeline\n\n#### Performance\n\nFor subgroup B, we determined that the average frame rate is `59.794 FPS`\n\nThis is what we expect since the timing was setup for 60Hz writes, which is 60 times a second.\n\n#### Testing Methodology\n\nThe testing methodology used for the hardware pipeline is quite similar to what we used for the software pipeline. We made use of VDMA read and write interrupts and the processing system timers to record the time passed between frame writes. However, since we don't have to wait on C code to run, we did not need to single out a frame and keep track of it. We could simply let the VDMA run with a few conditions to make sure we are recording the times fine:\n\n- A VDMA write must happen before a VDMA read can occur. We need to take into consideration the VDMA write time.\n- Only record times between VDMA reads to two different frame buffers. If multiple reads are done on the same frame buffer, we know that the write channel is lagging behind, so we should wait until the frame buffer counter increments.\n\nThe interrupt service routines that implement this are shown below:\n\n```c\nvoid video_frame_output_isr(void* CallBackRef, u32 InterruptTypes)\n{\n\tswitch(InterruptTypes)\n\t{\n\t\tcase XAXIVDMA_IXR_FRMCNT_MASK:\n\t\t{\n\t\t\tu8 current_frame = get_current_frame_pointer((XAxiVdma*) CallBackRef, XAXIVDMA_READ);\n\n\t\t\t// Make sure we received something before recording that we wrote it.\n\t\t\tif(rec_flag && (current_frame != prev_frame))\n\t\t\t{\n\t\t\t\t// If first frame, start only\n\t\t\t\tif(!tStart)\n\t\t\t\t{\n\t\t\t\t\tXTime_GetTime(&tStart);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tXTime_GetTime(&tEnd);\n\n\t\t\t\t\tfps_reading = (tEnd - tStart) / (float)COUNTS_PER_SECOND;\n\n\t\t\t\t\tfps_time_store(&fps, fps_reading);\n\n#if OUTPUT_FPS\n\t\t\t\t\tsprintf(fps_msg, \"Average FPS: %.5f\", fps_calculate(&fps));\n\n\t\t\t\t\txil_printf(\"%s\\n\\r\", fps_msg);\n#endif\n\n\t\t\t\t\t// Start the timer back up!\n\t\t\t\t\tXTime_GetTime(&tStart);\n\t\t\t\t}\n\n\t\t\t\trec_flag = 0;\n\t\t\t}\n\n\t\t\tprev_frame = current_frame;\n\t\t}\n\n\t\tdefault:\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\n}\n\n// Does nothing as of now. All timer operations are done when a frame is drawn to the screen.\nvoid camera_input_isr(void* CallBackRef, u32 InterruptTypes)\n{\n\tswitch(InterruptTypes)\n\t{\n\t\tcase XAXIVDMA_IXR_FRMCNT_MASK:\n\t\t{\n\t\t\tif(!rec_flag)\n\t\t\t{\n\t\t\t\trec_flag = 1;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\n\t\tdefault:\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\n}\n```\n\nOverall, it was quite tedious to get interrupts working, but it definitely paid off!\n\n## Bonus Credit\n\nThe following sections describe the bonus credit tasks that were completed for this project and how they were implemented/accomplished.\n\n### Various analog and digital adjustments for the gain, exposure, and other common user-configurable digital camera settings.\n\nWe implemented the following adjustments:\n\n- Contrast\n- Brightness\n- Saturation\n\nThese were implemented by leveraging the second Subsystem which converts 4:4:4 to 4:2:2 and the `xvprocss.h` defined utilities.\n\n#### Gain\n\n### 1. Brightness Adjustment\n\n**Explanation:**  \nThe brightness level is adjusted dynamically through a dedicated function. When invoked (for example, via board buttons), it calls the hardware API to update the brightness level of the processed video image.\n\n**Code Sample:**\n\n```c\nvoid set_brightness(\n    camera_config_t *config,\n    int percent // Brightness level as a percentage\n)\n{\n   if (config->bVerbose)\n   {\n      xil_printf(\"Setting brightness to %d\\n\\r\", percent);\n   }\n   // Apply the brightness adjustment using the video processing subsystem\n   XVprocSs_SetPictureBrightness(&proc_ss_RGB_YCrCb_444, (s32)percent);\n}\n```\n\n### 2. Contrast Adjustment\n\n**Explanation:**  \nSimilarly, contrast is adjusted using a dedicated function that calls the hardware API to modify the contrast level. This allows users to dynamically control the difference between light and dark areas in the image.\n\n**Code Sample:**\n\n```c\nvoid set_contrast(\n    camera_config_t *config,\n    int percent // Contrast level as a percentage\n)\n{\n   if (config->bVerbose)\n   {\n      xil_printf(\"Setting contrast to %d\\n\\r\", percent);\n   }\n   // Apply the contrast adjustment using the video processing subsystem\n   XVprocSs_SetPictureContrast(&proc_ss_RGB_YCrCb_444, (s32)percent);\n}\n```\n\n### 4. Saturation Adjustment\n\n**Explanation:**  \nThe saturation adjustment function controls the vividness of the colors in the video output. This function calls the corresponding hardware API to adjust the saturation level in the YCrCb color space.\n\n**Code Sample:**\n\n```c\nvoid set_saturation(\n    camera_config_t *config,\n    int percent // Saturation level as a percentage\n)\n{\n   if (config->bVerbose)\n   {\n      xil_printf(\"Setting saturation to %d\\n\\r\", percent);\n   }\n   // Apply the saturation adjustment using the video processing subsystem\n   XVprocSs_SetPictureSaturation(&proc_ss_RGB_YCrCb_444, (s32)percent);\n}\n```\n\nUsing the buttons on the board (code resused from mp-1), the user can adjust the gain, contrast, brightness, and saturation.\n\n### A video mode, which records and can replay up to 5 seconds of 1080p video.\n\nVideo mode was about decreasing the delay from image to image in the play mode and increasing the number of images that can be stored in the software. This was done by removing the 2-second delay in image capture and increasing the heap size to correspond with the increased number of stored images.\n\n**Code Sample:**\n\n```c\n_HEAP_SIZE = DEFINED(_HEAP_SIZE) ? _HEAP_SIZE : 0x19000000;\n```\n\n### A digital zoom mode, which uses the up and down buttons to zoom in and out of the current scene.\n\nThe digital zoom was implemented partially through the crop and scale capabilities of the fully fledged Video Processing Subsystem (v2.2) IP core. According to the embedded drivers for the IP, the VPSS has a zoom and scale core that can be used to perform a digital zoom by relaying display information in a user-specified window that can then be scaled to a desired dimension. To do this, I opted to add a separate core in addition to the two used in the original hardware pipeline for colour space conversion and chroma sampling, as I worried the additional operations could cause timing issues during the video processing. The final pipeline was as follows: Demosiac -> Zoom and Scale VPSS -> CSC VPSS -> 444:422 VPSS -> VDMA. Unfortunately, the driver documentation leaves something to be desired and there lacks an accessible example for this design. This resulted in an awfully heuristic design process, which ultimately produced a rather lackluster product. However, a product nonetheless. Although it still suffers from artifacts, a digital zoom of at most 85% of the original resolution was achieved before the video became distorted and corrupted. An example of the corrupted image can be seen below:\n\n![[projects/cpre488-mp2/zoom_issue.png]]\n\nAs the zoom increased past the 85% threshold, only a small segment of the top of the display would repeat. This segment seemed like it would duplicate and shrink as the zoom factor increased. Originally, I had believed that the issue lied in the output resolution of the zoom core being incompatible with the HDMI. For example, when I played around with the picture in picture mode, a similar artifact manifested - as seen below:\n\n![[projects/cpre488-mp2/pip_fun.png]]\n\nFor that reason, I figured that using the horizontal and vertical scaler cores could help align the output video resolution.\n\nHowever, I was unsure as to how to properly sequence the core configurations as there was a lack of relative documentation.\n\nLooking at the AMD forums, it seemed that many people experiencing similar artifacts blamed unaligned VDMA writes or bandwidth bottlenecks.\n\nIn an attempt to address the VDMA issues, I tried to dynamically reconfigure the VDMA such that it could scale the non-1080p output of the zoom core to 1080p for the HDMI.\n\nI also tried allowing for unaligned VDMA reads and writes.\n\nNeither of these worked. I also wanted to try increasing the sample rate of the hardware pipeline to 2 or more pixels per clock, but I ran out of time before I could test this hypothesis.\n\nIn the end, I was able to perform a digital zoom in some way.\n\n### Sobel Edge Detector\n\nThe Sobel edge detector was implemented through software - in a similar manner to the Bayer reconstruction software. This meant the operation could be achieved with the following convolution algorithm:\n\n```c\n// Kernels\nuint32_t i, j, gx, gy = 0;\nuint32_t mx[3][3] = {\n\t{-1, 0, 1},\n\t{-2, 0, 2},\n  {-1, 0, 1}\n};\n  uint32_t my[3][3] = {\n\t{-1, -2, -1},\n\t{0, 0, 0},\n  {1, 2, 1}\n};\n\n// Convolution\nfor (int x = 0; x < 1000; x++) {\n  for (i = 1; i < 1080 - 2; i++) {\n    for (j = 1; j < 1920 - 2; j++) {\n      uint32_t r, t = 0;\n      uint32_t gx = 0, gy = 0;\n        for (r = 0; r < 3; r++) {\n          for (t = 0; t < 3; t++) {\n\t \t\t\t\t\tuint32_t image_index = (i + r - 1) * 1920 + (j + t - 1);\n\t \t\t\t\t\tuint32_t pixel_value = pS2MM_Mem[image_index];\n\t \t\t\t\t\tgx += pixel_value * mx[r][t];\n\t \t\t\t\t\tgy += pixel_value * my[r][t];\n\t \t\t\t\t}\n\t \t\t\t}\n\t      uint32_t output = sqrt(gx*gx + gy*gy);\n\t      pMM2S_Mem[i * COL_SIZE + j] = output;\n\t  }\n  }\n}\n```\n\n",
	Slug:            "cpre488-mp2",
	TagSlugs:        []string{"programming-language/c", "programming-language/cpp", "programming-language/matlab", "ide/vivado", "hdl/vhdl", "hdl/verilog", "protocol/uart", "edu/iastate", "edu/iastate/cpre488"},
	Tags:            []*assets.Tag{&TagProgrammingLanguageC, &TagProgrammingLanguageCpp, &TagProgrammingLanguageMatlab, &TagIdeVivado, &TagHdlVhdl, &TagHdlVerilog, &TagProtocolUart, &TagEduIastate, &TagEduIastateCpre488},
	Title:           "CPRE488 MP2",
	UpdatedAt:       time.Date(2025, time.April, 12, 12, 19, 22, 0, time.UTC),
	X:               1.0537317045113042,
	Y:               0.05256829137224822,
	Z:               -0.4863818064764872,
}}
var ProjectCpre488Mp3 = assets.Project{Embedded: assets.Embedded{
	BannerPath:      "projects/mp3.webp",
	Content:         "<h1 id=\"cpre488-mp3\"><a class=\"anchor permalink p-4\" href=\"#cpre488-mp3\">#</a> cpre488-mp3</h1>\n<h2 id=\"launcher-firec-makefile\"><a class=\"anchor permalink p-4\" href=\"#launcher-firec-makefile\">#</a> <code>launcher_fire.c</code> Makefile</h2>\n<p>This Makefile is configured to build both a Linux kernel module (<code>launcher_driver.ko</code>) and a user-space program (<code>launcher_fire</code>) using a cross-compiler for ARM architecture.</p>\n<h3 id=\"cross-compilation-setup\"><a class=\"anchor permalink p-4\" href=\"#cross-compilation-setup\">#</a> Cross-Compilation Setup</h3>\n<p>The Makefile uses the <code>CROSS_COMPILE</code> environment variable to specify the cross-compiler toolchain:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>CC <span style=\"color:#f92672\">:=</span> <span style=\"color:#66d9ef\">$(</span>CROSS_COMPILE<span style=\"color:#66d9ef\">)</span>gcc\n</span></span></code></pre><p>This is the core mechanism that enables ARM architecture targeting. The <code>CROSS_COMPILE</code> variable is expected to be set in the environment before running the make command (e.g., <code>CROSS_COMPILE=arm-linux-gnueabihf-</code> or similar ARM toolchain prefix). When expanded, it creates commands like <code>arm-linux-gnueabihf-gcc</code> that invoke the cross-compiler instead of the host system's native compiler.</p>\n<h3 id=\"kernel-module-building\"><a class=\"anchor permalink p-4\" href=\"#kernel-module-building\">#</a> Kernel Module Building</h3>\n<p>For the kernel module (<code>launcher_driver.ko</code>):</p>\n<ol>\n<li>\n<p><code>obj-m += launcher_driver.o</code> tells the kernel build system which object files to build into modules.</p>\n</li>\n<li>\n<p><code>KDIR := ../linux/linux-xlnx/</code> points to the Xilinx Linux kernel source directory (often used for Zynq ARM platforms).</p>\n</li>\n<li>\n<p>The main kernel build is triggered with:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">$(</span>MAKE<span style=\"color:#66d9ef\">)</span> <span style=\"color:#960050;background-color:#1e0010\">-C</span> <span style=\"color:#66d9ef\">$(</span>KDIR<span style=\"color:#66d9ef\">)</span> M<span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">${</span>shell pwd<span style=\"color:#e6db74\">}</span> modules\n</span></span></code></pre><p>This invokes the kernel's build system, which will use the cross-compiler settings defined in the kernel's configuration.</p>\n</li>\n</ol>\n<h3 id=\"user-space-program-building\"><a class=\"anchor permalink p-4\" href=\"#user-space-program-building\">#</a> User-Space Program Building</h3>\n<p>For the user application (<code>launcher_fire</code>):</p>\n<ol>\n<li>\n<p>The application is built directly using the cross-compiler via:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">$(BIN)</span><span style=\"color:#f92672\">:</span> <span style=\"color:#66d9ef\">$(</span>SOURCES<span style=\"color:#66d9ef\">)</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">$(</span>CC<span style=\"color:#66d9ef\">)</span> $@.c -o $@\n</span></span></code></pre><p>The <code>$(CC)</code> variable expands to the cross-compiler as defined earlier.</p>\n</li>\n</ol>\n<h3 id=\"clean-target\"><a class=\"anchor permalink p-4\" href=\"#clean-target\">#</a> Clean Target</h3>\n<p>The clean target is thorough, removing both the kernel module files and the user-space binary:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">clean</span><span style=\"color:#f92672\">:</span>\n</span></span><span style=\"display:flex;\"><span>  -<span style=\"color:#66d9ef\">$(</span>MAKE<span style=\"color:#66d9ef\">)</span> -C <span style=\"color:#66d9ef\">$(</span>KDIR<span style=\"color:#66d9ef\">)</span> M<span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">${</span>shell pwd<span style=\"color:#e6db74\">}</span> clean <span style=\"color:#f92672\">||</span> true\n</span></span><span style=\"display:flex;\"><span>  -rm <span style=\"color:#66d9ef\">$(</span>BIN<span style=\"color:#66d9ef\">)</span> <span style=\"color:#f92672\">||</span> true\n</span></span><span style=\"display:flex;\"><span>  -rm *.o *.ko *.mod.<span style=\"color:#f92672\">{</span>c,o<span style=\"color:#f92672\">}</span> modules.order Module.symvers <span style=\"color:#f92672\">||</span> true\n</span></span></code></pre><p>The <code>launcher_fire.c</code> code is a user-space application that communicates with the kernel module through a device node (<code>/dev/launcher0</code>), sending commands to control what seems to be a physical launcher device (likely a USB missile launcher or similar gadget).</p>\n<p>This configuration works for ARM because:</p>\n<ol>\n<li>It uses the ARM cross-compiler toolchain via <code>CROSS_COMPILE</code></li>\n<li>It builds against an ARM-targeted kernel source tree (Xilinx's Linux kernel)</li>\n<li>The resulting binaries will be compatible with ARM systems, specifically a Xilinx Zynq platform.</li>\n</ol>\n<h2 id=\"boot-process-analysis\"><a class=\"anchor permalink p-4\" href=\"#boot-process-analysis\">#</a> Boot Process Analysis</h2>\n<h3 id=\"u-boot-initialization-bootloader-phase\"><a class=\"anchor permalink p-4\" href=\"#u-boot-initialization-bootloader-phase\">#</a> U-Boot Initialization (Bootloader Phase)</h3>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>U-Boot 2020.01 <span style=\"color:#f92672\">(</span>Mar <span style=\"color:#ae81ff\">14</span> <span style=\"color:#ae81ff\">2025</span> - 15:19:07 +0000<span style=\"color:#f92672\">)</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>CPU:   Zynq 7z020\n</span></span><span style=\"display:flex;\"><span>Silicon: v3.1\n</span></span><span style=\"display:flex;\"><span>Model: Zynq Zed Development Board\n</span></span><span style=\"display:flex;\"><span>DRAM:  ECC disabled <span style=\"color:#ae81ff\">512</span> MiB\n</span></span><span style=\"display:flex;\"><span>Flash: <span style=\"color:#ae81ff\">0</span> Bytes\n</span></span><span style=\"display:flex;\"><span>NAND:  <span style=\"color:#ae81ff\">0</span> MiB\n</span></span><span style=\"display:flex;\"><span>MMC:   mmc@e0100000: <span style=\"color:#ae81ff\">0</span>\n</span></span></code></pre><p>This section shows U-Boot 2020.01 bootloader starting. It identifies the hardware as a Zynq 7z020 CPU on a Zed Development Board with 512MB of RAM (with ECC disabled). It's detecting storage devices, including an MMC (SD card) interface.</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>Loading Environment from SPI Flash... SF: Detected s25fl256s1 with page size <span style=\"color:#ae81ff\">256</span> Bytes, erase size <span style=\"color:#ae81ff\">64</span> KiB, total <span style=\"color:#ae81ff\">32</span> MiB\n</span></span><span style=\"display:flex;\"><span>*** Warning - bad CRC, using default environment\n</span></span></code></pre><p>U-Boot is attempting to load environment variables from SPI Flash memory. It finds an s25fl256s1 flash chip (32MB total) but encounters a CRC error, so it falls back to default settings.</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>In:    serial@e0001000\n</span></span><span style=\"display:flex;\"><span>Out:   serial@e0001000\n</span></span><span style=\"display:flex;\"><span>Err:   serial@e0001000\n</span></span><span style=\"display:flex;\"><span>Net:   \n</span></span><span style=\"display:flex;\"><span>ZYNQ GEM: e000b000, mdio bus e000b000, phyaddr 0, interface rgmii-id\n</span></span></code></pre><p>Sets up the console I/O through a serial port (UART) and initializes the Gigabit Ethernet MAC (GEM).</p>\n<h3 id=\"boot-image-loading\"><a class=\"anchor permalink p-4\" href=\"#boot-image-loading\">#</a> Boot Image Loading</h3>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>Hit any key to stop autoboot:  <span style=\"color:#ae81ff\">2</span>  <span style=\"color:#ae81ff\">1</span>  <span style=\"color:#ae81ff\">0</span> \n</span></span><span style=\"display:flex;\"><span>switch to partitions <span style=\"color:#75715e\">#0, OK</span>\n</span></span><span style=\"display:flex;\"><span>mmc0 is current device\n</span></span><span style=\"display:flex;\"><span>Scanning mmc 0:1...\n</span></span><span style=\"display:flex;\"><span>Found U-Boot script /boot.scr\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#ae81ff\">2010</span> bytes read in <span style=\"color:#ae81ff\">33</span> ms <span style=\"color:#f92672\">(</span>58.6 KiB/s<span style=\"color:#f92672\">)</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">## Executing script at 03000000</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#ae81ff\">11543076</span> bytes read in <span style=\"color:#ae81ff\">656</span> ms <span style=\"color:#f92672\">(</span>16.8 MiB/s<span style=\"color:#f92672\">)</span>\n</span></span></code></pre><p>U-Boot is performing autoboot countdown.</p>\n<p>After no interruption, it scans the first partition of the SD card, finds a boot script, and executes it.</p>\n<p>This script then loads the kernel and initial ramdisk.</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#75715e\">## Loading kernel from FIT Image at 10000000 ...</span>\n</span></span><span style=\"display:flex;\"><span>   Using <span style=\"color:#e6db74\">&#39;conf@system-top.dtb&#39;</span> configuration\n</span></span><span style=\"display:flex;\"><span>   Verifying Hash Integrity ... OK\n</span></span><span style=\"display:flex;\"><span>   Trying <span style=\"color:#e6db74\">&#39;kernel@1&#39;</span> kernel subimage\n</span></span><span style=\"display:flex;\"><span>     Description:  Linux kernel\n</span></span><span style=\"display:flex;\"><span>     Type:         Kernel Image\n</span></span><span style=\"display:flex;\"><span>     Compression:  uncompressed\n</span></span><span style=\"display:flex;\"><span>     Data Start:   0x100000e8\n</span></span><span style=\"display:flex;\"><span>     Data Size:    <span style=\"color:#ae81ff\">4325680</span> Bytes <span style=\"color:#f92672\">=</span> 4.1 MiB\n</span></span><span style=\"display:flex;\"><span>     Architecture: ARM\n</span></span><span style=\"display:flex;\"><span>     OS:           Linux\n</span></span><span style=\"display:flex;\"><span>     Load Address: 0x00200000\n</span></span><span style=\"display:flex;\"><span>     Entry Point:  0x00200000\n</span></span><span style=\"display:flex;\"><span>     Hash algo:    sha256\n</span></span><span style=\"display:flex;\"><span>     Hash value:   16a76e92c611898f8057d865ef087705fef1aceff96e78675bc68784fd25ac76\n</span></span><span style=\"display:flex;\"><span>   Verifying Hash Integrity ... sha256+ OK\n</span></span></code></pre><p>U-Boot is loading the Linux kernel from a FIT (Flattened Image Tree) image.</p>\n<p>It verifies the hash integrity of the kernel (4.1 MiB in size) to ensure it hasn't been corrupted.</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#75715e\">## Loading ramdisk from FIT Image at 10000000 ...</span>\n</span></span><span style=\"display:flex;\"><span>   <span style=\"color:#f92672\">[</span>Details about the ramdisk loading<span style=\"color:#f92672\">]</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">## Loading fdt from FIT Image at 10000000 ...</span>\n</span></span><span style=\"display:flex;\"><span>   <span style=\"color:#f92672\">[</span>Details about the device tree loading<span style=\"color:#f92672\">]</span>\n</span></span></code></pre><p>Next, it loads the initial RAM disk (6.9 MiB) and the Flattened Device Tree (FDT) file that describes the hardware to the kernel.</p>\n<h3 id=\"linux-kernel-startup\"><a class=\"anchor permalink p-4\" href=\"#linux-kernel-startup\">#</a> Linux Kernel Startup</h3>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>Starting kernel ...\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>Booting Linux on physical CPU 0x0\n</span></span><span style=\"display:flex;\"><span>Linux version 5.4.0-xilinx-v2020.1 <span style=\"color:#f92672\">(</span>oe-user@oe-host<span style=\"color:#f92672\">)</span> <span style=\"color:#f92672\">(</span>gcc version 9.2.0 <span style=\"color:#f92672\">(</span>GCC<span style=\"color:#f92672\">))</span> <span style=\"color:#75715e\">#1 SMP PREEMPT Fri Mar 14 15:18:45 UTC 2025</span>\n</span></span><span style=\"display:flex;\"><span>CPU: ARMv7 Processor <span style=\"color:#f92672\">[</span>413fc090<span style=\"color:#f92672\">]</span> revision <span style=\"color:#ae81ff\">0</span> <span style=\"color:#f92672\">(</span>ARMv7<span style=\"color:#f92672\">)</span>, cr<span style=\"color:#f92672\">=</span>18c5387d\n</span></span></code></pre><p>The kernel begins executing. This shows Linux 5.4.0 specifically built for Xilinx hardware. It's running on an ARMv7 processor.</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>Memory policy: Data cache writealloc\n</span></span><span style=\"display:flex;\"><span>cma: Reserved <span style=\"color:#ae81ff\">16</span> MiB at 0x1f000000\n</span></span><span style=\"display:flex;\"><span>percpu: Embedded <span style=\"color:#ae81ff\">15</span> pages/cpu s31948 r8192 d21300 u61440\n</span></span><span style=\"display:flex;\"><span>Built <span style=\"color:#ae81ff\">1</span> zonelists, mobility grouping on.  Total pages: <span style=\"color:#ae81ff\">129920</span>\n</span></span><span style=\"display:flex;\"><span>Kernel command line: console<span style=\"color:#f92672\">=</span>ttyPS0,115200 earlycon root<span style=\"color:#f92672\">=</span>/dev/ram0 rw\n</span></span></code></pre><p>The kernel is setting up memory management policies and showing the command line parameters that were passed to it. It will use a serial console and boot from an initial RAM disk.</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>Memory: 484528K/524288K available <span style=\"color:#f92672\">(</span>6144K kernel code, 217K rwdata, 1840K rodata, 1024K init, 131K bss, 23376K reserved, 16384K cma-reserved, 0K highmem<span style=\"color:#f92672\">)</span>\n</span></span></code></pre><p>Memory summary: out of 512MB (524288K) total RAM, about 484MB is available for use after accounting for kernel code, data, and reserved regions.</p>\n<h3 id=\"hardware-detection-and-initialization\"><a class=\"anchor permalink p-4\" href=\"#hardware-detection-and-initialization\">#</a> Hardware Detection and Initialization</h3>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>rcu: Preemptible hierarchical RCU implementation.\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#f92672\">[</span>...<span style=\"color:#f92672\">]</span>\n</span></span><span style=\"display:flex;\"><span>smp: Bringing up secondary CPUs ...\n</span></span><span style=\"display:flex;\"><span>CPU1: thread -1, cpu 1, socket 0, mpidr <span style=\"color:#ae81ff\">80000001</span>\n</span></span><span style=\"display:flex;\"><span>CPU1: Spectre v2: using BPIALL workaround\n</span></span><span style=\"display:flex;\"><span>smp: Brought up <span style=\"color:#ae81ff\">1</span> node, <span style=\"color:#ae81ff\">2</span> CPUs\n</span></span></code></pre><p>The kernel is initializing the RCU (Read-Copy-Update) subsystem and bringing up multiple CPU cores.</p>\n<p>It's a dual-core system with Spectre vulnerability mitigations.</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>devtmpfs: initialized\n</span></span><span style=\"display:flex;\"><span>VFP support v0.3: implementor <span style=\"color:#ae81ff\">41</span> architecture <span style=\"color:#ae81ff\">3</span> part <span style=\"color:#ae81ff\">30</span> variant <span style=\"color:#ae81ff\">9</span> rev <span style=\"color:#ae81ff\">4</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#f92672\">[</span>...<span style=\"color:#f92672\">]</span>\n</span></span><span style=\"display:flex;\"><span>SCSI subsystem initialized\n</span></span><span style=\"display:flex;\"><span>usbcore: registered new interface driver usbfs\n</span></span><span style=\"display:flex;\"><span>usbcore: registered new interface driver hub\n</span></span><span style=\"display:flex;\"><span>usbcore: registered new device driver usb\n</span></span></code></pre><p>Initialization of various subsystems: device manager, floating-point support, SCSI, USB, etc.</p>\n<h3 id=\"file-systems-and-network-setup\"><a class=\"anchor permalink p-4\" href=\"#file-systems-and-network-setup\">#</a> File Systems and Network Setup</h3>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>FPGA manager framework\n</span></span><span style=\"display:flex;\"><span>Advanced Linux Sound Architecture Driver Initialized.\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#f92672\">[</span>...<span style=\"color:#f92672\">]</span>\n</span></span><span style=\"display:flex;\"><span>tcp_listen_portaddr_hash hash table entries: <span style=\"color:#ae81ff\">512</span> <span style=\"color:#f92672\">(</span>order: 0, <span style=\"color:#ae81ff\">6144</span> bytes, linear<span style=\"color:#f92672\">)</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#f92672\">[</span>...<span style=\"color:#f92672\">]</span>\n</span></span><span style=\"display:flex;\"><span>Trying to unpack rootfs image as initramfs...\n</span></span><span style=\"display:flex;\"><span>Freeing initrd memory: 7028K\n</span></span></code></pre><p>Setting up FPGA management, sound drivers, TCP/IP networking stacks, and unpacking the initial root filesystem from RAM.</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>jffs2: version 2.2. <span style=\"color:#f92672\">(</span>NAND<span style=\"color:#f92672\">)</span> <span style=\"color:#f92672\">(</span>SUMMARY<span style=\"color:#f92672\">)</span>  © 2001-2006 Red Hat, Inc.\n</span></span><span style=\"display:flex;\"><span>io scheduler mq-deadline registered\n</span></span><span style=\"display:flex;\"><span>io scheduler kyber registered\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#f92672\">[</span>...<span style=\"color:#f92672\">]</span>\n</span></span><span style=\"display:flex;\"><span>spi-nor spi0.0: found s25fl256s1, expected n25q128a11\n</span></span><span style=\"display:flex;\"><span>spi-nor spi0.0: s25fl256s1 <span style=\"color:#f92672\">(</span><span style=\"color:#ae81ff\">32768</span> Kbytes<span style=\"color:#f92672\">)</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#ae81ff\">8</span> fixed-partitions partitions found on MTD device spi0.0\n</span></span></code></pre><p>Setting up various filesystems, I/O schedulers, and detecting flash memory partitions. The system found a different SPI flash chip than expected but continues with it.</p>\n<h3 id=\"device-detection-and-driver-loading\"><a class=\"anchor permalink p-4\" href=\"#device-detection-and-driver-loading\">#</a> Device Detection and Driver Loading</h3>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>Marvell 88E1510 e000b000.ethernet-ffffffff:00: attached PHY driver <span style=\"color:#f92672\">[</span>Marvell 88E1510<span style=\"color:#f92672\">]</span> <span style=\"color:#f92672\">(</span>mii_bus:phy_addr<span style=\"color:#f92672\">=</span>e000b000.ethernet-ffffffff:00, irq<span style=\"color:#f92672\">=</span>POLL<span style=\"color:#f92672\">)</span>\n</span></span><span style=\"display:flex;\"><span>macb e000b000.ethernet eth0: Cadence GEM rev 0x00020118 at 0xe000b000 irq <span style=\"color:#ae81ff\">26</span> <span style=\"color:#f92672\">(</span>00:0a:35:00:1e:53<span style=\"color:#f92672\">)</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#f92672\">[</span>...<span style=\"color:#f92672\">]</span>\n</span></span><span style=\"display:flex;\"><span>usb usb1: New USB device found, idVendor<span style=\"color:#f92672\">=</span>1d6b, idProduct<span style=\"color:#f92672\">=</span>0002, bcdDevice<span style=\"color:#f92672\">=</span> 5.04\n</span></span><span style=\"display:flex;\"><span>usb usb1: New USB device strings: Mfr<span style=\"color:#f92672\">=</span>3, Product<span style=\"color:#f92672\">=</span>2, SerialNumber<span style=\"color:#f92672\">=</span><span style=\"color:#ae81ff\">1</span>\n</span></span><span style=\"display:flex;\"><span>usb usb1: Product: EHCI Host Controller\n</span></span></code></pre><p>Detection and initialization of Ethernet and USB controllers with their respective drivers.</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>mmc0: SDHCI controller on e0100000.mmc <span style=\"color:#f92672\">[</span>e0100000.mmc<span style=\"color:#f92672\">]</span> using ADMA\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#f92672\">[</span>...<span style=\"color:#f92672\">]</span>\n</span></span><span style=\"display:flex;\"><span>mmc0: new high speed SDHC card at address 59b4\n</span></span><span style=\"display:flex;\"><span>mmcblk0: mmc0:59b4 USD   14.7 GiB \n</span></span><span style=\"display:flex;\"><span>mmcblk0: p1\n</span></span></code></pre><p>SD card controller initialization. It detects a 14.7GB SDHC card with one partition.</p>\n<h3 id=\"transition-to-userspace\"><a class=\"anchor permalink p-4\" href=\"#transition-to-userspace\">#</a> Transition to Userspace</h3>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>Freeing unused kernel memory: 1024K\n</span></span><span style=\"display:flex;\"><span>Run /init as init process\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>INIT: version 2.88 booting\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>The kernel has completed initialization and is now starting the first userspace process <span style=\"color:#f92672\">(</span>/init<span style=\"color:#f92672\">)</span>, which is using SysVinit <span style=\"color:#f92672\">(</span>version 2.88<span style=\"color:#f92672\">)</span>.\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>Starting udev\n</span></span><span style=\"display:flex;\"><span>udevd<span style=\"color:#f92672\">[</span>73<span style=\"color:#f92672\">]</span>: starting version 3.2.8\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#f92672\">[</span>...<span style=\"color:#f92672\">]</span>\n</span></span><span style=\"display:flex;\"><span>FAT-fs <span style=\"color:#f92672\">(</span>mmcblk0p1<span style=\"color:#f92672\">)</span>: Volume was not properly unmounted. Some data may be corrupt. Please run fsck.\n</span></span></code></pre><p>Starting the device manager (udev) and mounting filesystems. A warning appears about the FAT filesystem on the SD card.</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>Configuring packages on first boot....\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#f92672\">(</span>This may take several minutes. Please <span style=\"color:#66d9ef\">do</span> not power off the machine.<span style=\"color:#f92672\">)</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#f92672\">[</span>...<span style=\"color:#f92672\">]</span>\n</span></span><span style=\"display:flex;\"><span>INIT: Entering runlevel: <span style=\"color:#ae81ff\">5</span>\n</span></span></code></pre><p>Running first-boot configurations and entering runlevel 5 (graphical multi-user mode).</p>\n<h3 id=\"network-and-service-configuration\"><a class=\"anchor permalink p-4\" href=\"#network-and-service-configuration\">#</a> Network and Service Configuration</h3>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>Configuring network interfaces... udhcpc: started, v1.31.0\n</span></span><span style=\"display:flex;\"><span>udhcpc: sending discover\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#f92672\">[</span>...<span style=\"color:#f92672\">]</span>\n</span></span><span style=\"display:flex;\"><span>udhcpc: no lease, forking to background\n</span></span></code></pre><p>Attempting to configure network via DHCP, but it doesn't receive a lease (no DHCP server responding).</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>Starting Dropbear SSH server: \n</span></span><span style=\"display:flex;\"><span><span style=\"color:#f92672\">[</span>...<span style=\"color:#f92672\">]</span>\n</span></span><span style=\"display:flex;\"><span>Public key portion is:\n</span></span><span style=\"display:flex;\"><span>\tssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFi2F+hJ58qyEF5ZI0VNshOIuSYHRUfMaMcRfvd7yR/ilXnshWpyT49fqkJ7ZiofJ2LtHc3i8+98yDtk3WWk9FFOiVFgum9rEiRh+lVimeRX1zv0AA+GZiwQYmzFxxyPJgRxisuWOgZJ7VR8zZwdd/mizMBczpsTKv22QSx2ymgJUQQBnnr2fkeDZEhK34mh1m+c/n+B0uLIvjBiy9SJeL38CVWsTzN0bmL26o2DKjwYTU+j//QWUC02r1kodxS4d9cr0GZyg91/xtPHqk5+jVgbtTe2iapT0d+YFZFI/x4HkJSj7fp25qnGpc3hNczqUobnLy9KL0F4bpfOjwIcGt root@avnet-digilent-zedboard-2020_1\n</span></span></code></pre><p>Starting the SSH server (Dropbear) and generating SSH host keys.</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>Starting internet superserver: inetd.\n</span></span><span style=\"display:flex;\"><span>Starting syslogd/klogd: <span style=\"color:#66d9ef\">done</span>\n</span></span><span style=\"display:flex;\"><span>Starting tcf-agent: OK\n</span></span></code></pre><p>Starting various system services: internet services daemon, system logging, and TCF (Target Communication Framework) agent.</p>\n<h2 id=\"kernel-messages-for-usb-device\"><a class=\"anchor permalink p-4\" href=\"#kernel-messages-for-usb-device\">#</a> Kernel Messages For USB Device</h2>\n<blockquote>\n<p>Note: This is prior to setup of the kernel object device driver.</p>\n</blockquote>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>avnet-digilent-zedboard-2020_1:~$ usb 1-1: new low-speed USB device number <span style=\"color:#ae81ff\">2</span> using ci_hdrc\n</span></span><span style=\"display:flex;\"><span>usb 1-1: New USB device found, idVendor<span style=\"color:#f92672\">=</span>2123, idProduct<span style=\"color:#f92672\">=</span>1010, bcdDevice<span style=\"color:#f92672\">=</span> 0.01\n</span></span><span style=\"display:flex;\"><span>usb 1-1: New USB device strings: Mfr<span style=\"color:#f92672\">=</span>1, Product<span style=\"color:#f92672\">=</span>2, SerialNumber<span style=\"color:#f92672\">=</span><span style=\"color:#ae81ff\">0</span>\n</span></span><span style=\"display:flex;\"><span>usb 1-1: Product: USB Missile Launcher\n</span></span><span style=\"display:flex;\"><span>usb 1-1: Manufacturer: Syntek\n</span></span><span style=\"display:flex;\"><span>hid-generic 0003:2123:1010.0001: device has no listeners, quitting\n</span></span></code></pre><ol>\n<li><code>usb 1-1: new low-speed USB device number 2 using ci_hdrc</code> - This indicates a new USB device connecting at the low-speed USB specification (1.5 Mbps) and is being assigned device number 2. The &ldquo;ci_hdrc&rdquo; refers to the USB host controller driver.</li>\n<li><code>usb 1-1: New USB device found, idVendor=2123, idProduct=1010, bcdDevice= 0.01</code> - The system has identified the USB device with its vendor ID (2123) and product ID (1010). These unique identifiers tell the system what device is connected. The bcdDevice value (0.01) indicates the device's firmware/version number.</li>\n<li><code>usb 1-1: New USB device strings: Mfr=1, Product=2, SerialNumber=0</code> - This shows that the device provides manufacturer and product string descriptors but no serial number.</li>\n<li><code>usb 1-1: Product: USB Missile Launcher</code> - The product string identifies it as the USB Missile Launcher.</li>\n<li><code>usb 1-1: Manufacturer: Syntek</code> - The manufacturer is identified as Syntek.</li>\n<li><code>hid-generic 0003:2123:1010.0001: device has no listeners, quitting</code> - This is expected since the device needs a specific driver.</li>\n</ol>\n<h2 id=\"changes-made-to-usb-skeletonc\"><a class=\"anchor permalink p-4\" href=\"#changes-made-to-usb-skeletonc\">#</a> Changes made to <code>usb_skeleton.c</code></h2>\n<p>Header and Configuration Changes</p>\n<p>Added a new header inclusion: &ldquo;launcher-commands.h&rdquo; which contains device-specific constants and commands<br>\nChanged device identification:</p>\n<p>Replaced generic vendor/product IDs with missile launcher specific IDs<br>\nUpdated module table to use these missile launcher IDs</p>\n<p>Added more detailed module information:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>MODULE_LICENSE(<span style=\"color:#e6db74\">&#34;GPL&#34;</span>);\n</span></span><span style=\"display:flex;\"><span>MODULE_DESCRIPTION(<span style=\"color:#e6db74\">&#34;Missile launcher for CPRE488 MP-3&#34;</span>);\n</span></span><span style=\"display:flex;\"><span>MODULE_AUTHOR(<span style=\"color:#e6db74\">&#34;Eastburn, Ohnesorge&#34;</span>);\n</span></span></code></pre><p>Structure and Naming Changes</p>\n<h3 id=\"renamed-all-primary-structures-and-functions\"><a class=\"anchor permalink p-4\" href=\"#renamed-all-primary-structures-and-functions\">#</a> Renamed all primary structures and functions:</h3>\n<ul>\n<li>struct usb_skel → struct usb_miss_launch</li>\n<li>All function prefixes: skel_ → miss_launch_</li>\n<li>Driver name: &ldquo;skeleton&rdquo; → &ldquo;missile_launcher&rdquo;</li>\n<li>Device naming: &ldquo;skel%d&rdquo; → &ldquo;miss_launch%d&rdquo;</li>\n</ul>\n<p>Modified device structure:</p>\n<ul>\n<li>Replaced bulk_in_urb/bulk_out_endpoint with int_in_urb/int_in_endpoint</li>\n<li>Removed numerous fields related to bulk transfer processing</li>\n</ul>\n<h3 id=\"functional-changes\"><a class=\"anchor permalink p-4\" href=\"#functional-changes\">#</a> Functional Changes</h3>\n<h4 id=\"read-functionality\"><a class=\"anchor permalink p-4\" href=\"#read-functionality\">#</a> Read functionality</h4>\n<p>Original had complex logic for reading data via bulk transfers<br>\nNew driver simplifies to immediately return 0 (no reads)</p>\n<h4 id=\"write-functionality\"><a class=\"anchor permalink p-4\" href=\"#write-functionality\">#</a> Write functionality</h4>\n<ul>\n<li>Completely redesigned to use control messages instead of bulk transfers</li>\n<li>Added missile launcher specific command formatting:</li>\n</ul>\n<p>Uses an 8-byte fixed command buffer (LAUNCHER_CTRL_BUFFER_SIZE)<br>\nSets byte 0 to command prefix (0x2)<br>\nSets byte 1 to the actual command from user<br>\nUses launcher-specific control message parameters</p>\n<p>USB communication method:</p>\n<p>Original used URBs for bulk data transfer<br>\nNew driver uses usb_control_msg() with specific parameters:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>usb_control_msg(dev<span style=\"color:#f92672\">-&gt;</span>udev,\n</span></span><span style=\"display:flex;\"><span>                usb_sndctrlpipe(dev<span style=\"color:#f92672\">-&gt;</span>udev, <span style=\"color:#ae81ff\">0</span>),\n</span></span><span style=\"display:flex;\"><span>                LAUNCHER_CTRL_REQUEST,\n</span></span><span style=\"display:flex;\"><span>                LAUNCHER_CTRL_REQUEST_TYPE,\n</span></span><span style=\"display:flex;\"><span>                LAUNCHER_CTRL_VALUE,\n</span></span><span style=\"display:flex;\"><span>                LAUNCHER_CTRL_INDEX,\n</span></span><span style=\"display:flex;\"><span>                command_buf,\n</span></span><span style=\"display:flex;\"><span>                command_size,\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#ae81ff\">1000</span>);\n</span></span></code></pre><h4 id=\"endpoint-detection\"><a class=\"anchor permalink p-4\" href=\"#endpoint-detection\">#</a> Endpoint detection</h4>\n<p>Original looked for bulk-in and bulk-out endpoints<br>\nNew driver looks for interrupt-in endpoints</p>\n<h4 id=\"memory-management\"><a class=\"anchor permalink p-4\" href=\"#memory-management\">#</a> Memory Management</h4>\n<p>The new driver:</p>\n<ul>\n<li>Uses simple kmalloc instead of usb_alloc_coherent</li>\n<li>Allocates fixed-size buffers for commands</li>\n<li>Explicitly zeroes buffer memory with memset</li>\n<li>Implements proper cleanup with separate flags for memory and semaphore management</li>\n</ul>\n<p>Error Handling and Resource Management</p>\n<p>Simplified <code>miss_launch_draw_down()</code>:</p>\n<ul>\n<li>Original had complex handling for multiple URBs</li>\n<li>New driver simply kills the interrupt URB</li>\n</ul>\n<p>Improved exit handling:</p>\n<p>Added flags to track resource allocation states<br>\nEnsures proper cleanup in all error cases</p>\n<h4 id=\"resource-protection\"><a class=\"anchor permalink p-4\" href=\"#resource-protection\">#</a> Resource Protection</h4>\n<p>In both drivers, a semaphore called limit_sem is initialized with WRITES_IN_FLIGHT (set to <strong>8</strong>):<br>\n<code>sema_init(&amp;dev-&gt;limit_sem, WRITES_IN_FLIGHT);</code></p>\n<p>Key Functions of the Semaphore</p>\n<h4 id=\"memory-exhaustion-prevention\"><a class=\"anchor permalink p-4\" href=\"#memory-exhaustion-prevention\">#</a> Memory Exhaustion Prevention</h4>\n<p>By limiting concurrent USB operations, the semaphore prevents excessive memory allocation that could otherwise exhaust system resources, particularly important in kernel space where memory is limited.</p>\n<h5 id=\"flow-control\"><a class=\"anchor permalink p-4\" href=\"#flow-control\">#</a> Flow Control</h5>\n<p>The semaphore regulates the flow of data from userspace to the USB device, preventing overwhelming the device with too many simultaneous commands.</p>\n<h5 id=\"io-mode-support\"><a class=\"anchor permalink p-4\" href=\"#io-mode-support\">#</a> I/O Mode Support</h5>\n<p>The implementation handles both blocking and non-blocking I/O modes:</p>\n<p>In blocking mode: Uses down_interruptible() which may put the process to sleep<br>\nIn non-blocking mode: Uses down_trylock() which returns immediately if the semaphore can't be acquired</p>\n<h5 id=\"implementation-improvement\"><a class=\"anchor permalink p-4\" href=\"#implementation-improvement\">#</a> Implementation Improvement</h5>\n<p>The missile launcher driver improves upon the original skeleton driver by adding explicit tracking of semaphore acquisition:<br>\n<code>int sem_downed = 1;  // Flag to track if semaphore was acquired</code><br>\nAnd later ensuring proper cleanup:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>Copyexit:\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span>(sem_downed)\n</span></span><span style=\"display:flex;\"><span>    {\n</span></span><span style=\"display:flex;\"><span>        up(<span style=\"color:#f92672\">&amp;</span>dev<span style=\"color:#f92672\">-&gt;</span>limit_sem);\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span></code></pre><p>This prevents potential semaphore leaks in error conditions, which could otherwise lead to deadlocks where subsequent write operations would be permanently blocked after an error occurred.</p>\n<h2 id=\"operation-of-initial-launcher-firec\"><a class=\"anchor permalink p-4\" href=\"#operation-of-initial-launcher-firec\">#</a> Operation of Initial <code>launcher_fire.c</code></h2>\n<p>The code defines a set of command constants that correspond to different actions the missile launcher can perform, such as:</p>\n<ul>\n<li>LAUNCHER_FIRE (<code>0x10</code>): Fires a dart/missile</li>\n<li>LAUNCHER_STOP (<code>0x20</code>): Stops all movement</li>\n<li>LAUNCHER_UP (<code>0x02</code>), DOWN (<code>0x01</code>), LEFT (<code>0x04</code>), RIGHT (<code>0x08</code>): Directional controls</li>\n<li>Combined directions like UP_LEFT, DOWN_RIGHT, etc.</li>\n</ul>\n<p>The program relies on the Linux character device driver properly translating these simple commands into the appropriate USB control messages that the missile launcher hardware can understand.</p>\n<p>The main logic is implemented through:</p>\n<p>The <code>launcher_cmd()</code> function which:</p>\n<ol>\n<li>Takes a file descriptor and command as input</li>\n<li>Attempts to write the command to the device file</li>\n<li>Handles error conditions if the write fails</li>\n<li>Adds a 5-second delay after firing to allow the launcher to complete its firing sequence</li>\n</ol>\n<p>The <code>main()</code> function which:</p>\n<ol>\n<li>Opens the device file <code>/dev/launcher0</code> with read/write permissions</li>\n<li>Sets the command to LAUNCHER_FIRE (this is fixed, not user-controlled)</li>\n<li>Sends the fire command to the launcher</li>\n<li>Waits for a specified duration (500ms)</li>\n<li>Sends the stop command</li>\n<li>Closes the file descriptor</li>\n</ol>\n<p>This particular functionality is quite simple - it just fires the missile launcher once when executed.</p>\n<h2 id=\"algorithm-to-detect-target\"><a class=\"anchor permalink p-4\" href=\"#algorithm-to-detect-target\">#</a> Algorithm to detect Target</h2>\n<h3 id=\"system-architecture\"><a class=\"anchor permalink p-4\" href=\"#system-architecture\">#</a> System Architecture</h3>\n<p>The system combines computer vision processing with physical hardware control, structured around several key components:</p>\n<ol>\n<li><strong>Framebuffer Interface</strong>: The system maps the FPGA's framebuffer memory directly into the application's memory space, providing direct access to the camera feed.</li>\n</ol>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Map framebuffer memory\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>fb_mem <span style=\"color:#f92672\">=</span> mmap(NULL, FB_SIZE, PROT_READ, MAP_SHARED, mem_fd, FB_PHYS_ADDR);\n</span></span></code></pre><ol start=\"2\">\n<li><strong>Launcher Control Interface</strong>: A device driver interface allows the software to command a physical launcher device through simple directional commands.</li>\n<li><strong>Computer Vision Processing</strong>: The system uses OpenCV for real-time target detection, combining color-based and shape-based detection methods.</li>\n<li><strong>Targeting Logic</strong>: Once targets are detected, the system performs depth estimation and aims the launcher accordingly.</li>\n</ol>\n<h2 id=\"target-detection-algorithm\"><a class=\"anchor permalink p-4\" href=\"#target-detection-algorithm\">#</a> Target Detection Algorithm</h2>\n<p>The detection algorithm employs a dual-method approach to maximize reliability:</p>\n<h3 id=\"1-color-based-hsv-detection\"><a class=\"anchor permalink p-4\" href=\"#1-color-based-hsv-detection\">#</a> 1. Color-Based (HSV) Detection</h3>\n<p>The primary detection method uses HSV color filtering to isolate potential targets based on their color:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>cv<span style=\"color:#f92672\">::</span>Point detect_target_hsv(cv<span style=\"color:#f92672\">::</span>Mat <span style=\"color:#f92672\">&amp;</span>frame,\n</span></span><span style=\"display:flex;\"><span>                           cv<span style=\"color:#f92672\">::</span>Mat <span style=\"color:#f92672\">&amp;</span>debug_frame,\n</span></span><span style=\"display:flex;\"><span>                           DetectionParams <span style=\"color:#f92672\">&amp;</span>params,\n</span></span><span style=\"display:flex;\"><span>                           <span style=\"color:#66d9ef\">bool</span> <span style=\"color:#f92672\">&amp;</span>detected,\n</span></span><span style=\"display:flex;\"><span>                           <span style=\"color:#66d9ef\">float</span> <span style=\"color:#f92672\">&amp;</span>estimated_z) {\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Convert the frame from BGR to HSV color space\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  cv<span style=\"color:#f92672\">::</span>Mat hsv_frame;\n</span></span><span style=\"display:flex;\"><span>  cv<span style=\"color:#f92672\">::</span>cvtColor(frame, hsv_frame, cv<span style=\"color:#f92672\">::</span>COLOR_BGR2HSV);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Create binary masks for the selected color range\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  cv<span style=\"color:#f92672\">::</span>Mat mask1, mask2, mask;\n</span></span><span style=\"display:flex;\"><span>  cv<span style=\"color:#f92672\">::</span>inRange(hsv_frame, params.primary.lower, params.primary.upper, mask1);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">if</span> (params.useMultiRange) {\n</span></span><span style=\"display:flex;\"><span>    cv<span style=\"color:#f92672\">::</span>inRange(hsv_frame, params.secondary.lower, params.secondary.upper, mask2);\n</span></span><span style=\"display:flex;\"><span>    cv<span style=\"color:#f92672\">::</span>bitwise_or(mask1, mask2, mask);\n</span></span><span style=\"display:flex;\"><span>  } <span style=\"color:#66d9ef\">else</span> {\n</span></span><span style=\"display:flex;\"><span>    mask <span style=\"color:#f92672\">=</span> mask1;\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>  \n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Apply morphological operations to clean up the mask\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#75715e\">// ...\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>}\n</span></span></code></pre><p>The algorithm accommodates complex color ranges (like red, which wraps around the hue spectrum) by using multiple threshold ranges when needed.</p>\n<h3 id=\"2-shape-based-detection\"><a class=\"anchor permalink p-4\" href=\"#2-shape-based-detection\">#</a> 2. Shape-Based Detection</h3>\n<p>As a fallback, the system also implements shape-based detection using both Hough Circle Transform and contour circularity analysis:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Use Hough Circle Transform to detect circles\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>std<span style=\"color:#f92672\">::</span>vector<span style=\"color:#f92672\">&lt;</span>cv<span style=\"color:#f92672\">::</span>Vec3f<span style=\"color:#f92672\">&gt;</span> circles;\n</span></span><span style=\"display:flex;\"><span>cv<span style=\"color:#f92672\">::</span>HoughCircles(gray, circles, cv<span style=\"color:#f92672\">::</span>HOUGH_GRADIENT, <span style=\"color:#ae81ff\">1</span>,\n</span></span><span style=\"display:flex;\"><span>                gray.rows <span style=\"color:#f92672\">/</span> <span style=\"color:#ae81ff\">8</span>, <span style=\"color:#ae81ff\">100</span>, <span style=\"color:#ae81ff\">30</span>, <span style=\"color:#ae81ff\">10</span>, <span style=\"color:#ae81ff\">100</span>);\n</span></span></code></pre><p>For enhanced reliability, the system also analyzes contour circularity when Hough transform fails:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Circularity = 4π × Area / Perimeter²\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Perfect circle has circularity = 1\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">double</span> circularity <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">4</span> <span style=\"color:#f92672\">*</span> M_PI <span style=\"color:#f92672\">*</span> area <span style=\"color:#f92672\">/</span> (perimeter <span style=\"color:#f92672\">*</span> perimeter);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">if</span> (circularity <span style=\"color:#f92672\">&gt;</span> <span style=\"color:#ae81ff\">0.7</span> <span style=\"color:#f92672\">&amp;&amp;</span> circularity <span style=\"color:#f92672\">&gt;</span> maxCircularity) {\n</span></span><span style=\"display:flex;\"><span>  maxCircularity <span style=\"color:#f92672\">=</span> circularity;\n</span></span><span style=\"display:flex;\"><span>  bestContour <span style=\"color:#f92672\">=</span> i;\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre><h3 id=\"depth-estimation\"><a class=\"anchor permalink p-4\" href=\"#depth-estimation\">#</a> Depth Estimation</h3>\n<p>A key feature of this system is the ability to estimate the target's distance from the camera based on its apparent size (knowing the camera's focal length, target diameter, and apparent diameter):</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">float</span> <span style=\"color:#a6e22e\">estimate_z_position</span>(<span style=\"color:#66d9ef\">double</span> apparent_diameter_pixels) {\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">if</span> (apparent_diameter_pixels <span style=\"color:#f92672\">&lt;=</span> <span style=\"color:#ae81ff\">0</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> MAX_TARGET_DISTANCE_CM;\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">float</span> estimated_distance <span style=\"color:#f92672\">=</span> (FOCAL_LENGTH_PIXELS <span style=\"color:#f92672\">*</span> TARGET_ACTUAL_DIAMETER_CM) <span style=\"color:#f92672\">/</span> apparent_diameter_pixels;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">if</span> (estimated_distance <span style=\"color:#f92672\">&lt;</span> MIN_TARGET_DISTANCE_CM) {\n</span></span><span style=\"display:flex;\"><span>    estimated_distance <span style=\"color:#f92672\">=</span> MIN_TARGET_DISTANCE_CM;\n</span></span><span style=\"display:flex;\"><span>  } <span style=\"color:#66d9ef\">else</span> <span style=\"color:#66d9ef\">if</span> (estimated_distance <span style=\"color:#f92672\">&gt;</span> MAX_TARGET_DISTANCE_CM) {\n</span></span><span style=\"display:flex;\"><span>    estimated_distance <span style=\"color:#f92672\">=</span> MAX_TARGET_DISTANCE_CM;\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">return</span> estimated_distance;\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre><p>This calculation uses the principle that a target of known physical size (<code>TARGET_ACTUAL_DIAMETER_CM</code>) appears smaller in the image as its distance increases.</p>\n<p>By knowing the camera's focal length (converted to pixels), we can derive the distance.</p>\n<h3 id=\"launcher-control-algorithm\"><a class=\"anchor permalink p-4\" href=\"#launcher-control-algorithm\">#</a> Launcher Control Algorithm</h3>\n<p>The launcher control system uses a proportional approach to aim at targets:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">int</span> <span style=\"color:#a6e22e\">aim_launcher</span>(<span style=\"color:#66d9ef\">int</span> launcher_fd,\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#66d9ef\">int</span> current_x,\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#66d9ef\">int</span> current_y,\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#66d9ef\">int</span> target_x,\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#66d9ef\">int</span> target_y,\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#66d9ef\">float</span> target_z) {\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">int</span> dx <span style=\"color:#f92672\">=</span> target_x <span style=\"color:#f92672\">-</span> current_x;\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">int</span> dy <span style=\"color:#f92672\">=</span> target_y <span style=\"color:#f92672\">-</span> current_y;\n</span></span><span style=\"display:flex;\"><span>  \n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// If target is already centered (within dead zone), we&#39;re done\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">if</span> (abs(dx) <span style=\"color:#f92672\">&lt;</span> LAUNCHER_DEAD_ZONE <span style=\"color:#f92672\">&amp;&amp;</span> abs(dy) <span style=\"color:#f92672\">&lt;</span> LAUNCHER_DEAD_ZONE) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// Apply depth-based adjustments\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    ret <span style=\"color:#f92672\">=</span> adjust_aim_for_depth(launcher_fd, target_z);\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> ret;\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>  \n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Handle horizontal movement first\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#75715e\">// ...\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>}\n</span></span></code></pre><p>Notable aspects of the aiming algorithm:</p>\n<ol>\n<li>It implements a dead zone to prevent jitter when the target is nearly centered</li>\n<li>It handles horizontal and vertical movements separately</li>\n<li>Movement duration is proportional to the distance the launcher needs to travel</li>\n<li>It includes a recursive approach to refine aiming with a limit of 5 attempts</li>\n<li>It adjusts aim based on target depth to account for projectile ballistics</li>\n</ol>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">int</span> <span style=\"color:#a6e22e\">adjust_aim_for_depth</span>(<span style=\"color:#66d9ef\">int</span> launcher_fd, <span style=\"color:#66d9ef\">float</span> target_z) {\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Skip adjustment for close targets\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">if</span> (target_z <span style=\"color:#f92672\">&lt;=</span> <span style=\"color:#ae81ff\">100.0f</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Calculate adjustment time - more adjustment for distant targets\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">int</span> adjustment_ms <span style=\"color:#f92672\">=</span> (<span style=\"color:#66d9ef\">int</span>)((target_z <span style=\"color:#f92672\">-</span> <span style=\"color:#ae81ff\">100.0f</span>) <span style=\"color:#f92672\">*</span> <span style=\"color:#ae81ff\">0.5f</span>);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">if</span> (adjustment_ms <span style=\"color:#f92672\">&gt;</span> <span style=\"color:#ae81ff\">0</span>) {\n</span></span><span style=\"display:flex;\"><span>    std<span style=\"color:#f92672\">::</span>cout <span style=\"color:#f92672\">&lt;&lt;</span> <span style=\"color:#e6db74\">&#34;Depth adjustment: Moving UP for &#34;</span> <span style=\"color:#f92672\">&lt;&lt;</span> adjustment_ms\n</span></span><span style=\"display:flex;\"><span>              <span style=\"color:#f92672\">&lt;&lt;</span> <span style=\"color:#e6db74\">&#34; ms to compensate for distance&#34;</span> <span style=\"color:#f92672\">&lt;&lt;</span> std<span style=\"color:#f92672\">::</span>endl;\n</span></span><span style=\"display:flex;\"><span>    move_launcher(launcher_fd, LAUNCHER_UP);\n</span></span><span style=\"display:flex;\"><span>    delay_ms(adjustment_ms);\n</span></span><span style=\"display:flex;\"><span>    stop_launcher(launcher_fd);\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">return</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre><h3 id=\"firing-logic\"><a class=\"anchor permalink p-4\" href=\"#firing-logic\">#</a> Firing Logic</h3>\n<p>The system employs a confirmation-based firing mechanism to prevent false positives:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">if</span> (target_detected) {\n</span></span><span style=\"display:flex;\"><span>  std<span style=\"color:#f92672\">::</span>cout <span style=\"color:#f92672\">&lt;&lt;</span> <span style=\"color:#e6db74\">&#34;Target detected at position (&#34;</span> <span style=\"color:#f92672\">&lt;&lt;</span> target_point.x\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&lt;&lt;</span> <span style=\"color:#e6db74\">&#34;, &#34;</span> <span style=\"color:#f92672\">&lt;&lt;</span> target_point.y <span style=\"color:#f92672\">&lt;&lt;</span> <span style=\"color:#e6db74\">&#34;, &#34;</span> <span style=\"color:#f92672\">&lt;&lt;</span> target_z\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&lt;&lt;</span> <span style=\"color:#e6db74\">&#34; cm)&#34;</span> <span style=\"color:#f92672\">&lt;&lt;</span> std<span style=\"color:#f92672\">::</span>endl;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  consecutive_detections<span style=\"color:#f92672\">++</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Only fire when we have consistent detections to avoid false positives\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">if</span> (consecutive_detections <span style=\"color:#f92672\">&gt;=</span> fire_threshold <span style=\"color:#f92672\">&amp;&amp;</span> fire_cooldown <span style=\"color:#f92672\">&lt;=</span> <span style=\"color:#ae81ff\">0</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// Aim launcher at the target\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    ret <span style=\"color:#f92672\">=</span> aim_launcher(launcher_fd, LAUNCHER_CENTER_X,\n</span></span><span style=\"display:flex;\"><span>                       LAUNCHER_CENTER_Y, target_point.x,\n</span></span><span style=\"display:flex;\"><span>                       target_point.y, target_z);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (ret <span style=\"color:#f92672\">==</span> <span style=\"color:#ae81ff\">0</span>) {\n</span></span><span style=\"display:flex;\"><span>      std<span style=\"color:#f92672\">::</span>cout <span style=\"color:#f92672\">&lt;&lt;</span> <span style=\"color:#e6db74\">&#34;Target locked, firing!&#34;</span> <span style=\"color:#f92672\">&lt;&lt;</span> std<span style=\"color:#f92672\">::</span>endl;\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#75715e\">// Fire the launcher\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>      fire_launcher(launcher_fd);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#75715e\">// Set cooldown period after firing\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>      fire_cooldown <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">20</span>; <span style=\"color:#75715e\">// Approx 2 seconds at 100ms loop time\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>      consecutive_detections <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>;\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre><p>Key aspects of the firing logic:</p>\n<ol>\n<li>It requires multiple consecutive successful detections before firing</li>\n<li>It implements a cooldown period after firing to prevent rapid repeated firing</li>\n<li>It only fires after the aiming process has completed successfully</li>\n</ol>\n<h2 id=\"configurable-parameters\"><a class=\"anchor permalink p-4\" href=\"#configurable-parameters\">#</a> Configurable Parameters</h2>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Target recognition parameters\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#75715e\">#define MIN_CONTOUR_AREA 500\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">#define MAX_CONTOUR_AREA 50000\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">#define MORPH_KERNEL_SIZE 5\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Launcher control parameters\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#75715e\">#define LAUNCHER_MOVE_TIMEOUT_MS 1000\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">#define LAUNCHER_CENTER_X (FB_WIDTH / 2)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">#define LAUNCHER_CENTER_Y (FB_HEIGHT / 2)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">#define LAUNCHER_DEAD_ZONE 20\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">#define LAUNCHER_MAX_X_ANGLE 30\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">#define LAUNCHER_MAX_Y_ANGLE 20\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Z-position (depth) estimation parameters\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#75715e\">#define TARGET_ACTUAL_DIAMETER_CM 15.0\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">#define CAMERA_FOV_HORIZONTAL_DEG 60.0\n</span></span></span></code></pre><h2 id=\"error-handling\"><a class=\"anchor permalink p-4\" href=\"#error-handling\">#</a> Error Handling</h2>\n<p>Added error handling helps to manage potential issues with hardware interfaces:</p>\n<pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;\"><code><span style=\"display:flex;\"><span>mem_fd <span style=\"color:#f92672\">=</span> open(<span style=\"color:#e6db74\">&#34;/dev/mem&#34;</span>, O_RDWR <span style=\"color:#f92672\">|</span> O_SYNC);\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">if</span> (mem_fd <span style=\"color:#f92672\">&lt;</span> <span style=\"color:#ae81ff\">0</span>) {\n</span></span><span style=\"display:flex;\"><span>  perror(<span style=\"color:#e6db74\">&#34;Failed to open /dev/mem&#34;</span>);\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">return</span> <span style=\"color:#f92672\">-</span><span style=\"color:#ae81ff\">1</span>;\n</span></span><span style=\"display:flex;\"><span>}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Map framebuffer memory\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>fb_mem <span style=\"color:#f92672\">=</span> mmap(NULL, FB_SIZE, PROT_READ, MAP_SHARED, mem_fd, FB_PHYS_ADDR);\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">if</span> (fb_mem <span style=\"color:#f92672\">==</span> MAP_FAILED) {\n</span></span><span style=\"display:flex;\"><span>  perror(<span style=\"color:#e6db74\">&#34;Failed to mmap framebuffer&#34;</span>);\n</span></span><span style=\"display:flex;\"><span>  close(mem_fd);\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">return</span> <span style=\"color:#f92672\">-</span><span style=\"color:#ae81ff\">1</span>;\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre>",
	CreatedAt:       time.Date(2025, time.March, 27, 14, 13, 10, 0, time.UTC),
	Description:     "Mini-project 3 for CPRE488. Linux Device Drivers, Petalinux, boot loaders, and OpenCV, oh my!",
	EmploymentSlugs: []string{},
	Employments:     []*assets.Employment{},
	Icon:            "tag",
	PostSlugs:       []string{},
	Posts:           []*assets.Post{},
	ProjectSlugs:    []string{},
	Projects:        []*assets.Project{},
	RawContent:      "---\nid: cpre488-mp3\naliases:\n  - cpre488-mp3\ntags:\n  - protocol/uart\n  - programming-language/c\n  - programming-language/cpp\n  - programming-language/matlab\n  - ide/vivado\n  - hdl/vhdl\n  - hdl/verilog\n  - edu/iastate\n  - ideologies/device-drivers\n  - protocol/uart\n  - protocol/usb\nbanner_path: projects/mp3.webp\ncreated_at: 2025-03-27T14:13:10.000-06:00\ndescription: Mini-project 3 for CPRE488. Linux Device Drivers, Petalinux, boot loaders, and OpenCV, oh my!\ntitle: CPRE488-mp3\nupdated_at: 2025-04-14T19:09:33.000-06:00\n---\n\n# cpre488-mp3\n\n## `launcher_fire.c` Makefile\n\nThis Makefile is configured to build both a Linux kernel module (`launcher_driver.ko`) and a user-space program (`launcher_fire`) using a cross-compiler for ARM architecture. \n\n### Cross-Compilation Setup\n\nThe Makefile uses the `CROSS_COMPILE` environment variable to specify the cross-compiler toolchain:\n\n```makefile\nCC := $(CROSS_COMPILE)gcc\n```\n\nThis is the core mechanism that enables ARM architecture targeting. The `CROSS_COMPILE` variable is expected to be set in the environment before running the make command (e.g., `CROSS_COMPILE=arm-linux-gnueabihf-` or similar ARM toolchain prefix). When expanded, it creates commands like `arm-linux-gnueabihf-gcc` that invoke the cross-compiler instead of the host system's native compiler.\n\n### Kernel Module Building\n\nFor the kernel module (`launcher_driver.ko`):\n\n1. `obj-m += launcher_driver.o` tells the kernel build system which object files to build into modules.\n2. `KDIR := ../linux/linux-xlnx/` points to the Xilinx Linux kernel source directory (often used for Zynq ARM platforms).\n3. The main kernel build is triggered with:\n\n   ```makefile\n   $(MAKE) -C $(KDIR) M=${shell pwd} modules\n   ```\n\n   This invokes the kernel's build system, which will use the cross-compiler settings defined in the kernel's configuration.\n\n### User-Space Program Building\n\nFor the user application (`launcher_fire`):\n\n1. The application is built directly using the cross-compiler via:\n\n   ```makefile\n   $(BIN): $(SOURCES)\n       $(CC) $@.c -o $@\n   ```\n\n   The `$(CC)` variable expands to the cross-compiler as defined earlier.\n\n### Clean Target\n\nThe clean target is thorough, removing both the kernel module files and the user-space binary:\n\n```makefile\nclean:\n  -$(MAKE) -C $(KDIR) M=${shell pwd} clean || true\n  -rm $(BIN) || true\n  -rm *.o *.ko *.mod.{c,o} modules.order Module.symvers || true\n```\n\nThe `launcher_fire.c` code is a user-space application that communicates with the kernel module through a device node (`/dev/launcher0`), sending commands to control what seems to be a physical launcher device (likely a USB missile launcher or similar gadget).\n\nThis configuration works for ARM because:\n\n1. It uses the ARM cross-compiler toolchain via `CROSS_COMPILE`\n2. It builds against an ARM-targeted kernel source tree (Xilinx's Linux kernel)\n3. The resulting binaries will be compatible with ARM systems, specifically a Xilinx Zynq platform.\n\n## Boot Process Analysis\n\n### U-Boot Initialization (Bootloader Phase)\n\n```bash\nU-Boot 2020.01 (Mar 14 2025 - 15:19:07 +0000)\n\nCPU:   Zynq 7z020\nSilicon: v3.1\nModel: Zynq Zed Development Board\nDRAM:  ECC disabled 512 MiB\nFlash: 0 Bytes\nNAND:  0 MiB\nMMC:   mmc@e0100000: 0\n```\n\nThis section shows U-Boot 2020.01 bootloader starting. It identifies the hardware as a Zynq 7z020 CPU on a Zed Development Board with 512MB of RAM (with ECC disabled). It's detecting storage devices, including an MMC (SD card) interface.\n\n```bash\nLoading Environment from SPI Flash... SF: Detected s25fl256s1 with page size 256 Bytes, erase size 64 KiB, total 32 MiB\n*** Warning - bad CRC, using default environment\n```\n\nU-Boot is attempting to load environment variables from SPI Flash memory. It finds an s25fl256s1 flash chip (32MB total) but encounters a CRC error, so it falls back to default settings.\n\n```bash\nIn:    serial@e0001000\nOut:   serial@e0001000\nErr:   serial@e0001000\nNet:   \nZYNQ GEM: e000b000, mdio bus e000b000, phyaddr 0, interface rgmii-id\n```\n\nSets up the console I/O through a serial port (UART) and initializes the Gigabit Ethernet MAC (GEM).\n\n### Boot Image Loading\n\n```bash\nHit any key to stop autoboot:  2  1  0 \nswitch to partitions #0, OK\nmmc0 is current device\nScanning mmc 0:1...\nFound U-Boot script /boot.scr\n2010 bytes read in 33 ms (58.6 KiB/s)\n## Executing script at 03000000\n11543076 bytes read in 656 ms (16.8 MiB/s)\n```\n\nU-Boot is performing autoboot countdown.\n\nAfter no interruption, it scans the first partition of the SD card, finds a boot script, and executes it.\n\nThis script then loads the kernel and initial ramdisk.\n\n```bash\n## Loading kernel from FIT Image at 10000000 ...\n   Using 'conf@system-top.dtb' configuration\n   Verifying Hash Integrity ... OK\n   Trying 'kernel@1' kernel subimage\n     Description:  Linux kernel\n     Type:         Kernel Image\n     Compression:  uncompressed\n     Data Start:   0x100000e8\n     Data Size:    4325680 Bytes = 4.1 MiB\n     Architecture: ARM\n     OS:           Linux\n     Load Address: 0x00200000\n     Entry Point:  0x00200000\n     Hash algo:    sha256\n     Hash value:   16a76e92c611898f8057d865ef087705fef1aceff96e78675bc68784fd25ac76\n   Verifying Hash Integrity ... sha256+ OK\n```\n\nU-Boot is loading the Linux kernel from a FIT (Flattened Image Tree) image.\n\nIt verifies the hash integrity of the kernel (4.1 MiB in size) to ensure it hasn't been corrupted.\n\n```bash\n## Loading ramdisk from FIT Image at 10000000 ...\n   [Details about the ramdisk loading]\n## Loading fdt from FIT Image at 10000000 ...\n   [Details about the device tree loading]\n```\n\nNext, it loads the initial RAM disk (6.9 MiB) and the Flattened Device Tree (FDT) file that describes the hardware to the kernel.\n\n### Linux Kernel Startup\n\n```bash\nStarting kernel ...\n\nBooting Linux on physical CPU 0x0\nLinux version 5.4.0-xilinx-v2020.1 (oe-user@oe-host) (gcc version 9.2.0 (GCC)) #1 SMP PREEMPT Fri Mar 14 15:18:45 UTC 2025\nCPU: ARMv7 Processor [413fc090] revision 0 (ARMv7), cr=18c5387d\n```\n\nThe kernel begins executing. This shows Linux 5.4.0 specifically built for Xilinx hardware. It's running on an ARMv7 processor.\n\n```bash\nMemory policy: Data cache writealloc\ncma: Reserved 16 MiB at 0x1f000000\npercpu: Embedded 15 pages/cpu s31948 r8192 d21300 u61440\nBuilt 1 zonelists, mobility grouping on.  Total pages: 129920\nKernel command line: console=ttyPS0,115200 earlycon root=/dev/ram0 rw\n```\n\nThe kernel is setting up memory management policies and showing the command line parameters that were passed to it. It will use a serial console and boot from an initial RAM disk.\n\n```bash\nMemory: 484528K/524288K available (6144K kernel code, 217K rwdata, 1840K rodata, 1024K init, 131K bss, 23376K reserved, 16384K cma-reserved, 0K highmem)\n```\n\nMemory summary: out of 512MB (524288K) total RAM, about 484MB is available for use after accounting for kernel code, data, and reserved regions.\n\n### Hardware Detection and Initialization\n\n```bash\nrcu: Preemptible hierarchical RCU implementation.\n[...]\nsmp: Bringing up secondary CPUs ...\nCPU1: thread -1, cpu 1, socket 0, mpidr 80000001\nCPU1: Spectre v2: using BPIALL workaround\nsmp: Brought up 1 node, 2 CPUs\n```\n\nThe kernel is initializing the RCU (Read-Copy-Update) subsystem and bringing up multiple CPU cores.\n\nIt's a dual-core system with Spectre vulnerability mitigations.\n\n```bash\ndevtmpfs: initialized\nVFP support v0.3: implementor 41 architecture 3 part 30 variant 9 rev 4\n[...]\nSCSI subsystem initialized\nusbcore: registered new interface driver usbfs\nusbcore: registered new interface driver hub\nusbcore: registered new device driver usb\n```\n\nInitialization of various subsystems: device manager, floating-point support, SCSI, USB, etc.\n\n### File Systems and Network Setup\n\n```bash\nFPGA manager framework\nAdvanced Linux Sound Architecture Driver Initialized.\n[...]\ntcp_listen_portaddr_hash hash table entries: 512 (order: 0, 6144 bytes, linear)\n[...]\nTrying to unpack rootfs image as initramfs...\nFreeing initrd memory: 7028K\n```\n\nSetting up FPGA management, sound drivers, TCP/IP networking stacks, and unpacking the initial root filesystem from RAM.\n\n```bash\njffs2: version 2.2. (NAND) (SUMMARY)  © 2001-2006 Red Hat, Inc.\nio scheduler mq-deadline registered\nio scheduler kyber registered\n[...]\nspi-nor spi0.0: found s25fl256s1, expected n25q128a11\nspi-nor spi0.0: s25fl256s1 (32768 Kbytes)\n8 fixed-partitions partitions found on MTD device spi0.0\n```\n\nSetting up various filesystems, I/O schedulers, and detecting flash memory partitions. The system found a different SPI flash chip than expected but continues with it.\n\n### Device Detection and Driver Loading\n\n```bash\nMarvell 88E1510 e000b000.ethernet-ffffffff:00: attached PHY driver [Marvell 88E1510] (mii_bus:phy_addr=e000b000.ethernet-ffffffff:00, irq=POLL)\nmacb e000b000.ethernet eth0: Cadence GEM rev 0x00020118 at 0xe000b000 irq 26 (00:0a:35:00:1e:53)\n[...]\nusb usb1: New USB device found, idVendor=1d6b, idProduct=0002, bcdDevice= 5.04\nusb usb1: New USB device strings: Mfr=3, Product=2, SerialNumber=1\nusb usb1: Product: EHCI Host Controller\n```\n\nDetection and initialization of Ethernet and USB controllers with their respective drivers.\n\n```bash\nmmc0: SDHCI controller on e0100000.mmc [e0100000.mmc] using ADMA\n[...]\nmmc0: new high speed SDHC card at address 59b4\nmmcblk0: mmc0:59b4 USD   14.7 GiB \nmmcblk0: p1\n```\n\nSD card controller initialization. It detects a 14.7GB SDHC card with one partition.\n\n### Transition to Userspace\n\n```bash\nFreeing unused kernel memory: 1024K\nRun /init as init process\n\nINIT: version 2.88 booting\n\nThe kernel has completed initialization and is now starting the first userspace process (/init), which is using SysVinit (version 2.88).\n\nStarting udev\nudevd[73]: starting version 3.2.8\n[...]\nFAT-fs (mmcblk0p1): Volume was not properly unmounted. Some data may be corrupt. Please run fsck.\n```\n\nStarting the device manager (udev) and mounting filesystems. A warning appears about the FAT filesystem on the SD card.\n\n```bash\nConfiguring packages on first boot....\n (This may take several minutes. Please do not power off the machine.)\n[...]\nINIT: Entering runlevel: 5\n```\n\nRunning first-boot configurations and entering runlevel 5 (graphical multi-user mode).\n\n### Network and Service Configuration\n\n```bash\nConfiguring network interfaces... udhcpc: started, v1.31.0\nudhcpc: sending discover\n[...]\nudhcpc: no lease, forking to background\n```\n\nAttempting to configure network via DHCP, but it doesn't receive a lease (no DHCP server responding).\n\n```bash\nStarting Dropbear SSH server: \n[...]\nPublic key portion is:\n\tssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFi2F+hJ58qyEF5ZI0VNshOIuSYHRUfMaMcRfvd7yR/ilXnshWpyT49fqkJ7ZiofJ2LtHc3i8+98yDtk3WWk9FFOiVFgum9rEiRh+lVimeRX1zv0AA+GZiwQYmzFxxyPJgRxisuWOgZJ7VR8zZwdd/mizMBczpsTKv22QSx2ymgJUQQBnnr2fkeDZEhK34mh1m+c/n+B0uLIvjBiy9SJeL38CVWsTzN0bmL26o2DKjwYTU+j//QWUC02r1kodxS4d9cr0GZyg91/xtPHqk5+jVgbtTe2iapT0d+YFZFI/x4HkJSj7fp25qnGpc3hNczqUobnLy9KL0F4bpfOjwIcGt root@avnet-digilent-zedboard-2020_1\n```\n\nStarting the SSH server (Dropbear) and generating SSH host keys.\n\n```bash\nStarting internet superserver: inetd.\nStarting syslogd/klogd: done\nStarting tcf-agent: OK\n```\n\nStarting various system services: internet services daemon, system logging, and TCF (Target Communication Framework) agent.\n\n\n## Kernel Messages For USB Device\n\n> Note: This is prior to setup of the kernel object device driver.\n\n```bash\navnet-digilent-zedboard-2020_1:~$ usb 1-1: new low-speed USB device number 2 using ci_hdrc\nusb 1-1: New USB device found, idVendor=2123, idProduct=1010, bcdDevice= 0.01\nusb 1-1: New USB device strings: Mfr=1, Product=2, SerialNumber=0\nusb 1-1: Product: USB Missile Launcher\nusb 1-1: Manufacturer: Syntek\nhid-generic 0003:2123:1010.0001: device has no listeners, quitting\n```\n\n1. `usb 1-1: new low-speed USB device number 2 using ci_hdrc` - This indicates a new USB device connecting at the low-speed USB specification (1.5 Mbps) and is being assigned device number 2. The \"ci_hdrc\" refers to the USB host controller driver.\n2. `usb 1-1: New USB device found, idVendor=2123, idProduct=1010, bcdDevice= 0.01` - The system has identified the USB device with its vendor ID (2123) and product ID (1010). These unique identifiers tell the system what device is connected. The bcdDevice value (0.01) indicates the device's firmware/version number.\n3. `usb 1-1: New USB device strings: Mfr=1, Product=2, SerialNumber=0` - This shows that the device provides manufacturer and product string descriptors but no serial number.\n4. `usb 1-1: Product: USB Missile Launcher` - The product string identifies it as the USB Missile Launcher.\n5. `usb 1-1: Manufacturer: Syntek` - The manufacturer is identified as Syntek.\n6. `hid-generic 0003:2123:1010.0001: device has no listeners, quitting` - This is expected since the device needs a specific driver.\n\n## Changes made to `usb_skeleton.c`\n\nHeader and Configuration Changes\n\nAdded a new header inclusion: \"launcher-commands.h\" which contains device-specific constants and commands\nChanged device identification:\n\nReplaced generic vendor/product IDs with missile launcher specific IDs\nUpdated module table to use these missile launcher IDs\n\nAdded more detailed module information:\n\n```c\nMODULE_LICENSE(\"GPL\");\nMODULE_DESCRIPTION(\"Missile launcher for CPRE488 MP-3\");\nMODULE_AUTHOR(\"Eastburn, Ohnesorge\");\n```\n\nStructure and Naming Changes\n\n### Renamed all primary structures and functions:\n\n- struct usb_skel → struct usb_miss_launch\n- All function prefixes: skel_ → miss_launch_\n- Driver name: \"skeleton\" → \"missile_launcher\"\n- Device naming: \"skel%d\" → \"miss_launch%d\"\n\nModified device structure:\n\n- Replaced bulk_in_urb/bulk_out_endpoint with int_in_urb/int_in_endpoint\n- Removed numerous fields related to bulk transfer processing\n\n### Functional Changes\n\n#### Read functionality\n\nOriginal had complex logic for reading data via bulk transfers\nNew driver simplifies to immediately return 0 (no reads)\n\n#### Write functionality\n\n- Completely redesigned to use control messages instead of bulk transfers\n- Added missile launcher specific command formatting:\n\nUses an 8-byte fixed command buffer (LAUNCHER_CTRL_BUFFER_SIZE)\nSets byte 0 to command prefix (0x2)\nSets byte 1 to the actual command from user\nUses launcher-specific control message parameters\n\nUSB communication method:\n\nOriginal used URBs for bulk data transfer\nNew driver uses usb_control_msg() with specific parameters:\n\n```c\nusb_control_msg(dev->udev,\n                usb_sndctrlpipe(dev->udev, 0),\n                LAUNCHER_CTRL_REQUEST,\n                LAUNCHER_CTRL_REQUEST_TYPE,\n                LAUNCHER_CTRL_VALUE,\n                LAUNCHER_CTRL_INDEX,\n                command_buf,\n                command_size,\n                1000);\n```\n\n#### Endpoint detection\n\nOriginal looked for bulk-in and bulk-out endpoints\nNew driver looks for interrupt-in endpoints\n\n#### Memory Management\n\nThe new driver:\n\n- Uses simple kmalloc instead of usb_alloc_coherent\n- Allocates fixed-size buffers for commands\n- Explicitly zeroes buffer memory with memset\n- Implements proper cleanup with separate flags for memory and semaphore management\n\nError Handling and Resource Management\n\nSimplified `miss_launch_draw_down()`:\n\n- Original had complex handling for multiple URBs\n- New driver simply kills the interrupt URB\n\nImproved exit handling:\n\nAdded flags to track resource allocation states\nEnsures proper cleanup in all error cases\n\n#### Resource Protection\n\nIn both drivers, a semaphore called limit_sem is initialized with WRITES_IN_FLIGHT (set to **8**):\n`sema_init(&dev->limit_sem, WRITES_IN_FLIGHT);`\n\nKey Functions of the Semaphore\n\n#### Memory Exhaustion Prevention\n\nBy limiting concurrent USB operations, the semaphore prevents excessive memory allocation that could otherwise exhaust system resources, particularly important in kernel space where memory is limited.\n\n##### Flow Control\n\nThe semaphore regulates the flow of data from userspace to the USB device, preventing overwhelming the device with too many simultaneous commands.\n\n##### I/O Mode Support\n\nThe implementation handles both blocking and non-blocking I/O modes:\n\nIn blocking mode: Uses down_interruptible() which may put the process to sleep\nIn non-blocking mode: Uses down_trylock() which returns immediately if the semaphore can't be acquired\n\n##### Implementation Improvement\n\nThe missile launcher driver improves upon the original skeleton driver by adding explicit tracking of semaphore acquisition:\n`int sem_downed = 1;  // Flag to track if semaphore was acquired`\nAnd later ensuring proper cleanup:\n\n```c\nCopyexit:\n    if(sem_downed)\n    {\n        up(&dev->limit_sem);\n    }\n```\n\nThis prevents potential semaphore leaks in error conditions, which could otherwise lead to deadlocks where subsequent write operations would be permanently blocked after an error occurred.\n\n## Operation of Initial `launcher_fire.c`\n\nThe code defines a set of command constants that correspond to different actions the missile launcher can perform, such as:\n\n- LAUNCHER_FIRE (`0x10`): Fires a dart/missile\n- LAUNCHER_STOP (`0x20`): Stops all movement\n- LAUNCHER_UP (`0x02`), DOWN (`0x01`), LEFT (`0x04`), RIGHT (`0x08`): Directional controls\n- Combined directions like UP_LEFT, DOWN_RIGHT, etc.\n\nThe program relies on the Linux character device driver properly translating these simple commands into the appropriate USB control messages that the missile launcher hardware can understand.\n\nThe main logic is implemented through:\n\nThe `launcher_cmd()` function which:\n\n1. Takes a file descriptor and command as input\n2. Attempts to write the command to the device file\n3. Handles error conditions if the write fails\n4. Adds a 5-second delay after firing to allow the launcher to complete its firing sequence\n\nThe `main()` function which:\n\n1. Opens the device file `/dev/launcher0` with read/write permissions\n2. Sets the command to LAUNCHER_FIRE (this is fixed, not user-controlled)\n3. Sends the fire command to the launcher\n4. Waits for a specified duration (500ms)\n5. Sends the stop command\n6. Closes the file descriptor\n\nThis particular functionality is quite simple - it just fires the missile launcher once when executed. \n\n## Algorithm to detect Target\n\n### System Architecture\n\nThe system combines computer vision processing with physical hardware control, structured around several key components:\n\n1. **Framebuffer Interface**: The system maps the FPGA's framebuffer memory directly into the application's memory space, providing direct access to the camera feed.\n\n  ```cpp\n  // Map framebuffer memory\n  fb_mem = mmap(NULL, FB_SIZE, PROT_READ, MAP_SHARED, mem_fd, FB_PHYS_ADDR);\n  ```\n\n2. **Launcher Control Interface**: A device driver interface allows the software to command a physical launcher device through simple directional commands.\n3. **Computer Vision Processing**: The system uses OpenCV for real-time target detection, combining color-based and shape-based detection methods.\n4. **Targeting Logic**: Once targets are detected, the system performs depth estimation and aims the launcher accordingly.\n\n## Target Detection Algorithm\n\nThe detection algorithm employs a dual-method approach to maximize reliability:\n\n### 1. Color-Based (HSV) Detection\n\nThe primary detection method uses HSV color filtering to isolate potential targets based on their color:\n\n```cpp\ncv::Point detect_target_hsv(cv::Mat &frame,\n                           cv::Mat &debug_frame,\n                           DetectionParams &params,\n                           bool &detected,\n                           float &estimated_z) {\n  // Convert the frame from BGR to HSV color space\n  cv::Mat hsv_frame;\n  cv::cvtColor(frame, hsv_frame, cv::COLOR_BGR2HSV);\n\n  // Create binary masks for the selected color range\n  cv::Mat mask1, mask2, mask;\n  cv::inRange(hsv_frame, params.primary.lower, params.primary.upper, mask1);\n\n  if (params.useMultiRange) {\n    cv::inRange(hsv_frame, params.secondary.lower, params.secondary.upper, mask2);\n    cv::bitwise_or(mask1, mask2, mask);\n  } else {\n    mask = mask1;\n  }\n  \n  // Apply morphological operations to clean up the mask\n  // ...\n}\n```\n\nThe algorithm accommodates complex color ranges (like red, which wraps around the hue spectrum) by using multiple threshold ranges when needed.\n\n### 2. Shape-Based Detection\n\nAs a fallback, the system also implements shape-based detection using both Hough Circle Transform and contour circularity analysis:\n\n```cpp\n// Use Hough Circle Transform to detect circles\nstd::vector<cv::Vec3f> circles;\ncv::HoughCircles(gray, circles, cv::HOUGH_GRADIENT, 1,\n                gray.rows / 8, 100, 30, 10, 100);\n```\n\nFor enhanced reliability, the system also analyzes contour circularity when Hough transform fails:\n\n```cpp\n// Circularity = 4π × Area / Perimeter²\n// Perfect circle has circularity = 1\ndouble circularity = 4 * M_PI * area / (perimeter * perimeter);\n\nif (circularity > 0.7 && circularity > maxCircularity) {\n  maxCircularity = circularity;\n  bestContour = i;\n}\n```\n\n### Depth Estimation\n\nA key feature of this system is the ability to estimate the target's distance from the camera based on its apparent size (knowing the camera's focal length, target diameter, and apparent diameter):\n\n```cpp\nfloat estimate_z_position(double apparent_diameter_pixels) {\n  if (apparent_diameter_pixels <= 0) {\n    return MAX_TARGET_DISTANCE_CM;\n  }\n\n  float estimated_distance = (FOCAL_LENGTH_PIXELS * TARGET_ACTUAL_DIAMETER_CM) / apparent_diameter_pixels;\n\n  if (estimated_distance < MIN_TARGET_DISTANCE_CM) {\n    estimated_distance = MIN_TARGET_DISTANCE_CM;\n  } else if (estimated_distance > MAX_TARGET_DISTANCE_CM) {\n    estimated_distance = MAX_TARGET_DISTANCE_CM;\n  }\n\n  return estimated_distance;\n}\n```\n\nThis calculation uses the principle that a target of known physical size (`TARGET_ACTUAL_DIAMETER_CM`) appears smaller in the image as its distance increases.\n\nBy knowing the camera's focal length (converted to pixels), we can derive the distance.\n\n### Launcher Control Algorithm\n\nThe launcher control system uses a proportional approach to aim at targets:\n\n```cpp\nint aim_launcher(int launcher_fd,\n                int current_x,\n                int current_y,\n                int target_x,\n                int target_y,\n                float target_z) {\n  int dx = target_x - current_x;\n  int dy = target_y - current_y;\n  \n  // If target is already centered (within dead zone), we're done\n  if (abs(dx) < LAUNCHER_DEAD_ZONE && abs(dy) < LAUNCHER_DEAD_ZONE) {\n    // Apply depth-based adjustments\n    ret = adjust_aim_for_depth(launcher_fd, target_z);\n    return ret;\n  }\n  \n  // Handle horizontal movement first\n  // ...\n}\n```\n\nNotable aspects of the aiming algorithm:\n\n1. It implements a dead zone to prevent jitter when the target is nearly centered\n2. It handles horizontal and vertical movements separately\n3. Movement duration is proportional to the distance the launcher needs to travel\n4. It includes a recursive approach to refine aiming with a limit of 5 attempts\n5. It adjusts aim based on target depth to account for projectile ballistics\n\n```cpp\nint adjust_aim_for_depth(int launcher_fd, float target_z) {\n  // Skip adjustment for close targets\n  if (target_z <= 100.0f) {\n    return 0;\n  }\n\n  // Calculate adjustment time - more adjustment for distant targets\n  int adjustment_ms = (int)((target_z - 100.0f) * 0.5f);\n\n  if (adjustment_ms > 0) {\n    std::cout << \"Depth adjustment: Moving UP for \" << adjustment_ms\n              << \" ms to compensate for distance\" << std::endl;\n    move_launcher(launcher_fd, LAUNCHER_UP);\n    delay_ms(adjustment_ms);\n    stop_launcher(launcher_fd);\n    return 0;\n  }\n\n  return 0;\n}\n```\n\n### Firing Logic\n\nThe system employs a confirmation-based firing mechanism to prevent false positives:\n\n```cpp\nif (target_detected) {\n  std::cout << \"Target detected at position (\" << target_point.x\n            << \", \" << target_point.y << \", \" << target_z\n            << \" cm)\" << std::endl;\n\n  consecutive_detections++;\n\n  // Only fire when we have consistent detections to avoid false positives\n  if (consecutive_detections >= fire_threshold && fire_cooldown <= 0) {\n    // Aim launcher at the target\n    ret = aim_launcher(launcher_fd, LAUNCHER_CENTER_X,\n                       LAUNCHER_CENTER_Y, target_point.x,\n                       target_point.y, target_z);\n\n    if (ret == 0) {\n      std::cout << \"Target locked, firing!\" << std::endl;\n      // Fire the launcher\n      fire_launcher(launcher_fd);\n\n      // Set cooldown period after firing\n      fire_cooldown = 20; // Approx 2 seconds at 100ms loop time\n      consecutive_detections = 0;\n    }\n  }\n}\n```\n\nKey aspects of the firing logic:\n\n1. It requires multiple consecutive successful detections before firing\n2. It implements a cooldown period after firing to prevent rapid repeated firing\n3. It only fires after the aiming process has completed successfully\n\n## Configurable Parameters\n\n```cpp\n// Target recognition parameters\n#define MIN_CONTOUR_AREA 500\n#define MAX_CONTOUR_AREA 50000\n#define MORPH_KERNEL_SIZE 5\n\n// Launcher control parameters\n#define LAUNCHER_MOVE_TIMEOUT_MS 1000\n#define LAUNCHER_CENTER_X (FB_WIDTH / 2)\n#define LAUNCHER_CENTER_Y (FB_HEIGHT / 2)\n#define LAUNCHER_DEAD_ZONE 20\n#define LAUNCHER_MAX_X_ANGLE 30\n#define LAUNCHER_MAX_Y_ANGLE 20\n\n// Z-position (depth) estimation parameters\n#define TARGET_ACTUAL_DIAMETER_CM 15.0\n#define CAMERA_FOV_HORIZONTAL_DEG 60.0\n```\n\n## Error Handling\n\nAdded error handling helps to manage potential issues with hardware interfaces:\n\n```cpp\nmem_fd = open(\"/dev/mem\", O_RDWR | O_SYNC);\nif (mem_fd < 0) {\n  perror(\"Failed to open /dev/mem\");\n  return -1;\n}\n\n// Map framebuffer memory\nfb_mem = mmap(NULL, FB_SIZE, PROT_READ, MAP_SHARED, mem_fd, FB_PHYS_ADDR);\nif (fb_mem == MAP_FAILED) {\n  perror(\"Failed to mmap framebuffer\");\n  close(mem_fd);\n  return -1;\n}\n```\n",
	Slug:            "cpre488-mp3",
	TagSlugs:        []string{"protocol/uart", "programming-language/c", "programming-language/cpp", "programming-language/matlab", "ide/vivado", "hdl/vhdl", "hdl/verilog", "edu/iastate", "ideologies/device-drivers", "protocol/uart", "protocol/usb"},
	Tags:            []*assets.Tag{&TagProtocolUart, &TagProgrammingLanguageC, &TagProgrammingLanguageCpp, &TagProgrammingLanguageMatlab, &TagIdeVivado, &TagHdlVhdl, &TagHdlVerilog, &TagEduIastate, &TagProtocolUart, &TagProtocolUsb},
	Title:           "CPRE488-mp3",
	UpdatedAt:       time.Date(2025, time.April, 14, 19, 9, 33, 0, time.UTC),
	X:               0.4376374105249804,
	Y:               -0.4761110962836401,
	Z:               -0.47147223503598745,
}}
var AllProjects = []*assets.Project{&ProjectBufnrix, &ProjectConnerohCom, &ProjectDotfiles, &ProjectGohard, &ProjectKreativeDocuvet, &ProjectNeovimConfig, &ProjectOhnedrive, &ProjectObsidianVimToggle, &ProjectPegwings, &ProjectTwerge, &ProjectDopplerNvim, &ProjectGroqGo, &ProjectCpre488Mp1, &ProjectObsidianTestDatasetAid, &ProjectVerilogSingleCycleMips, &ProjectGenstruct, &ProjectLibsqlz, &ProjectSeltabl, &ProjectSemanticRouterGo, &ProjectMathpixGo, &ProjectCpre488Mp0, &ProjectCpre488Mp2, &ProjectCpre488Mp3}
